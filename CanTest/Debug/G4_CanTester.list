
G4_CanTester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064f0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000156c  080066d0  080066d0  000076d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c3c  08007c3c  0000907c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007c3c  08007c3c  00008c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c44  08007c44  0000907c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c44  08007c44  00008c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007c48  08007c48  00008c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08007c4c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000734  2000007c  08007cc8  0000907c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007b0  08007cc8  000097b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000907c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001216d  00000000  00000000  000090ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000282e  00000000  00000000  0001b219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  0001da48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001f9ea  00000000  00000000  0001eb30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000131f8  00000000  00000000  0003e51a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000cdfa7  00000000  00000000  00051712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0011f6b9  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000ccf  00000000  00000000  0011f6fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004c50  00000000  00000000  001203cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0012501c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000007c 	.word	0x2000007c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080066b8 	.word	0x080066b8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000080 	.word	0x20000080
 800021c:	080066b8 	.word	0x080066b8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <FDCAN_Config>:
static void MX_DMA_Init(void);
static void MX_I2C3_Init(void);
static void MX_ADC1_Init(void);
static void MX_FDCAN1_Init(void);
/* USER CODE BEGIN PFP */
static void FDCAN_Config(void){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af02      	add	r7, sp, #8

    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80002c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000344 <FDCAN_Config+0x84>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterIndex = 0;
 80002cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000344 <FDCAN_Config+0x84>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80002d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000344 <FDCAN_Config+0x84>)
 80002d4:	2202      	movs	r2, #2
 80002d6:	609a      	str	r2, [r3, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80002d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000344 <FDCAN_Config+0x84>)
 80002da:	2201      	movs	r2, #1
 80002dc:	60da      	str	r2, [r3, #12]
    sFilterConfig.FilterID1 = 0x000;
 80002de:	4b19      	ldr	r3, [pc, #100]	@ (8000344 <FDCAN_Config+0x84>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterID2 = 0x7FF;
 80002e4:	4b17      	ldr	r3, [pc, #92]	@ (8000344 <FDCAN_Config+0x84>)
 80002e6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80002ea:	615a      	str	r2, [r3, #20]
    if(HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK){
 80002ec:	4915      	ldr	r1, [pc, #84]	@ (8000344 <FDCAN_Config+0x84>)
 80002ee:	4816      	ldr	r0, [pc, #88]	@ (8000348 <FDCAN_Config+0x88>)
 80002f0:	f003 fac4 	bl	800387c <HAL_FDCAN_ConfigFilter>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <FDCAN_Config+0x3e>
        Error_Handler();
 80002fa:	f000 fd0d 	bl	8000d18 <Error_Handler>
    }
    /* Configure global filter to reject all non-matching frames */
    if(HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE) != HAL_OK){
 80002fe:	2301      	movs	r3, #1
 8000300:	9300      	str	r3, [sp, #0]
 8000302:	2301      	movs	r3, #1
 8000304:	2202      	movs	r2, #2
 8000306:	2102      	movs	r1, #2
 8000308:	480f      	ldr	r0, [pc, #60]	@ (8000348 <FDCAN_Config+0x88>)
 800030a:	f003 fb11 	bl	8003930 <HAL_FDCAN_ConfigGlobalFilter>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <FDCAN_Config+0x58>
        Error_Handler();
 8000314:	f000 fd00 	bl	8000d18 <Error_Handler>
    }
    if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK){
 8000318:	480b      	ldr	r0, [pc, #44]	@ (8000348 <FDCAN_Config+0x88>)
 800031a:	f003 fb3a 	bl	8003992 <HAL_FDCAN_Start>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <FDCAN_Config+0x68>
        Error_Handler();
 8000324:	f000 fcf8 	bl	8000d18 <Error_Handler>
    }
    if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK){
 8000328:	2200      	movs	r2, #0
 800032a:	2101      	movs	r1, #1
 800032c:	4806      	ldr	r0, [pc, #24]	@ (8000348 <FDCAN_Config+0x88>)
 800032e:	f003 fc61 	bl	8003bf4 <HAL_FDCAN_ActivateNotification>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <FDCAN_Config+0x7c>
        Error_Handler();
 8000338:	f000 fcee 	bl	8000d18 <Error_Handler>
    }
}
 800033c:	bf00      	nop
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	20000098 	.word	0x20000098
 8000348:	2000017c 	.word	0x2000017c

0800034c <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 800034c:	b580      	push	{r7, lr}
 800034e:	b08e      	sub	sp, #56	@ 0x38
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	6039      	str	r1, [r7, #0]
    for(uint8_t i = 0;i<8;i++){
 8000356:	2300      	movs	r3, #0
 8000358:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800035c:	e00c      	b.n	8000378 <HAL_FDCAN_RxFifo0Callback+0x2c>
    	pre_can_rxdata[i] = can_rxdata[i];
 800035e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000362:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000366:	4911      	ldr	r1, [pc, #68]	@ (80003ac <HAL_FDCAN_RxFifo0Callback+0x60>)
 8000368:	5c89      	ldrb	r1, [r1, r2]
 800036a:	4a11      	ldr	r2, [pc, #68]	@ (80003b0 <HAL_FDCAN_RxFifo0Callback+0x64>)
 800036c:	54d1      	strb	r1, [r2, r3]
    for(uint8_t i = 0;i<8;i++){
 800036e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000372:	3301      	adds	r3, #1
 8000374:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000378:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800037c:	2b07      	cmp	r3, #7
 800037e:	d9ee      	bls.n	800035e <HAL_FDCAN_RxFifo0Callback+0x12>
    }
	FDCAN_RxHeaderTypeDef RxHeader;

    if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET){
 8000380:	683b      	ldr	r3, [r7, #0]
 8000382:	f003 0301 	and.w	r3, r3, #1
 8000386:	2b00      	cmp	r3, #0
 8000388:	d00b      	beq.n	80003a2 <HAL_FDCAN_RxFifo0Callback+0x56>
        if(HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, (uint8_t*)can_rxdata) != HAL_OK){
 800038a:	f107 020c 	add.w	r2, r7, #12
 800038e:	4b07      	ldr	r3, [pc, #28]	@ (80003ac <HAL_FDCAN_RxFifo0Callback+0x60>)
 8000390:	2140      	movs	r1, #64	@ 0x40
 8000392:	6878      	ldr	r0, [r7, #4]
 8000394:	f003 fb26 	bl	80039e4 <HAL_FDCAN_GetRxMessage>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <HAL_FDCAN_RxFifo0Callback+0x56>
            Error_Handler();
 800039e:	f000 fcbb 	bl	8000d18 <Error_Handler>
        }
    }
}
 80003a2:	bf00      	nop
 80003a4:	3738      	adds	r7, #56	@ 0x38
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	20000018 	.word	0x20000018
 80003b0:	20000250 	.word	0x20000250

080003b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b4:	b590      	push	{r4, r7, lr}
 80003b6:	b08b      	sub	sp, #44	@ 0x2c
 80003b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ba:	f001 f994 	bl	80016e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003be:	f000 fb0b 	bl	80009d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c2:	f000 fc71 	bl	8000ca8 <MX_GPIO_Init>
  MX_DMA_Init();
 80003c6:	f000 fc45 	bl	8000c54 <MX_DMA_Init>
  MX_I2C3_Init();
 80003ca:	f000 fc03 	bl	8000bd4 <MX_I2C3_Init>
  MX_ADC1_Init();
 80003ce:	f000 fb43 	bl	8000a58 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 80003d2:	f000 fbb9 	bl	8000b48 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  //for can
  FDCAN_Config();
 80003d6:	f7ff ff73 	bl	80002c0 <FDCAN_Config>

  //for ssd1306
  ssd1306_Init(&hi2c3);
 80003da:	4887      	ldr	r0, [pc, #540]	@ (80005f8 <main+0x244>)
 80003dc:	f000 fcba 	bl	8000d54 <ssd1306_Init>
  ssd1306_SetCursor(0, 36);
 80003e0:	2124      	movs	r1, #36	@ 0x24
 80003e2:	2000      	movs	r0, #0
 80003e4:	f000 ff32 	bl	800124c <ssd1306_SetCursor>
  ssd1306_WriteString("Hello World", Font_11x18, White);
 80003e8:	4a84      	ldr	r2, [pc, #528]	@ (80005fc <main+0x248>)
 80003ea:	2301      	movs	r3, #1
 80003ec:	ca06      	ldmia	r2, {r1, r2}
 80003ee:	4884      	ldr	r0, [pc, #528]	@ (8000600 <main+0x24c>)
 80003f0:	f000 ff06 	bl	8001200 <ssd1306_WriteString>
  ssd1306_UpdateScreen(&hi2c3);
 80003f4:	4880      	ldr	r0, [pc, #512]	@ (80005f8 <main+0x244>)
 80003f6:	f000 fdf1 	bl	8000fdc <ssd1306_UpdateScreen>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80003fa:	217f      	movs	r1, #127	@ 0x7f
 80003fc:	4881      	ldr	r0, [pc, #516]	@ (8000604 <main+0x250>)
 80003fe:	f002 fc5b 	bl	8002cb8 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)&adc_value, 1);
 8000402:	2201      	movs	r2, #1
 8000404:	4980      	ldr	r1, [pc, #512]	@ (8000608 <main+0x254>)
 8000406:	487f      	ldr	r0, [pc, #508]	@ (8000604 <main+0x250>)
 8000408:	f001 fdc8 	bl	8001f9c <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){

	  //setting
	  uint8_t adc_value_configured = (255 - adc_value)/16;
 800040c:	4b7e      	ldr	r3, [pc, #504]	@ (8000608 <main+0x254>)
 800040e:	881b      	ldrh	r3, [r3, #0]
 8000410:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8000414:	2b00      	cmp	r3, #0
 8000416:	da00      	bge.n	800041a <main+0x66>
 8000418:	330f      	adds	r3, #15
 800041a:	111b      	asrs	r3, r3, #4
 800041c:	773b      	strb	r3, [r7, #28]
	  char content[20];
	  memcpy(buffer, 0, sizeof(0));
 800041e:	2300      	movs	r3, #0
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4a7a      	ldr	r2, [pc, #488]	@ (800060c <main+0x258>)
 8000424:	6013      	str	r3, [r2, #0]
	  memcpy(content, 0, sizeof(0));
 8000426:	2300      	movs	r3, #0
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	607b      	str	r3, [r7, #4]
	  ssd1306_Fill(Black);
 800042c:	2000      	movs	r0, #0
 800042e:	f000 fdb1 	bl	8000f94 <ssd1306_Fill>
	  uint8_t back_flag;
	  uint8_t go_state;
	  uint8_t back_state;

	  //read GPIO pin
	  if(go_flag && HAL_GPIO_ReadPin(GO_GPIO_Port, GO_Pin)==GPIO_PIN_SET){
 8000432:	7ffb      	ldrb	r3, [r7, #31]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d00b      	beq.n	8000450 <main+0x9c>
 8000438:	2140      	movs	r1, #64	@ 0x40
 800043a:	4875      	ldr	r0, [pc, #468]	@ (8000610 <main+0x25c>)
 800043c:	f004 f834 	bl	80044a8 <HAL_GPIO_ReadPin>
 8000440:	4603      	mov	r3, r0
 8000442:	2b01      	cmp	r3, #1
 8000444:	d104      	bne.n	8000450 <main+0x9c>
		  go_state = 1;
 8000446:	2301      	movs	r3, #1
 8000448:	777b      	strb	r3, [r7, #29]
		  go_flag = 0;
 800044a:	2300      	movs	r3, #0
 800044c:	77fb      	strb	r3, [r7, #31]
 800044e:	e003      	b.n	8000458 <main+0xa4>
	  }else{
		  go_state = 0;
 8000450:	2300      	movs	r3, #0
 8000452:	777b      	strb	r3, [r7, #29]
		  go_flag = 1;
 8000454:	2301      	movs	r3, #1
 8000456:	77fb      	strb	r3, [r7, #31]
	  }
	  if(back_flag && HAL_GPIO_ReadPin(BACK_GPIO_Port, BACK_Pin)==GPIO_PIN_SET){
 8000458:	7fbb      	ldrb	r3, [r7, #30]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d00b      	beq.n	8000476 <main+0xc2>
 800045e:	2180      	movs	r1, #128	@ 0x80
 8000460:	486b      	ldr	r0, [pc, #428]	@ (8000610 <main+0x25c>)
 8000462:	f004 f821 	bl	80044a8 <HAL_GPIO_ReadPin>
 8000466:	4603      	mov	r3, r0
 8000468:	2b01      	cmp	r3, #1
 800046a:	d104      	bne.n	8000476 <main+0xc2>
		  back_state = 1;
 800046c:	2301      	movs	r3, #1
 800046e:	76fb      	strb	r3, [r7, #27]
		  back_flag = 0;
 8000470:	2300      	movs	r3, #0
 8000472:	77bb      	strb	r3, [r7, #30]
 8000474:	e003      	b.n	800047e <main+0xca>
	  }else{
		  back_state = 0;
 8000476:	2300      	movs	r3, #0
 8000478:	76fb      	strb	r3, [r7, #27]
		  back_flag = 1;
 800047a:	2301      	movs	r3, #1
 800047c:	77bb      	strb	r3, [r7, #30]
	  }

	  if(view == 1){//rx mode, set id of 0xF00;
 800047e:	4b65      	ldr	r3, [pc, #404]	@ (8000614 <main+0x260>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	2b01      	cmp	r3, #1
 8000484:	d131      	bne.n	80004ea <main+0x136>
		  setted_id = setted_id & 0x0FF;
 8000486:	4b64      	ldr	r3, [pc, #400]	@ (8000618 <main+0x264>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	b2db      	uxtb	r3, r3
 800048c:	4a62      	ldr	r2, [pc, #392]	@ (8000618 <main+0x264>)
 800048e:	6013      	str	r3, [r2, #0]
		  setted_id += (adc_value_configured)<<8;
 8000490:	7f3b      	ldrb	r3, [r7, #28]
 8000492:	021a      	lsls	r2, r3, #8
 8000494:	4b60      	ldr	r3, [pc, #384]	@ (8000618 <main+0x264>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4413      	add	r3, r2
 800049a:	4a5f      	ldr	r2, [pc, #380]	@ (8000618 <main+0x264>)
 800049c:	6013      	str	r3, [r2, #0]
		  sprintf(content, "id 0x%d%d%d   rx mode",(setted_id & 0xF00)>>8, (setted_id & 0x0F0)>>4, setted_id & 0x00F);
 800049e:	4b5e      	ldr	r3, [pc, #376]	@ (8000618 <main+0x264>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	0a1b      	lsrs	r3, r3, #8
 80004a4:	f003 020f 	and.w	r2, r3, #15
 80004a8:	4b5b      	ldr	r3, [pc, #364]	@ (8000618 <main+0x264>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	091b      	lsrs	r3, r3, #4
 80004ae:	f003 010f 	and.w	r1, r3, #15
 80004b2:	4b59      	ldr	r3, [pc, #356]	@ (8000618 <main+0x264>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f003 030f 	and.w	r3, r3, #15
 80004ba:	1d38      	adds	r0, r7, #4
 80004bc:	9300      	str	r3, [sp, #0]
 80004be:	460b      	mov	r3, r1
 80004c0:	4956      	ldr	r1, [pc, #344]	@ (800061c <main+0x268>)
 80004c2:	f005 fc59 	bl	8005d78 <siprintf>
		  ssd1306_SetCursor(0, 0);
 80004c6:	2100      	movs	r1, #0
 80004c8:	2000      	movs	r0, #0
 80004ca:	f000 febf 	bl	800124c <ssd1306_SetCursor>
		  ssd1306_WriteString(content, Font_7x10, White);
 80004ce:	4a54      	ldr	r2, [pc, #336]	@ (8000620 <main+0x26c>)
 80004d0:	1d38      	adds	r0, r7, #4
 80004d2:	2301      	movs	r3, #1
 80004d4:	ca06      	ldmia	r2, {r1, r2}
 80004d6:	f000 fe93 	bl	8001200 <ssd1306_WriteString>
		  if(go_state){
 80004da:	7f7b      	ldrb	r3, [r7, #29]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	f000 8254 	beq.w	800098a <main+0x5d6>
			  view = 0;
 80004e2:	4b4c      	ldr	r3, [pc, #304]	@ (8000614 <main+0x260>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	e24f      	b.n	800098a <main+0x5d6>
		  }
	  }else if(view == 2){//rx mode, set id of 0x0F0;
 80004ea:	4b4a      	ldr	r3, [pc, #296]	@ (8000614 <main+0x260>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	2b02      	cmp	r3, #2
 80004f0:	d133      	bne.n	800055a <main+0x1a6>
		  setted_id = setted_id & 0xF0F;
 80004f2:	4b49      	ldr	r3, [pc, #292]	@ (8000618 <main+0x264>)
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	f640 730f 	movw	r3, #3855	@ 0xf0f
 80004fa:	4013      	ands	r3, r2
 80004fc:	4a46      	ldr	r2, [pc, #280]	@ (8000618 <main+0x264>)
 80004fe:	6013      	str	r3, [r2, #0]
		  setted_id += (adc_value_configured)<<4;
 8000500:	7f3b      	ldrb	r3, [r7, #28]
 8000502:	011a      	lsls	r2, r3, #4
 8000504:	4b44      	ldr	r3, [pc, #272]	@ (8000618 <main+0x264>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4413      	add	r3, r2
 800050a:	4a43      	ldr	r2, [pc, #268]	@ (8000618 <main+0x264>)
 800050c:	6013      	str	r3, [r2, #0]
		  sprintf(content, "id 0x%d%d%d   rx mode",(setted_id & 0xF00)>>8, (setted_id & 0x0F0)>>4, setted_id & 0x00F);
 800050e:	4b42      	ldr	r3, [pc, #264]	@ (8000618 <main+0x264>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	0a1b      	lsrs	r3, r3, #8
 8000514:	f003 020f 	and.w	r2, r3, #15
 8000518:	4b3f      	ldr	r3, [pc, #252]	@ (8000618 <main+0x264>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	091b      	lsrs	r3, r3, #4
 800051e:	f003 010f 	and.w	r1, r3, #15
 8000522:	4b3d      	ldr	r3, [pc, #244]	@ (8000618 <main+0x264>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f003 030f 	and.w	r3, r3, #15
 800052a:	1d38      	adds	r0, r7, #4
 800052c:	9300      	str	r3, [sp, #0]
 800052e:	460b      	mov	r3, r1
 8000530:	493a      	ldr	r1, [pc, #232]	@ (800061c <main+0x268>)
 8000532:	f005 fc21 	bl	8005d78 <siprintf>
		  ssd1306_SetCursor(0, 0);
 8000536:	2100      	movs	r1, #0
 8000538:	2000      	movs	r0, #0
 800053a:	f000 fe87 	bl	800124c <ssd1306_SetCursor>
		  ssd1306_WriteString(content, Font_7x10, White);
 800053e:	4a38      	ldr	r2, [pc, #224]	@ (8000620 <main+0x26c>)
 8000540:	1d38      	adds	r0, r7, #4
 8000542:	2301      	movs	r3, #1
 8000544:	ca06      	ldmia	r2, {r1, r2}
 8000546:	f000 fe5b 	bl	8001200 <ssd1306_WriteString>
		  if(go_state){
 800054a:	7f7b      	ldrb	r3, [r7, #29]
 800054c:	2b00      	cmp	r3, #0
 800054e:	f000 821c 	beq.w	800098a <main+0x5d6>
			  view = 0;
 8000552:	4b30      	ldr	r3, [pc, #192]	@ (8000614 <main+0x260>)
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	e217      	b.n	800098a <main+0x5d6>
		  }
	  }else if(view == 3){//rx mode, set id of 0x00F;
 800055a:	4b2e      	ldr	r3, [pc, #184]	@ (8000614 <main+0x260>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	2b03      	cmp	r3, #3
 8000560:	d131      	bne.n	80005c6 <main+0x212>
		  setted_id = setted_id & 0xFF0;
 8000562:	4b2d      	ldr	r3, [pc, #180]	@ (8000618 <main+0x264>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 800056a:	4a2b      	ldr	r2, [pc, #172]	@ (8000618 <main+0x264>)
 800056c:	6013      	str	r3, [r2, #0]
		  setted_id += (adc_value_configured);
 800056e:	7f3a      	ldrb	r2, [r7, #28]
 8000570:	4b29      	ldr	r3, [pc, #164]	@ (8000618 <main+0x264>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4413      	add	r3, r2
 8000576:	4a28      	ldr	r2, [pc, #160]	@ (8000618 <main+0x264>)
 8000578:	6013      	str	r3, [r2, #0]
		  sprintf(content, "id 0x%d%d%d   rx mode",(setted_id & 0xF00)>>8, (setted_id & 0x0F0)>>4, setted_id & 0x00F);
 800057a:	4b27      	ldr	r3, [pc, #156]	@ (8000618 <main+0x264>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	0a1b      	lsrs	r3, r3, #8
 8000580:	f003 020f 	and.w	r2, r3, #15
 8000584:	4b24      	ldr	r3, [pc, #144]	@ (8000618 <main+0x264>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	091b      	lsrs	r3, r3, #4
 800058a:	f003 010f 	and.w	r1, r3, #15
 800058e:	4b22      	ldr	r3, [pc, #136]	@ (8000618 <main+0x264>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f003 030f 	and.w	r3, r3, #15
 8000596:	1d38      	adds	r0, r7, #4
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	460b      	mov	r3, r1
 800059c:	491f      	ldr	r1, [pc, #124]	@ (800061c <main+0x268>)
 800059e:	f005 fbeb 	bl	8005d78 <siprintf>
		  ssd1306_SetCursor(0, 0);
 80005a2:	2100      	movs	r1, #0
 80005a4:	2000      	movs	r0, #0
 80005a6:	f000 fe51 	bl	800124c <ssd1306_SetCursor>
		  ssd1306_WriteString(content, Font_7x10, White);
 80005aa:	4a1d      	ldr	r2, [pc, #116]	@ (8000620 <main+0x26c>)
 80005ac:	1d38      	adds	r0, r7, #4
 80005ae:	2301      	movs	r3, #1
 80005b0:	ca06      	ldmia	r2, {r1, r2}
 80005b2:	f000 fe25 	bl	8001200 <ssd1306_WriteString>
		  if(go_state){
 80005b6:	7f7b      	ldrb	r3, [r7, #29]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	f000 81e6 	beq.w	800098a <main+0x5d6>
			  view = 0;
 80005be:	4b15      	ldr	r3, [pc, #84]	@ (8000614 <main+0x260>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	e1e1      	b.n	800098a <main+0x5d6>
		  }
	  }else if(view == 4){
 80005c6:	4b13      	ldr	r3, [pc, #76]	@ (8000614 <main+0x260>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2b04      	cmp	r3, #4
 80005cc:	f040 808b 	bne.w	80006e6 <main+0x332>
		 if(adc_value_configured > 7){
 80005d0:	7f3b      	ldrb	r3, [r7, #28]
 80005d2:	2b07      	cmp	r3, #7
 80005d4:	d903      	bls.n	80005de <main+0x22a>
			 setted_prescaler = 1;
 80005d6:	4b13      	ldr	r3, [pc, #76]	@ (8000624 <main+0x270>)
 80005d8:	2201      	movs	r2, #1
 80005da:	701a      	strb	r2, [r3, #0]
 80005dc:	e002      	b.n	80005e4 <main+0x230>
		 }else{
			 setted_prescaler = 2;
 80005de:	4b11      	ldr	r3, [pc, #68]	@ (8000624 <main+0x270>)
 80005e0:	2202      	movs	r2, #2
 80005e2:	701a      	strb	r2, [r3, #0]
		 }
		 if(setted_prescaler == 1){
 80005e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000624 <main+0x270>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d11f      	bne.n	800062c <main+0x278>
			  sprintf(content, "1M");
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	490e      	ldr	r1, [pc, #56]	@ (8000628 <main+0x274>)
 80005f0:	4618      	mov	r0, r3
 80005f2:	f005 fbc1 	bl	8005d78 <siprintf>
 80005f6:	e022      	b.n	800063e <main+0x28a>
 80005f8:	200001e0 	.word	0x200001e0
 80005fc:	20000008 	.word	0x20000008
 8000600:	080066d0 	.word	0x080066d0
 8000604:	200000b0 	.word	0x200000b0
 8000608:	20000238 	.word	0x20000238
 800060c:	2000023c 	.word	0x2000023c
 8000610:	48000400 	.word	0x48000400
 8000614:	20000234 	.word	0x20000234
 8000618:	20000010 	.word	0x20000010
 800061c:	080066dc 	.word	0x080066dc
 8000620:	20000000 	.word	0x20000000
 8000624:	20000014 	.word	0x20000014
 8000628:	080066f4 	.word	0x080066f4
		  }else if(setted_prescaler == 2){
 800062c:	4ba6      	ldr	r3, [pc, #664]	@ (80008c8 <main+0x514>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b02      	cmp	r3, #2
 8000632:	d104      	bne.n	800063e <main+0x28a>
			  sprintf(content, "500k");
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	49a5      	ldr	r1, [pc, #660]	@ (80008cc <main+0x518>)
 8000638:	4618      	mov	r0, r3
 800063a:	f005 fb9d 	bl	8005d78 <siprintf>
		  }
		  ssd1306_SetCursor(0, 8);
 800063e:	2108      	movs	r1, #8
 8000640:	2000      	movs	r0, #0
 8000642:	f000 fe03 	bl	800124c <ssd1306_SetCursor>
		  ssd1306_WriteString(content, Font_7x10, Black);
 8000646:	4aa2      	ldr	r2, [pc, #648]	@ (80008d0 <main+0x51c>)
 8000648:	1d38      	adds	r0, r7, #4
 800064a:	2300      	movs	r3, #0
 800064c:	ca06      	ldmia	r2, {r1, r2}
 800064e:	f000 fdd7 	bl	8001200 <ssd1306_WriteString>
		 if(go_state){
 8000652:	7f7b      	ldrb	r3, [r7, #29]
 8000654:	2b00      	cmp	r3, #0
 8000656:	f000 8198 	beq.w	800098a <main+0x5d6>
			  hfdcan1.Instance = FDCAN1;
 800065a:	4b9e      	ldr	r3, [pc, #632]	@ (80008d4 <main+0x520>)
 800065c:	4a9e      	ldr	r2, [pc, #632]	@ (80008d8 <main+0x524>)
 800065e:	601a      	str	r2, [r3, #0]
			  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000660:	4b9c      	ldr	r3, [pc, #624]	@ (80008d4 <main+0x520>)
 8000662:	2200      	movs	r2, #0
 8000664:	605a      	str	r2, [r3, #4]
			  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000666:	4b9b      	ldr	r3, [pc, #620]	@ (80008d4 <main+0x520>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
			  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800066c:	4b99      	ldr	r3, [pc, #612]	@ (80008d4 <main+0x520>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
			  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000672:	4b98      	ldr	r3, [pc, #608]	@ (80008d4 <main+0x520>)
 8000674:	2200      	movs	r2, #0
 8000676:	741a      	strb	r2, [r3, #16]
			  hfdcan1.Init.TransmitPause = DISABLE;
 8000678:	4b96      	ldr	r3, [pc, #600]	@ (80008d4 <main+0x520>)
 800067a:	2200      	movs	r2, #0
 800067c:	745a      	strb	r2, [r3, #17]
			  hfdcan1.Init.ProtocolException = DISABLE;
 800067e:	4b95      	ldr	r3, [pc, #596]	@ (80008d4 <main+0x520>)
 8000680:	2200      	movs	r2, #0
 8000682:	749a      	strb	r2, [r3, #18]
			  hfdcan1.Init.NominalPrescaler = setted_prescaler;
 8000684:	4b90      	ldr	r3, [pc, #576]	@ (80008c8 <main+0x514>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	461a      	mov	r2, r3
 800068a:	4b92      	ldr	r3, [pc, #584]	@ (80008d4 <main+0x520>)
 800068c:	615a      	str	r2, [r3, #20]
			  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800068e:	4b91      	ldr	r3, [pc, #580]	@ (80008d4 <main+0x520>)
 8000690:	2201      	movs	r2, #1
 8000692:	619a      	str	r2, [r3, #24]
			  hfdcan1.Init.NominalTimeSeg1 = 11;
 8000694:	4b8f      	ldr	r3, [pc, #572]	@ (80008d4 <main+0x520>)
 8000696:	220b      	movs	r2, #11
 8000698:	61da      	str	r2, [r3, #28]
			  hfdcan1.Init.NominalTimeSeg2 = 4;
 800069a:	4b8e      	ldr	r3, [pc, #568]	@ (80008d4 <main+0x520>)
 800069c:	2204      	movs	r2, #4
 800069e:	621a      	str	r2, [r3, #32]
			  hfdcan1.Init.DataPrescaler = 1;
 80006a0:	4b8c      	ldr	r3, [pc, #560]	@ (80008d4 <main+0x520>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	625a      	str	r2, [r3, #36]	@ 0x24
			  hfdcan1.Init.DataSyncJumpWidth = 1;
 80006a6:	4b8b      	ldr	r3, [pc, #556]	@ (80008d4 <main+0x520>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	629a      	str	r2, [r3, #40]	@ 0x28
			  hfdcan1.Init.DataTimeSeg1 = 1;
 80006ac:	4b89      	ldr	r3, [pc, #548]	@ (80008d4 <main+0x520>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	62da      	str	r2, [r3, #44]	@ 0x2c
			  hfdcan1.Init.DataTimeSeg2 = 1;
 80006b2:	4b88      	ldr	r3, [pc, #544]	@ (80008d4 <main+0x520>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	631a      	str	r2, [r3, #48]	@ 0x30
			  hfdcan1.Init.StdFiltersNbr = 1;
 80006b8:	4b86      	ldr	r3, [pc, #536]	@ (80008d4 <main+0x520>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	635a      	str	r2, [r3, #52]	@ 0x34
			  hfdcan1.Init.ExtFiltersNbr = 0;
 80006be:	4b85      	ldr	r3, [pc, #532]	@ (80008d4 <main+0x520>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	639a      	str	r2, [r3, #56]	@ 0x38
			  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80006c4:	4b83      	ldr	r3, [pc, #524]	@ (80008d4 <main+0x520>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	63da      	str	r2, [r3, #60]	@ 0x3c
			  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80006ca:	4882      	ldr	r0, [pc, #520]	@ (80008d4 <main+0x520>)
 80006cc:	f002 ff7c 	bl	80035c8 <HAL_FDCAN_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <main+0x326>
			  {
			    Error_Handler();
 80006d6:	f000 fb1f 	bl	8000d18 <Error_Handler>
			  }
			  FDCAN_Config();
 80006da:	f7ff fdf1 	bl	80002c0 <FDCAN_Config>
			 view = 0;
 80006de:	4b7f      	ldr	r3, [pc, #508]	@ (80008dc <main+0x528>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	e151      	b.n	800098a <main+0x5d6>
		 }
	  }else if(view == 0){
 80006e6:	4b7d      	ldr	r3, [pc, #500]	@ (80008dc <main+0x528>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	f040 814d 	bne.w	800098a <main+0x5d6>
		  sprintf(buffer, "id 0x%d%d%d   rx mode",(setted_id&0xF00)>>8,(setted_id&0x0F0)>>4,(setted_id&0x00F));
 80006f0:	4b7b      	ldr	r3, [pc, #492]	@ (80008e0 <main+0x52c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	0a1b      	lsrs	r3, r3, #8
 80006f6:	f003 020f 	and.w	r2, r3, #15
 80006fa:	4b79      	ldr	r3, [pc, #484]	@ (80008e0 <main+0x52c>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	091b      	lsrs	r3, r3, #4
 8000700:	f003 010f 	and.w	r1, r3, #15
 8000704:	4b76      	ldr	r3, [pc, #472]	@ (80008e0 <main+0x52c>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f003 030f 	and.w	r3, r3, #15
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	460b      	mov	r3, r1
 8000710:	4974      	ldr	r1, [pc, #464]	@ (80008e4 <main+0x530>)
 8000712:	4875      	ldr	r0, [pc, #468]	@ (80008e8 <main+0x534>)
 8000714:	f005 fb30 	bl	8005d78 <siprintf>
		  ssd1306_SetCursor(0, 0);
 8000718:	2100      	movs	r1, #0
 800071a:	2000      	movs	r0, #0
 800071c:	f000 fd96 	bl	800124c <ssd1306_SetCursor>
		  ssd1306_WriteString(buffer, Font_7x10, White);
 8000720:	4a6b      	ldr	r2, [pc, #428]	@ (80008d0 <main+0x51c>)
 8000722:	2301      	movs	r3, #1
 8000724:	ca06      	ldmia	r2, {r1, r2}
 8000726:	4870      	ldr	r0, [pc, #448]	@ (80008e8 <main+0x534>)
 8000728:	f000 fd6a 	bl	8001200 <ssd1306_WriteString>

		  if(setted_prescaler == 1){
 800072c:	4b66      	ldr	r3, [pc, #408]	@ (80008c8 <main+0x514>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b01      	cmp	r3, #1
 8000732:	d104      	bne.n	800073e <main+0x38a>
			  sprintf(buffer, "1M");
 8000734:	496d      	ldr	r1, [pc, #436]	@ (80008ec <main+0x538>)
 8000736:	486c      	ldr	r0, [pc, #432]	@ (80008e8 <main+0x534>)
 8000738:	f005 fb1e 	bl	8005d78 <siprintf>
 800073c:	e007      	b.n	800074e <main+0x39a>
		  }else if(setted_prescaler == 2){
 800073e:	4b62      	ldr	r3, [pc, #392]	@ (80008c8 <main+0x514>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b02      	cmp	r3, #2
 8000744:	d103      	bne.n	800074e <main+0x39a>
			  sprintf(buffer, "500k");
 8000746:	4961      	ldr	r1, [pc, #388]	@ (80008cc <main+0x518>)
 8000748:	4867      	ldr	r0, [pc, #412]	@ (80008e8 <main+0x534>)
 800074a:	f005 fb15 	bl	8005d78 <siprintf>
		  }
		  ssd1306_SetCursor(0, 8);
 800074e:	2108      	movs	r1, #8
 8000750:	2000      	movs	r0, #0
 8000752:	f000 fd7b 	bl	800124c <ssd1306_SetCursor>
		  ssd1306_WriteString(buffer, Font_7x10, White);
 8000756:	4a5e      	ldr	r2, [pc, #376]	@ (80008d0 <main+0x51c>)
 8000758:	2301      	movs	r3, #1
 800075a:	ca06      	ldmia	r2, {r1, r2}
 800075c:	4862      	ldr	r0, [pc, #392]	@ (80008e8 <main+0x534>)
 800075e:	f000 fd4f 	bl	8001200 <ssd1306_WriteString>

		  //put rxdata
		  sprintf(content,"%d %d %d %d", can_rxdata[0],can_rxdata[1],can_rxdata[2],can_rxdata[3]);
 8000762:	4b63      	ldr	r3, [pc, #396]	@ (80008f0 <main+0x53c>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	4619      	mov	r1, r3
 8000768:	4b61      	ldr	r3, [pc, #388]	@ (80008f0 <main+0x53c>)
 800076a:	785b      	ldrb	r3, [r3, #1]
 800076c:	461c      	mov	r4, r3
 800076e:	4b60      	ldr	r3, [pc, #384]	@ (80008f0 <main+0x53c>)
 8000770:	789b      	ldrb	r3, [r3, #2]
 8000772:	461a      	mov	r2, r3
 8000774:	4b5e      	ldr	r3, [pc, #376]	@ (80008f0 <main+0x53c>)
 8000776:	78db      	ldrb	r3, [r3, #3]
 8000778:	1d38      	adds	r0, r7, #4
 800077a:	9301      	str	r3, [sp, #4]
 800077c:	9200      	str	r2, [sp, #0]
 800077e:	4623      	mov	r3, r4
 8000780:	460a      	mov	r2, r1
 8000782:	495c      	ldr	r1, [pc, #368]	@ (80008f4 <main+0x540>)
 8000784:	f005 faf8 	bl	8005d78 <siprintf>
		  ssd1306_SetCursor(0,45);
 8000788:	212d      	movs	r1, #45	@ 0x2d
 800078a:	2000      	movs	r0, #0
 800078c:	f000 fd5e 	bl	800124c <ssd1306_SetCursor>
		  ssd1306_WriteString(content, Font_7x10, White);
 8000790:	4a4f      	ldr	r2, [pc, #316]	@ (80008d0 <main+0x51c>)
 8000792:	1d38      	adds	r0, r7, #4
 8000794:	2301      	movs	r3, #1
 8000796:	ca06      	ldmia	r2, {r1, r2}
 8000798:	f000 fd32 	bl	8001200 <ssd1306_WriteString>
		  sprintf(content,"  %d %d %d %d", can_rxdata[4],can_rxdata[5],can_rxdata[6],can_rxdata[7]);
 800079c:	4b54      	ldr	r3, [pc, #336]	@ (80008f0 <main+0x53c>)
 800079e:	791b      	ldrb	r3, [r3, #4]
 80007a0:	4619      	mov	r1, r3
 80007a2:	4b53      	ldr	r3, [pc, #332]	@ (80008f0 <main+0x53c>)
 80007a4:	795b      	ldrb	r3, [r3, #5]
 80007a6:	461c      	mov	r4, r3
 80007a8:	4b51      	ldr	r3, [pc, #324]	@ (80008f0 <main+0x53c>)
 80007aa:	799b      	ldrb	r3, [r3, #6]
 80007ac:	461a      	mov	r2, r3
 80007ae:	4b50      	ldr	r3, [pc, #320]	@ (80008f0 <main+0x53c>)
 80007b0:	79db      	ldrb	r3, [r3, #7]
 80007b2:	1d38      	adds	r0, r7, #4
 80007b4:	9301      	str	r3, [sp, #4]
 80007b6:	9200      	str	r2, [sp, #0]
 80007b8:	4623      	mov	r3, r4
 80007ba:	460a      	mov	r2, r1
 80007bc:	494e      	ldr	r1, [pc, #312]	@ (80008f8 <main+0x544>)
 80007be:	f005 fadb 	bl	8005d78 <siprintf>
		  ssd1306_SetCursor(0,53);
 80007c2:	2135      	movs	r1, #53	@ 0x35
 80007c4:	2000      	movs	r0, #0
 80007c6:	f000 fd41 	bl	800124c <ssd1306_SetCursor>
		  ssd1306_WriteString(content, Font_7x10, White);
 80007ca:	4a41      	ldr	r2, [pc, #260]	@ (80008d0 <main+0x51c>)
 80007cc:	1d38      	adds	r0, r7, #4
 80007ce:	2301      	movs	r3, #1
 80007d0:	ca06      	ldmia	r2, {r1, r2}
 80007d2:	f000 fd15 	bl	8001200 <ssd1306_WriteString>
		  sprintf(content,"%d %d %d %d", pre_can_rxdata[0], pre_can_rxdata[1], pre_can_rxdata[2], pre_can_rxdata[3]);
 80007d6:	4b49      	ldr	r3, [pc, #292]	@ (80008fc <main+0x548>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	4619      	mov	r1, r3
 80007dc:	4b47      	ldr	r3, [pc, #284]	@ (80008fc <main+0x548>)
 80007de:	785b      	ldrb	r3, [r3, #1]
 80007e0:	461c      	mov	r4, r3
 80007e2:	4b46      	ldr	r3, [pc, #280]	@ (80008fc <main+0x548>)
 80007e4:	789b      	ldrb	r3, [r3, #2]
 80007e6:	461a      	mov	r2, r3
 80007e8:	4b44      	ldr	r3, [pc, #272]	@ (80008fc <main+0x548>)
 80007ea:	78db      	ldrb	r3, [r3, #3]
 80007ec:	1d38      	adds	r0, r7, #4
 80007ee:	9301      	str	r3, [sp, #4]
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	4623      	mov	r3, r4
 80007f4:	460a      	mov	r2, r1
 80007f6:	493f      	ldr	r1, [pc, #252]	@ (80008f4 <main+0x540>)
 80007f8:	f005 fabe 	bl	8005d78 <siprintf>
		  ssd1306_SetCursor(0,25);
 80007fc:	2119      	movs	r1, #25
 80007fe:	2000      	movs	r0, #0
 8000800:	f000 fd24 	bl	800124c <ssd1306_SetCursor>
		  ssd1306_WriteString(content, Font_7x10, White);
 8000804:	4a32      	ldr	r2, [pc, #200]	@ (80008d0 <main+0x51c>)
 8000806:	1d38      	adds	r0, r7, #4
 8000808:	2301      	movs	r3, #1
 800080a:	ca06      	ldmia	r2, {r1, r2}
 800080c:	f000 fcf8 	bl	8001200 <ssd1306_WriteString>
		  sprintf(content,"  %d %d %d %d", pre_can_rxdata[4], pre_can_rxdata[5], pre_can_rxdata[6], pre_can_rxdata[7]);
 8000810:	4b3a      	ldr	r3, [pc, #232]	@ (80008fc <main+0x548>)
 8000812:	791b      	ldrb	r3, [r3, #4]
 8000814:	4619      	mov	r1, r3
 8000816:	4b39      	ldr	r3, [pc, #228]	@ (80008fc <main+0x548>)
 8000818:	795b      	ldrb	r3, [r3, #5]
 800081a:	461c      	mov	r4, r3
 800081c:	4b37      	ldr	r3, [pc, #220]	@ (80008fc <main+0x548>)
 800081e:	799b      	ldrb	r3, [r3, #6]
 8000820:	461a      	mov	r2, r3
 8000822:	4b36      	ldr	r3, [pc, #216]	@ (80008fc <main+0x548>)
 8000824:	79db      	ldrb	r3, [r3, #7]
 8000826:	1d38      	adds	r0, r7, #4
 8000828:	9301      	str	r3, [sp, #4]
 800082a:	9200      	str	r2, [sp, #0]
 800082c:	4623      	mov	r3, r4
 800082e:	460a      	mov	r2, r1
 8000830:	4931      	ldr	r1, [pc, #196]	@ (80008f8 <main+0x544>)
 8000832:	f005 faa1 	bl	8005d78 <siprintf>
		  ssd1306_SetCursor(0,33);
 8000836:	2121      	movs	r1, #33	@ 0x21
 8000838:	2000      	movs	r0, #0
 800083a:	f000 fd07 	bl	800124c <ssd1306_SetCursor>
		  ssd1306_WriteString(content, Font_7x10, White);
 800083e:	4a24      	ldr	r2, [pc, #144]	@ (80008d0 <main+0x51c>)
 8000840:	1d38      	adds	r0, r7, #4
 8000842:	2301      	movs	r3, #1
 8000844:	ca06      	ldmia	r2, {r1, r2}
 8000846:	f000 fcdb 	bl	8001200 <ssd1306_WriteString>
		  //carsor figured;
		  uint8_t column = adc_value_configured;
 800084a:	7f3b      	ldrb	r3, [r7, #28]
 800084c:	76bb      	strb	r3, [r7, #26]
		  if(column == 5){
 800084e:	7ebb      	ldrb	r3, [r7, #26]
 8000850:	2b05      	cmp	r3, #5
 8000852:	d11b      	bne.n	800088c <main+0x4d8>
			  //hilight cursor
			  sprintf(content, "%d",(setted_id&0xF00)>>8);
 8000854:	4b22      	ldr	r3, [pc, #136]	@ (80008e0 <main+0x52c>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	0a1b      	lsrs	r3, r3, #8
 800085a:	f003 020f 	and.w	r2, r3, #15
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	4927      	ldr	r1, [pc, #156]	@ (8000900 <main+0x54c>)
 8000862:	4618      	mov	r0, r3
 8000864:	f005 fa88 	bl	8005d78 <siprintf>
			  ssd1306_SetCursor(35, 0);
 8000868:	2100      	movs	r1, #0
 800086a:	2023      	movs	r0, #35	@ 0x23
 800086c:	f000 fcee 	bl	800124c <ssd1306_SetCursor>
			  ssd1306_WriteString(content, Font_7x10, Black);
 8000870:	4a17      	ldr	r2, [pc, #92]	@ (80008d0 <main+0x51c>)
 8000872:	1d38      	adds	r0, r7, #4
 8000874:	2300      	movs	r3, #0
 8000876:	ca06      	ldmia	r2, {r1, r2}
 8000878:	f000 fcc2 	bl	8001200 <ssd1306_WriteString>
			  if(go_state){
 800087c:	7f7b      	ldrb	r3, [r7, #29]
 800087e:	2b00      	cmp	r3, #0
 8000880:	f000 8083 	beq.w	800098a <main+0x5d6>
				  view = 1;
 8000884:	4b15      	ldr	r3, [pc, #84]	@ (80008dc <main+0x528>)
 8000886:	2201      	movs	r2, #1
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	e07e      	b.n	800098a <main+0x5d6>
			  }
		  }else if(column == 6){
 800088c:	7ebb      	ldrb	r3, [r7, #26]
 800088e:	2b06      	cmp	r3, #6
 8000890:	d138      	bne.n	8000904 <main+0x550>
			  //hilight cursor
			  sprintf(content, "%d",(setted_id&0x0F0)>>4);
 8000892:	4b13      	ldr	r3, [pc, #76]	@ (80008e0 <main+0x52c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	091b      	lsrs	r3, r3, #4
 8000898:	f003 020f 	and.w	r2, r3, #15
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	4918      	ldr	r1, [pc, #96]	@ (8000900 <main+0x54c>)
 80008a0:	4618      	mov	r0, r3
 80008a2:	f005 fa69 	bl	8005d78 <siprintf>
			  ssd1306_SetCursor(42, 0);
 80008a6:	2100      	movs	r1, #0
 80008a8:	202a      	movs	r0, #42	@ 0x2a
 80008aa:	f000 fccf 	bl	800124c <ssd1306_SetCursor>
			  ssd1306_WriteString(content, Font_7x10, Black);
 80008ae:	4a08      	ldr	r2, [pc, #32]	@ (80008d0 <main+0x51c>)
 80008b0:	1d38      	adds	r0, r7, #4
 80008b2:	2300      	movs	r3, #0
 80008b4:	ca06      	ldmia	r2, {r1, r2}
 80008b6:	f000 fca3 	bl	8001200 <ssd1306_WriteString>
			  if(go_state){
 80008ba:	7f7b      	ldrb	r3, [r7, #29]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d064      	beq.n	800098a <main+0x5d6>
				  view = 2;
 80008c0:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <main+0x528>)
 80008c2:	2202      	movs	r2, #2
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	e060      	b.n	800098a <main+0x5d6>
 80008c8:	20000014 	.word	0x20000014
 80008cc:	080066f8 	.word	0x080066f8
 80008d0:	20000000 	.word	0x20000000
 80008d4:	2000017c 	.word	0x2000017c
 80008d8:	40006400 	.word	0x40006400
 80008dc:	20000234 	.word	0x20000234
 80008e0:	20000010 	.word	0x20000010
 80008e4:	080066dc 	.word	0x080066dc
 80008e8:	2000023c 	.word	0x2000023c
 80008ec:	080066f4 	.word	0x080066f4
 80008f0:	20000018 	.word	0x20000018
 80008f4:	08006700 	.word	0x08006700
 80008f8:	0800670c 	.word	0x0800670c
 80008fc:	20000250 	.word	0x20000250
 8000900:	0800671c 	.word	0x0800671c
			  }
		  }else if(column == 7){
 8000904:	7ebb      	ldrb	r3, [r7, #26]
 8000906:	2b07      	cmp	r3, #7
 8000908:	d119      	bne.n	800093e <main+0x58a>
			  //hilight cursor
			  sprintf(content, "%d",(setted_id&0x00F));
 800090a:	4b29      	ldr	r3, [pc, #164]	@ (80009b0 <main+0x5fc>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f003 020f 	and.w	r2, r3, #15
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	4927      	ldr	r1, [pc, #156]	@ (80009b4 <main+0x600>)
 8000916:	4618      	mov	r0, r3
 8000918:	f005 fa2e 	bl	8005d78 <siprintf>
			  ssd1306_SetCursor(49, 0);
 800091c:	2100      	movs	r1, #0
 800091e:	2031      	movs	r0, #49	@ 0x31
 8000920:	f000 fc94 	bl	800124c <ssd1306_SetCursor>
			  ssd1306_WriteString(content, Font_7x10, Black);
 8000924:	4a24      	ldr	r2, [pc, #144]	@ (80009b8 <main+0x604>)
 8000926:	1d38      	adds	r0, r7, #4
 8000928:	2300      	movs	r3, #0
 800092a:	ca06      	ldmia	r2, {r1, r2}
 800092c:	f000 fc68 	bl	8001200 <ssd1306_WriteString>
			  if(go_state){
 8000930:	7f7b      	ldrb	r3, [r7, #29]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d029      	beq.n	800098a <main+0x5d6>
				  view = 3;
 8000936:	4b21      	ldr	r3, [pc, #132]	@ (80009bc <main+0x608>)
 8000938:	2203      	movs	r2, #3
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	e025      	b.n	800098a <main+0x5d6>
			  }
		  }else if(column == 9){
 800093e:	7ebb      	ldrb	r3, [r7, #26]
 8000940:	2b09      	cmp	r3, #9
 8000942:	d122      	bne.n	800098a <main+0x5d6>
			  //hilight cursor
			  if(setted_prescaler == 1){
 8000944:	4b1e      	ldr	r3, [pc, #120]	@ (80009c0 <main+0x60c>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d105      	bne.n	8000958 <main+0x5a4>
				  sprintf(content, "1M");
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	491d      	ldr	r1, [pc, #116]	@ (80009c4 <main+0x610>)
 8000950:	4618      	mov	r0, r3
 8000952:	f005 fa11 	bl	8005d78 <siprintf>
 8000956:	e008      	b.n	800096a <main+0x5b6>
			  }else if(setted_prescaler == 2){
 8000958:	4b19      	ldr	r3, [pc, #100]	@ (80009c0 <main+0x60c>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	2b02      	cmp	r3, #2
 800095e:	d104      	bne.n	800096a <main+0x5b6>
				  sprintf(content, "500k");
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	4919      	ldr	r1, [pc, #100]	@ (80009c8 <main+0x614>)
 8000964:	4618      	mov	r0, r3
 8000966:	f005 fa07 	bl	8005d78 <siprintf>
			  }
			  ssd1306_SetCursor(0, 8);
 800096a:	2108      	movs	r1, #8
 800096c:	2000      	movs	r0, #0
 800096e:	f000 fc6d 	bl	800124c <ssd1306_SetCursor>
			  ssd1306_WriteString(content, Font_7x10, Black);
 8000972:	4a11      	ldr	r2, [pc, #68]	@ (80009b8 <main+0x604>)
 8000974:	1d38      	adds	r0, r7, #4
 8000976:	2300      	movs	r3, #0
 8000978:	ca06      	ldmia	r2, {r1, r2}
 800097a:	f000 fc41 	bl	8001200 <ssd1306_WriteString>
			  if(go_state){
 800097e:	7f7b      	ldrb	r3, [r7, #29]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d002      	beq.n	800098a <main+0x5d6>
				  view = 4;
 8000984:	4b0d      	ldr	r3, [pc, #52]	@ (80009bc <main+0x608>)
 8000986:	2204      	movs	r2, #4
 8000988:	601a      	str	r2, [r3, #0]
			  }
		  }
	  }

	  //show
	  ssd1306_UpdateScreen(&hi2c3);
 800098a:	4810      	ldr	r0, [pc, #64]	@ (80009cc <main+0x618>)
 800098c:	f000 fb26 	bl	8000fdc <ssd1306_UpdateScreen>

	  //can filter config

	  sFilterConfig.FilterID1 = setted_id;
 8000990:	4b07      	ldr	r3, [pc, #28]	@ (80009b0 <main+0x5fc>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a0e      	ldr	r2, [pc, #56]	@ (80009d0 <main+0x61c>)
 8000996:	6113      	str	r3, [r2, #16]
	  if(HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK){
 8000998:	490d      	ldr	r1, [pc, #52]	@ (80009d0 <main+0x61c>)
 800099a:	480e      	ldr	r0, [pc, #56]	@ (80009d4 <main+0x620>)
 800099c:	f002 ff6e 	bl	800387c <HAL_FDCAN_ConfigFilter>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	f43f ad32 	beq.w	800040c <main+0x58>
		  Error_Handler();
 80009a8:	f000 f9b6 	bl	8000d18 <Error_Handler>
  while (1){
 80009ac:	e52e      	b.n	800040c <main+0x58>
 80009ae:	bf00      	nop
 80009b0:	20000010 	.word	0x20000010
 80009b4:	0800671c 	.word	0x0800671c
 80009b8:	20000000 	.word	0x20000000
 80009bc:	20000234 	.word	0x20000234
 80009c0:	20000014 	.word	0x20000014
 80009c4:	080066f4 	.word	0x080066f4
 80009c8:	080066f8 	.word	0x080066f8
 80009cc:	200001e0 	.word	0x200001e0
 80009d0:	20000098 	.word	0x20000098
 80009d4:	2000017c 	.word	0x2000017c

080009d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b094      	sub	sp, #80	@ 0x50
 80009dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009de:	f107 0318 	add.w	r3, r7, #24
 80009e2:	2238      	movs	r2, #56	@ 0x38
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f005 f9e8 	bl	8005dbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
 80009f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009fa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009fe:	f004 fa21 	bl	8004e44 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a02:	2302      	movs	r3, #2
 8000a04:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a0c:	2340      	movs	r3, #64	@ 0x40
 8000a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a14:	f107 0318 	add.w	r3, r7, #24
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f004 fac7 	bl	8004fac <HAL_RCC_OscConfig>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000a24:	f000 f978 	bl	8000d18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a28:	230f      	movs	r3, #15
 8000a2a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a34:	2300      	movs	r3, #0
 8000a36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4618      	mov	r0, r3
 8000a42:	f004 fdc5 	bl	80055d0 <HAL_RCC_ClockConfig>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000a4c:	f000 f964 	bl	8000d18 <Error_Handler>
  }
}
 8000a50:	bf00      	nop
 8000a52:	3750      	adds	r7, #80	@ 0x50
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08c      	sub	sp, #48	@ 0x30
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2220      	movs	r2, #32
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f005 f9a3 	bl	8005dbc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a76:	4b32      	ldr	r3, [pc, #200]	@ (8000b40 <MX_ADC1_Init+0xe8>)
 8000a78:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000a7c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000a7e:	4b30      	ldr	r3, [pc, #192]	@ (8000b40 <MX_ADC1_Init+0xe8>)
 8000a80:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000a84:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000a86:	4b2e      	ldr	r3, [pc, #184]	@ (8000b40 <MX_ADC1_Init+0xe8>)
 8000a88:	2210      	movs	r2, #16
 8000a8a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a8c:	4b2c      	ldr	r3, [pc, #176]	@ (8000b40 <MX_ADC1_Init+0xe8>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000a92:	4b2b      	ldr	r3, [pc, #172]	@ (8000b40 <MX_ADC1_Init+0xe8>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a98:	4b29      	ldr	r3, [pc, #164]	@ (8000b40 <MX_ADC1_Init+0xe8>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a9e:	4b28      	ldr	r3, [pc, #160]	@ (8000b40 <MX_ADC1_Init+0xe8>)
 8000aa0:	2204      	movs	r2, #4
 8000aa2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000aa4:	4b26      	ldr	r3, [pc, #152]	@ (8000b40 <MX_ADC1_Init+0xe8>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000aaa:	4b25      	ldr	r3, [pc, #148]	@ (8000b40 <MX_ADC1_Init+0xe8>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000ab0:	4b23      	ldr	r3, [pc, #140]	@ (8000b40 <MX_ADC1_Init+0xe8>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ab6:	4b22      	ldr	r3, [pc, #136]	@ (8000b40 <MX_ADC1_Init+0xe8>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000abe:	4b20      	ldr	r3, [pc, #128]	@ (8000b40 <MX_ADC1_Init+0xe8>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ac4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b40 <MX_ADC1_Init+0xe8>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000aca:	4b1d      	ldr	r3, [pc, #116]	@ (8000b40 <MX_ADC1_Init+0xe8>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ad2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b40 <MX_ADC1_Init+0xe8>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000ad8:	4b19      	ldr	r3, [pc, #100]	@ (8000b40 <MX_ADC1_Init+0xe8>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ae0:	4817      	ldr	r0, [pc, #92]	@ (8000b40 <MX_ADC1_Init+0xe8>)
 8000ae2:	f001 f8d7 	bl	8001c94 <HAL_ADC_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000aec:	f000 f914 	bl	8000d18 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000af0:	2300      	movs	r3, #0
 8000af2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000af4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af8:	4619      	mov	r1, r3
 8000afa:	4811      	ldr	r0, [pc, #68]	@ (8000b40 <MX_ADC1_Init+0xe8>)
 8000afc:	f002 f93e 	bl	8002d7c <HAL_ADCEx_MultiModeConfigChannel>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000b06:	f000 f907 	bl	8000d18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b44 <MX_ADC1_Init+0xec>)
 8000b0c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b0e:	2306      	movs	r3, #6
 8000b10:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000b12:	2307      	movs	r3, #7
 8000b14:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b16:	237f      	movs	r3, #127	@ 0x7f
 8000b18:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b1a:	2304      	movs	r3, #4
 8000b1c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	4619      	mov	r1, r3
 8000b26:	4806      	ldr	r0, [pc, #24]	@ (8000b40 <MX_ADC1_Init+0xe8>)
 8000b28:	f001 fb0a 	bl	8002140 <HAL_ADC_ConfigChannel>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000b32:	f000 f8f1 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b36:	bf00      	nop
 8000b38:	3730      	adds	r7, #48	@ 0x30
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	200000b0 	.word	0x200000b0
 8000b44:	04300002 	.word	0x04300002

08000b48 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000b4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bcc <MX_FDCAN1_Init+0x84>)
 8000b4e:	4a20      	ldr	r2, [pc, #128]	@ (8000bd0 <MX_FDCAN1_Init+0x88>)
 8000b50:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000b52:	4b1e      	ldr	r3, [pc, #120]	@ (8000bcc <MX_FDCAN1_Init+0x84>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000b58:	4b1c      	ldr	r3, [pc, #112]	@ (8000bcc <MX_FDCAN1_Init+0x84>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000bcc <MX_FDCAN1_Init+0x84>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000b64:	4b19      	ldr	r3, [pc, #100]	@ (8000bcc <MX_FDCAN1_Init+0x84>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000b6a:	4b18      	ldr	r3, [pc, #96]	@ (8000bcc <MX_FDCAN1_Init+0x84>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000b70:	4b16      	ldr	r3, [pc, #88]	@ (8000bcc <MX_FDCAN1_Init+0x84>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000b76:	4b15      	ldr	r3, [pc, #84]	@ (8000bcc <MX_FDCAN1_Init+0x84>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000b7c:	4b13      	ldr	r3, [pc, #76]	@ (8000bcc <MX_FDCAN1_Init+0x84>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 11;
 8000b82:	4b12      	ldr	r3, [pc, #72]	@ (8000bcc <MX_FDCAN1_Init+0x84>)
 8000b84:	220b      	movs	r2, #11
 8000b86:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 8000b88:	4b10      	ldr	r3, [pc, #64]	@ (8000bcc <MX_FDCAN1_Init+0x84>)
 8000b8a:	2204      	movs	r2, #4
 8000b8c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bcc <MX_FDCAN1_Init+0x84>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000b94:	4b0d      	ldr	r3, [pc, #52]	@ (8000bcc <MX_FDCAN1_Init+0x84>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000bcc <MX_FDCAN1_Init+0x84>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bcc <MX_FDCAN1_Init+0x84>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8000ba6:	4b09      	ldr	r3, [pc, #36]	@ (8000bcc <MX_FDCAN1_Init+0x84>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000bac:	4b07      	ldr	r3, [pc, #28]	@ (8000bcc <MX_FDCAN1_Init+0x84>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000bb2:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <MX_FDCAN1_Init+0x84>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000bb8:	4804      	ldr	r0, [pc, #16]	@ (8000bcc <MX_FDCAN1_Init+0x84>)
 8000bba:	f002 fd05 	bl	80035c8 <HAL_FDCAN_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000bc4:	f000 f8a8 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	2000017c 	.word	0x2000017c
 8000bd0:	40006400 	.word	0x40006400

08000bd4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c48 <MX_I2C3_Init+0x74>)
 8000bda:	4a1c      	ldr	r2, [pc, #112]	@ (8000c4c <MX_I2C3_Init+0x78>)
 8000bdc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00503D58;
 8000bde:	4b1a      	ldr	r3, [pc, #104]	@ (8000c48 <MX_I2C3_Init+0x74>)
 8000be0:	4a1b      	ldr	r2, [pc, #108]	@ (8000c50 <MX_I2C3_Init+0x7c>)
 8000be2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000be4:	4b18      	ldr	r3, [pc, #96]	@ (8000c48 <MX_I2C3_Init+0x74>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bea:	4b17      	ldr	r3, [pc, #92]	@ (8000c48 <MX_I2C3_Init+0x74>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bf0:	4b15      	ldr	r3, [pc, #84]	@ (8000c48 <MX_I2C3_Init+0x74>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000bf6:	4b14      	ldr	r3, [pc, #80]	@ (8000c48 <MX_I2C3_Init+0x74>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bfc:	4b12      	ldr	r3, [pc, #72]	@ (8000c48 <MX_I2C3_Init+0x74>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c02:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <MX_I2C3_Init+0x74>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c08:	4b0f      	ldr	r3, [pc, #60]	@ (8000c48 <MX_I2C3_Init+0x74>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000c0e:	480e      	ldr	r0, [pc, #56]	@ (8000c48 <MX_I2C3_Init+0x74>)
 8000c10:	f003 fc62 	bl	80044d8 <HAL_I2C_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000c1a:	f000 f87d 	bl	8000d18 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4809      	ldr	r0, [pc, #36]	@ (8000c48 <MX_I2C3_Init+0x74>)
 8000c22:	f004 f877 	bl	8004d14 <HAL_I2CEx_ConfigAnalogFilter>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000c2c:	f000 f874 	bl	8000d18 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000c30:	2100      	movs	r1, #0
 8000c32:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <MX_I2C3_Init+0x74>)
 8000c34:	f004 f8b9 	bl	8004daa <HAL_I2CEx_ConfigDigitalFilter>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000c3e:	f000 f86b 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200001e0 	.word	0x200001e0
 8000c4c:	40007800 	.word	0x40007800
 8000c50:	00503d58 	.word	0x00503d58

08000c54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000c5a:	4b12      	ldr	r3, [pc, #72]	@ (8000ca4 <MX_DMA_Init+0x50>)
 8000c5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c5e:	4a11      	ldr	r2, [pc, #68]	@ (8000ca4 <MX_DMA_Init+0x50>)
 8000c60:	f043 0304 	orr.w	r3, r3, #4
 8000c64:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c66:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca4 <MX_DMA_Init+0x50>)
 8000c68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c6a:	f003 0304 	and.w	r3, r3, #4
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca4 <MX_DMA_Init+0x50>)
 8000c74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c76:	4a0b      	ldr	r2, [pc, #44]	@ (8000ca4 <MX_DMA_Init+0x50>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ca4 <MX_DMA_Init+0x50>)
 8000c80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	603b      	str	r3, [r7, #0]
 8000c88:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	200b      	movs	r0, #11
 8000c90:	f002 f9f3 	bl	800307a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c94:	200b      	movs	r0, #11
 8000c96:	f002 fa0a 	bl	80030ae <HAL_NVIC_EnableIRQ>

}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40021000 	.word	0x40021000

08000ca8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b088      	sub	sp, #32
 8000cac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cae:	f107 030c 	add.w	r3, r7, #12
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	4b14      	ldr	r3, [pc, #80]	@ (8000d10 <MX_GPIO_Init+0x68>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc2:	4a13      	ldr	r2, [pc, #76]	@ (8000d10 <MX_GPIO_Init+0x68>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cca:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <MX_GPIO_Init+0x68>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d10 <MX_GPIO_Init+0x68>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cda:	4a0d      	ldr	r2, [pc, #52]	@ (8000d10 <MX_GPIO_Init+0x68>)
 8000cdc:	f043 0302 	orr.w	r3, r3, #2
 8000ce0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d10 <MX_GPIO_Init+0x68>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : GO_Pin BACK_Pin */
  GPIO_InitStruct.Pin = GO_Pin|BACK_Pin;
 8000cee:	23c0      	movs	r3, #192	@ 0xc0
 8000cf0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfa:	f107 030c 	add.w	r3, r7, #12
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4804      	ldr	r0, [pc, #16]	@ (8000d14 <MX_GPIO_Init+0x6c>)
 8000d02:	f003 fa4f 	bl	80041a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d06:	bf00      	nop
 8000d08:	3720      	adds	r7, #32
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40021000 	.word	0x40021000
 8000d14:	48000400 	.word	0x48000400

08000d18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d1c:	b672      	cpsid	i
}
 8000d1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <Error_Handler+0x8>

08000d24 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af04      	add	r7, sp, #16
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8000d30:	230a      	movs	r3, #10
 8000d32:	9302      	str	r3, [sp, #8]
 8000d34:	2301      	movs	r3, #1
 8000d36:	9301      	str	r3, [sp, #4]
 8000d38:	1cfb      	adds	r3, r7, #3
 8000d3a:	9300      	str	r3, [sp, #0]
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2178      	movs	r1, #120	@ 0x78
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f003 fc64 	bl	8004610 <HAL_I2C_Mem_Write>
 8000d48:	4603      	mov	r3, r0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8000d5c:	2064      	movs	r0, #100	@ 0x64
 8000d5e:	f000 fd33 	bl	80017c8 <HAL_Delay>
    int status = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8000d66:	21ae      	movs	r1, #174	@ 0xae
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f7ff ffdb 	bl	8000d24 <ssd1306_WriteCommand>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	461a      	mov	r2, r3
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	4413      	add	r3, r2
 8000d76:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8000d78:	2120      	movs	r1, #32
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff ffd2 	bl	8000d24 <ssd1306_WriteCommand>
 8000d80:	4603      	mov	r3, r0
 8000d82:	461a      	mov	r2, r3
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	4413      	add	r3, r2
 8000d88:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000d8a:	2110      	movs	r1, #16
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff ffc9 	bl	8000d24 <ssd1306_WriteCommand>
 8000d92:	4603      	mov	r3, r0
 8000d94:	461a      	mov	r2, r3
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	4413      	add	r3, r2
 8000d9a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8000d9c:	21b0      	movs	r1, #176	@ 0xb0
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f7ff ffc0 	bl	8000d24 <ssd1306_WriteCommand>
 8000da4:	4603      	mov	r3, r0
 8000da6:	461a      	mov	r2, r3
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	4413      	add	r3, r2
 8000dac:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8000dae:	21c8      	movs	r1, #200	@ 0xc8
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff ffb7 	bl	8000d24 <ssd1306_WriteCommand>
 8000db6:	4603      	mov	r3, r0
 8000db8:	461a      	mov	r2, r3
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff ffae 	bl	8000d24 <ssd1306_WriteCommand>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	461a      	mov	r2, r3
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	4413      	add	r3, r2
 8000dd0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8000dd2:	2110      	movs	r1, #16
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f7ff ffa5 	bl	8000d24 <ssd1306_WriteCommand>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	461a      	mov	r2, r3
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	4413      	add	r3, r2
 8000de2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8000de4:	2140      	movs	r1, #64	@ 0x40
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff ff9c 	bl	8000d24 <ssd1306_WriteCommand>
 8000dec:	4603      	mov	r3, r0
 8000dee:	461a      	mov	r2, r3
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	4413      	add	r3, r2
 8000df4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8000df6:	2181      	movs	r1, #129	@ 0x81
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff ff93 	bl	8000d24 <ssd1306_WriteCommand>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	461a      	mov	r2, r3
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	4413      	add	r3, r2
 8000e06:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8000e08:	21ff      	movs	r1, #255	@ 0xff
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff ff8a 	bl	8000d24 <ssd1306_WriteCommand>
 8000e10:	4603      	mov	r3, r0
 8000e12:	461a      	mov	r2, r3
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4413      	add	r3, r2
 8000e18:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8000e1a:	21a1      	movs	r1, #161	@ 0xa1
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff ff81 	bl	8000d24 <ssd1306_WriteCommand>
 8000e22:	4603      	mov	r3, r0
 8000e24:	461a      	mov	r2, r3
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	4413      	add	r3, r2
 8000e2a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8000e2c:	21a6      	movs	r1, #166	@ 0xa6
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff ff78 	bl	8000d24 <ssd1306_WriteCommand>
 8000e34:	4603      	mov	r3, r0
 8000e36:	461a      	mov	r2, r3
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8000e3e:	21a8      	movs	r1, #168	@ 0xa8
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f7ff ff6f 	bl	8000d24 <ssd1306_WriteCommand>
 8000e46:	4603      	mov	r3, r0
 8000e48:	461a      	mov	r2, r3
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8000e50:	213f      	movs	r1, #63	@ 0x3f
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff ff66 	bl	8000d24 <ssd1306_WriteCommand>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4413      	add	r3, r2
 8000e60:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000e62:	21a4      	movs	r1, #164	@ 0xa4
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff ff5d 	bl	8000d24 <ssd1306_WriteCommand>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	4413      	add	r3, r2
 8000e72:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8000e74:	21d3      	movs	r1, #211	@ 0xd3
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff ff54 	bl	8000d24 <ssd1306_WriteCommand>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	461a      	mov	r2, r3
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4413      	add	r3, r2
 8000e84:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8000e86:	2100      	movs	r1, #0
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff ff4b 	bl	8000d24 <ssd1306_WriteCommand>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	461a      	mov	r2, r3
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	4413      	add	r3, r2
 8000e96:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8000e98:	21d5      	movs	r1, #213	@ 0xd5
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff ff42 	bl	8000d24 <ssd1306_WriteCommand>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8000eaa:	21f0      	movs	r1, #240	@ 0xf0
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff ff39 	bl	8000d24 <ssd1306_WriteCommand>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	4413      	add	r3, r2
 8000eba:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8000ebc:	21d9      	movs	r1, #217	@ 0xd9
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff ff30 	bl	8000d24 <ssd1306_WriteCommand>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4413      	add	r3, r2
 8000ecc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8000ece:	2122      	movs	r1, #34	@ 0x22
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff ff27 	bl	8000d24 <ssd1306_WriteCommand>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	461a      	mov	r2, r3
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	4413      	add	r3, r2
 8000ede:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8000ee0:	21da      	movs	r1, #218	@ 0xda
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff ff1e 	bl	8000d24 <ssd1306_WriteCommand>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	461a      	mov	r2, r3
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4413      	add	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_COM_LR_REMAP << 5 | SSD1306_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);   
 8000ef2:	2112      	movs	r1, #18
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff ff15 	bl	8000d24 <ssd1306_WriteCommand>
 8000efa:	4603      	mov	r3, r0
 8000efc:	461a      	mov	r2, r3
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	4413      	add	r3, r2
 8000f02:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8000f04:	21db      	movs	r1, #219	@ 0xdb
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff ff0c 	bl	8000d24 <ssd1306_WriteCommand>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	461a      	mov	r2, r3
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	4413      	add	r3, r2
 8000f14:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8000f16:	2120      	movs	r1, #32
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff ff03 	bl	8000d24 <ssd1306_WriteCommand>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	461a      	mov	r2, r3
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	4413      	add	r3, r2
 8000f26:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8000f28:	218d      	movs	r1, #141	@ 0x8d
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff fefa 	bl	8000d24 <ssd1306_WriteCommand>
 8000f30:	4603      	mov	r3, r0
 8000f32:	461a      	mov	r2, r3
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4413      	add	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8000f3a:	2114      	movs	r1, #20
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff fef1 	bl	8000d24 <ssd1306_WriteCommand>
 8000f42:	4603      	mov	r3, r0
 8000f44:	461a      	mov	r2, r3
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	4413      	add	r3, r2
 8000f4a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8000f4c:	21af      	movs	r1, #175	@ 0xaf
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff fee8 	bl	8000d24 <ssd1306_WriteCommand>
 8000f54:	4603      	mov	r3, r0
 8000f56:	461a      	mov	r2, r3
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <ssd1306_Init+0x214>
        return 1;
 8000f64:	2301      	movs	r3, #1
 8000f66:	e00f      	b.n	8000f88 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f000 f813 	bl	8000f94 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f000 f834 	bl	8000fdc <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000f74:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <ssd1306_Init+0x23c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000f7a:	4b05      	ldr	r3, [pc, #20]	@ (8000f90 <ssd1306_Init+0x23c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8000f80:	4b03      	ldr	r3, [pc, #12]	@ (8000f90 <ssd1306_Init+0x23c>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	715a      	strb	r2, [r3, #5]

    return 0;
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000658 	.word	0x20000658

08000f94 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	e00d      	b.n	8000fc0 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d101      	bne.n	8000fae <ssd1306_Fill+0x1a>
 8000faa:	2100      	movs	r1, #0
 8000fac:	e000      	b.n	8000fb0 <ssd1306_Fill+0x1c>
 8000fae:	21ff      	movs	r1, #255	@ 0xff
 8000fb0:	4a09      	ldr	r2, [pc, #36]	@ (8000fd8 <ssd1306_Fill+0x44>)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	460a      	mov	r2, r1
 8000fb8:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fc6:	d3ed      	bcc.n	8000fa4 <ssd1306_Fill+0x10>
    }
}
 8000fc8:	bf00      	nop
 8000fca:	bf00      	nop
 8000fcc:	3714      	adds	r7, #20
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000258 	.word	0x20000258

08000fdc <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af04      	add	r7, sp, #16
 8000fe2:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	73fb      	strb	r3, [r7, #15]
 8000fe8:	e020      	b.n	800102c <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	3b50      	subs	r3, #80	@ 0x50
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff fe96 	bl	8000d24 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff fe92 	bl	8000d24 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8001000:	2110      	movs	r1, #16
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff fe8e 	bl	8000d24 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	01db      	lsls	r3, r3, #7
 800100c:	4a0b      	ldr	r2, [pc, #44]	@ (800103c <ssd1306_UpdateScreen+0x60>)
 800100e:	4413      	add	r3, r2
 8001010:	2264      	movs	r2, #100	@ 0x64
 8001012:	9202      	str	r2, [sp, #8]
 8001014:	2280      	movs	r2, #128	@ 0x80
 8001016:	9201      	str	r2, [sp, #4]
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2301      	movs	r3, #1
 800101c:	2240      	movs	r2, #64	@ 0x40
 800101e:	2178      	movs	r1, #120	@ 0x78
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f003 faf5 	bl	8004610 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	3301      	adds	r3, #1
 800102a:	73fb      	strb	r3, [r7, #15]
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	2b07      	cmp	r3, #7
 8001030:	d9db      	bls.n	8000fea <ssd1306_UpdateScreen+0xe>
    }
}
 8001032:	bf00      	nop
 8001034:	bf00      	nop
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000258 	.word	0x20000258

08001040 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
 800104a:	460b      	mov	r3, r1
 800104c:	71bb      	strb	r3, [r7, #6]
 800104e:	4613      	mov	r3, r2
 8001050:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	2b00      	cmp	r3, #0
 8001058:	db48      	blt.n	80010ec <ssd1306_DrawPixel+0xac>
 800105a:	79bb      	ldrb	r3, [r7, #6]
 800105c:	2b3f      	cmp	r3, #63	@ 0x3f
 800105e:	d845      	bhi.n	80010ec <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8001060:	4b25      	ldr	r3, [pc, #148]	@ (80010f8 <ssd1306_DrawPixel+0xb8>)
 8001062:	791b      	ldrb	r3, [r3, #4]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d006      	beq.n	8001076 <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8001068:	797b      	ldrb	r3, [r7, #5]
 800106a:	2b00      	cmp	r3, #0
 800106c:	bf0c      	ite	eq
 800106e:	2301      	moveq	r3, #1
 8001070:	2300      	movne	r3, #0
 8001072:	b2db      	uxtb	r3, r3
 8001074:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8001076:	797b      	ldrb	r3, [r7, #5]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d11a      	bne.n	80010b2 <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800107c:	79fa      	ldrb	r2, [r7, #7]
 800107e:	79bb      	ldrb	r3, [r7, #6]
 8001080:	08db      	lsrs	r3, r3, #3
 8001082:	b2d8      	uxtb	r0, r3
 8001084:	4603      	mov	r3, r0
 8001086:	01db      	lsls	r3, r3, #7
 8001088:	4413      	add	r3, r2
 800108a:	4a1c      	ldr	r2, [pc, #112]	@ (80010fc <ssd1306_DrawPixel+0xbc>)
 800108c:	5cd3      	ldrb	r3, [r2, r3]
 800108e:	b25a      	sxtb	r2, r3
 8001090:	79bb      	ldrb	r3, [r7, #6]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	2101      	movs	r1, #1
 8001098:	fa01 f303 	lsl.w	r3, r1, r3
 800109c:	b25b      	sxtb	r3, r3
 800109e:	4313      	orrs	r3, r2
 80010a0:	b259      	sxtb	r1, r3
 80010a2:	79fa      	ldrb	r2, [r7, #7]
 80010a4:	4603      	mov	r3, r0
 80010a6:	01db      	lsls	r3, r3, #7
 80010a8:	4413      	add	r3, r2
 80010aa:	b2c9      	uxtb	r1, r1
 80010ac:	4a13      	ldr	r2, [pc, #76]	@ (80010fc <ssd1306_DrawPixel+0xbc>)
 80010ae:	54d1      	strb	r1, [r2, r3]
 80010b0:	e01d      	b.n	80010ee <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80010b2:	79fa      	ldrb	r2, [r7, #7]
 80010b4:	79bb      	ldrb	r3, [r7, #6]
 80010b6:	08db      	lsrs	r3, r3, #3
 80010b8:	b2d8      	uxtb	r0, r3
 80010ba:	4603      	mov	r3, r0
 80010bc:	01db      	lsls	r3, r3, #7
 80010be:	4413      	add	r3, r2
 80010c0:	4a0e      	ldr	r2, [pc, #56]	@ (80010fc <ssd1306_DrawPixel+0xbc>)
 80010c2:	5cd3      	ldrb	r3, [r2, r3]
 80010c4:	b25a      	sxtb	r2, r3
 80010c6:	79bb      	ldrb	r3, [r7, #6]
 80010c8:	f003 0307 	and.w	r3, r3, #7
 80010cc:	2101      	movs	r1, #1
 80010ce:	fa01 f303 	lsl.w	r3, r1, r3
 80010d2:	b25b      	sxtb	r3, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	b25b      	sxtb	r3, r3
 80010d8:	4013      	ands	r3, r2
 80010da:	b259      	sxtb	r1, r3
 80010dc:	79fa      	ldrb	r2, [r7, #7]
 80010de:	4603      	mov	r3, r0
 80010e0:	01db      	lsls	r3, r3, #7
 80010e2:	4413      	add	r3, r2
 80010e4:	b2c9      	uxtb	r1, r1
 80010e6:	4a05      	ldr	r2, [pc, #20]	@ (80010fc <ssd1306_DrawPixel+0xbc>)
 80010e8:	54d1      	strb	r1, [r2, r3]
 80010ea:	e000      	b.n	80010ee <ssd1306_DrawPixel+0xae>
        return;
 80010ec:	bf00      	nop
    }
}
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	20000658 	.word	0x20000658
 80010fc:	20000258 	.word	0x20000258

08001100 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b089      	sub	sp, #36	@ 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	4604      	mov	r4, r0
 8001108:	1d38      	adds	r0, r7, #4
 800110a:	e880 0006 	stmia.w	r0, {r1, r2}
 800110e:	461a      	mov	r2, r3
 8001110:	4623      	mov	r3, r4
 8001112:	73fb      	strb	r3, [r7, #15]
 8001114:	4613      	mov	r3, r2
 8001116:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001118:	4b38      	ldr	r3, [pc, #224]	@ (80011fc <ssd1306_WriteChar+0xfc>)
 800111a:	881b      	ldrh	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	793b      	ldrb	r3, [r7, #4]
 8001120:	4413      	add	r3, r2
 8001122:	2b7f      	cmp	r3, #127	@ 0x7f
 8001124:	dc06      	bgt.n	8001134 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8001126:	4b35      	ldr	r3, [pc, #212]	@ (80011fc <ssd1306_WriteChar+0xfc>)
 8001128:	885b      	ldrh	r3, [r3, #2]
 800112a:	461a      	mov	r2, r3
 800112c:	797b      	ldrb	r3, [r7, #5]
 800112e:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001130:	2b3f      	cmp	r3, #63	@ 0x3f
 8001132:	dd01      	ble.n	8001138 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8001134:	2300      	movs	r3, #0
 8001136:	e05c      	b.n	80011f2 <ssd1306_WriteChar+0xf2>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8001138:	2300      	movs	r3, #0
 800113a:	61fb      	str	r3, [r7, #28]
 800113c:	e04c      	b.n	80011d8 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800113e:	68ba      	ldr	r2, [r7, #8]
 8001140:	7bfb      	ldrb	r3, [r7, #15]
 8001142:	3b20      	subs	r3, #32
 8001144:	7979      	ldrb	r1, [r7, #5]
 8001146:	fb01 f303 	mul.w	r3, r1, r3
 800114a:	4619      	mov	r1, r3
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	440b      	add	r3, r1
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	4413      	add	r3, r2
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8001158:	2300      	movs	r3, #0
 800115a:	61bb      	str	r3, [r7, #24]
 800115c:	e034      	b.n	80011c8 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d012      	beq.n	8001194 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800116e:	4b23      	ldr	r3, [pc, #140]	@ (80011fc <ssd1306_WriteChar+0xfc>)
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	b2da      	uxtb	r2, r3
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	b2db      	uxtb	r3, r3
 8001178:	4413      	add	r3, r2
 800117a:	b2d8      	uxtb	r0, r3
 800117c:	4b1f      	ldr	r3, [pc, #124]	@ (80011fc <ssd1306_WriteChar+0xfc>)
 800117e:	885b      	ldrh	r3, [r3, #2]
 8001180:	b2da      	uxtb	r2, r3
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	4413      	add	r3, r2
 8001188:	b2db      	uxtb	r3, r3
 800118a:	7bba      	ldrb	r2, [r7, #14]
 800118c:	4619      	mov	r1, r3
 800118e:	f7ff ff57 	bl	8001040 <ssd1306_DrawPixel>
 8001192:	e016      	b.n	80011c2 <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001194:	4b19      	ldr	r3, [pc, #100]	@ (80011fc <ssd1306_WriteChar+0xfc>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	b2da      	uxtb	r2, r3
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	b2db      	uxtb	r3, r3
 800119e:	4413      	add	r3, r2
 80011a0:	b2d8      	uxtb	r0, r3
 80011a2:	4b16      	ldr	r3, [pc, #88]	@ (80011fc <ssd1306_WriteChar+0xfc>)
 80011a4:	885b      	ldrh	r3, [r3, #2]
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	4413      	add	r3, r2
 80011ae:	b2d9      	uxtb	r1, r3
 80011b0:	7bbb      	ldrb	r3, [r7, #14]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	bf0c      	ite	eq
 80011b6:	2301      	moveq	r3, #1
 80011b8:	2300      	movne	r3, #0
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	461a      	mov	r2, r3
 80011be:	f7ff ff3f 	bl	8001040 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	3301      	adds	r3, #1
 80011c6:	61bb      	str	r3, [r7, #24]
 80011c8:	793b      	ldrb	r3, [r7, #4]
 80011ca:	461a      	mov	r2, r3
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d3c5      	bcc.n	800115e <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3301      	adds	r3, #1
 80011d6:	61fb      	str	r3, [r7, #28]
 80011d8:	797b      	ldrb	r3, [r7, #5]
 80011da:	461a      	mov	r2, r3
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	4293      	cmp	r3, r2
 80011e0:	d3ad      	bcc.n	800113e <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80011e2:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <ssd1306_WriteChar+0xfc>)
 80011e4:	881b      	ldrh	r3, [r3, #0]
 80011e6:	793a      	ldrb	r2, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	4b03      	ldr	r3, [pc, #12]	@ (80011fc <ssd1306_WriteChar+0xfc>)
 80011ee:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3724      	adds	r7, #36	@ 0x24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd90      	pop	{r4, r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000658 	.word	0x20000658

08001200 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	1d38      	adds	r0, r7, #4
 800120a:	e880 0006 	stmia.w	r0, {r1, r2}
 800120e:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8001210:	e012      	b.n	8001238 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	7818      	ldrb	r0, [r3, #0]
 8001216:	78fb      	ldrb	r3, [r7, #3]
 8001218:	1d3a      	adds	r2, r7, #4
 800121a:	ca06      	ldmia	r2, {r1, r2}
 800121c:	f7ff ff70 	bl	8001100 <ssd1306_WriteChar>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	429a      	cmp	r2, r3
 800122a:	d002      	beq.n	8001232 <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	e008      	b.n	8001244 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	3301      	adds	r3, #1
 8001236:	60fb      	str	r3, [r7, #12]
    while (*str)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1e8      	bne.n	8001212 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	781b      	ldrb	r3, [r3, #0]
}
 8001244:	4618      	mov	r0, r3
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	460a      	mov	r2, r1
 8001256:	71fb      	strb	r3, [r7, #7]
 8001258:	4613      	mov	r3, r2
 800125a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	b29a      	uxth	r2, r3
 8001260:	4b05      	ldr	r3, [pc, #20]	@ (8001278 <ssd1306_SetCursor+0x2c>)
 8001262:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001264:	79bb      	ldrb	r3, [r7, #6]
 8001266:	b29a      	uxth	r2, r3
 8001268:	4b03      	ldr	r3, [pc, #12]	@ (8001278 <ssd1306_SetCursor+0x2c>)
 800126a:	805a      	strh	r2, [r3, #2]
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	20000658 	.word	0x20000658

0800127c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001282:	4b0f      	ldr	r3, [pc, #60]	@ (80012c0 <HAL_MspInit+0x44>)
 8001284:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001286:	4a0e      	ldr	r2, [pc, #56]	@ (80012c0 <HAL_MspInit+0x44>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6613      	str	r3, [r2, #96]	@ 0x60
 800128e:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <HAL_MspInit+0x44>)
 8001290:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800129a:	4b09      	ldr	r3, [pc, #36]	@ (80012c0 <HAL_MspInit+0x44>)
 800129c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800129e:	4a08      	ldr	r2, [pc, #32]	@ (80012c0 <HAL_MspInit+0x44>)
 80012a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80012a6:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <HAL_MspInit+0x44>)
 80012a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80012b2:	f003 fe6b 	bl	8004f8c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40021000 	.word	0x40021000

080012c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b09a      	sub	sp, #104	@ 0x68
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012dc:	f107 0310 	add.w	r3, r7, #16
 80012e0:	2244      	movs	r2, #68	@ 0x44
 80012e2:	2100      	movs	r1, #0
 80012e4:	4618      	mov	r0, r3
 80012e6:	f004 fd69 	bl	8005dbc <memset>
  if(hadc->Instance==ADC1)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012f2:	d15f      	bne.n	80013b4 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80012f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012f8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80012fa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80012fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001300:	f107 0310 	add.w	r3, r7, #16
 8001304:	4618      	mov	r0, r3
 8001306:	f004 fb47 	bl	8005998 <HAL_RCCEx_PeriphCLKConfig>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001310:	f7ff fd02 	bl	8000d18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001314:	4b29      	ldr	r3, [pc, #164]	@ (80013bc <HAL_ADC_MspInit+0xf8>)
 8001316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001318:	4a28      	ldr	r2, [pc, #160]	@ (80013bc <HAL_ADC_MspInit+0xf8>)
 800131a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800131e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001320:	4b26      	ldr	r3, [pc, #152]	@ (80013bc <HAL_ADC_MspInit+0xf8>)
 8001322:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001324:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132c:	4b23      	ldr	r3, [pc, #140]	@ (80013bc <HAL_ADC_MspInit+0xf8>)
 800132e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001330:	4a22      	ldr	r2, [pc, #136]	@ (80013bc <HAL_ADC_MspInit+0xf8>)
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001338:	4b20      	ldr	r3, [pc, #128]	@ (80013bc <HAL_ADC_MspInit+0xf8>)
 800133a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001344:	2301      	movs	r3, #1
 8001346:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001348:	2303      	movs	r3, #3
 800134a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001350:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001354:	4619      	mov	r1, r3
 8001356:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800135a:	f002 ff23 	bl	80041a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800135e:	4b18      	ldr	r3, [pc, #96]	@ (80013c0 <HAL_ADC_MspInit+0xfc>)
 8001360:	4a18      	ldr	r2, [pc, #96]	@ (80013c4 <HAL_ADC_MspInit+0x100>)
 8001362:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001364:	4b16      	ldr	r3, [pc, #88]	@ (80013c0 <HAL_ADC_MspInit+0xfc>)
 8001366:	2205      	movs	r2, #5
 8001368:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800136a:	4b15      	ldr	r3, [pc, #84]	@ (80013c0 <HAL_ADC_MspInit+0xfc>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001370:	4b13      	ldr	r3, [pc, #76]	@ (80013c0 <HAL_ADC_MspInit+0xfc>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001376:	4b12      	ldr	r3, [pc, #72]	@ (80013c0 <HAL_ADC_MspInit+0xfc>)
 8001378:	2280      	movs	r2, #128	@ 0x80
 800137a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800137c:	4b10      	ldr	r3, [pc, #64]	@ (80013c0 <HAL_ADC_MspInit+0xfc>)
 800137e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001382:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001384:	4b0e      	ldr	r3, [pc, #56]	@ (80013c0 <HAL_ADC_MspInit+0xfc>)
 8001386:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800138a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800138c:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <HAL_ADC_MspInit+0xfc>)
 800138e:	2220      	movs	r2, #32
 8001390:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001392:	4b0b      	ldr	r3, [pc, #44]	@ (80013c0 <HAL_ADC_MspInit+0xfc>)
 8001394:	2200      	movs	r2, #0
 8001396:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001398:	4809      	ldr	r0, [pc, #36]	@ (80013c0 <HAL_ADC_MspInit+0xfc>)
 800139a:	f001 fea3 	bl	80030e4 <HAL_DMA_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80013a4:	f7ff fcb8 	bl	8000d18 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a05      	ldr	r2, [pc, #20]	@ (80013c0 <HAL_ADC_MspInit+0xfc>)
 80013ac:	655a      	str	r2, [r3, #84]	@ 0x54
 80013ae:	4a04      	ldr	r2, [pc, #16]	@ (80013c0 <HAL_ADC_MspInit+0xfc>)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80013b4:	bf00      	nop
 80013b6:	3768      	adds	r7, #104	@ 0x68
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40021000 	.word	0x40021000
 80013c0:	2000011c 	.word	0x2000011c
 80013c4:	40020008 	.word	0x40020008

080013c8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b09a      	sub	sp, #104	@ 0x68
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013e0:	f107 0310 	add.w	r3, r7, #16
 80013e4:	2244      	movs	r2, #68	@ 0x44
 80013e6:	2100      	movs	r1, #0
 80013e8:	4618      	mov	r0, r3
 80013ea:	f004 fce7 	bl	8005dbc <memset>
  if(hfdcan->Instance==FDCAN1)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a24      	ldr	r2, [pc, #144]	@ (8001484 <HAL_FDCAN_MspInit+0xbc>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d141      	bne.n	800147c <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80013f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013fc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80013fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001402:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001404:	f107 0310 	add.w	r3, r7, #16
 8001408:	4618      	mov	r0, r3
 800140a:	f004 fac5 	bl	8005998 <HAL_RCCEx_PeriphCLKConfig>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001414:	f7ff fc80 	bl	8000d18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001418:	4b1b      	ldr	r3, [pc, #108]	@ (8001488 <HAL_FDCAN_MspInit+0xc0>)
 800141a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800141c:	4a1a      	ldr	r2, [pc, #104]	@ (8001488 <HAL_FDCAN_MspInit+0xc0>)
 800141e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001422:	6593      	str	r3, [r2, #88]	@ 0x58
 8001424:	4b18      	ldr	r3, [pc, #96]	@ (8001488 <HAL_FDCAN_MspInit+0xc0>)
 8001426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001428:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001430:	4b15      	ldr	r3, [pc, #84]	@ (8001488 <HAL_FDCAN_MspInit+0xc0>)
 8001432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001434:	4a14      	ldr	r2, [pc, #80]	@ (8001488 <HAL_FDCAN_MspInit+0xc0>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800143c:	4b12      	ldr	r3, [pc, #72]	@ (8001488 <HAL_FDCAN_MspInit+0xc0>)
 800143e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001448:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800144c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	2302      	movs	r3, #2
 8001450:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	2300      	movs	r3, #0
 8001458:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800145a:	2309      	movs	r3, #9
 800145c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001462:	4619      	mov	r1, r3
 8001464:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001468:	f002 fe9c 	bl	80041a4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800146c:	2200      	movs	r2, #0
 800146e:	2100      	movs	r1, #0
 8001470:	2015      	movs	r0, #21
 8001472:	f001 fe02 	bl	800307a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001476:	2015      	movs	r0, #21
 8001478:	f001 fe19 	bl	80030ae <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 800147c:	bf00      	nop
 800147e:	3768      	adds	r7, #104	@ 0x68
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40006400 	.word	0x40006400
 8001488:	40021000 	.word	0x40021000

0800148c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b09c      	sub	sp, #112	@ 0x70
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014a4:	f107 0318 	add.w	r3, r7, #24
 80014a8:	2244      	movs	r2, #68	@ 0x44
 80014aa:	2100      	movs	r1, #0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f004 fc85 	bl	8005dbc <memset>
  if(hi2c->Instance==I2C3)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a2e      	ldr	r2, [pc, #184]	@ (8001570 <HAL_I2C_MspInit+0xe4>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d154      	bne.n	8001566 <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80014bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014c0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80014c2:	2300      	movs	r3, #0
 80014c4:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014c6:	f107 0318 	add.w	r3, r7, #24
 80014ca:	4618      	mov	r0, r3
 80014cc:	f004 fa64 	bl	8005998 <HAL_RCCEx_PeriphCLKConfig>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80014d6:	f7ff fc1f 	bl	8000d18 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014da:	4b26      	ldr	r3, [pc, #152]	@ (8001574 <HAL_I2C_MspInit+0xe8>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014de:	4a25      	ldr	r2, [pc, #148]	@ (8001574 <HAL_I2C_MspInit+0xe8>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014e6:	4b23      	ldr	r3, [pc, #140]	@ (8001574 <HAL_I2C_MspInit+0xe8>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f2:	4b20      	ldr	r3, [pc, #128]	@ (8001574 <HAL_I2C_MspInit+0xe8>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f6:	4a1f      	ldr	r2, [pc, #124]	@ (8001574 <HAL_I2C_MspInit+0xe8>)
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001574 <HAL_I2C_MspInit+0xe8>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB5     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800150a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800150e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001510:	2312      	movs	r3, #18
 8001512:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001518:	2300      	movs	r3, #0
 800151a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 800151c:	2302      	movs	r3, #2
 800151e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001520:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001524:	4619      	mov	r1, r3
 8001526:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800152a:	f002 fe3b 	bl	80041a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800152e:	2320      	movs	r3, #32
 8001530:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001532:	2312      	movs	r3, #18
 8001534:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	2300      	movs	r3, #0
 800153c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 800153e:	2308      	movs	r3, #8
 8001540:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001542:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001546:	4619      	mov	r1, r3
 8001548:	480b      	ldr	r0, [pc, #44]	@ (8001578 <HAL_I2C_MspInit+0xec>)
 800154a:	f002 fe2b 	bl	80041a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800154e:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <HAL_I2C_MspInit+0xe8>)
 8001550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001552:	4a08      	ldr	r2, [pc, #32]	@ (8001574 <HAL_I2C_MspInit+0xe8>)
 8001554:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001558:	6593      	str	r3, [r2, #88]	@ 0x58
 800155a:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <HAL_I2C_MspInit+0xe8>)
 800155c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800155e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001566:	bf00      	nop
 8001568:	3770      	adds	r7, #112	@ 0x70
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40007800 	.word	0x40007800
 8001574:	40021000 	.word	0x40021000
 8001578:	48000400 	.word	0x48000400

0800157c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001580:	bf00      	nop
 8001582:	e7fd      	b.n	8001580 <NMI_Handler+0x4>

08001584 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <HardFault_Handler+0x4>

0800158c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001590:	bf00      	nop
 8001592:	e7fd      	b.n	8001590 <MemManage_Handler+0x4>

08001594 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001598:	bf00      	nop
 800159a:	e7fd      	b.n	8001598 <BusFault_Handler+0x4>

0800159c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a0:	bf00      	nop
 80015a2:	e7fd      	b.n	80015a0 <UsageFault_Handler+0x4>

080015a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d2:	f000 f8db 	bl	800178c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015e0:	4802      	ldr	r0, [pc, #8]	@ (80015ec <DMA1_Channel1_IRQHandler+0x10>)
 80015e2:	f001 fea2 	bl	800332a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	2000011c 	.word	0x2000011c

080015f0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80015f4:	4802      	ldr	r0, [pc, #8]	@ (8001600 <FDCAN1_IT0_IRQHandler+0x10>)
 80015f6:	f002 fbe3 	bl	8003dc0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	2000017c 	.word	0x2000017c

08001604 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800160c:	4a14      	ldr	r2, [pc, #80]	@ (8001660 <_sbrk+0x5c>)
 800160e:	4b15      	ldr	r3, [pc, #84]	@ (8001664 <_sbrk+0x60>)
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001618:	4b13      	ldr	r3, [pc, #76]	@ (8001668 <_sbrk+0x64>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d102      	bne.n	8001626 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001620:	4b11      	ldr	r3, [pc, #68]	@ (8001668 <_sbrk+0x64>)
 8001622:	4a12      	ldr	r2, [pc, #72]	@ (800166c <_sbrk+0x68>)
 8001624:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001626:	4b10      	ldr	r3, [pc, #64]	@ (8001668 <_sbrk+0x64>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	429a      	cmp	r2, r3
 8001632:	d207      	bcs.n	8001644 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001634:	f004 fbca 	bl	8005dcc <__errno>
 8001638:	4603      	mov	r3, r0
 800163a:	220c      	movs	r2, #12
 800163c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800163e:	f04f 33ff 	mov.w	r3, #4294967295
 8001642:	e009      	b.n	8001658 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001644:	4b08      	ldr	r3, [pc, #32]	@ (8001668 <_sbrk+0x64>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800164a:	4b07      	ldr	r3, [pc, #28]	@ (8001668 <_sbrk+0x64>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	4a05      	ldr	r2, [pc, #20]	@ (8001668 <_sbrk+0x64>)
 8001654:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001656:	68fb      	ldr	r3, [r7, #12]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20008000 	.word	0x20008000
 8001664:	00000400 	.word	0x00000400
 8001668:	20000660 	.word	0x20000660
 800166c:	200007b0 	.word	0x200007b0

08001670 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001674:	4b06      	ldr	r3, [pc, #24]	@ (8001690 <SystemInit+0x20>)
 8001676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800167a:	4a05      	ldr	r2, [pc, #20]	@ (8001690 <SystemInit+0x20>)
 800167c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001680:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001694:	480d      	ldr	r0, [pc, #52]	@ (80016cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001696:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001698:	f7ff ffea 	bl	8001670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800169c:	480c      	ldr	r0, [pc, #48]	@ (80016d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800169e:	490d      	ldr	r1, [pc, #52]	@ (80016d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016a0:	4a0d      	ldr	r2, [pc, #52]	@ (80016d8 <LoopForever+0xe>)
  movs r3, #0
 80016a2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80016a4:	e002      	b.n	80016ac <LoopCopyDataInit>

080016a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016aa:	3304      	adds	r3, #4

080016ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b0:	d3f9      	bcc.n	80016a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016b2:	4a0a      	ldr	r2, [pc, #40]	@ (80016dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80016b4:	4c0a      	ldr	r4, [pc, #40]	@ (80016e0 <LoopForever+0x16>)
  movs r3, #0
 80016b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b8:	e001      	b.n	80016be <LoopFillZerobss>

080016ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016bc:	3204      	adds	r2, #4

080016be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c0:	d3fb      	bcc.n	80016ba <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80016c2:	f004 fb89 	bl	8005dd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016c6:	f7fe fe75 	bl	80003b4 <main>

080016ca <LoopForever>:

LoopForever:
    b LoopForever
 80016ca:	e7fe      	b.n	80016ca <LoopForever>
  ldr   r0, =_estack
 80016cc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80016d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80016d8:	08007c4c 	.word	0x08007c4c
  ldr r2, =_sbss
 80016dc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80016e0:	200007b0 	.word	0x200007b0

080016e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016e4:	e7fe      	b.n	80016e4 <ADC1_2_IRQHandler>

080016e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016ec:	2300      	movs	r3, #0
 80016ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f0:	2003      	movs	r0, #3
 80016f2:	f001 fcb7 	bl	8003064 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016f6:	200f      	movs	r0, #15
 80016f8:	f000 f80e 	bl	8001718 <HAL_InitTick>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d002      	beq.n	8001708 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	71fb      	strb	r3, [r7, #7]
 8001706:	e001      	b.n	800170c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001708:	f7ff fdb8 	bl	800127c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800170c:	79fb      	ldrb	r3, [r7, #7]

}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001720:	2300      	movs	r3, #0
 8001722:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001724:	4b16      	ldr	r3, [pc, #88]	@ (8001780 <HAL_InitTick+0x68>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d022      	beq.n	8001772 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800172c:	4b15      	ldr	r3, [pc, #84]	@ (8001784 <HAL_InitTick+0x6c>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b13      	ldr	r3, [pc, #76]	@ (8001780 <HAL_InitTick+0x68>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001738:	fbb1 f3f3 	udiv	r3, r1, r3
 800173c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001740:	4618      	mov	r0, r3
 8001742:	f001 fcc2 	bl	80030ca <HAL_SYSTICK_Config>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d10f      	bne.n	800176c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b0f      	cmp	r3, #15
 8001750:	d809      	bhi.n	8001766 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001752:	2200      	movs	r2, #0
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	f04f 30ff 	mov.w	r0, #4294967295
 800175a:	f001 fc8e 	bl	800307a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800175e:	4a0a      	ldr	r2, [pc, #40]	@ (8001788 <HAL_InitTick+0x70>)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	e007      	b.n	8001776 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	73fb      	strb	r3, [r7, #15]
 800176a:	e004      	b.n	8001776 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	73fb      	strb	r3, [r7, #15]
 8001770:	e001      	b.n	8001776 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001776:	7bfb      	ldrb	r3, [r7, #15]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000028 	.word	0x20000028
 8001784:	20000020 	.word	0x20000020
 8001788:	20000024 	.word	0x20000024

0800178c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001790:	4b05      	ldr	r3, [pc, #20]	@ (80017a8 <HAL_IncTick+0x1c>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b05      	ldr	r3, [pc, #20]	@ (80017ac <HAL_IncTick+0x20>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4413      	add	r3, r2
 800179a:	4a03      	ldr	r2, [pc, #12]	@ (80017a8 <HAL_IncTick+0x1c>)
 800179c:	6013      	str	r3, [r2, #0]
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	20000664 	.word	0x20000664
 80017ac:	20000028 	.word	0x20000028

080017b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return uwTick;
 80017b4:	4b03      	ldr	r3, [pc, #12]	@ (80017c4 <HAL_GetTick+0x14>)
 80017b6:	681b      	ldr	r3, [r3, #0]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	20000664 	.word	0x20000664

080017c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d0:	f7ff ffee 	bl	80017b0 <HAL_GetTick>
 80017d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e0:	d004      	beq.n	80017ec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80017e2:	4b09      	ldr	r3, [pc, #36]	@ (8001808 <HAL_Delay+0x40>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	4413      	add	r3, r2
 80017ea:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ec:	bf00      	nop
 80017ee:	f7ff ffdf 	bl	80017b0 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d8f7      	bhi.n	80017ee <HAL_Delay+0x26>
  {
  }
}
 80017fe:	bf00      	nop
 8001800:	bf00      	nop
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000028 	.word	0x20000028

0800180c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	431a      	orrs	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	609a      	str	r2, [r3, #8]
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	609a      	str	r2, [r3, #8]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001868:	4618      	mov	r0, r3
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001874:	b480      	push	{r7}
 8001876:	b087      	sub	sp, #28
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
 8001880:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	3360      	adds	r3, #96	@ 0x60
 8001886:	461a      	mov	r2, r3
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b08      	ldr	r3, [pc, #32]	@ (80018b8 <LL_ADC_SetOffset+0x44>)
 8001896:	4013      	ands	r3, r2
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	4313      	orrs	r3, r2
 80018a4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80018ac:	bf00      	nop
 80018ae:	371c      	adds	r7, #28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	03fff000 	.word	0x03fff000

080018bc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	3360      	adds	r3, #96	@ 0x60
 80018ca:	461a      	mov	r2, r3
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b087      	sub	sp, #28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	3360      	adds	r3, #96	@ 0x60
 80018f8:	461a      	mov	r2, r3
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	431a      	orrs	r2, r3
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001912:	bf00      	nop
 8001914:	371c      	adds	r7, #28
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800191e:	b480      	push	{r7}
 8001920:	b087      	sub	sp, #28
 8001922:	af00      	add	r7, sp, #0
 8001924:	60f8      	str	r0, [r7, #12]
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	3360      	adds	r3, #96	@ 0x60
 800192e:	461a      	mov	r2, r3
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	431a      	orrs	r2, r3
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001948:	bf00      	nop
 800194a:	371c      	adds	r7, #28
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001954:	b480      	push	{r7}
 8001956:	b087      	sub	sp, #28
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	3360      	adds	r3, #96	@ 0x60
 8001964:	461a      	mov	r2, r3
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	431a      	orrs	r2, r3
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800197e:	bf00      	nop
 8001980:	371c      	adds	r7, #28
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	615a      	str	r2, [r3, #20]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80019c4:	2301      	movs	r3, #1
 80019c6:	e000      	b.n	80019ca <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b087      	sub	sp, #28
 80019da:	af00      	add	r7, sp, #0
 80019dc:	60f8      	str	r0, [r7, #12]
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	3330      	adds	r3, #48	@ 0x30
 80019e6:	461a      	mov	r2, r3
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	0a1b      	lsrs	r3, r3, #8
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	f003 030c 	and.w	r3, r3, #12
 80019f2:	4413      	add	r3, r2
 80019f4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	f003 031f 	and.w	r3, r3, #31
 8001a00:	211f      	movs	r1, #31
 8001a02:	fa01 f303 	lsl.w	r3, r1, r3
 8001a06:	43db      	mvns	r3, r3
 8001a08:	401a      	ands	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	0e9b      	lsrs	r3, r3, #26
 8001a0e:	f003 011f 	and.w	r1, r3, #31
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	f003 031f 	and.w	r3, r3, #31
 8001a18:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a22:	bf00      	nop
 8001a24:	371c      	adds	r7, #28
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b087      	sub	sp, #28
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	60f8      	str	r0, [r7, #12]
 8001a36:	60b9      	str	r1, [r7, #8]
 8001a38:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	3314      	adds	r3, #20
 8001a3e:	461a      	mov	r2, r3
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	0e5b      	lsrs	r3, r3, #25
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	f003 0304 	and.w	r3, r3, #4
 8001a4a:	4413      	add	r3, r2
 8001a4c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	0d1b      	lsrs	r3, r3, #20
 8001a56:	f003 031f 	and.w	r3, r3, #31
 8001a5a:	2107      	movs	r1, #7
 8001a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	401a      	ands	r2, r3
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	0d1b      	lsrs	r3, r3, #20
 8001a68:	f003 031f 	and.w	r3, r3, #31
 8001a6c:	6879      	ldr	r1, [r7, #4]
 8001a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a72:	431a      	orrs	r2, r3
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a78:	bf00      	nop
 8001a7a:	371c      	adds	r7, #28
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f003 0318 	and.w	r3, r3, #24
 8001aa6:	4908      	ldr	r1, [pc, #32]	@ (8001ac8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001aa8:	40d9      	lsrs	r1, r3
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	400b      	ands	r3, r1
 8001aae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001aba:	bf00      	nop
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	0007ffff 	.word	0x0007ffff

08001acc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 031f 	and.w	r3, r3, #31
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001af8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	6093      	str	r3, [r2, #8]
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b20:	d101      	bne.n	8001b26 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b22:	2301      	movs	r3, #1
 8001b24:	e000      	b.n	8001b28 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001b44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b48:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b70:	d101      	bne.n	8001b76 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b98:	f043 0201 	orr.w	r2, r3, #1
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001bbc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bc0:	f043 0202 	orr.w	r2, r3, #2
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d101      	bne.n	8001bec <LL_ADC_IsEnabled+0x18>
 8001be8:	2301      	movs	r3, #1
 8001bea:	e000      	b.n	8001bee <LL_ADC_IsEnabled+0x1a>
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d101      	bne.n	8001c12 <LL_ADC_IsDisableOngoing+0x18>
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e000      	b.n	8001c14 <LL_ADC_IsDisableOngoing+0x1a>
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c34:	f043 0204 	orr.w	r2, r3, #4
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	d101      	bne.n	8001c60 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e000      	b.n	8001c62 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	2b08      	cmp	r3, #8
 8001c80:	d101      	bne.n	8001c86 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c94:	b590      	push	{r4, r7, lr}
 8001c96:	b089      	sub	sp, #36	@ 0x24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e167      	b.n	8001f7e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d109      	bne.n	8001cd0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff fb01 	bl	80012c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff19 	bl	8001b0c <LL_ADC_IsDeepPowerDownEnabled>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d004      	beq.n	8001cea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff feff 	bl	8001ae8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff ff34 	bl	8001b5c <LL_ADC_IsInternalRegulatorEnabled>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d115      	bne.n	8001d26 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff ff18 	bl	8001b34 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d04:	4ba0      	ldr	r3, [pc, #640]	@ (8001f88 <HAL_ADC_Init+0x2f4>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	099b      	lsrs	r3, r3, #6
 8001d0a:	4aa0      	ldr	r2, [pc, #640]	@ (8001f8c <HAL_ADC_Init+0x2f8>)
 8001d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d10:	099b      	lsrs	r3, r3, #6
 8001d12:	3301      	adds	r3, #1
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d18:	e002      	b.n	8001d20 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f9      	bne.n	8001d1a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff ff16 	bl	8001b5c <LL_ADC_IsInternalRegulatorEnabled>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10d      	bne.n	8001d52 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d3a:	f043 0210 	orr.w	r2, r3, #16
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d46:	f043 0201 	orr.w	r2, r3, #1
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff ff76 	bl	8001c48 <LL_ADC_REG_IsConversionOngoing>
 8001d5c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d62:	f003 0310 	and.w	r3, r3, #16
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f040 8100 	bne.w	8001f6c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f040 80fc 	bne.w	8001f6c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d78:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001d7c:	f043 0202 	orr.w	r2, r3, #2
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff23 	bl	8001bd4 <LL_ADC_IsEnabled>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d111      	bne.n	8001db8 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d94:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001d98:	f7ff ff1c 	bl	8001bd4 <LL_ADC_IsEnabled>
 8001d9c:	4604      	mov	r4, r0
 8001d9e:	487c      	ldr	r0, [pc, #496]	@ (8001f90 <HAL_ADC_Init+0x2fc>)
 8001da0:	f7ff ff18 	bl	8001bd4 <LL_ADC_IsEnabled>
 8001da4:	4603      	mov	r3, r0
 8001da6:	4323      	orrs	r3, r4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d105      	bne.n	8001db8 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	4619      	mov	r1, r3
 8001db2:	4878      	ldr	r0, [pc, #480]	@ (8001f94 <HAL_ADC_Init+0x300>)
 8001db4:	f7ff fd2a 	bl	800180c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	7f5b      	ldrb	r3, [r3, #29]
 8001dbc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dc2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001dc8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001dce:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001dd6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d106      	bne.n	8001df4 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dea:	3b01      	subs	r3, #1
 8001dec:	045b      	lsls	r3, r3, #17
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d009      	beq.n	8001e10 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e00:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e08:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68da      	ldr	r2, [r3, #12]
 8001e16:	4b60      	ldr	r3, [pc, #384]	@ (8001f98 <HAL_ADC_Init+0x304>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6812      	ldr	r2, [r2, #0]
 8001e1e:	69b9      	ldr	r1, [r7, #24]
 8001e20:	430b      	orrs	r3, r1
 8001e22:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff ff15 	bl	8001c6e <LL_ADC_INJ_IsConversionOngoing>
 8001e44:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d16d      	bne.n	8001f28 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d16a      	bne.n	8001f28 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e56:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e5e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001e6e:	f023 0302 	bic.w	r3, r3, #2
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6812      	ldr	r2, [r2, #0]
 8001e76:	69b9      	ldr	r1, [r7, #24]
 8001e78:	430b      	orrs	r3, r1
 8001e7a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d017      	beq.n	8001eb4 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	691a      	ldr	r2, [r3, #16]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001e92:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001e9c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001ea0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	6911      	ldr	r1, [r2, #16]
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6812      	ldr	r2, [r2, #0]
 8001eac:	430b      	orrs	r3, r1
 8001eae:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001eb2:	e013      	b.n	8001edc <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	691a      	ldr	r2, [r3, #16]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001ec2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	6812      	ldr	r2, [r2, #0]
 8001ed0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001ed4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ed8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d118      	bne.n	8001f18 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001ef0:	f023 0304 	bic.w	r3, r3, #4
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001efc:	4311      	orrs	r1, r2
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001f02:	4311      	orrs	r1, r2
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f042 0201 	orr.w	r2, r2, #1
 8001f14:	611a      	str	r2, [r3, #16]
 8001f16:	e007      	b.n	8001f28 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	691a      	ldr	r2, [r3, #16]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 0201 	bic.w	r2, r2, #1
 8001f26:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	695b      	ldr	r3, [r3, #20]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d10c      	bne.n	8001f4a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f36:	f023 010f 	bic.w	r1, r3, #15
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	1e5a      	subs	r2, r3, #1
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f48:	e007      	b.n	8001f5a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 020f 	bic.w	r2, r2, #15
 8001f58:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f5e:	f023 0303 	bic.w	r3, r3, #3
 8001f62:	f043 0201 	orr.w	r2, r3, #1
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f6a:	e007      	b.n	8001f7c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f70:	f043 0210 	orr.w	r2, r3, #16
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3724      	adds	r7, #36	@ 0x24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd90      	pop	{r4, r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000020 	.word	0x20000020
 8001f8c:	053e2d63 	.word	0x053e2d63
 8001f90:	50000100 	.word	0x50000100
 8001f94:	50000300 	.word	0x50000300
 8001f98:	fff04007 	.word	0xfff04007

08001f9c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fa8:	4851      	ldr	r0, [pc, #324]	@ (80020f0 <HAL_ADC_Start_DMA+0x154>)
 8001faa:	f7ff fd8f 	bl	8001acc <LL_ADC_GetMultimode>
 8001fae:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff fe47 	bl	8001c48 <LL_ADC_REG_IsConversionOngoing>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f040 808f 	bne.w	80020e0 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d101      	bne.n	8001fd0 <HAL_ADC_Start_DMA+0x34>
 8001fcc:	2302      	movs	r3, #2
 8001fce:	e08a      	b.n	80020e6 <HAL_ADC_Start_DMA+0x14a>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d005      	beq.n	8001fea <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	2b05      	cmp	r3, #5
 8001fe2:	d002      	beq.n	8001fea <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	2b09      	cmp	r3, #9
 8001fe8:	d173      	bne.n	80020d2 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f000 fc98 	bl	8002920 <ADC_Enable>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001ff4:	7dfb      	ldrb	r3, [r7, #23]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d166      	bne.n	80020c8 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ffe:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002002:	f023 0301 	bic.w	r3, r3, #1
 8002006:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a38      	ldr	r2, [pc, #224]	@ (80020f4 <HAL_ADC_Start_DMA+0x158>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d002      	beq.n	800201e <HAL_ADC_Start_DMA+0x82>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	e001      	b.n	8002022 <HAL_ADC_Start_DMA+0x86>
 800201e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	6812      	ldr	r2, [r2, #0]
 8002026:	4293      	cmp	r3, r2
 8002028:	d002      	beq.n	8002030 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d105      	bne.n	800203c <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002034:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002040:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d006      	beq.n	8002056 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800204c:	f023 0206 	bic.w	r2, r3, #6
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	661a      	str	r2, [r3, #96]	@ 0x60
 8002054:	e002      	b.n	800205c <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002060:	4a25      	ldr	r2, [pc, #148]	@ (80020f8 <HAL_ADC_Start_DMA+0x15c>)
 8002062:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002068:	4a24      	ldr	r2, [pc, #144]	@ (80020fc <HAL_ADC_Start_DMA+0x160>)
 800206a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002070:	4a23      	ldr	r2, [pc, #140]	@ (8002100 <HAL_ADC_Start_DMA+0x164>)
 8002072:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	221c      	movs	r2, #28
 800207a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0210 	orr.w	r2, r2, #16
 8002092:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68da      	ldr	r2, [r3, #12]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f042 0201 	orr.w	r2, r2, #1
 80020a2:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	3340      	adds	r3, #64	@ 0x40
 80020ae:	4619      	mov	r1, r3
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f001 f8be 	bl	8003234 <HAL_DMA_Start_IT>
 80020b8:	4603      	mov	r3, r0
 80020ba:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff fdad 	bl	8001c20 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80020c6:	e00d      	b.n	80020e4 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80020d0:	e008      	b.n	80020e4 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80020de:	e001      	b.n	80020e4 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80020e0:	2302      	movs	r3, #2
 80020e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80020e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	50000300 	.word	0x50000300
 80020f4:	50000100 	.word	0x50000100
 80020f8:	08002aeb 	.word	0x08002aeb
 80020fc:	08002bc3 	.word	0x08002bc3
 8002100:	08002bdf 	.word	0x08002bdf

08002104 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b0b6      	sub	sp, #216	@ 0xd8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800214a:	2300      	movs	r3, #0
 800214c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002150:	2300      	movs	r3, #0
 8002152:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800215a:	2b01      	cmp	r3, #1
 800215c:	d101      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x22>
 800215e:	2302      	movs	r3, #2
 8002160:	e3c8      	b.n	80028f4 <HAL_ADC_ConfigChannel+0x7b4>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff fd6a 	bl	8001c48 <LL_ADC_REG_IsConversionOngoing>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	f040 83ad 	bne.w	80028d6 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6818      	ldr	r0, [r3, #0]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	6859      	ldr	r1, [r3, #4]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	461a      	mov	r2, r3
 800218a:	f7ff fc24 	bl	80019d6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff fd58 	bl	8001c48 <LL_ADC_REG_IsConversionOngoing>
 8002198:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fd64 	bl	8001c6e <LL_ADC_INJ_IsConversionOngoing>
 80021a6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f040 81d9 	bne.w	8002566 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f040 81d4 	bne.w	8002566 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80021c6:	d10f      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6818      	ldr	r0, [r3, #0]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2200      	movs	r2, #0
 80021d2:	4619      	mov	r1, r3
 80021d4:	f7ff fc2b 	bl	8001a2e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff fbd2 	bl	800198a <LL_ADC_SetSamplingTimeCommonConfig>
 80021e6:	e00e      	b.n	8002206 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6818      	ldr	r0, [r3, #0]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	6819      	ldr	r1, [r3, #0]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	461a      	mov	r2, r3
 80021f6:	f7ff fc1a 	bl	8001a2e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2100      	movs	r1, #0
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff fbc2 	bl	800198a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	695a      	ldr	r2, [r3, #20]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	08db      	lsrs	r3, r3, #3
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	2b04      	cmp	r3, #4
 8002226:	d022      	beq.n	800226e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6818      	ldr	r0, [r3, #0]
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	6919      	ldr	r1, [r3, #16]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002238:	f7ff fb1c 	bl	8001874 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	6919      	ldr	r1, [r3, #16]
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	461a      	mov	r2, r3
 800224a:	f7ff fb68 	bl	800191e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6818      	ldr	r0, [r3, #0]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800225a:	2b01      	cmp	r3, #1
 800225c:	d102      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x124>
 800225e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002262:	e000      	b.n	8002266 <HAL_ADC_ConfigChannel+0x126>
 8002264:	2300      	movs	r3, #0
 8002266:	461a      	mov	r2, r3
 8002268:	f7ff fb74 	bl	8001954 <LL_ADC_SetOffsetSaturation>
 800226c:	e17b      	b.n	8002566 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2100      	movs	r1, #0
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff fb21 	bl	80018bc <LL_ADC_GetOffsetChannel>
 800227a:	4603      	mov	r3, r0
 800227c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002280:	2b00      	cmp	r3, #0
 8002282:	d10a      	bne.n	800229a <HAL_ADC_ConfigChannel+0x15a>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2100      	movs	r1, #0
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fb16 	bl	80018bc <LL_ADC_GetOffsetChannel>
 8002290:	4603      	mov	r3, r0
 8002292:	0e9b      	lsrs	r3, r3, #26
 8002294:	f003 021f 	and.w	r2, r3, #31
 8002298:	e01e      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x198>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2100      	movs	r1, #0
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff fb0b 	bl	80018bc <LL_ADC_GetOffsetChannel>
 80022a6:	4603      	mov	r3, r0
 80022a8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80022b0:	fa93 f3a3 	rbit	r3, r3
 80022b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80022bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80022c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d101      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80022c8:	2320      	movs	r3, #32
 80022ca:	e004      	b.n	80022d6 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80022cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80022d0:	fab3 f383 	clz	r3, r3
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d105      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x1b0>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	0e9b      	lsrs	r3, r3, #26
 80022ea:	f003 031f 	and.w	r3, r3, #31
 80022ee:	e018      	b.n	8002322 <HAL_ADC_ConfigChannel+0x1e2>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80022fc:	fa93 f3a3 	rbit	r3, r3
 8002300:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002304:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002308:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800230c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002314:	2320      	movs	r3, #32
 8002316:	e004      	b.n	8002322 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002318:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800231c:	fab3 f383 	clz	r3, r3
 8002320:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002322:	429a      	cmp	r2, r3
 8002324:	d106      	bne.n	8002334 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2200      	movs	r2, #0
 800232c:	2100      	movs	r1, #0
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff fada 	bl	80018e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2101      	movs	r1, #1
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff fabe 	bl	80018bc <LL_ADC_GetOffsetChannel>
 8002340:	4603      	mov	r3, r0
 8002342:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10a      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x220>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2101      	movs	r1, #1
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff fab3 	bl	80018bc <LL_ADC_GetOffsetChannel>
 8002356:	4603      	mov	r3, r0
 8002358:	0e9b      	lsrs	r3, r3, #26
 800235a:	f003 021f 	and.w	r2, r3, #31
 800235e:	e01e      	b.n	800239e <HAL_ADC_ConfigChannel+0x25e>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2101      	movs	r1, #1
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff faa8 	bl	80018bc <LL_ADC_GetOffsetChannel>
 800236c:	4603      	mov	r3, r0
 800236e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002372:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002376:	fa93 f3a3 	rbit	r3, r3
 800237a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800237e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002382:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002386:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800238e:	2320      	movs	r3, #32
 8002390:	e004      	b.n	800239c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002392:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002396:	fab3 f383 	clz	r3, r3
 800239a:	b2db      	uxtb	r3, r3
 800239c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d105      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x276>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	0e9b      	lsrs	r3, r3, #26
 80023b0:	f003 031f 	and.w	r3, r3, #31
 80023b4:	e018      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x2a8>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80023c2:	fa93 f3a3 	rbit	r3, r3
 80023c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80023ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80023ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80023d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80023da:	2320      	movs	r3, #32
 80023dc:	e004      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80023de:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80023e2:	fab3 f383 	clz	r3, r3
 80023e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d106      	bne.n	80023fa <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2200      	movs	r2, #0
 80023f2:	2101      	movs	r1, #1
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff fa77 	bl	80018e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2102      	movs	r1, #2
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff fa5b 	bl	80018bc <LL_ADC_GetOffsetChannel>
 8002406:	4603      	mov	r3, r0
 8002408:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10a      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x2e6>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2102      	movs	r1, #2
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff fa50 	bl	80018bc <LL_ADC_GetOffsetChannel>
 800241c:	4603      	mov	r3, r0
 800241e:	0e9b      	lsrs	r3, r3, #26
 8002420:	f003 021f 	and.w	r2, r3, #31
 8002424:	e01e      	b.n	8002464 <HAL_ADC_ConfigChannel+0x324>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2102      	movs	r1, #2
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff fa45 	bl	80018bc <LL_ADC_GetOffsetChannel>
 8002432:	4603      	mov	r3, r0
 8002434:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002438:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800243c:	fa93 f3a3 	rbit	r3, r3
 8002440:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002444:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002448:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800244c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002454:	2320      	movs	r3, #32
 8002456:	e004      	b.n	8002462 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002458:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800245c:	fab3 f383 	clz	r3, r3
 8002460:	b2db      	uxtb	r3, r3
 8002462:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800246c:	2b00      	cmp	r3, #0
 800246e:	d105      	bne.n	800247c <HAL_ADC_ConfigChannel+0x33c>
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	0e9b      	lsrs	r3, r3, #26
 8002476:	f003 031f 	and.w	r3, r3, #31
 800247a:	e016      	b.n	80024aa <HAL_ADC_ConfigChannel+0x36a>
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002484:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002488:	fa93 f3a3 	rbit	r3, r3
 800248c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800248e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002490:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002494:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800249c:	2320      	movs	r3, #32
 800249e:	e004      	b.n	80024aa <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80024a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024a4:	fab3 f383 	clz	r3, r3
 80024a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d106      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2200      	movs	r2, #0
 80024b4:	2102      	movs	r1, #2
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff fa16 	bl	80018e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2103      	movs	r1, #3
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff f9fa 	bl	80018bc <LL_ADC_GetOffsetChannel>
 80024c8:	4603      	mov	r3, r0
 80024ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10a      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x3a8>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2103      	movs	r1, #3
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff f9ef 	bl	80018bc <LL_ADC_GetOffsetChannel>
 80024de:	4603      	mov	r3, r0
 80024e0:	0e9b      	lsrs	r3, r3, #26
 80024e2:	f003 021f 	and.w	r2, r3, #31
 80024e6:	e017      	b.n	8002518 <HAL_ADC_ConfigChannel+0x3d8>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2103      	movs	r1, #3
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff f9e4 	bl	80018bc <LL_ADC_GetOffsetChannel>
 80024f4:	4603      	mov	r3, r0
 80024f6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024fa:	fa93 f3a3 	rbit	r3, r3
 80024fe:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002500:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002502:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002504:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800250a:	2320      	movs	r3, #32
 800250c:	e003      	b.n	8002516 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800250e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002510:	fab3 f383 	clz	r3, r3
 8002514:	b2db      	uxtb	r3, r3
 8002516:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002520:	2b00      	cmp	r3, #0
 8002522:	d105      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x3f0>
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	0e9b      	lsrs	r3, r3, #26
 800252a:	f003 031f 	and.w	r3, r3, #31
 800252e:	e011      	b.n	8002554 <HAL_ADC_ConfigChannel+0x414>
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002536:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002538:	fa93 f3a3 	rbit	r3, r3
 800253c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800253e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002540:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002542:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002548:	2320      	movs	r3, #32
 800254a:	e003      	b.n	8002554 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800254c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800254e:	fab3 f383 	clz	r3, r3
 8002552:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002554:	429a      	cmp	r2, r3
 8002556:	d106      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2200      	movs	r2, #0
 800255e:	2103      	movs	r1, #3
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff f9c1 	bl	80018e8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff fb32 	bl	8001bd4 <LL_ADC_IsEnabled>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	f040 8140 	bne.w	80027f8 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6818      	ldr	r0, [r3, #0]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	6819      	ldr	r1, [r3, #0]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	461a      	mov	r2, r3
 8002586:	f7ff fa7d 	bl	8001a84 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	4a8f      	ldr	r2, [pc, #572]	@ (80027cc <HAL_ADC_ConfigChannel+0x68c>)
 8002590:	4293      	cmp	r3, r2
 8002592:	f040 8131 	bne.w	80027f8 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10b      	bne.n	80025be <HAL_ADC_ConfigChannel+0x47e>
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	0e9b      	lsrs	r3, r3, #26
 80025ac:	3301      	adds	r3, #1
 80025ae:	f003 031f 	and.w	r3, r3, #31
 80025b2:	2b09      	cmp	r3, #9
 80025b4:	bf94      	ite	ls
 80025b6:	2301      	movls	r3, #1
 80025b8:	2300      	movhi	r3, #0
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	e019      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x4b2>
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025c6:	fa93 f3a3 	rbit	r3, r3
 80025ca:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80025cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025ce:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80025d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80025d6:	2320      	movs	r3, #32
 80025d8:	e003      	b.n	80025e2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80025da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025dc:	fab3 f383 	clz	r3, r3
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	3301      	adds	r3, #1
 80025e4:	f003 031f 	and.w	r3, r3, #31
 80025e8:	2b09      	cmp	r3, #9
 80025ea:	bf94      	ite	ls
 80025ec:	2301      	movls	r3, #1
 80025ee:	2300      	movhi	r3, #0
 80025f0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d079      	beq.n	80026ea <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d107      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x4d2>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	0e9b      	lsrs	r3, r3, #26
 8002608:	3301      	adds	r3, #1
 800260a:	069b      	lsls	r3, r3, #26
 800260c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002610:	e015      	b.n	800263e <HAL_ADC_ConfigChannel+0x4fe>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002618:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800261a:	fa93 f3a3 	rbit	r3, r3
 800261e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002620:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002622:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002624:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800262a:	2320      	movs	r3, #32
 800262c:	e003      	b.n	8002636 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800262e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002630:	fab3 f383 	clz	r3, r3
 8002634:	b2db      	uxtb	r3, r3
 8002636:	3301      	adds	r3, #1
 8002638:	069b      	lsls	r3, r3, #26
 800263a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002646:	2b00      	cmp	r3, #0
 8002648:	d109      	bne.n	800265e <HAL_ADC_ConfigChannel+0x51e>
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	0e9b      	lsrs	r3, r3, #26
 8002650:	3301      	adds	r3, #1
 8002652:	f003 031f 	and.w	r3, r3, #31
 8002656:	2101      	movs	r1, #1
 8002658:	fa01 f303 	lsl.w	r3, r1, r3
 800265c:	e017      	b.n	800268e <HAL_ADC_ConfigChannel+0x54e>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002664:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002666:	fa93 f3a3 	rbit	r3, r3
 800266a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800266c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800266e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002670:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002676:	2320      	movs	r3, #32
 8002678:	e003      	b.n	8002682 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800267a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800267c:	fab3 f383 	clz	r3, r3
 8002680:	b2db      	uxtb	r3, r3
 8002682:	3301      	adds	r3, #1
 8002684:	f003 031f 	and.w	r3, r3, #31
 8002688:	2101      	movs	r1, #1
 800268a:	fa01 f303 	lsl.w	r3, r1, r3
 800268e:	ea42 0103 	orr.w	r1, r2, r3
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10a      	bne.n	80026b4 <HAL_ADC_ConfigChannel+0x574>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	0e9b      	lsrs	r3, r3, #26
 80026a4:	3301      	adds	r3, #1
 80026a6:	f003 021f 	and.w	r2, r3, #31
 80026aa:	4613      	mov	r3, r2
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	4413      	add	r3, r2
 80026b0:	051b      	lsls	r3, r3, #20
 80026b2:	e018      	b.n	80026e6 <HAL_ADC_ConfigChannel+0x5a6>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026bc:	fa93 f3a3 	rbit	r3, r3
 80026c0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80026c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80026c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80026cc:	2320      	movs	r3, #32
 80026ce:	e003      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80026d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026d2:	fab3 f383 	clz	r3, r3
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	3301      	adds	r3, #1
 80026da:	f003 021f 	and.w	r2, r3, #31
 80026de:	4613      	mov	r3, r2
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	4413      	add	r3, r2
 80026e4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026e6:	430b      	orrs	r3, r1
 80026e8:	e081      	b.n	80027ee <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d107      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x5c6>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	0e9b      	lsrs	r3, r3, #26
 80026fc:	3301      	adds	r3, #1
 80026fe:	069b      	lsls	r3, r3, #26
 8002700:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002704:	e015      	b.n	8002732 <HAL_ADC_ConfigChannel+0x5f2>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800270e:	fa93 f3a3 	rbit	r3, r3
 8002712:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002716:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800271e:	2320      	movs	r3, #32
 8002720:	e003      	b.n	800272a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002724:	fab3 f383 	clz	r3, r3
 8002728:	b2db      	uxtb	r3, r3
 800272a:	3301      	adds	r3, #1
 800272c:	069b      	lsls	r3, r3, #26
 800272e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800273a:	2b00      	cmp	r3, #0
 800273c:	d109      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x612>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	0e9b      	lsrs	r3, r3, #26
 8002744:	3301      	adds	r3, #1
 8002746:	f003 031f 	and.w	r3, r3, #31
 800274a:	2101      	movs	r1, #1
 800274c:	fa01 f303 	lsl.w	r3, r1, r3
 8002750:	e017      	b.n	8002782 <HAL_ADC_ConfigChannel+0x642>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002758:	6a3b      	ldr	r3, [r7, #32]
 800275a:	fa93 f3a3 	rbit	r3, r3
 800275e:	61fb      	str	r3, [r7, #28]
  return result;
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800276a:	2320      	movs	r3, #32
 800276c:	e003      	b.n	8002776 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800276e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002770:	fab3 f383 	clz	r3, r3
 8002774:	b2db      	uxtb	r3, r3
 8002776:	3301      	adds	r3, #1
 8002778:	f003 031f 	and.w	r3, r3, #31
 800277c:	2101      	movs	r1, #1
 800277e:	fa01 f303 	lsl.w	r3, r1, r3
 8002782:	ea42 0103 	orr.w	r1, r2, r3
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10d      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x66e>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	0e9b      	lsrs	r3, r3, #26
 8002798:	3301      	adds	r3, #1
 800279a:	f003 021f 	and.w	r2, r3, #31
 800279e:	4613      	mov	r3, r2
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	4413      	add	r3, r2
 80027a4:	3b1e      	subs	r3, #30
 80027a6:	051b      	lsls	r3, r3, #20
 80027a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027ac:	e01e      	b.n	80027ec <HAL_ADC_ConfigChannel+0x6ac>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	fa93 f3a3 	rbit	r3, r3
 80027ba:	613b      	str	r3, [r7, #16]
  return result;
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d104      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80027c6:	2320      	movs	r3, #32
 80027c8:	e006      	b.n	80027d8 <HAL_ADC_ConfigChannel+0x698>
 80027ca:	bf00      	nop
 80027cc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	fab3 f383 	clz	r3, r3
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	3301      	adds	r3, #1
 80027da:	f003 021f 	and.w	r2, r3, #31
 80027de:	4613      	mov	r3, r2
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	4413      	add	r3, r2
 80027e4:	3b1e      	subs	r3, #30
 80027e6:	051b      	lsls	r3, r3, #20
 80027e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027ec:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027f2:	4619      	mov	r1, r3
 80027f4:	f7ff f91b 	bl	8001a2e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4b3f      	ldr	r3, [pc, #252]	@ (80028fc <HAL_ADC_ConfigChannel+0x7bc>)
 80027fe:	4013      	ands	r3, r2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d071      	beq.n	80028e8 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002804:	483e      	ldr	r0, [pc, #248]	@ (8002900 <HAL_ADC_ConfigChannel+0x7c0>)
 8002806:	f7ff f827 	bl	8001858 <LL_ADC_GetCommonPathInternalCh>
 800280a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a3c      	ldr	r2, [pc, #240]	@ (8002904 <HAL_ADC_ConfigChannel+0x7c4>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d004      	beq.n	8002822 <HAL_ADC_ConfigChannel+0x6e2>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a3a      	ldr	r2, [pc, #232]	@ (8002908 <HAL_ADC_ConfigChannel+0x7c8>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d127      	bne.n	8002872 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002822:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002826:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d121      	bne.n	8002872 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002836:	d157      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002838:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800283c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002840:	4619      	mov	r1, r3
 8002842:	482f      	ldr	r0, [pc, #188]	@ (8002900 <HAL_ADC_ConfigChannel+0x7c0>)
 8002844:	f7fe fff5 	bl	8001832 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002848:	4b30      	ldr	r3, [pc, #192]	@ (800290c <HAL_ADC_ConfigChannel+0x7cc>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	099b      	lsrs	r3, r3, #6
 800284e:	4a30      	ldr	r2, [pc, #192]	@ (8002910 <HAL_ADC_ConfigChannel+0x7d0>)
 8002850:	fba2 2303 	umull	r2, r3, r2, r3
 8002854:	099b      	lsrs	r3, r3, #6
 8002856:	1c5a      	adds	r2, r3, #1
 8002858:	4613      	mov	r3, r2
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	4413      	add	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002862:	e002      	b.n	800286a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	3b01      	subs	r3, #1
 8002868:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1f9      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002870:	e03a      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a27      	ldr	r2, [pc, #156]	@ (8002914 <HAL_ADC_ConfigChannel+0x7d4>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d113      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800287c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002880:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10d      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a22      	ldr	r2, [pc, #136]	@ (8002918 <HAL_ADC_ConfigChannel+0x7d8>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d02a      	beq.n	80028e8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002892:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002896:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800289a:	4619      	mov	r1, r3
 800289c:	4818      	ldr	r0, [pc, #96]	@ (8002900 <HAL_ADC_ConfigChannel+0x7c0>)
 800289e:	f7fe ffc8 	bl	8001832 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028a2:	e021      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a1c      	ldr	r2, [pc, #112]	@ (800291c <HAL_ADC_ConfigChannel+0x7dc>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d11c      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d116      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a16      	ldr	r2, [pc, #88]	@ (8002918 <HAL_ADC_ConfigChannel+0x7d8>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d011      	beq.n	80028e8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80028cc:	4619      	mov	r1, r3
 80028ce:	480c      	ldr	r0, [pc, #48]	@ (8002900 <HAL_ADC_ConfigChannel+0x7c0>)
 80028d0:	f7fe ffaf 	bl	8001832 <LL_ADC_SetCommonPathInternalCh>
 80028d4:	e008      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028da:	f043 0220 	orr.w	r2, r3, #32
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80028f0:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	37d8      	adds	r7, #216	@ 0xd8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	80080000 	.word	0x80080000
 8002900:	50000300 	.word	0x50000300
 8002904:	c3210000 	.word	0xc3210000
 8002908:	90c00010 	.word	0x90c00010
 800290c:	20000020 	.word	0x20000020
 8002910:	053e2d63 	.word	0x053e2d63
 8002914:	c7520000 	.word	0xc7520000
 8002918:	50000100 	.word	0x50000100
 800291c:	cb840000 	.word	0xcb840000

08002920 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002928:	2300      	movs	r3, #0
 800292a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff f94f 	bl	8001bd4 <LL_ADC_IsEnabled>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d169      	bne.n	8002a10 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	4b36      	ldr	r3, [pc, #216]	@ (8002a1c <ADC_Enable+0xfc>)
 8002944:	4013      	ands	r3, r2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00d      	beq.n	8002966 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800294e:	f043 0210 	orr.w	r2, r3, #16
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800295a:	f043 0201 	orr.w	r2, r3, #1
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e055      	b.n	8002a12 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff f90a 	bl	8001b84 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002970:	482b      	ldr	r0, [pc, #172]	@ (8002a20 <ADC_Enable+0x100>)
 8002972:	f7fe ff71 	bl	8001858 <LL_ADC_GetCommonPathInternalCh>
 8002976:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002978:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800297c:	2b00      	cmp	r3, #0
 800297e:	d013      	beq.n	80029a8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002980:	4b28      	ldr	r3, [pc, #160]	@ (8002a24 <ADC_Enable+0x104>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	099b      	lsrs	r3, r3, #6
 8002986:	4a28      	ldr	r2, [pc, #160]	@ (8002a28 <ADC_Enable+0x108>)
 8002988:	fba2 2303 	umull	r2, r3, r2, r3
 800298c:	099b      	lsrs	r3, r3, #6
 800298e:	1c5a      	adds	r2, r3, #1
 8002990:	4613      	mov	r3, r2
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	4413      	add	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800299a:	e002      	b.n	80029a2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	3b01      	subs	r3, #1
 80029a0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1f9      	bne.n	800299c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80029a8:	f7fe ff02 	bl	80017b0 <HAL_GetTick>
 80029ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029ae:	e028      	b.n	8002a02 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff f90d 	bl	8001bd4 <LL_ADC_IsEnabled>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d104      	bne.n	80029ca <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff f8dd 	bl	8001b84 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029ca:	f7fe fef1 	bl	80017b0 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d914      	bls.n	8002a02 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d00d      	beq.n	8002a02 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ea:	f043 0210 	orr.w	r2, r3, #16
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029f6:	f043 0201 	orr.w	r2, r3, #1
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e007      	b.n	8002a12 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d1cf      	bne.n	80029b0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	8000003f 	.word	0x8000003f
 8002a20:	50000300 	.word	0x50000300
 8002a24:	20000020 	.word	0x20000020
 8002a28:	053e2d63 	.word	0x053e2d63

08002a2c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff f8de 	bl	8001bfa <LL_ADC_IsDisableOngoing>
 8002a3e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff f8c5 	bl	8001bd4 <LL_ADC_IsEnabled>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d047      	beq.n	8002ae0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d144      	bne.n	8002ae0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 030d 	and.w	r3, r3, #13
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d10c      	bne.n	8002a7e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff f89f 	bl	8001bac <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2203      	movs	r2, #3
 8002a74:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a76:	f7fe fe9b 	bl	80017b0 <HAL_GetTick>
 8002a7a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a7c:	e029      	b.n	8002ad2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a82:	f043 0210 	orr.w	r2, r3, #16
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a8e:	f043 0201 	orr.w	r2, r3, #1
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e023      	b.n	8002ae2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a9a:	f7fe fe89 	bl	80017b0 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d914      	bls.n	8002ad2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00d      	beq.n	8002ad2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aba:	f043 0210 	orr.w	r2, r3, #16
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ac6:	f043 0201 	orr.w	r2, r3, #1
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e007      	b.n	8002ae2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1dc      	bne.n	8002a9a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b084      	sub	sp, #16
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002afc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d14b      	bne.n	8002b9c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b08:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d021      	beq.n	8002b62 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fe ff44 	bl	80019b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d032      	beq.n	8002b94 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d12b      	bne.n	8002b94 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d11f      	bne.n	8002b94 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b58:	f043 0201 	orr.w	r2, r3, #1
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b60:	e018      	b.n	8002b94 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d111      	bne.n	8002b94 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d105      	bne.n	8002b94 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b8c:	f043 0201 	orr.w	r2, r3, #1
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f7ff fab5 	bl	8002104 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b9a:	e00e      	b.n	8002bba <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba0:	f003 0310 	and.w	r3, r3, #16
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d003      	beq.n	8002bb0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f7ff fabf 	bl	800212c <HAL_ADC_ErrorCallback>
}
 8002bae:	e004      	b.n	8002bba <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	4798      	blx	r3
}
 8002bba:	bf00      	nop
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b084      	sub	sp, #16
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bce:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f7ff faa1 	bl	8002118 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bd6:	bf00      	nop
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b084      	sub	sp, #16
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bea:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bfc:	f043 0204 	orr.w	r2, r3, #4
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f7ff fa91 	bl	800212c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c0a:	bf00      	nop
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <LL_ADC_IsEnabled>:
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d101      	bne.n	8002c2a <LL_ADC_IsEnabled+0x18>
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <LL_ADC_IsEnabled+0x1a>
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <LL_ADC_StartCalibration>:
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002c4a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002c54:	4313      	orrs	r3, r2
 8002c56:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	609a      	str	r2, [r3, #8]
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <LL_ADC_IsCalibrationOnGoing>:
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002c7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c7e:	d101      	bne.n	8002c84 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002c80:	2301      	movs	r3, #1
 8002c82:	e000      	b.n	8002c86 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <LL_ADC_REG_IsConversionOngoing>:
{
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 0304 	and.w	r3, r3, #4
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d101      	bne.n	8002caa <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d101      	bne.n	8002cd4 <HAL_ADCEx_Calibration_Start+0x1c>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	e04d      	b.n	8002d70 <HAL_ADCEx_Calibration_Start+0xb8>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f7ff fea5 	bl	8002a2c <ADC_Disable>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d136      	bne.n	8002d5a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002cf4:	f023 0302 	bic.w	r3, r3, #2
 8002cf8:	f043 0202 	orr.w	r2, r3, #2
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6839      	ldr	r1, [r7, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff ff96 	bl	8002c38 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002d0c:	e014      	b.n	8002d38 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	3301      	adds	r3, #1
 8002d12:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	4a18      	ldr	r2, [pc, #96]	@ (8002d78 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d90d      	bls.n	8002d38 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d20:	f023 0312 	bic.w	r3, r3, #18
 8002d24:	f043 0210 	orr.w	r2, r3, #16
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e01b      	b.n	8002d70 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff ff94 	bl	8002c6a <LL_ADC_IsCalibrationOnGoing>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1e2      	bne.n	8002d0e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d4c:	f023 0303 	bic.w	r3, r3, #3
 8002d50:	f043 0201 	orr.w	r2, r3, #1
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002d58:	e005      	b.n	8002d66 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d5e:	f043 0210 	orr.w	r2, r3, #16
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	0004de01 	.word	0x0004de01

08002d7c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002d7c:	b590      	push	{r4, r7, lr}
 8002d7e:	b0a1      	sub	sp, #132	@ 0x84
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d101      	bne.n	8002d9a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d96:	2302      	movs	r3, #2
 8002d98:	e08b      	b.n	8002eb2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002da2:	2300      	movs	r3, #0
 8002da4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002da6:	2300      	movs	r3, #0
 8002da8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002db2:	d102      	bne.n	8002dba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002db4:	4b41      	ldr	r3, [pc, #260]	@ (8002ebc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002db6:	60bb      	str	r3, [r7, #8]
 8002db8:	e001      	b.n	8002dbe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10b      	bne.n	8002ddc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc8:	f043 0220 	orr.w	r2, r3, #32
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e06a      	b.n	8002eb2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff ff57 	bl	8002c92 <LL_ADC_REG_IsConversionOngoing>
 8002de4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff ff51 	bl	8002c92 <LL_ADC_REG_IsConversionOngoing>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d14c      	bne.n	8002e90 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002df6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d149      	bne.n	8002e90 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002dfc:	4b30      	ldr	r3, [pc, #192]	@ (8002ec0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002dfe:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d028      	beq.n	8002e5a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002e08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	6859      	ldr	r1, [r3, #4]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002e1a:	035b      	lsls	r3, r3, #13
 8002e1c:	430b      	orrs	r3, r1
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e22:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e24:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002e28:	f7ff fef3 	bl	8002c12 <LL_ADC_IsEnabled>
 8002e2c:	4604      	mov	r4, r0
 8002e2e:	4823      	ldr	r0, [pc, #140]	@ (8002ebc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002e30:	f7ff feef 	bl	8002c12 <LL_ADC_IsEnabled>
 8002e34:	4603      	mov	r3, r0
 8002e36:	4323      	orrs	r3, r4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d133      	bne.n	8002ea4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002e44:	f023 030f 	bic.w	r3, r3, #15
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	6811      	ldr	r1, [r2, #0]
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	6892      	ldr	r2, [r2, #8]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	431a      	orrs	r2, r3
 8002e54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e56:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e58:	e024      	b.n	8002ea4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e64:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e66:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002e6a:	f7ff fed2 	bl	8002c12 <LL_ADC_IsEnabled>
 8002e6e:	4604      	mov	r4, r0
 8002e70:	4812      	ldr	r0, [pc, #72]	@ (8002ebc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002e72:	f7ff fece 	bl	8002c12 <LL_ADC_IsEnabled>
 8002e76:	4603      	mov	r3, r0
 8002e78:	4323      	orrs	r3, r4
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d112      	bne.n	8002ea4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002e7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002e86:	f023 030f 	bic.w	r3, r3, #15
 8002e8a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002e8c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e8e:	e009      	b.n	8002ea4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e94:	f043 0220 	orr.w	r2, r3, #32
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002ea2:	e000      	b.n	8002ea6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ea4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002eae:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3784      	adds	r7, #132	@ 0x84
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd90      	pop	{r4, r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	50000100 	.word	0x50000100
 8002ec0:	50000300 	.word	0x50000300

08002ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8002f08 <__NVIC_SetPriorityGrouping+0x44>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002eec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ef0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ef6:	4a04      	ldr	r2, [pc, #16]	@ (8002f08 <__NVIC_SetPriorityGrouping+0x44>)
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	60d3      	str	r3, [r2, #12]
}
 8002efc:	bf00      	nop
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	e000ed00 	.word	0xe000ed00

08002f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f10:	4b04      	ldr	r3, [pc, #16]	@ (8002f24 <__NVIC_GetPriorityGrouping+0x18>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	0a1b      	lsrs	r3, r3, #8
 8002f16:	f003 0307 	and.w	r3, r3, #7
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	e000ed00 	.word	0xe000ed00

08002f28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	db0b      	blt.n	8002f52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f3a:	79fb      	ldrb	r3, [r7, #7]
 8002f3c:	f003 021f 	and.w	r2, r3, #31
 8002f40:	4907      	ldr	r1, [pc, #28]	@ (8002f60 <__NVIC_EnableIRQ+0x38>)
 8002f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f46:	095b      	lsrs	r3, r3, #5
 8002f48:	2001      	movs	r0, #1
 8002f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	e000e100 	.word	0xe000e100

08002f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	6039      	str	r1, [r7, #0]
 8002f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	db0a      	blt.n	8002f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	490c      	ldr	r1, [pc, #48]	@ (8002fb0 <__NVIC_SetPriority+0x4c>)
 8002f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f82:	0112      	lsls	r2, r2, #4
 8002f84:	b2d2      	uxtb	r2, r2
 8002f86:	440b      	add	r3, r1
 8002f88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f8c:	e00a      	b.n	8002fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	4908      	ldr	r1, [pc, #32]	@ (8002fb4 <__NVIC_SetPriority+0x50>)
 8002f94:	79fb      	ldrb	r3, [r7, #7]
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	3b04      	subs	r3, #4
 8002f9c:	0112      	lsls	r2, r2, #4
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	761a      	strb	r2, [r3, #24]
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	e000e100 	.word	0xe000e100
 8002fb4:	e000ed00 	.word	0xe000ed00

08002fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b089      	sub	sp, #36	@ 0x24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	f1c3 0307 	rsb	r3, r3, #7
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	bf28      	it	cs
 8002fd6:	2304      	movcs	r3, #4
 8002fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	3304      	adds	r3, #4
 8002fde:	2b06      	cmp	r3, #6
 8002fe0:	d902      	bls.n	8002fe8 <NVIC_EncodePriority+0x30>
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	3b03      	subs	r3, #3
 8002fe6:	e000      	b.n	8002fea <NVIC_EncodePriority+0x32>
 8002fe8:	2300      	movs	r3, #0
 8002fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fec:	f04f 32ff 	mov.w	r2, #4294967295
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	43da      	mvns	r2, r3
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	401a      	ands	r2, r3
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003000:	f04f 31ff 	mov.w	r1, #4294967295
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	fa01 f303 	lsl.w	r3, r1, r3
 800300a:	43d9      	mvns	r1, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003010:	4313      	orrs	r3, r2
         );
}
 8003012:	4618      	mov	r0, r3
 8003014:	3724      	adds	r7, #36	@ 0x24
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
	...

08003020 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3b01      	subs	r3, #1
 800302c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003030:	d301      	bcc.n	8003036 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003032:	2301      	movs	r3, #1
 8003034:	e00f      	b.n	8003056 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003036:	4a0a      	ldr	r2, [pc, #40]	@ (8003060 <SysTick_Config+0x40>)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3b01      	subs	r3, #1
 800303c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800303e:	210f      	movs	r1, #15
 8003040:	f04f 30ff 	mov.w	r0, #4294967295
 8003044:	f7ff ff8e 	bl	8002f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003048:	4b05      	ldr	r3, [pc, #20]	@ (8003060 <SysTick_Config+0x40>)
 800304a:	2200      	movs	r2, #0
 800304c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800304e:	4b04      	ldr	r3, [pc, #16]	@ (8003060 <SysTick_Config+0x40>)
 8003050:	2207      	movs	r2, #7
 8003052:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	e000e010 	.word	0xe000e010

08003064 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f7ff ff29 	bl	8002ec4 <__NVIC_SetPriorityGrouping>
}
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b086      	sub	sp, #24
 800307e:	af00      	add	r7, sp, #0
 8003080:	4603      	mov	r3, r0
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	607a      	str	r2, [r7, #4]
 8003086:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003088:	f7ff ff40 	bl	8002f0c <__NVIC_GetPriorityGrouping>
 800308c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	68b9      	ldr	r1, [r7, #8]
 8003092:	6978      	ldr	r0, [r7, #20]
 8003094:	f7ff ff90 	bl	8002fb8 <NVIC_EncodePriority>
 8003098:	4602      	mov	r2, r0
 800309a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800309e:	4611      	mov	r1, r2
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff ff5f 	bl	8002f64 <__NVIC_SetPriority>
}
 80030a6:	bf00      	nop
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b082      	sub	sp, #8
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	4603      	mov	r3, r0
 80030b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff ff33 	bl	8002f28 <__NVIC_EnableIRQ>
}
 80030c2:	bf00      	nop
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b082      	sub	sp, #8
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7ff ffa4 	bl	8003020 <SysTick_Config>
 80030d8:	4603      	mov	r3, r0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
	...

080030e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e08d      	b.n	8003212 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	4b47      	ldr	r3, [pc, #284]	@ (800321c <HAL_DMA_Init+0x138>)
 80030fe:	429a      	cmp	r2, r3
 8003100:	d80f      	bhi.n	8003122 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	461a      	mov	r2, r3
 8003108:	4b45      	ldr	r3, [pc, #276]	@ (8003220 <HAL_DMA_Init+0x13c>)
 800310a:	4413      	add	r3, r2
 800310c:	4a45      	ldr	r2, [pc, #276]	@ (8003224 <HAL_DMA_Init+0x140>)
 800310e:	fba2 2303 	umull	r2, r3, r2, r3
 8003112:	091b      	lsrs	r3, r3, #4
 8003114:	009a      	lsls	r2, r3, #2
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a42      	ldr	r2, [pc, #264]	@ (8003228 <HAL_DMA_Init+0x144>)
 800311e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003120:	e00e      	b.n	8003140 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	461a      	mov	r2, r3
 8003128:	4b40      	ldr	r3, [pc, #256]	@ (800322c <HAL_DMA_Init+0x148>)
 800312a:	4413      	add	r3, r2
 800312c:	4a3d      	ldr	r2, [pc, #244]	@ (8003224 <HAL_DMA_Init+0x140>)
 800312e:	fba2 2303 	umull	r2, r3, r2, r3
 8003132:	091b      	lsrs	r3, r3, #4
 8003134:	009a      	lsls	r2, r3, #2
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a3c      	ldr	r2, [pc, #240]	@ (8003230 <HAL_DMA_Init+0x14c>)
 800313e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2202      	movs	r2, #2
 8003144:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003156:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800315a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003164:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003170:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800317c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	4313      	orrs	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f9b6 	bl	8003504 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031a0:	d102      	bne.n	80031a8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031b0:	b2d2      	uxtb	r2, r2
 80031b2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80031bc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d010      	beq.n	80031e8 <HAL_DMA_Init+0x104>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d80c      	bhi.n	80031e8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f9d6 	bl	8003580 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80031e4:	605a      	str	r2, [r3, #4]
 80031e6:	e008      	b.n	80031fa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	40020407 	.word	0x40020407
 8003220:	bffdfff8 	.word	0xbffdfff8
 8003224:	cccccccd 	.word	0xcccccccd
 8003228:	40020000 	.word	0x40020000
 800322c:	bffdfbf8 	.word	0xbffdfbf8
 8003230:	40020400 	.word	0x40020400

08003234 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
 8003240:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003242:	2300      	movs	r3, #0
 8003244:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <HAL_DMA_Start_IT+0x20>
 8003250:	2302      	movs	r3, #2
 8003252:	e066      	b.n	8003322 <HAL_DMA_Start_IT+0xee>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b01      	cmp	r3, #1
 8003266:	d155      	bne.n	8003314 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2202      	movs	r2, #2
 800326c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 0201 	bic.w	r2, r2, #1
 8003284:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	68b9      	ldr	r1, [r7, #8]
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 f8fb 	bl	8003488 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003296:	2b00      	cmp	r3, #0
 8003298:	d008      	beq.n	80032ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f042 020e 	orr.w	r2, r2, #14
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	e00f      	b.n	80032cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0204 	bic.w	r2, r2, #4
 80032ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 020a 	orr.w	r2, r2, #10
 80032ca:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d007      	beq.n	80032ea <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032e8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d007      	beq.n	8003302 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003300:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f042 0201 	orr.w	r2, r2, #1
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	e005      	b.n	8003320 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800331c:	2302      	movs	r3, #2
 800331e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003320:	7dfb      	ldrb	r3, [r7, #23]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b084      	sub	sp, #16
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003346:	f003 031f 	and.w	r3, r3, #31
 800334a:	2204      	movs	r2, #4
 800334c:	409a      	lsls	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	4013      	ands	r3, r2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d026      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x7a>
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b00      	cmp	r3, #0
 800335e:	d021      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0320 	and.w	r3, r3, #32
 800336a:	2b00      	cmp	r3, #0
 800336c:	d107      	bne.n	800337e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0204 	bic.w	r2, r2, #4
 800337c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003382:	f003 021f 	and.w	r2, r3, #31
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338a:	2104      	movs	r1, #4
 800338c:	fa01 f202 	lsl.w	r2, r1, r2
 8003390:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003396:	2b00      	cmp	r3, #0
 8003398:	d071      	beq.n	800347e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80033a2:	e06c      	b.n	800347e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033a8:	f003 031f 	and.w	r3, r3, #31
 80033ac:	2202      	movs	r2, #2
 80033ae:	409a      	lsls	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	4013      	ands	r3, r2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d02e      	beq.n	8003416 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d029      	beq.n	8003416 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0320 	and.w	r3, r3, #32
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10b      	bne.n	80033e8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 020a 	bic.w	r2, r2, #10
 80033de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ec:	f003 021f 	and.w	r2, r3, #31
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f4:	2102      	movs	r1, #2
 80033f6:	fa01 f202 	lsl.w	r2, r1, r2
 80033fa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003408:	2b00      	cmp	r3, #0
 800340a:	d038      	beq.n	800347e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003414:	e033      	b.n	800347e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800341a:	f003 031f 	and.w	r3, r3, #31
 800341e:	2208      	movs	r2, #8
 8003420:	409a      	lsls	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	4013      	ands	r3, r2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d02a      	beq.n	8003480 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	f003 0308 	and.w	r3, r3, #8
 8003430:	2b00      	cmp	r3, #0
 8003432:	d025      	beq.n	8003480 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 020e 	bic.w	r2, r2, #14
 8003442:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003448:	f003 021f 	and.w	r2, r3, #31
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003450:	2101      	movs	r1, #1
 8003452:	fa01 f202 	lsl.w	r2, r1, r2
 8003456:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003472:	2b00      	cmp	r3, #0
 8003474:	d004      	beq.n	8003480 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800347e:	bf00      	nop
 8003480:	bf00      	nop
}
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
 8003494:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800349e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d004      	beq.n	80034b2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80034b0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034b6:	f003 021f 	and.w	r2, r3, #31
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034be:	2101      	movs	r1, #1
 80034c0:	fa01 f202 	lsl.w	r2, r1, r2
 80034c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	2b10      	cmp	r3, #16
 80034d4:	d108      	bne.n	80034e8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034e6:	e007      	b.n	80034f8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	60da      	str	r2, [r3, #12]
}
 80034f8:	bf00      	nop
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003504:	b480      	push	{r7}
 8003506:	b087      	sub	sp, #28
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	461a      	mov	r2, r3
 8003512:	4b16      	ldr	r3, [pc, #88]	@ (800356c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003514:	429a      	cmp	r2, r3
 8003516:	d802      	bhi.n	800351e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003518:	4b15      	ldr	r3, [pc, #84]	@ (8003570 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	e001      	b.n	8003522 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800351e:	4b15      	ldr	r3, [pc, #84]	@ (8003574 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003520:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	b2db      	uxtb	r3, r3
 800352c:	3b08      	subs	r3, #8
 800352e:	4a12      	ldr	r2, [pc, #72]	@ (8003578 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003530:	fba2 2303 	umull	r2, r3, r2, r3
 8003534:	091b      	lsrs	r3, r3, #4
 8003536:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800353c:	089b      	lsrs	r3, r3, #2
 800353e:	009a      	lsls	r2, r3, #2
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	4413      	add	r3, r2
 8003544:	461a      	mov	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a0b      	ldr	r2, [pc, #44]	@ (800357c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800354e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f003 031f 	and.w	r3, r3, #31
 8003556:	2201      	movs	r2, #1
 8003558:	409a      	lsls	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800355e:	bf00      	nop
 8003560:	371c      	adds	r7, #28
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	40020407 	.word	0x40020407
 8003570:	40020800 	.word	0x40020800
 8003574:	40020820 	.word	0x40020820
 8003578:	cccccccd 	.word	0xcccccccd
 800357c:	40020880 	.word	0x40020880

08003580 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	b2db      	uxtb	r3, r3
 800358e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	4b0b      	ldr	r3, [pc, #44]	@ (80035c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003594:	4413      	add	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	461a      	mov	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a08      	ldr	r2, [pc, #32]	@ (80035c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80035a2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	3b01      	subs	r3, #1
 80035a8:	f003 031f 	and.w	r3, r3, #31
 80035ac:	2201      	movs	r2, #1
 80035ae:	409a      	lsls	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80035b4:	bf00      	nop
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	1000823f 	.word	0x1000823f
 80035c4:	40020940 	.word	0x40020940

080035c8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e147      	b.n	800386a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d106      	bne.n	80035f4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7fd feea 	bl	80013c8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	699a      	ldr	r2, [r3, #24]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0210 	bic.w	r2, r2, #16
 8003602:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003604:	f7fe f8d4 	bl	80017b0 <HAL_GetTick>
 8003608:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800360a:	e012      	b.n	8003632 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800360c:	f7fe f8d0 	bl	80017b0 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b0a      	cmp	r3, #10
 8003618:	d90b      	bls.n	8003632 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800361e:	f043 0201 	orr.w	r2, r3, #1
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2203      	movs	r2, #3
 800362a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e11b      	b.n	800386a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	f003 0308 	and.w	r3, r3, #8
 800363c:	2b08      	cmp	r3, #8
 800363e:	d0e5      	beq.n	800360c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	699a      	ldr	r2, [r3, #24]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0201 	orr.w	r2, r2, #1
 800364e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003650:	f7fe f8ae 	bl	80017b0 <HAL_GetTick>
 8003654:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003656:	e012      	b.n	800367e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003658:	f7fe f8aa 	bl	80017b0 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b0a      	cmp	r3, #10
 8003664:	d90b      	bls.n	800367e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800366a:	f043 0201 	orr.w	r2, r3, #1
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2203      	movs	r2, #3
 8003676:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e0f5      	b.n	800386a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0e5      	beq.n	8003658 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699a      	ldr	r2, [r3, #24]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0202 	orr.w	r2, r2, #2
 800369a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a74      	ldr	r2, [pc, #464]	@ (8003874 <HAL_FDCAN_Init+0x2ac>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d103      	bne.n	80036ae <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80036a6:	4a74      	ldr	r2, [pc, #464]	@ (8003878 <HAL_FDCAN_Init+0x2b0>)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	7c1b      	ldrb	r3, [r3, #16]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d108      	bne.n	80036c8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	699a      	ldr	r2, [r3, #24]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036c4:	619a      	str	r2, [r3, #24]
 80036c6:	e007      	b.n	80036d8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699a      	ldr	r2, [r3, #24]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036d6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	7c5b      	ldrb	r3, [r3, #17]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d108      	bne.n	80036f2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699a      	ldr	r2, [r3, #24]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036ee:	619a      	str	r2, [r3, #24]
 80036f0:	e007      	b.n	8003702 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	699a      	ldr	r2, [r3, #24]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003700:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	7c9b      	ldrb	r3, [r3, #18]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d108      	bne.n	800371c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	699a      	ldr	r2, [r3, #24]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003718:	619a      	str	r2, [r3, #24]
 800371a:	e007      	b.n	800372c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699a      	ldr	r2, [r3, #24]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800372a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689a      	ldr	r2, [r3, #8]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	699a      	ldr	r2, [r3, #24]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003750:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	691a      	ldr	r2, [r3, #16]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0210 	bic.w	r2, r2, #16
 8003760:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d108      	bne.n	800377c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	699a      	ldr	r2, [r3, #24]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f042 0204 	orr.w	r2, r2, #4
 8003778:	619a      	str	r2, [r3, #24]
 800377a:	e02c      	b.n	80037d6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d028      	beq.n	80037d6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	2b02      	cmp	r3, #2
 800378a:	d01c      	beq.n	80037c6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	699a      	ldr	r2, [r3, #24]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800379a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	691a      	ldr	r2, [r3, #16]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 0210 	orr.w	r2, r2, #16
 80037aa:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	2b03      	cmp	r3, #3
 80037b2:	d110      	bne.n	80037d6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	699a      	ldr	r2, [r3, #24]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0220 	orr.w	r2, r2, #32
 80037c2:	619a      	str	r2, [r3, #24]
 80037c4:	e007      	b.n	80037d6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	699a      	ldr	r2, [r3, #24]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 0220 	orr.w	r2, r2, #32
 80037d4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	3b01      	subs	r3, #1
 80037dc:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80037e6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80037ee:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	3b01      	subs	r3, #1
 80037f8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80037fe:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003800:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800380a:	d115      	bne.n	8003838 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003810:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003816:	3b01      	subs	r3, #1
 8003818:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800381a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003820:	3b01      	subs	r3, #1
 8003822:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003824:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382c:	3b01      	subs	r3, #1
 800382e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003834:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003836:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	430a      	orrs	r2, r1
 800384a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 fc52 	bl	80040f8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40006400 	.word	0x40006400
 8003878:	40006500 	.word	0x40006500

0800387c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 800387c:	b480      	push	{r7}
 800387e:	b087      	sub	sp, #28
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800388c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800388e:	7dfb      	ldrb	r3, [r7, #23]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d002      	beq.n	800389a <HAL_FDCAN_ConfigFilter+0x1e>
 8003894:	7dfb      	ldrb	r3, [r7, #23]
 8003896:	2b02      	cmp	r3, #2
 8003898:	d13d      	bne.n	8003916 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d119      	bne.n	80038d6 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80038ae:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80038b6:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80038bc:	4313      	orrs	r3, r2
 80038be:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4413      	add	r3, r2
 80038cc:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	e01d      	b.n	8003912 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	075a      	lsls	r2, r3, #29
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	079a      	lsls	r2, r3, #30
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	4413      	add	r3, r2
 80038fe:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	3304      	adds	r3, #4
 800390a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8003912:	2300      	movs	r3, #0
 8003914:	e006      	b.n	8003924 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800391a:	f043 0202 	orr.w	r2, r3, #2
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
  }
}
 8003924:	4618      	mov	r0, r3
 8003926:	371c      	adds	r7, #28
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
 800393c:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b01      	cmp	r3, #1
 8003948:	d116      	bne.n	8003978 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003952:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	011a      	lsls	r2, r3, #4
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	431a      	orrs	r2, r3
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	431a      	orrs	r2, r3
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	431a      	orrs	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	430a      	orrs	r2, r1
 8003970:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8003974:	2300      	movs	r3, #0
 8003976:	e006      	b.n	8003986 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800397c:	f043 0204 	orr.w	r2, r3, #4
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
  }
}
 8003986:	4618      	mov	r0, r3
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003992:	b480      	push	{r7}
 8003994:	b083      	sub	sp, #12
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d110      	bne.n	80039c8 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2202      	movs	r2, #2
 80039aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	699a      	ldr	r2, [r3, #24]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 0201 	bic.w	r2, r2, #1
 80039bc:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80039c4:	2300      	movs	r3, #0
 80039c6:	e006      	b.n	80039d6 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039cc:	f043 0204 	orr.w	r2, r3, #4
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
  }
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
	...

080039e4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b08b      	sub	sp, #44	@ 0x2c
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
 80039f0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80039f2:	2300      	movs	r3, #0
 80039f4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80039fc:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80039fe:	7efb      	ldrb	r3, [r7, #27]
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	f040 80e8 	bne.w	8003bd6 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	2b40      	cmp	r3, #64	@ 0x40
 8003a0a:	d137      	bne.n	8003a7c <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a14:	f003 030f 	and.w	r3, r3, #15
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d107      	bne.n	8003a2c <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a20:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e0db      	b.n	8003be4 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a3c:	d10a      	bne.n	8003a54 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a4e:	d101      	bne.n	8003a54 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003a50:	2301      	movs	r3, #1
 8003a52:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a5c:	0a1b      	lsrs	r3, r3, #8
 8003a5e:	f003 0303 	and.w	r3, r3, #3
 8003a62:	69fa      	ldr	r2, [r7, #28]
 8003a64:	4413      	add	r3, r2
 8003a66:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8003a6c:	69fa      	ldr	r2, [r7, #28]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	4413      	add	r3, r2
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	440b      	add	r3, r1
 8003a78:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a7a:	e036      	b.n	8003aea <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a84:	f003 030f 	and.w	r3, r3, #15
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d107      	bne.n	8003a9c <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a90:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e0a3      	b.n	8003be4 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003aa4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003aa8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003aac:	d10a      	bne.n	8003ac4 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003abe:	d101      	bne.n	8003ac4 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003acc:	0a1b      	lsrs	r3, r3, #8
 8003ace:	f003 0303 	and.w	r3, r3, #3
 8003ad2:	69fa      	ldr	r2, [r7, #28]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8003adc:	69fa      	ldr	r2, [r7, #28]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	4413      	add	r3, r2
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	440b      	add	r3, r1
 8003ae8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d107      	bne.n	8003b0e <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8003afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	0c9b      	lsrs	r3, r3, #18
 8003b04:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	e005      	b.n	8003b1a <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b34:	3304      	adds	r3, #4
 8003b36:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8003b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	0c1b      	lsrs	r3, r3, #16
 8003b48:	f003 020f 	and.w	r2, r3, #15
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8003b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	0e1b      	lsrs	r3, r3, #24
 8003b6e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8003b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	0fda      	lsrs	r2, r3, #31
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b82:	3304      	adds	r3, #4
 8003b84:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b88:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	623b      	str	r3, [r7, #32]
 8003b8e:	e00a      	b.n	8003ba6 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	441a      	add	r2, r3
 8003b96:	6839      	ldr	r1, [r7, #0]
 8003b98:	6a3b      	ldr	r3, [r7, #32]
 8003b9a:	440b      	add	r3, r1
 8003b9c:	7812      	ldrb	r2, [r2, #0]
 8003b9e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003ba0:	6a3b      	ldr	r3, [r7, #32]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	623b      	str	r3, [r7, #32]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	4a11      	ldr	r2, [pc, #68]	@ (8003bf0 <HAL_FDCAN_GetRxMessage+0x20c>)
 8003bac:	5cd3      	ldrb	r3, [r2, r3]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	6a3b      	ldr	r3, [r7, #32]
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d3ec      	bcc.n	8003b90 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	2b40      	cmp	r3, #64	@ 0x40
 8003bba:	d105      	bne.n	8003bc8 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	69fa      	ldr	r2, [r7, #28]
 8003bc2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8003bc6:	e004      	b.n	8003bd2 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	69fa      	ldr	r2, [r7, #28]
 8003bce:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	e006      	b.n	8003be4 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bda:	f043 0208 	orr.w	r2, r3, #8
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
  }
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	372c      	adds	r7, #44	@ 0x2c
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	08007bf8 	.word	0x08007bf8

08003bf4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003c06:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003c08:	7dfb      	ldrb	r3, [r7, #23]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d003      	beq.n	8003c16 <HAL_FDCAN_ActivateNotification+0x22>
 8003c0e:	7dfb      	ldrb	r3, [r7, #23]
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	f040 80c8 	bne.w	8003da6 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c1c:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d004      	beq.n	8003c32 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d03b      	beq.n	8003caa <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d004      	beq.n	8003c46 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d031      	beq.n	8003caa <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d004      	beq.n	8003c5a <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	f003 0304 	and.w	r3, r3, #4
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d027      	beq.n	8003caa <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d004      	beq.n	8003c6e <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d01d      	beq.n	8003caa <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d004      	beq.n	8003c82 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	f003 0310 	and.w	r3, r3, #16
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d013      	beq.n	8003caa <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d004      	beq.n	8003c96 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	f003 0320 	and.w	r3, r3, #32
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d009      	beq.n	8003caa <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00c      	beq.n	8003cba <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d107      	bne.n	8003cba <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f042 0201 	orr.w	r2, r2, #1
 8003cb8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d004      	beq.n	8003cce <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d13b      	bne.n	8003d46 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d004      	beq.n	8003ce2 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d131      	bne.n	8003d46 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d004      	beq.n	8003cf6 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f003 0304 	and.w	r3, r3, #4
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d127      	bne.n	8003d46 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d004      	beq.n	8003d0a <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d11d      	bne.n	8003d46 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d004      	beq.n	8003d1e <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f003 0310 	and.w	r3, r3, #16
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d113      	bne.n	8003d46 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d004      	beq.n	8003d32 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	f003 0320 	and.w	r3, r3, #32
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d109      	bne.n	8003d46 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00c      	beq.n	8003d56 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d007      	beq.n	8003d56 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f042 0202 	orr.w	r2, r2, #2
 8003d54:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d009      	beq.n	8003d74 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d009      	beq.n	8003d92 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8003da2:	2300      	movs	r3, #0
 8003da4:	e006      	b.n	8003db4 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003daa:	f043 0202 	orr.w	r2, r3, #2
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
  }
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	371c      	adds	r7, #28
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b08c      	sub	sp, #48	@ 0x30
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dce:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8003dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ddc:	4013      	ands	r3, r2
 8003dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003de6:	f003 0307 	and.w	r3, r3, #7
 8003dea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003df2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003df4:	4013      	ands	r3, r2
 8003df6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dfe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e02:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e16:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8003e1a:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e22:	6a3a      	ldr	r2, [r7, #32]
 8003e24:	4013      	ands	r3, r2
 8003e26:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e2e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003e32:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e3a:	69fa      	ldr	r2, [r7, #28]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e46:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e4e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	099b      	lsrs	r3, r3, #6
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00c      	beq.n	8003e76 <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	099b      	lsrs	r3, r3, #6
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d006      	beq.n	8003e76 <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2240      	movs	r2, #64	@ 0x40
 8003e6e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f922 	bl	80040ba <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	0a1b      	lsrs	r3, r3, #8
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d01a      	beq.n	8003eb8 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	0a1b      	lsrs	r3, r3, #8
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d014      	beq.n	8003eb8 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003e96:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003eae:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003eb0:	6939      	ldr	r1, [r7, #16]
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f8e2 	bl	800407c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d007      	beq.n	8003ece <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ec4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003ec6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 f8ac 	bl	8004026 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d007      	beq.n	8003ee4 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003eda:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003edc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7fc fa34 	bl	800034c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d007      	beq.n	8003efa <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ef0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003ef2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 f8a1 	bl	800403c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	0a5b      	lsrs	r3, r3, #9
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00d      	beq.n	8003f22 <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	0a5b      	lsrs	r3, r3, #9
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d007      	beq.n	8003f22 <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f1a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 f898 	bl	8004052 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	09db      	lsrs	r3, r3, #7
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d019      	beq.n	8003f62 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	09db      	lsrs	r3, r3, #7
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d013      	beq.n	8003f62 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003f42:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2280      	movs	r2, #128	@ 0x80
 8003f58:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003f5a:	68f9      	ldr	r1, [r7, #12]
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 f882 	bl	8004066 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	0b5b      	lsrs	r3, r3, #13
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00d      	beq.n	8003f8a <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	0b5b      	lsrs	r3, r3, #13
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d007      	beq.n	8003f8a <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f82:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 f884 	bl	8004092 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	0bdb      	lsrs	r3, r3, #15
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00d      	beq.n	8003fb2 <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	0bdb      	lsrs	r3, r3, #15
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d007      	beq.n	8003fb2 <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003faa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 f87a 	bl	80040a6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	0b9b      	lsrs	r3, r3, #14
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d010      	beq.n	8003fe0 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	0b9b      	lsrs	r3, r3, #14
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003fd2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fd8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d007      	beq.n	8003ff6 <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	69fa      	ldr	r2, [r7, #28]
 8003fec:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003fee:	69f9      	ldr	r1, [r7, #28]
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f876 	bl	80040e2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003ff6:	6a3b      	ldr	r3, [r7, #32]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d009      	beq.n	8004010 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6a3a      	ldr	r2, [r7, #32]
 8004002:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004008:	6a3b      	ldr	r3, [r7, #32]
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004014:	2b00      	cmp	r3, #0
 8004016:	d002      	beq.n	800401e <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 f858 	bl	80040ce <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800401e:	bf00      	nop
 8004020:	3730      	adds	r7, #48	@ 0x30
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
 800402e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004046:	bf00      	nop
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004052:	b480      	push	{r7}
 8004054:	b083      	sub	sp, #12
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800405a:	bf00      	nop
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004066:	b480      	push	{r7}
 8004068:	b083      	sub	sp, #12
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
 800406e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004086:	bf00      	nop
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004092:	b480      	push	{r7}
 8004094:	b083      	sub	sp, #12
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr

080040a6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b083      	sub	sp, #12
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80040ae:	bf00      	nop
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b083      	sub	sp, #12
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80040c2:	bf00      	nop
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b083      	sub	sp, #12
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80040e2:	b480      	push	{r7}
 80040e4:	b083      	sub	sp, #12
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
 80040ea:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004100:	4b27      	ldr	r3, [pc, #156]	@ (80041a0 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8004102:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68ba      	ldr	r2, [r7, #8]
 8004108:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004112:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800411a:	041a      	lsls	r2, r3, #16
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	430a      	orrs	r2, r1
 8004122:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004138:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004140:	061a      	lsls	r2, r3, #24
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	e005      	b.n	8004186 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	3304      	adds	r3, #4
 8004184:	60fb      	str	r3, [r7, #12]
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	429a      	cmp	r2, r3
 8004190:	d3f3      	bcc.n	800417a <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8004192:	bf00      	nop
 8004194:	bf00      	nop
 8004196:	3714      	adds	r7, #20
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	4000a400 	.word	0x4000a400

080041a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b087      	sub	sp, #28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80041ae:	2300      	movs	r3, #0
 80041b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80041b2:	e15a      	b.n	800446a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	2101      	movs	r1, #1
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	fa01 f303 	lsl.w	r3, r1, r3
 80041c0:	4013      	ands	r3, r2
 80041c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f000 814c 	beq.w	8004464 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f003 0303 	and.w	r3, r3, #3
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d005      	beq.n	80041e4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d130      	bne.n	8004246 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	2203      	movs	r2, #3
 80041f0:	fa02 f303 	lsl.w	r3, r2, r3
 80041f4:	43db      	mvns	r3, r3
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	4013      	ands	r3, r2
 80041fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	68da      	ldr	r2, [r3, #12]
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	fa02 f303 	lsl.w	r3, r2, r3
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4313      	orrs	r3, r2
 800420c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800421a:	2201      	movs	r2, #1
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	fa02 f303 	lsl.w	r3, r2, r3
 8004222:	43db      	mvns	r3, r3
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	4013      	ands	r3, r2
 8004228:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	091b      	lsrs	r3, r3, #4
 8004230:	f003 0201 	and.w	r2, r3, #1
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	fa02 f303 	lsl.w	r3, r2, r3
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	4313      	orrs	r3, r2
 800423e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f003 0303 	and.w	r3, r3, #3
 800424e:	2b03      	cmp	r3, #3
 8004250:	d017      	beq.n	8004282 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	005b      	lsls	r3, r3, #1
 800425c:	2203      	movs	r2, #3
 800425e:	fa02 f303 	lsl.w	r3, r2, r3
 8004262:	43db      	mvns	r3, r3
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	4013      	ands	r3, r2
 8004268:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	689a      	ldr	r2, [r3, #8]
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	005b      	lsls	r3, r3, #1
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	4313      	orrs	r3, r2
 800427a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d123      	bne.n	80042d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	08da      	lsrs	r2, r3, #3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	3208      	adds	r2, #8
 8004296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800429a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f003 0307 	and.w	r3, r3, #7
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	220f      	movs	r2, #15
 80042a6:	fa02 f303 	lsl.w	r3, r2, r3
 80042aa:	43db      	mvns	r3, r3
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	4013      	ands	r3, r2
 80042b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	691a      	ldr	r2, [r3, #16]
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	fa02 f303 	lsl.w	r3, r2, r3
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	08da      	lsrs	r2, r3, #3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	3208      	adds	r2, #8
 80042d0:	6939      	ldr	r1, [r7, #16]
 80042d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	005b      	lsls	r3, r3, #1
 80042e0:	2203      	movs	r2, #3
 80042e2:	fa02 f303 	lsl.w	r3, r2, r3
 80042e6:	43db      	mvns	r3, r3
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	4013      	ands	r3, r2
 80042ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f003 0203 	and.w	r2, r3, #3
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	fa02 f303 	lsl.w	r3, r2, r3
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	4313      	orrs	r3, r2
 8004302:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004312:	2b00      	cmp	r3, #0
 8004314:	f000 80a6 	beq.w	8004464 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004318:	4b5b      	ldr	r3, [pc, #364]	@ (8004488 <HAL_GPIO_Init+0x2e4>)
 800431a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800431c:	4a5a      	ldr	r2, [pc, #360]	@ (8004488 <HAL_GPIO_Init+0x2e4>)
 800431e:	f043 0301 	orr.w	r3, r3, #1
 8004322:	6613      	str	r3, [r2, #96]	@ 0x60
 8004324:	4b58      	ldr	r3, [pc, #352]	@ (8004488 <HAL_GPIO_Init+0x2e4>)
 8004326:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	60bb      	str	r3, [r7, #8]
 800432e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004330:	4a56      	ldr	r2, [pc, #344]	@ (800448c <HAL_GPIO_Init+0x2e8>)
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	089b      	lsrs	r3, r3, #2
 8004336:	3302      	adds	r3, #2
 8004338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800433c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f003 0303 	and.w	r3, r3, #3
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	220f      	movs	r2, #15
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	43db      	mvns	r3, r3
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	4013      	ands	r3, r2
 8004352:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800435a:	d01f      	beq.n	800439c <HAL_GPIO_Init+0x1f8>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a4c      	ldr	r2, [pc, #304]	@ (8004490 <HAL_GPIO_Init+0x2ec>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d019      	beq.n	8004398 <HAL_GPIO_Init+0x1f4>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a4b      	ldr	r2, [pc, #300]	@ (8004494 <HAL_GPIO_Init+0x2f0>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d013      	beq.n	8004394 <HAL_GPIO_Init+0x1f0>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a4a      	ldr	r2, [pc, #296]	@ (8004498 <HAL_GPIO_Init+0x2f4>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d00d      	beq.n	8004390 <HAL_GPIO_Init+0x1ec>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a49      	ldr	r2, [pc, #292]	@ (800449c <HAL_GPIO_Init+0x2f8>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d007      	beq.n	800438c <HAL_GPIO_Init+0x1e8>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a48      	ldr	r2, [pc, #288]	@ (80044a0 <HAL_GPIO_Init+0x2fc>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d101      	bne.n	8004388 <HAL_GPIO_Init+0x1e4>
 8004384:	2305      	movs	r3, #5
 8004386:	e00a      	b.n	800439e <HAL_GPIO_Init+0x1fa>
 8004388:	2306      	movs	r3, #6
 800438a:	e008      	b.n	800439e <HAL_GPIO_Init+0x1fa>
 800438c:	2304      	movs	r3, #4
 800438e:	e006      	b.n	800439e <HAL_GPIO_Init+0x1fa>
 8004390:	2303      	movs	r3, #3
 8004392:	e004      	b.n	800439e <HAL_GPIO_Init+0x1fa>
 8004394:	2302      	movs	r3, #2
 8004396:	e002      	b.n	800439e <HAL_GPIO_Init+0x1fa>
 8004398:	2301      	movs	r3, #1
 800439a:	e000      	b.n	800439e <HAL_GPIO_Init+0x1fa>
 800439c:	2300      	movs	r3, #0
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	f002 0203 	and.w	r2, r2, #3
 80043a4:	0092      	lsls	r2, r2, #2
 80043a6:	4093      	lsls	r3, r2
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043ae:	4937      	ldr	r1, [pc, #220]	@ (800448c <HAL_GPIO_Init+0x2e8>)
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	089b      	lsrs	r3, r3, #2
 80043b4:	3302      	adds	r3, #2
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80043bc:	4b39      	ldr	r3, [pc, #228]	@ (80044a4 <HAL_GPIO_Init+0x300>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	43db      	mvns	r3, r3
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	4013      	ands	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d003      	beq.n	80043e0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	4313      	orrs	r3, r2
 80043de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80043e0:	4a30      	ldr	r2, [pc, #192]	@ (80044a4 <HAL_GPIO_Init+0x300>)
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80043e6:	4b2f      	ldr	r3, [pc, #188]	@ (80044a4 <HAL_GPIO_Init+0x300>)
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	43db      	mvns	r3, r3
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	4013      	ands	r3, r2
 80043f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4313      	orrs	r3, r2
 8004408:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800440a:	4a26      	ldr	r2, [pc, #152]	@ (80044a4 <HAL_GPIO_Init+0x300>)
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004410:	4b24      	ldr	r3, [pc, #144]	@ (80044a4 <HAL_GPIO_Init+0x300>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	43db      	mvns	r3, r3
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	4013      	ands	r3, r2
 800441e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	4313      	orrs	r3, r2
 8004432:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004434:	4a1b      	ldr	r2, [pc, #108]	@ (80044a4 <HAL_GPIO_Init+0x300>)
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800443a:	4b1a      	ldr	r3, [pc, #104]	@ (80044a4 <HAL_GPIO_Init+0x300>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	43db      	mvns	r3, r3
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	4013      	ands	r3, r2
 8004448:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	4313      	orrs	r3, r2
 800445c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800445e:	4a11      	ldr	r2, [pc, #68]	@ (80044a4 <HAL_GPIO_Init+0x300>)
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	3301      	adds	r3, #1
 8004468:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	fa22 f303 	lsr.w	r3, r2, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	f47f ae9d 	bne.w	80041b4 <HAL_GPIO_Init+0x10>
  }
}
 800447a:	bf00      	nop
 800447c:	bf00      	nop
 800447e:	371c      	adds	r7, #28
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	40021000 	.word	0x40021000
 800448c:	40010000 	.word	0x40010000
 8004490:	48000400 	.word	0x48000400
 8004494:	48000800 	.word	0x48000800
 8004498:	48000c00 	.word	0x48000c00
 800449c:	48001000 	.word	0x48001000
 80044a0:	48001400 	.word	0x48001400
 80044a4:	40010400 	.word	0x40010400

080044a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	460b      	mov	r3, r1
 80044b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	691a      	ldr	r2, [r3, #16]
 80044b8:	887b      	ldrh	r3, [r7, #2]
 80044ba:	4013      	ands	r3, r2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d002      	beq.n	80044c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80044c0:	2301      	movs	r3, #1
 80044c2:	73fb      	strb	r3, [r7, #15]
 80044c4:	e001      	b.n	80044ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044c6:	2300      	movs	r3, #0
 80044c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3714      	adds	r7, #20
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e08d      	b.n	8004606 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d106      	bne.n	8004504 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7fc ffc4 	bl	800148c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2224      	movs	r2, #36	@ 0x24
 8004508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 0201 	bic.w	r2, r2, #1
 800451a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004528:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004538:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d107      	bne.n	8004552 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689a      	ldr	r2, [r3, #8]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800454e:	609a      	str	r2, [r3, #8]
 8004550:	e006      	b.n	8004560 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	689a      	ldr	r2, [r3, #8]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800455e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	2b02      	cmp	r3, #2
 8004566:	d108      	bne.n	800457a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004576:	605a      	str	r2, [r3, #4]
 8004578:	e007      	b.n	800458a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004588:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6812      	ldr	r2, [r2, #0]
 8004594:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004598:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800459c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68da      	ldr	r2, [r3, #12]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80045ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	691a      	ldr	r2, [r3, #16]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	430a      	orrs	r2, r1
 80045c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	69d9      	ldr	r1, [r3, #28]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a1a      	ldr	r2, [r3, #32]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0201 	orr.w	r2, r2, #1
 80045e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2220      	movs	r2, #32
 80045f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
	...

08004610 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b088      	sub	sp, #32
 8004614:	af02      	add	r7, sp, #8
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	4608      	mov	r0, r1
 800461a:	4611      	mov	r1, r2
 800461c:	461a      	mov	r2, r3
 800461e:	4603      	mov	r3, r0
 8004620:	817b      	strh	r3, [r7, #10]
 8004622:	460b      	mov	r3, r1
 8004624:	813b      	strh	r3, [r7, #8]
 8004626:	4613      	mov	r3, r2
 8004628:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b20      	cmp	r3, #32
 8004634:	f040 80f9 	bne.w	800482a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004638:	6a3b      	ldr	r3, [r7, #32]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d002      	beq.n	8004644 <HAL_I2C_Mem_Write+0x34>
 800463e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004640:	2b00      	cmp	r3, #0
 8004642:	d105      	bne.n	8004650 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800464a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e0ed      	b.n	800482c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004656:	2b01      	cmp	r3, #1
 8004658:	d101      	bne.n	800465e <HAL_I2C_Mem_Write+0x4e>
 800465a:	2302      	movs	r3, #2
 800465c:	e0e6      	b.n	800482c <HAL_I2C_Mem_Write+0x21c>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004666:	f7fd f8a3 	bl	80017b0 <HAL_GetTick>
 800466a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	2319      	movs	r3, #25
 8004672:	2201      	movs	r2, #1
 8004674:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 f955 	bl	8004928 <I2C_WaitOnFlagUntilTimeout>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e0d1      	b.n	800482c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2221      	movs	r2, #33	@ 0x21
 800468c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2240      	movs	r2, #64	@ 0x40
 8004694:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6a3a      	ldr	r2, [r7, #32]
 80046a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80046a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046b0:	88f8      	ldrh	r0, [r7, #6]
 80046b2:	893a      	ldrh	r2, [r7, #8]
 80046b4:	8979      	ldrh	r1, [r7, #10]
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	9301      	str	r3, [sp, #4]
 80046ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	4603      	mov	r3, r0
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f000 f8b9 	bl	8004838 <I2C_RequestMemoryWrite>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d005      	beq.n	80046d8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e0a9      	b.n	800482c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046dc:	b29b      	uxth	r3, r3
 80046de:	2bff      	cmp	r3, #255	@ 0xff
 80046e0:	d90e      	bls.n	8004700 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	22ff      	movs	r2, #255	@ 0xff
 80046e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ec:	b2da      	uxtb	r2, r3
 80046ee:	8979      	ldrh	r1, [r7, #10]
 80046f0:	2300      	movs	r3, #0
 80046f2:	9300      	str	r3, [sp, #0]
 80046f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f000 fad9 	bl	8004cb0 <I2C_TransferConfig>
 80046fe:	e00f      	b.n	8004720 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004704:	b29a      	uxth	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800470e:	b2da      	uxtb	r2, r3
 8004710:	8979      	ldrh	r1, [r7, #10]
 8004712:	2300      	movs	r3, #0
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f000 fac8 	bl	8004cb0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 f958 	bl	80049da <I2C_WaitOnTXISFlagUntilTimeout>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e07b      	b.n	800482c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004738:	781a      	ldrb	r2, [r3, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004744:	1c5a      	adds	r2, r3, #1
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800474e:	b29b      	uxth	r3, r3
 8004750:	3b01      	subs	r3, #1
 8004752:	b29a      	uxth	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800475c:	3b01      	subs	r3, #1
 800475e:	b29a      	uxth	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004768:	b29b      	uxth	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d034      	beq.n	80047d8 <HAL_I2C_Mem_Write+0x1c8>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004772:	2b00      	cmp	r3, #0
 8004774:	d130      	bne.n	80047d8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800477c:	2200      	movs	r2, #0
 800477e:	2180      	movs	r1, #128	@ 0x80
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f000 f8d1 	bl	8004928 <I2C_WaitOnFlagUntilTimeout>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d001      	beq.n	8004790 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e04d      	b.n	800482c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004794:	b29b      	uxth	r3, r3
 8004796:	2bff      	cmp	r3, #255	@ 0xff
 8004798:	d90e      	bls.n	80047b8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	22ff      	movs	r2, #255	@ 0xff
 800479e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047a4:	b2da      	uxtb	r2, r3
 80047a6:	8979      	ldrh	r1, [r7, #10]
 80047a8:	2300      	movs	r3, #0
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 fa7d 	bl	8004cb0 <I2C_TransferConfig>
 80047b6:	e00f      	b.n	80047d8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047bc:	b29a      	uxth	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	8979      	ldrh	r1, [r7, #10]
 80047ca:	2300      	movs	r3, #0
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 fa6c 	bl	8004cb0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047dc:	b29b      	uxth	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d19e      	bne.n	8004720 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f000 f93e 	bl	8004a68 <I2C_WaitOnSTOPFlagUntilTimeout>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e01a      	b.n	800482c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2220      	movs	r2, #32
 80047fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6859      	ldr	r1, [r3, #4]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	4b0a      	ldr	r3, [pc, #40]	@ (8004834 <HAL_I2C_Mem_Write+0x224>)
 800480a:	400b      	ands	r3, r1
 800480c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2220      	movs	r2, #32
 8004812:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004826:	2300      	movs	r3, #0
 8004828:	e000      	b.n	800482c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800482a:	2302      	movs	r3, #2
  }
}
 800482c:	4618      	mov	r0, r3
 800482e:	3718      	adds	r7, #24
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	fe00e800 	.word	0xfe00e800

08004838 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af02      	add	r7, sp, #8
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	4608      	mov	r0, r1
 8004842:	4611      	mov	r1, r2
 8004844:	461a      	mov	r2, r3
 8004846:	4603      	mov	r3, r0
 8004848:	817b      	strh	r3, [r7, #10]
 800484a:	460b      	mov	r3, r1
 800484c:	813b      	strh	r3, [r7, #8]
 800484e:	4613      	mov	r3, r2
 8004850:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004852:	88fb      	ldrh	r3, [r7, #6]
 8004854:	b2da      	uxtb	r2, r3
 8004856:	8979      	ldrh	r1, [r7, #10]
 8004858:	4b20      	ldr	r3, [pc, #128]	@ (80048dc <I2C_RequestMemoryWrite+0xa4>)
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 fa25 	bl	8004cb0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004866:	69fa      	ldr	r2, [r7, #28]
 8004868:	69b9      	ldr	r1, [r7, #24]
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f000 f8b5 	bl	80049da <I2C_WaitOnTXISFlagUntilTimeout>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e02c      	b.n	80048d4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800487a:	88fb      	ldrh	r3, [r7, #6]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d105      	bne.n	800488c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004880:	893b      	ldrh	r3, [r7, #8]
 8004882:	b2da      	uxtb	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	629a      	str	r2, [r3, #40]	@ 0x28
 800488a:	e015      	b.n	80048b8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800488c:	893b      	ldrh	r3, [r7, #8]
 800488e:	0a1b      	lsrs	r3, r3, #8
 8004890:	b29b      	uxth	r3, r3
 8004892:	b2da      	uxtb	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800489a:	69fa      	ldr	r2, [r7, #28]
 800489c:	69b9      	ldr	r1, [r7, #24]
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 f89b 	bl	80049da <I2C_WaitOnTXISFlagUntilTimeout>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e012      	b.n	80048d4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048ae:	893b      	ldrh	r3, [r7, #8]
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	2200      	movs	r2, #0
 80048c0:	2180      	movs	r1, #128	@ 0x80
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 f830 	bl	8004928 <I2C_WaitOnFlagUntilTimeout>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e000      	b.n	80048d4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	80002000 	.word	0x80002000

080048e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d103      	bne.n	80048fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2200      	movs	r2, #0
 80048fc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	2b01      	cmp	r3, #1
 800490a:	d007      	beq.n	800491c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	699a      	ldr	r2, [r3, #24]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f042 0201 	orr.w	r2, r2, #1
 800491a:	619a      	str	r2, [r3, #24]
  }
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	603b      	str	r3, [r7, #0]
 8004934:	4613      	mov	r3, r2
 8004936:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004938:	e03b      	b.n	80049b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	6839      	ldr	r1, [r7, #0]
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 f8d6 	bl	8004af0 <I2C_IsErrorOccurred>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e041      	b.n	80049d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004954:	d02d      	beq.n	80049b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004956:	f7fc ff2b 	bl	80017b0 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	429a      	cmp	r2, r3
 8004964:	d302      	bcc.n	800496c <I2C_WaitOnFlagUntilTimeout+0x44>
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d122      	bne.n	80049b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	699a      	ldr	r2, [r3, #24]
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	4013      	ands	r3, r2
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	429a      	cmp	r2, r3
 800497a:	bf0c      	ite	eq
 800497c:	2301      	moveq	r3, #1
 800497e:	2300      	movne	r3, #0
 8004980:	b2db      	uxtb	r3, r3
 8004982:	461a      	mov	r2, r3
 8004984:	79fb      	ldrb	r3, [r7, #7]
 8004986:	429a      	cmp	r2, r3
 8004988:	d113      	bne.n	80049b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800498e:	f043 0220 	orr.w	r2, r3, #32
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2220      	movs	r2, #32
 800499a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e00f      	b.n	80049d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	699a      	ldr	r2, [r3, #24]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	4013      	ands	r3, r2
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	429a      	cmp	r2, r3
 80049c0:	bf0c      	ite	eq
 80049c2:	2301      	moveq	r3, #1
 80049c4:	2300      	movne	r3, #0
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	461a      	mov	r2, r3
 80049ca:	79fb      	ldrb	r3, [r7, #7]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d0b4      	beq.n	800493a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b084      	sub	sp, #16
 80049de:	af00      	add	r7, sp, #0
 80049e0:	60f8      	str	r0, [r7, #12]
 80049e2:	60b9      	str	r1, [r7, #8]
 80049e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80049e6:	e033      	b.n	8004a50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	68b9      	ldr	r1, [r7, #8]
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 f87f 	bl	8004af0 <I2C_IsErrorOccurred>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e031      	b.n	8004a60 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a02:	d025      	beq.n	8004a50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a04:	f7fc fed4 	bl	80017b0 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d302      	bcc.n	8004a1a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d11a      	bne.n	8004a50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d013      	beq.n	8004a50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a2c:	f043 0220 	orr.w	r2, r3, #32
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2220      	movs	r2, #32
 8004a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e007      	b.n	8004a60 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d1c4      	bne.n	80049e8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a74:	e02f      	b.n	8004ad6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	68b9      	ldr	r1, [r7, #8]
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 f838 	bl	8004af0 <I2C_IsErrorOccurred>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e02d      	b.n	8004ae6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a8a:	f7fc fe91 	bl	80017b0 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d302      	bcc.n	8004aa0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d11a      	bne.n	8004ad6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	f003 0320 	and.w	r3, r3, #32
 8004aaa:	2b20      	cmp	r3, #32
 8004aac:	d013      	beq.n	8004ad6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ab2:	f043 0220 	orr.w	r2, r3, #32
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2220      	movs	r2, #32
 8004abe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e007      	b.n	8004ae6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	f003 0320 	and.w	r3, r3, #32
 8004ae0:	2b20      	cmp	r3, #32
 8004ae2:	d1c8      	bne.n	8004a76 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
	...

08004af0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b08a      	sub	sp, #40	@ 0x28
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004afc:	2300      	movs	r3, #0
 8004afe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	f003 0310 	and.w	r3, r3, #16
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d068      	beq.n	8004bee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2210      	movs	r2, #16
 8004b22:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004b24:	e049      	b.n	8004bba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2c:	d045      	beq.n	8004bba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004b2e:	f7fc fe3f 	bl	80017b0 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d302      	bcc.n	8004b44 <I2C_IsErrorOccurred+0x54>
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d13a      	bne.n	8004bba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b4e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b56:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b66:	d121      	bne.n	8004bac <I2C_IsErrorOccurred+0xbc>
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b6e:	d01d      	beq.n	8004bac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004b70:	7cfb      	ldrb	r3, [r7, #19]
 8004b72:	2b20      	cmp	r3, #32
 8004b74:	d01a      	beq.n	8004bac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685a      	ldr	r2, [r3, #4]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b84:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004b86:	f7fc fe13 	bl	80017b0 <HAL_GetTick>
 8004b8a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b8c:	e00e      	b.n	8004bac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004b8e:	f7fc fe0f 	bl	80017b0 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b19      	cmp	r3, #25
 8004b9a:	d907      	bls.n	8004bac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004b9c:	6a3b      	ldr	r3, [r7, #32]
 8004b9e:	f043 0320 	orr.w	r3, r3, #32
 8004ba2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004baa:	e006      	b.n	8004bba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	f003 0320 	and.w	r3, r3, #32
 8004bb6:	2b20      	cmp	r3, #32
 8004bb8:	d1e9      	bne.n	8004b8e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	f003 0320 	and.w	r3, r3, #32
 8004bc4:	2b20      	cmp	r3, #32
 8004bc6:	d003      	beq.n	8004bd0 <I2C_IsErrorOccurred+0xe0>
 8004bc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d0aa      	beq.n	8004b26 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d103      	bne.n	8004be0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2220      	movs	r2, #32
 8004bde:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004be0:	6a3b      	ldr	r3, [r7, #32]
 8004be2:	f043 0304 	orr.w	r3, r3, #4
 8004be6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00b      	beq.n	8004c18 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	f043 0301 	orr.w	r3, r3, #1
 8004c06:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00b      	beq.n	8004c3a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	f043 0308 	orr.w	r3, r3, #8
 8004c28:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004c32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00b      	beq.n	8004c5c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	f043 0302 	orr.w	r3, r3, #2
 8004c4a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d01c      	beq.n	8004c9e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f7ff fe3b 	bl	80048e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6859      	ldr	r1, [r3, #4]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	4b0d      	ldr	r3, [pc, #52]	@ (8004cac <I2C_IsErrorOccurred+0x1bc>)
 8004c76:	400b      	ands	r3, r1
 8004c78:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	431a      	orrs	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004c9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3728      	adds	r7, #40	@ 0x28
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	fe00e800 	.word	0xfe00e800

08004cb0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b087      	sub	sp, #28
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	607b      	str	r3, [r7, #4]
 8004cba:	460b      	mov	r3, r1
 8004cbc:	817b      	strh	r3, [r7, #10]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004cc2:	897b      	ldrh	r3, [r7, #10]
 8004cc4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004cc8:	7a7b      	ldrb	r3, [r7, #9]
 8004cca:	041b      	lsls	r3, r3, #16
 8004ccc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004cd0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004cde:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	6a3b      	ldr	r3, [r7, #32]
 8004ce8:	0d5b      	lsrs	r3, r3, #21
 8004cea:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004cee:	4b08      	ldr	r3, [pc, #32]	@ (8004d10 <I2C_TransferConfig+0x60>)
 8004cf0:	430b      	orrs	r3, r1
 8004cf2:	43db      	mvns	r3, r3
 8004cf4:	ea02 0103 	and.w	r1, r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004d02:	bf00      	nop
 8004d04:	371c      	adds	r7, #28
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	03ff63ff 	.word	0x03ff63ff

08004d14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b20      	cmp	r3, #32
 8004d28:	d138      	bne.n	8004d9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d101      	bne.n	8004d38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d34:	2302      	movs	r3, #2
 8004d36:	e032      	b.n	8004d9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2224      	movs	r2, #36	@ 0x24
 8004d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f022 0201 	bic.w	r2, r2, #1
 8004d56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004d66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6819      	ldr	r1, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	430a      	orrs	r2, r1
 8004d76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f042 0201 	orr.w	r2, r2, #1
 8004d86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	e000      	b.n	8004d9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d9c:	2302      	movs	r3, #2
  }
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b085      	sub	sp, #20
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
 8004db2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b20      	cmp	r3, #32
 8004dbe:	d139      	bne.n	8004e34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d101      	bne.n	8004dce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004dca:	2302      	movs	r3, #2
 8004dcc:	e033      	b.n	8004e36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2224      	movs	r2, #36	@ 0x24
 8004dda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f022 0201 	bic.w	r2, r2, #1
 8004dec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004dfc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	021b      	lsls	r3, r3, #8
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f042 0201 	orr.w	r2, r2, #1
 8004e1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2220      	movs	r2, #32
 8004e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004e30:	2300      	movs	r3, #0
 8004e32:	e000      	b.n	8004e36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004e34:	2302      	movs	r3, #2
  }
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
	...

08004e44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d141      	bne.n	8004ed6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e52:	4b4b      	ldr	r3, [pc, #300]	@ (8004f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e5e:	d131      	bne.n	8004ec4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e60:	4b47      	ldr	r3, [pc, #284]	@ (8004f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e66:	4a46      	ldr	r2, [pc, #280]	@ (8004f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e6c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e70:	4b43      	ldr	r3, [pc, #268]	@ (8004f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e78:	4a41      	ldr	r2, [pc, #260]	@ (8004f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e80:	4b40      	ldr	r3, [pc, #256]	@ (8004f84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2232      	movs	r2, #50	@ 0x32
 8004e86:	fb02 f303 	mul.w	r3, r2, r3
 8004e8a:	4a3f      	ldr	r2, [pc, #252]	@ (8004f88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e90:	0c9b      	lsrs	r3, r3, #18
 8004e92:	3301      	adds	r3, #1
 8004e94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e96:	e002      	b.n	8004e9e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e9e:	4b38      	ldr	r3, [pc, #224]	@ (8004f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ea6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eaa:	d102      	bne.n	8004eb2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1f2      	bne.n	8004e98 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004eb2:	4b33      	ldr	r3, [pc, #204]	@ (8004f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ebe:	d158      	bne.n	8004f72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e057      	b.n	8004f74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ec4:	4b2e      	ldr	r3, [pc, #184]	@ (8004f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004eca:	4a2d      	ldr	r2, [pc, #180]	@ (8004f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ecc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ed0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004ed4:	e04d      	b.n	8004f72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004edc:	d141      	bne.n	8004f62 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ede:	4b28      	ldr	r3, [pc, #160]	@ (8004f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004ee6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eea:	d131      	bne.n	8004f50 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004eec:	4b24      	ldr	r3, [pc, #144]	@ (8004f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ef2:	4a23      	ldr	r2, [pc, #140]	@ (8004f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ef4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ef8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004efc:	4b20      	ldr	r3, [pc, #128]	@ (8004f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f04:	4a1e      	ldr	r2, [pc, #120]	@ (8004f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8004f84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2232      	movs	r2, #50	@ 0x32
 8004f12:	fb02 f303 	mul.w	r3, r2, r3
 8004f16:	4a1c      	ldr	r2, [pc, #112]	@ (8004f88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f18:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1c:	0c9b      	lsrs	r3, r3, #18
 8004f1e:	3301      	adds	r3, #1
 8004f20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f22:	e002      	b.n	8004f2a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	3b01      	subs	r3, #1
 8004f28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f2a:	4b15      	ldr	r3, [pc, #84]	@ (8004f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f36:	d102      	bne.n	8004f3e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1f2      	bne.n	8004f24 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f3e:	4b10      	ldr	r3, [pc, #64]	@ (8004f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f4a:	d112      	bne.n	8004f72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e011      	b.n	8004f74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f50:	4b0b      	ldr	r3, [pc, #44]	@ (8004f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f56:	4a0a      	ldr	r2, [pc, #40]	@ (8004f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f5c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004f60:	e007      	b.n	8004f72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004f62:	4b07      	ldr	r3, [pc, #28]	@ (8004f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f6a:	4a05      	ldr	r2, [pc, #20]	@ (8004f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f6c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004f70:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	40007000 	.word	0x40007000
 8004f84:	20000020 	.word	0x20000020
 8004f88:	431bde83 	.word	0x431bde83

08004f8c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004f90:	4b05      	ldr	r3, [pc, #20]	@ (8004fa8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	4a04      	ldr	r2, [pc, #16]	@ (8004fa8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004f96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f9a:	6093      	str	r3, [r2, #8]
}
 8004f9c:	bf00      	nop
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	40007000 	.word	0x40007000

08004fac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b088      	sub	sp, #32
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e2fe      	b.n	80055bc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d075      	beq.n	80050b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fca:	4b97      	ldr	r3, [pc, #604]	@ (8005228 <HAL_RCC_OscConfig+0x27c>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 030c 	and.w	r3, r3, #12
 8004fd2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fd4:	4b94      	ldr	r3, [pc, #592]	@ (8005228 <HAL_RCC_OscConfig+0x27c>)
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f003 0303 	and.w	r3, r3, #3
 8004fdc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	2b0c      	cmp	r3, #12
 8004fe2:	d102      	bne.n	8004fea <HAL_RCC_OscConfig+0x3e>
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	2b03      	cmp	r3, #3
 8004fe8:	d002      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x44>
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	2b08      	cmp	r3, #8
 8004fee:	d10b      	bne.n	8005008 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ff0:	4b8d      	ldr	r3, [pc, #564]	@ (8005228 <HAL_RCC_OscConfig+0x27c>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d05b      	beq.n	80050b4 <HAL_RCC_OscConfig+0x108>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d157      	bne.n	80050b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e2d9      	b.n	80055bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005010:	d106      	bne.n	8005020 <HAL_RCC_OscConfig+0x74>
 8005012:	4b85      	ldr	r3, [pc, #532]	@ (8005228 <HAL_RCC_OscConfig+0x27c>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a84      	ldr	r2, [pc, #528]	@ (8005228 <HAL_RCC_OscConfig+0x27c>)
 8005018:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800501c:	6013      	str	r3, [r2, #0]
 800501e:	e01d      	b.n	800505c <HAL_RCC_OscConfig+0xb0>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005028:	d10c      	bne.n	8005044 <HAL_RCC_OscConfig+0x98>
 800502a:	4b7f      	ldr	r3, [pc, #508]	@ (8005228 <HAL_RCC_OscConfig+0x27c>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a7e      	ldr	r2, [pc, #504]	@ (8005228 <HAL_RCC_OscConfig+0x27c>)
 8005030:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005034:	6013      	str	r3, [r2, #0]
 8005036:	4b7c      	ldr	r3, [pc, #496]	@ (8005228 <HAL_RCC_OscConfig+0x27c>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a7b      	ldr	r2, [pc, #492]	@ (8005228 <HAL_RCC_OscConfig+0x27c>)
 800503c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005040:	6013      	str	r3, [r2, #0]
 8005042:	e00b      	b.n	800505c <HAL_RCC_OscConfig+0xb0>
 8005044:	4b78      	ldr	r3, [pc, #480]	@ (8005228 <HAL_RCC_OscConfig+0x27c>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a77      	ldr	r2, [pc, #476]	@ (8005228 <HAL_RCC_OscConfig+0x27c>)
 800504a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800504e:	6013      	str	r3, [r2, #0]
 8005050:	4b75      	ldr	r3, [pc, #468]	@ (8005228 <HAL_RCC_OscConfig+0x27c>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a74      	ldr	r2, [pc, #464]	@ (8005228 <HAL_RCC_OscConfig+0x27c>)
 8005056:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800505a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d013      	beq.n	800508c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005064:	f7fc fba4 	bl	80017b0 <HAL_GetTick>
 8005068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800506a:	e008      	b.n	800507e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800506c:	f7fc fba0 	bl	80017b0 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b64      	cmp	r3, #100	@ 0x64
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e29e      	b.n	80055bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800507e:	4b6a      	ldr	r3, [pc, #424]	@ (8005228 <HAL_RCC_OscConfig+0x27c>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d0f0      	beq.n	800506c <HAL_RCC_OscConfig+0xc0>
 800508a:	e014      	b.n	80050b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800508c:	f7fc fb90 	bl	80017b0 <HAL_GetTick>
 8005090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005092:	e008      	b.n	80050a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005094:	f7fc fb8c 	bl	80017b0 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b64      	cmp	r3, #100	@ 0x64
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e28a      	b.n	80055bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050a6:	4b60      	ldr	r3, [pc, #384]	@ (8005228 <HAL_RCC_OscConfig+0x27c>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1f0      	bne.n	8005094 <HAL_RCC_OscConfig+0xe8>
 80050b2:	e000      	b.n	80050b6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d075      	beq.n	80051ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050c2:	4b59      	ldr	r3, [pc, #356]	@ (8005228 <HAL_RCC_OscConfig+0x27c>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f003 030c 	and.w	r3, r3, #12
 80050ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050cc:	4b56      	ldr	r3, [pc, #344]	@ (8005228 <HAL_RCC_OscConfig+0x27c>)
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	f003 0303 	and.w	r3, r3, #3
 80050d4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	2b0c      	cmp	r3, #12
 80050da:	d102      	bne.n	80050e2 <HAL_RCC_OscConfig+0x136>
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d002      	beq.n	80050e8 <HAL_RCC_OscConfig+0x13c>
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	2b04      	cmp	r3, #4
 80050e6:	d11f      	bne.n	8005128 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050e8:	4b4f      	ldr	r3, [pc, #316]	@ (8005228 <HAL_RCC_OscConfig+0x27c>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d005      	beq.n	8005100 <HAL_RCC_OscConfig+0x154>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d101      	bne.n	8005100 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e25d      	b.n	80055bc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005100:	4b49      	ldr	r3, [pc, #292]	@ (8005228 <HAL_RCC_OscConfig+0x27c>)
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	061b      	lsls	r3, r3, #24
 800510e:	4946      	ldr	r1, [pc, #280]	@ (8005228 <HAL_RCC_OscConfig+0x27c>)
 8005110:	4313      	orrs	r3, r2
 8005112:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005114:	4b45      	ldr	r3, [pc, #276]	@ (800522c <HAL_RCC_OscConfig+0x280>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4618      	mov	r0, r3
 800511a:	f7fc fafd 	bl	8001718 <HAL_InitTick>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d043      	beq.n	80051ac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e249      	b.n	80055bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d023      	beq.n	8005178 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005130:	4b3d      	ldr	r3, [pc, #244]	@ (8005228 <HAL_RCC_OscConfig+0x27c>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a3c      	ldr	r2, [pc, #240]	@ (8005228 <HAL_RCC_OscConfig+0x27c>)
 8005136:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800513a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800513c:	f7fc fb38 	bl	80017b0 <HAL_GetTick>
 8005140:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005142:	e008      	b.n	8005156 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005144:	f7fc fb34 	bl	80017b0 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b02      	cmp	r3, #2
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e232      	b.n	80055bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005156:	4b34      	ldr	r3, [pc, #208]	@ (8005228 <HAL_RCC_OscConfig+0x27c>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800515e:	2b00      	cmp	r3, #0
 8005160:	d0f0      	beq.n	8005144 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005162:	4b31      	ldr	r3, [pc, #196]	@ (8005228 <HAL_RCC_OscConfig+0x27c>)
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	061b      	lsls	r3, r3, #24
 8005170:	492d      	ldr	r1, [pc, #180]	@ (8005228 <HAL_RCC_OscConfig+0x27c>)
 8005172:	4313      	orrs	r3, r2
 8005174:	604b      	str	r3, [r1, #4]
 8005176:	e01a      	b.n	80051ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005178:	4b2b      	ldr	r3, [pc, #172]	@ (8005228 <HAL_RCC_OscConfig+0x27c>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a2a      	ldr	r2, [pc, #168]	@ (8005228 <HAL_RCC_OscConfig+0x27c>)
 800517e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005184:	f7fc fb14 	bl	80017b0 <HAL_GetTick>
 8005188:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800518a:	e008      	b.n	800519e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800518c:	f7fc fb10 	bl	80017b0 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e20e      	b.n	80055bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800519e:	4b22      	ldr	r3, [pc, #136]	@ (8005228 <HAL_RCC_OscConfig+0x27c>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1f0      	bne.n	800518c <HAL_RCC_OscConfig+0x1e0>
 80051aa:	e000      	b.n	80051ae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0308 	and.w	r3, r3, #8
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d041      	beq.n	800523e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d01c      	beq.n	80051fc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051c2:	4b19      	ldr	r3, [pc, #100]	@ (8005228 <HAL_RCC_OscConfig+0x27c>)
 80051c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051c8:	4a17      	ldr	r2, [pc, #92]	@ (8005228 <HAL_RCC_OscConfig+0x27c>)
 80051ca:	f043 0301 	orr.w	r3, r3, #1
 80051ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d2:	f7fc faed 	bl	80017b0 <HAL_GetTick>
 80051d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051d8:	e008      	b.n	80051ec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051da:	f7fc fae9 	bl	80017b0 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d901      	bls.n	80051ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e1e7      	b.n	80055bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051ec:	4b0e      	ldr	r3, [pc, #56]	@ (8005228 <HAL_RCC_OscConfig+0x27c>)
 80051ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d0ef      	beq.n	80051da <HAL_RCC_OscConfig+0x22e>
 80051fa:	e020      	b.n	800523e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005228 <HAL_RCC_OscConfig+0x27c>)
 80051fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005202:	4a09      	ldr	r2, [pc, #36]	@ (8005228 <HAL_RCC_OscConfig+0x27c>)
 8005204:	f023 0301 	bic.w	r3, r3, #1
 8005208:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800520c:	f7fc fad0 	bl	80017b0 <HAL_GetTick>
 8005210:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005212:	e00d      	b.n	8005230 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005214:	f7fc facc 	bl	80017b0 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b02      	cmp	r3, #2
 8005220:	d906      	bls.n	8005230 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e1ca      	b.n	80055bc <HAL_RCC_OscConfig+0x610>
 8005226:	bf00      	nop
 8005228:	40021000 	.word	0x40021000
 800522c:	20000024 	.word	0x20000024
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005230:	4b8c      	ldr	r3, [pc, #560]	@ (8005464 <HAL_RCC_OscConfig+0x4b8>)
 8005232:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005236:	f003 0302 	and.w	r3, r3, #2
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1ea      	bne.n	8005214 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0304 	and.w	r3, r3, #4
 8005246:	2b00      	cmp	r3, #0
 8005248:	f000 80a6 	beq.w	8005398 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800524c:	2300      	movs	r3, #0
 800524e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005250:	4b84      	ldr	r3, [pc, #528]	@ (8005464 <HAL_RCC_OscConfig+0x4b8>)
 8005252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005254:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <HAL_RCC_OscConfig+0x2b4>
 800525c:	2301      	movs	r3, #1
 800525e:	e000      	b.n	8005262 <HAL_RCC_OscConfig+0x2b6>
 8005260:	2300      	movs	r3, #0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00d      	beq.n	8005282 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005266:	4b7f      	ldr	r3, [pc, #508]	@ (8005464 <HAL_RCC_OscConfig+0x4b8>)
 8005268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800526a:	4a7e      	ldr	r2, [pc, #504]	@ (8005464 <HAL_RCC_OscConfig+0x4b8>)
 800526c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005270:	6593      	str	r3, [r2, #88]	@ 0x58
 8005272:	4b7c      	ldr	r3, [pc, #496]	@ (8005464 <HAL_RCC_OscConfig+0x4b8>)
 8005274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005276:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800527a:	60fb      	str	r3, [r7, #12]
 800527c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800527e:	2301      	movs	r3, #1
 8005280:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005282:	4b79      	ldr	r3, [pc, #484]	@ (8005468 <HAL_RCC_OscConfig+0x4bc>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800528a:	2b00      	cmp	r3, #0
 800528c:	d118      	bne.n	80052c0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800528e:	4b76      	ldr	r3, [pc, #472]	@ (8005468 <HAL_RCC_OscConfig+0x4bc>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a75      	ldr	r2, [pc, #468]	@ (8005468 <HAL_RCC_OscConfig+0x4bc>)
 8005294:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800529a:	f7fc fa89 	bl	80017b0 <HAL_GetTick>
 800529e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052a0:	e008      	b.n	80052b4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052a2:	f7fc fa85 	bl	80017b0 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d901      	bls.n	80052b4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e183      	b.n	80055bc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052b4:	4b6c      	ldr	r3, [pc, #432]	@ (8005468 <HAL_RCC_OscConfig+0x4bc>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d0f0      	beq.n	80052a2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d108      	bne.n	80052da <HAL_RCC_OscConfig+0x32e>
 80052c8:	4b66      	ldr	r3, [pc, #408]	@ (8005464 <HAL_RCC_OscConfig+0x4b8>)
 80052ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ce:	4a65      	ldr	r2, [pc, #404]	@ (8005464 <HAL_RCC_OscConfig+0x4b8>)
 80052d0:	f043 0301 	orr.w	r3, r3, #1
 80052d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80052d8:	e024      	b.n	8005324 <HAL_RCC_OscConfig+0x378>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	2b05      	cmp	r3, #5
 80052e0:	d110      	bne.n	8005304 <HAL_RCC_OscConfig+0x358>
 80052e2:	4b60      	ldr	r3, [pc, #384]	@ (8005464 <HAL_RCC_OscConfig+0x4b8>)
 80052e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052e8:	4a5e      	ldr	r2, [pc, #376]	@ (8005464 <HAL_RCC_OscConfig+0x4b8>)
 80052ea:	f043 0304 	orr.w	r3, r3, #4
 80052ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80052f2:	4b5c      	ldr	r3, [pc, #368]	@ (8005464 <HAL_RCC_OscConfig+0x4b8>)
 80052f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052f8:	4a5a      	ldr	r2, [pc, #360]	@ (8005464 <HAL_RCC_OscConfig+0x4b8>)
 80052fa:	f043 0301 	orr.w	r3, r3, #1
 80052fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005302:	e00f      	b.n	8005324 <HAL_RCC_OscConfig+0x378>
 8005304:	4b57      	ldr	r3, [pc, #348]	@ (8005464 <HAL_RCC_OscConfig+0x4b8>)
 8005306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800530a:	4a56      	ldr	r2, [pc, #344]	@ (8005464 <HAL_RCC_OscConfig+0x4b8>)
 800530c:	f023 0301 	bic.w	r3, r3, #1
 8005310:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005314:	4b53      	ldr	r3, [pc, #332]	@ (8005464 <HAL_RCC_OscConfig+0x4b8>)
 8005316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800531a:	4a52      	ldr	r2, [pc, #328]	@ (8005464 <HAL_RCC_OscConfig+0x4b8>)
 800531c:	f023 0304 	bic.w	r3, r3, #4
 8005320:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d016      	beq.n	800535a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800532c:	f7fc fa40 	bl	80017b0 <HAL_GetTick>
 8005330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005332:	e00a      	b.n	800534a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005334:	f7fc fa3c 	bl	80017b0 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005342:	4293      	cmp	r3, r2
 8005344:	d901      	bls.n	800534a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e138      	b.n	80055bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800534a:	4b46      	ldr	r3, [pc, #280]	@ (8005464 <HAL_RCC_OscConfig+0x4b8>)
 800534c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b00      	cmp	r3, #0
 8005356:	d0ed      	beq.n	8005334 <HAL_RCC_OscConfig+0x388>
 8005358:	e015      	b.n	8005386 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800535a:	f7fc fa29 	bl	80017b0 <HAL_GetTick>
 800535e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005360:	e00a      	b.n	8005378 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005362:	f7fc fa25 	bl	80017b0 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005370:	4293      	cmp	r3, r2
 8005372:	d901      	bls.n	8005378 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e121      	b.n	80055bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005378:	4b3a      	ldr	r3, [pc, #232]	@ (8005464 <HAL_RCC_OscConfig+0x4b8>)
 800537a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1ed      	bne.n	8005362 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005386:	7ffb      	ldrb	r3, [r7, #31]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d105      	bne.n	8005398 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800538c:	4b35      	ldr	r3, [pc, #212]	@ (8005464 <HAL_RCC_OscConfig+0x4b8>)
 800538e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005390:	4a34      	ldr	r2, [pc, #208]	@ (8005464 <HAL_RCC_OscConfig+0x4b8>)
 8005392:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005396:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0320 	and.w	r3, r3, #32
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d03c      	beq.n	800541e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d01c      	beq.n	80053e6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80053ac:	4b2d      	ldr	r3, [pc, #180]	@ (8005464 <HAL_RCC_OscConfig+0x4b8>)
 80053ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80053b2:	4a2c      	ldr	r2, [pc, #176]	@ (8005464 <HAL_RCC_OscConfig+0x4b8>)
 80053b4:	f043 0301 	orr.w	r3, r3, #1
 80053b8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053bc:	f7fc f9f8 	bl	80017b0 <HAL_GetTick>
 80053c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80053c2:	e008      	b.n	80053d6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053c4:	f7fc f9f4 	bl	80017b0 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e0f2      	b.n	80055bc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80053d6:	4b23      	ldr	r3, [pc, #140]	@ (8005464 <HAL_RCC_OscConfig+0x4b8>)
 80053d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80053dc:	f003 0302 	and.w	r3, r3, #2
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d0ef      	beq.n	80053c4 <HAL_RCC_OscConfig+0x418>
 80053e4:	e01b      	b.n	800541e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80053e6:	4b1f      	ldr	r3, [pc, #124]	@ (8005464 <HAL_RCC_OscConfig+0x4b8>)
 80053e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80053ec:	4a1d      	ldr	r2, [pc, #116]	@ (8005464 <HAL_RCC_OscConfig+0x4b8>)
 80053ee:	f023 0301 	bic.w	r3, r3, #1
 80053f2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f6:	f7fc f9db 	bl	80017b0 <HAL_GetTick>
 80053fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80053fc:	e008      	b.n	8005410 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053fe:	f7fc f9d7 	bl	80017b0 <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	2b02      	cmp	r3, #2
 800540a:	d901      	bls.n	8005410 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e0d5      	b.n	80055bc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005410:	4b14      	ldr	r3, [pc, #80]	@ (8005464 <HAL_RCC_OscConfig+0x4b8>)
 8005412:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1ef      	bne.n	80053fe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	2b00      	cmp	r3, #0
 8005424:	f000 80c9 	beq.w	80055ba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005428:	4b0e      	ldr	r3, [pc, #56]	@ (8005464 <HAL_RCC_OscConfig+0x4b8>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f003 030c 	and.w	r3, r3, #12
 8005430:	2b0c      	cmp	r3, #12
 8005432:	f000 8083 	beq.w	800553c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	2b02      	cmp	r3, #2
 800543c:	d15e      	bne.n	80054fc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800543e:	4b09      	ldr	r3, [pc, #36]	@ (8005464 <HAL_RCC_OscConfig+0x4b8>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a08      	ldr	r2, [pc, #32]	@ (8005464 <HAL_RCC_OscConfig+0x4b8>)
 8005444:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005448:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800544a:	f7fc f9b1 	bl	80017b0 <HAL_GetTick>
 800544e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005450:	e00c      	b.n	800546c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005452:	f7fc f9ad 	bl	80017b0 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	2b02      	cmp	r3, #2
 800545e:	d905      	bls.n	800546c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e0ab      	b.n	80055bc <HAL_RCC_OscConfig+0x610>
 8005464:	40021000 	.word	0x40021000
 8005468:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800546c:	4b55      	ldr	r3, [pc, #340]	@ (80055c4 <HAL_RCC_OscConfig+0x618>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1ec      	bne.n	8005452 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005478:	4b52      	ldr	r3, [pc, #328]	@ (80055c4 <HAL_RCC_OscConfig+0x618>)
 800547a:	68da      	ldr	r2, [r3, #12]
 800547c:	4b52      	ldr	r3, [pc, #328]	@ (80055c8 <HAL_RCC_OscConfig+0x61c>)
 800547e:	4013      	ands	r3, r2
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	6a11      	ldr	r1, [r2, #32]
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005488:	3a01      	subs	r2, #1
 800548a:	0112      	lsls	r2, r2, #4
 800548c:	4311      	orrs	r1, r2
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005492:	0212      	lsls	r2, r2, #8
 8005494:	4311      	orrs	r1, r2
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800549a:	0852      	lsrs	r2, r2, #1
 800549c:	3a01      	subs	r2, #1
 800549e:	0552      	lsls	r2, r2, #21
 80054a0:	4311      	orrs	r1, r2
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80054a6:	0852      	lsrs	r2, r2, #1
 80054a8:	3a01      	subs	r2, #1
 80054aa:	0652      	lsls	r2, r2, #25
 80054ac:	4311      	orrs	r1, r2
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80054b2:	06d2      	lsls	r2, r2, #27
 80054b4:	430a      	orrs	r2, r1
 80054b6:	4943      	ldr	r1, [pc, #268]	@ (80055c4 <HAL_RCC_OscConfig+0x618>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054bc:	4b41      	ldr	r3, [pc, #260]	@ (80055c4 <HAL_RCC_OscConfig+0x618>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a40      	ldr	r2, [pc, #256]	@ (80055c4 <HAL_RCC_OscConfig+0x618>)
 80054c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054c6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80054c8:	4b3e      	ldr	r3, [pc, #248]	@ (80055c4 <HAL_RCC_OscConfig+0x618>)
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	4a3d      	ldr	r2, [pc, #244]	@ (80055c4 <HAL_RCC_OscConfig+0x618>)
 80054ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d4:	f7fc f96c 	bl	80017b0 <HAL_GetTick>
 80054d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054da:	e008      	b.n	80054ee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054dc:	f7fc f968 	bl	80017b0 <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d901      	bls.n	80054ee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e066      	b.n	80055bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054ee:	4b35      	ldr	r3, [pc, #212]	@ (80055c4 <HAL_RCC_OscConfig+0x618>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d0f0      	beq.n	80054dc <HAL_RCC_OscConfig+0x530>
 80054fa:	e05e      	b.n	80055ba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054fc:	4b31      	ldr	r3, [pc, #196]	@ (80055c4 <HAL_RCC_OscConfig+0x618>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a30      	ldr	r2, [pc, #192]	@ (80055c4 <HAL_RCC_OscConfig+0x618>)
 8005502:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005506:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005508:	f7fc f952 	bl	80017b0 <HAL_GetTick>
 800550c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800550e:	e008      	b.n	8005522 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005510:	f7fc f94e 	bl	80017b0 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	2b02      	cmp	r3, #2
 800551c:	d901      	bls.n	8005522 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e04c      	b.n	80055bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005522:	4b28      	ldr	r3, [pc, #160]	@ (80055c4 <HAL_RCC_OscConfig+0x618>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1f0      	bne.n	8005510 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800552e:	4b25      	ldr	r3, [pc, #148]	@ (80055c4 <HAL_RCC_OscConfig+0x618>)
 8005530:	68da      	ldr	r2, [r3, #12]
 8005532:	4924      	ldr	r1, [pc, #144]	@ (80055c4 <HAL_RCC_OscConfig+0x618>)
 8005534:	4b25      	ldr	r3, [pc, #148]	@ (80055cc <HAL_RCC_OscConfig+0x620>)
 8005536:	4013      	ands	r3, r2
 8005538:	60cb      	str	r3, [r1, #12]
 800553a:	e03e      	b.n	80055ba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	69db      	ldr	r3, [r3, #28]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d101      	bne.n	8005548 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e039      	b.n	80055bc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005548:	4b1e      	ldr	r3, [pc, #120]	@ (80055c4 <HAL_RCC_OscConfig+0x618>)
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f003 0203 	and.w	r2, r3, #3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a1b      	ldr	r3, [r3, #32]
 8005558:	429a      	cmp	r2, r3
 800555a:	d12c      	bne.n	80055b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005566:	3b01      	subs	r3, #1
 8005568:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800556a:	429a      	cmp	r2, r3
 800556c:	d123      	bne.n	80055b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005578:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800557a:	429a      	cmp	r2, r3
 800557c:	d11b      	bne.n	80055b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005588:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800558a:	429a      	cmp	r2, r3
 800558c:	d113      	bne.n	80055b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005598:	085b      	lsrs	r3, r3, #1
 800559a:	3b01      	subs	r3, #1
 800559c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800559e:	429a      	cmp	r2, r3
 80055a0:	d109      	bne.n	80055b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055ac:	085b      	lsrs	r3, r3, #1
 80055ae:	3b01      	subs	r3, #1
 80055b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d001      	beq.n	80055ba <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e000      	b.n	80055bc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3720      	adds	r7, #32
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	40021000 	.word	0x40021000
 80055c8:	019f800c 	.word	0x019f800c
 80055cc:	feeefffc 	.word	0xfeeefffc

080055d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80055da:	2300      	movs	r3, #0
 80055dc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d101      	bne.n	80055e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e11e      	b.n	8005826 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055e8:	4b91      	ldr	r3, [pc, #580]	@ (8005830 <HAL_RCC_ClockConfig+0x260>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 030f 	and.w	r3, r3, #15
 80055f0:	683a      	ldr	r2, [r7, #0]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d910      	bls.n	8005618 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055f6:	4b8e      	ldr	r3, [pc, #568]	@ (8005830 <HAL_RCC_ClockConfig+0x260>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f023 020f 	bic.w	r2, r3, #15
 80055fe:	498c      	ldr	r1, [pc, #560]	@ (8005830 <HAL_RCC_ClockConfig+0x260>)
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	4313      	orrs	r3, r2
 8005604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005606:	4b8a      	ldr	r3, [pc, #552]	@ (8005830 <HAL_RCC_ClockConfig+0x260>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 030f 	and.w	r3, r3, #15
 800560e:	683a      	ldr	r2, [r7, #0]
 8005610:	429a      	cmp	r2, r3
 8005612:	d001      	beq.n	8005618 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e106      	b.n	8005826 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0301 	and.w	r3, r3, #1
 8005620:	2b00      	cmp	r3, #0
 8005622:	d073      	beq.n	800570c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	2b03      	cmp	r3, #3
 800562a:	d129      	bne.n	8005680 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800562c:	4b81      	ldr	r3, [pc, #516]	@ (8005834 <HAL_RCC_ClockConfig+0x264>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d101      	bne.n	800563c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e0f4      	b.n	8005826 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800563c:	f000 f966 	bl	800590c <RCC_GetSysClockFreqFromPLLSource>
 8005640:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	4a7c      	ldr	r2, [pc, #496]	@ (8005838 <HAL_RCC_ClockConfig+0x268>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d93f      	bls.n	80056ca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800564a:	4b7a      	ldr	r3, [pc, #488]	@ (8005834 <HAL_RCC_ClockConfig+0x264>)
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d009      	beq.n	800566a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800565e:	2b00      	cmp	r3, #0
 8005660:	d033      	beq.n	80056ca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005666:	2b00      	cmp	r3, #0
 8005668:	d12f      	bne.n	80056ca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800566a:	4b72      	ldr	r3, [pc, #456]	@ (8005834 <HAL_RCC_ClockConfig+0x264>)
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005672:	4a70      	ldr	r2, [pc, #448]	@ (8005834 <HAL_RCC_ClockConfig+0x264>)
 8005674:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005678:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800567a:	2380      	movs	r3, #128	@ 0x80
 800567c:	617b      	str	r3, [r7, #20]
 800567e:	e024      	b.n	80056ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	2b02      	cmp	r3, #2
 8005686:	d107      	bne.n	8005698 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005688:	4b6a      	ldr	r3, [pc, #424]	@ (8005834 <HAL_RCC_ClockConfig+0x264>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d109      	bne.n	80056a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e0c6      	b.n	8005826 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005698:	4b66      	ldr	r3, [pc, #408]	@ (8005834 <HAL_RCC_ClockConfig+0x264>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d101      	bne.n	80056a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e0be      	b.n	8005826 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80056a8:	f000 f8ce 	bl	8005848 <HAL_RCC_GetSysClockFreq>
 80056ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	4a61      	ldr	r2, [pc, #388]	@ (8005838 <HAL_RCC_ClockConfig+0x268>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d909      	bls.n	80056ca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80056b6:	4b5f      	ldr	r3, [pc, #380]	@ (8005834 <HAL_RCC_ClockConfig+0x264>)
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056be:	4a5d      	ldr	r2, [pc, #372]	@ (8005834 <HAL_RCC_ClockConfig+0x264>)
 80056c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056c4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80056c6:	2380      	movs	r3, #128	@ 0x80
 80056c8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80056ca:	4b5a      	ldr	r3, [pc, #360]	@ (8005834 <HAL_RCC_ClockConfig+0x264>)
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f023 0203 	bic.w	r2, r3, #3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	4957      	ldr	r1, [pc, #348]	@ (8005834 <HAL_RCC_ClockConfig+0x264>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056dc:	f7fc f868 	bl	80017b0 <HAL_GetTick>
 80056e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056e2:	e00a      	b.n	80056fa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056e4:	f7fc f864 	bl	80017b0 <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d901      	bls.n	80056fa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e095      	b.n	8005826 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056fa:	4b4e      	ldr	r3, [pc, #312]	@ (8005834 <HAL_RCC_ClockConfig+0x264>)
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f003 020c 	and.w	r2, r3, #12
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	429a      	cmp	r2, r3
 800570a:	d1eb      	bne.n	80056e4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0302 	and.w	r3, r3, #2
 8005714:	2b00      	cmp	r3, #0
 8005716:	d023      	beq.n	8005760 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0304 	and.w	r3, r3, #4
 8005720:	2b00      	cmp	r3, #0
 8005722:	d005      	beq.n	8005730 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005724:	4b43      	ldr	r3, [pc, #268]	@ (8005834 <HAL_RCC_ClockConfig+0x264>)
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	4a42      	ldr	r2, [pc, #264]	@ (8005834 <HAL_RCC_ClockConfig+0x264>)
 800572a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800572e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0308 	and.w	r3, r3, #8
 8005738:	2b00      	cmp	r3, #0
 800573a:	d007      	beq.n	800574c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800573c:	4b3d      	ldr	r3, [pc, #244]	@ (8005834 <HAL_RCC_ClockConfig+0x264>)
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005744:	4a3b      	ldr	r2, [pc, #236]	@ (8005834 <HAL_RCC_ClockConfig+0x264>)
 8005746:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800574a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800574c:	4b39      	ldr	r3, [pc, #228]	@ (8005834 <HAL_RCC_ClockConfig+0x264>)
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	4936      	ldr	r1, [pc, #216]	@ (8005834 <HAL_RCC_ClockConfig+0x264>)
 800575a:	4313      	orrs	r3, r2
 800575c:	608b      	str	r3, [r1, #8]
 800575e:	e008      	b.n	8005772 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	2b80      	cmp	r3, #128	@ 0x80
 8005764:	d105      	bne.n	8005772 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005766:	4b33      	ldr	r3, [pc, #204]	@ (8005834 <HAL_RCC_ClockConfig+0x264>)
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	4a32      	ldr	r2, [pc, #200]	@ (8005834 <HAL_RCC_ClockConfig+0x264>)
 800576c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005770:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005772:	4b2f      	ldr	r3, [pc, #188]	@ (8005830 <HAL_RCC_ClockConfig+0x260>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 030f 	and.w	r3, r3, #15
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	429a      	cmp	r2, r3
 800577e:	d21d      	bcs.n	80057bc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005780:	4b2b      	ldr	r3, [pc, #172]	@ (8005830 <HAL_RCC_ClockConfig+0x260>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f023 020f 	bic.w	r2, r3, #15
 8005788:	4929      	ldr	r1, [pc, #164]	@ (8005830 <HAL_RCC_ClockConfig+0x260>)
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	4313      	orrs	r3, r2
 800578e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005790:	f7fc f80e 	bl	80017b0 <HAL_GetTick>
 8005794:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005796:	e00a      	b.n	80057ae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005798:	f7fc f80a 	bl	80017b0 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d901      	bls.n	80057ae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e03b      	b.n	8005826 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ae:	4b20      	ldr	r3, [pc, #128]	@ (8005830 <HAL_RCC_ClockConfig+0x260>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 030f 	and.w	r3, r3, #15
 80057b6:	683a      	ldr	r2, [r7, #0]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d1ed      	bne.n	8005798 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0304 	and.w	r3, r3, #4
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d008      	beq.n	80057da <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057c8:	4b1a      	ldr	r3, [pc, #104]	@ (8005834 <HAL_RCC_ClockConfig+0x264>)
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	4917      	ldr	r1, [pc, #92]	@ (8005834 <HAL_RCC_ClockConfig+0x264>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0308 	and.w	r3, r3, #8
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d009      	beq.n	80057fa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057e6:	4b13      	ldr	r3, [pc, #76]	@ (8005834 <HAL_RCC_ClockConfig+0x264>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	490f      	ldr	r1, [pc, #60]	@ (8005834 <HAL_RCC_ClockConfig+0x264>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80057fa:	f000 f825 	bl	8005848 <HAL_RCC_GetSysClockFreq>
 80057fe:	4602      	mov	r2, r0
 8005800:	4b0c      	ldr	r3, [pc, #48]	@ (8005834 <HAL_RCC_ClockConfig+0x264>)
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	091b      	lsrs	r3, r3, #4
 8005806:	f003 030f 	and.w	r3, r3, #15
 800580a:	490c      	ldr	r1, [pc, #48]	@ (800583c <HAL_RCC_ClockConfig+0x26c>)
 800580c:	5ccb      	ldrb	r3, [r1, r3]
 800580e:	f003 031f 	and.w	r3, r3, #31
 8005812:	fa22 f303 	lsr.w	r3, r2, r3
 8005816:	4a0a      	ldr	r2, [pc, #40]	@ (8005840 <HAL_RCC_ClockConfig+0x270>)
 8005818:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800581a:	4b0a      	ldr	r3, [pc, #40]	@ (8005844 <HAL_RCC_ClockConfig+0x274>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4618      	mov	r0, r3
 8005820:	f7fb ff7a 	bl	8001718 <HAL_InitTick>
 8005824:	4603      	mov	r3, r0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3718      	adds	r7, #24
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	40022000 	.word	0x40022000
 8005834:	40021000 	.word	0x40021000
 8005838:	04c4b400 	.word	0x04c4b400
 800583c:	08007be8 	.word	0x08007be8
 8005840:	20000020 	.word	0x20000020
 8005844:	20000024 	.word	0x20000024

08005848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005848:	b480      	push	{r7}
 800584a:	b087      	sub	sp, #28
 800584c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800584e:	4b2c      	ldr	r3, [pc, #176]	@ (8005900 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f003 030c 	and.w	r3, r3, #12
 8005856:	2b04      	cmp	r3, #4
 8005858:	d102      	bne.n	8005860 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800585a:	4b2a      	ldr	r3, [pc, #168]	@ (8005904 <HAL_RCC_GetSysClockFreq+0xbc>)
 800585c:	613b      	str	r3, [r7, #16]
 800585e:	e047      	b.n	80058f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005860:	4b27      	ldr	r3, [pc, #156]	@ (8005900 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	f003 030c 	and.w	r3, r3, #12
 8005868:	2b08      	cmp	r3, #8
 800586a:	d102      	bne.n	8005872 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800586c:	4b26      	ldr	r3, [pc, #152]	@ (8005908 <HAL_RCC_GetSysClockFreq+0xc0>)
 800586e:	613b      	str	r3, [r7, #16]
 8005870:	e03e      	b.n	80058f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005872:	4b23      	ldr	r3, [pc, #140]	@ (8005900 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f003 030c 	and.w	r3, r3, #12
 800587a:	2b0c      	cmp	r3, #12
 800587c:	d136      	bne.n	80058ec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800587e:	4b20      	ldr	r3, [pc, #128]	@ (8005900 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	f003 0303 	and.w	r3, r3, #3
 8005886:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005888:	4b1d      	ldr	r3, [pc, #116]	@ (8005900 <HAL_RCC_GetSysClockFreq+0xb8>)
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	091b      	lsrs	r3, r3, #4
 800588e:	f003 030f 	and.w	r3, r3, #15
 8005892:	3301      	adds	r3, #1
 8005894:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2b03      	cmp	r3, #3
 800589a:	d10c      	bne.n	80058b6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800589c:	4a1a      	ldr	r2, [pc, #104]	@ (8005908 <HAL_RCC_GetSysClockFreq+0xc0>)
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a4:	4a16      	ldr	r2, [pc, #88]	@ (8005900 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058a6:	68d2      	ldr	r2, [r2, #12]
 80058a8:	0a12      	lsrs	r2, r2, #8
 80058aa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80058ae:	fb02 f303 	mul.w	r3, r2, r3
 80058b2:	617b      	str	r3, [r7, #20]
      break;
 80058b4:	e00c      	b.n	80058d0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058b6:	4a13      	ldr	r2, [pc, #76]	@ (8005904 <HAL_RCC_GetSysClockFreq+0xbc>)
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80058be:	4a10      	ldr	r2, [pc, #64]	@ (8005900 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058c0:	68d2      	ldr	r2, [r2, #12]
 80058c2:	0a12      	lsrs	r2, r2, #8
 80058c4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80058c8:	fb02 f303 	mul.w	r3, r2, r3
 80058cc:	617b      	str	r3, [r7, #20]
      break;
 80058ce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80058d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005900 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	0e5b      	lsrs	r3, r3, #25
 80058d6:	f003 0303 	and.w	r3, r3, #3
 80058da:	3301      	adds	r3, #1
 80058dc:	005b      	lsls	r3, r3, #1
 80058de:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e8:	613b      	str	r3, [r7, #16]
 80058ea:	e001      	b.n	80058f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80058ec:	2300      	movs	r3, #0
 80058ee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80058f0:	693b      	ldr	r3, [r7, #16]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	371c      	adds	r7, #28
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	40021000 	.word	0x40021000
 8005904:	00f42400 	.word	0x00f42400
 8005908:	007a1200 	.word	0x007a1200

0800590c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800590c:	b480      	push	{r7}
 800590e:	b087      	sub	sp, #28
 8005910:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005912:	4b1e      	ldr	r3, [pc, #120]	@ (800598c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	f003 0303 	and.w	r3, r3, #3
 800591a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800591c:	4b1b      	ldr	r3, [pc, #108]	@ (800598c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	091b      	lsrs	r3, r3, #4
 8005922:	f003 030f 	and.w	r3, r3, #15
 8005926:	3301      	adds	r3, #1
 8005928:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	2b03      	cmp	r3, #3
 800592e:	d10c      	bne.n	800594a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005930:	4a17      	ldr	r2, [pc, #92]	@ (8005990 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	fbb2 f3f3 	udiv	r3, r2, r3
 8005938:	4a14      	ldr	r2, [pc, #80]	@ (800598c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800593a:	68d2      	ldr	r2, [r2, #12]
 800593c:	0a12      	lsrs	r2, r2, #8
 800593e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005942:	fb02 f303 	mul.w	r3, r2, r3
 8005946:	617b      	str	r3, [r7, #20]
    break;
 8005948:	e00c      	b.n	8005964 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800594a:	4a12      	ldr	r2, [pc, #72]	@ (8005994 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005952:	4a0e      	ldr	r2, [pc, #56]	@ (800598c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005954:	68d2      	ldr	r2, [r2, #12]
 8005956:	0a12      	lsrs	r2, r2, #8
 8005958:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800595c:	fb02 f303 	mul.w	r3, r2, r3
 8005960:	617b      	str	r3, [r7, #20]
    break;
 8005962:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005964:	4b09      	ldr	r3, [pc, #36]	@ (800598c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	0e5b      	lsrs	r3, r3, #25
 800596a:	f003 0303 	and.w	r3, r3, #3
 800596e:	3301      	adds	r3, #1
 8005970:	005b      	lsls	r3, r3, #1
 8005972:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005974:	697a      	ldr	r2, [r7, #20]
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	fbb2 f3f3 	udiv	r3, r2, r3
 800597c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800597e:	687b      	ldr	r3, [r7, #4]
}
 8005980:	4618      	mov	r0, r3
 8005982:	371c      	adds	r7, #28
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr
 800598c:	40021000 	.word	0x40021000
 8005990:	007a1200 	.word	0x007a1200
 8005994:	00f42400 	.word	0x00f42400

08005998 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80059a0:	2300      	movs	r3, #0
 80059a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80059a4:	2300      	movs	r3, #0
 80059a6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f000 8098 	beq.w	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059b6:	2300      	movs	r3, #0
 80059b8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059ba:	4b43      	ldr	r3, [pc, #268]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10d      	bne.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059c6:	4b40      	ldr	r3, [pc, #256]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059ca:	4a3f      	ldr	r2, [pc, #252]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80059d2:	4b3d      	ldr	r3, [pc, #244]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059da:	60bb      	str	r3, [r7, #8]
 80059dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059de:	2301      	movs	r3, #1
 80059e0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059e2:	4b3a      	ldr	r3, [pc, #232]	@ (8005acc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a39      	ldr	r2, [pc, #228]	@ (8005acc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80059e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059ee:	f7fb fedf 	bl	80017b0 <HAL_GetTick>
 80059f2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059f4:	e009      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059f6:	f7fb fedb 	bl	80017b0 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d902      	bls.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	74fb      	strb	r3, [r7, #19]
        break;
 8005a08:	e005      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a0a:	4b30      	ldr	r3, [pc, #192]	@ (8005acc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d0ef      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005a16:	7cfb      	ldrb	r3, [r7, #19]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d159      	bne.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005a1c:	4b2a      	ldr	r3, [pc, #168]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a26:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d01e      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d019      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005a38:	4b23      	ldr	r3, [pc, #140]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a44:	4b20      	ldr	r3, [pc, #128]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a4a:	4a1f      	ldr	r2, [pc, #124]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a54:	4b1c      	ldr	r3, [pc, #112]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a64:	4a18      	ldr	r2, [pc, #96]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d016      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a76:	f7fb fe9b 	bl	80017b0 <HAL_GetTick>
 8005a7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a7c:	e00b      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a7e:	f7fb fe97 	bl	80017b0 <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d902      	bls.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	74fb      	strb	r3, [r7, #19]
            break;
 8005a94:	e006      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a96:	4b0c      	ldr	r3, [pc, #48]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a9c:	f003 0302 	and.w	r3, r3, #2
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d0ec      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005aa4:	7cfb      	ldrb	r3, [r7, #19]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10b      	bne.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005aaa:	4b07      	ldr	r3, [pc, #28]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ab0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab8:	4903      	ldr	r1, [pc, #12]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005ac0:	e008      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ac2:	7cfb      	ldrb	r3, [r7, #19]
 8005ac4:	74bb      	strb	r3, [r7, #18]
 8005ac6:	e005      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005ac8:	40021000 	.word	0x40021000
 8005acc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ad0:	7cfb      	ldrb	r3, [r7, #19]
 8005ad2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ad4:	7c7b      	ldrb	r3, [r7, #17]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d105      	bne.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ada:	4ba6      	ldr	r3, [pc, #664]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ade:	4aa5      	ldr	r2, [pc, #660]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ae0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ae4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00a      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005af2:	4ba0      	ldr	r3, [pc, #640]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005af8:	f023 0203 	bic.w	r2, r3, #3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	499c      	ldr	r1, [pc, #624]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0302 	and.w	r3, r3, #2
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00a      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b14:	4b97      	ldr	r3, [pc, #604]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b1a:	f023 020c 	bic.w	r2, r3, #12
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	4994      	ldr	r1, [pc, #592]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0304 	and.w	r3, r3, #4
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00a      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b36:	4b8f      	ldr	r3, [pc, #572]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b3c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	498b      	ldr	r1, [pc, #556]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0308 	and.w	r3, r3, #8
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00a      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b58:	4b86      	ldr	r3, [pc, #536]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b5e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	4983      	ldr	r1, [pc, #524]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0320 	and.w	r3, r3, #32
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00a      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b7a:	4b7e      	ldr	r3, [pc, #504]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b80:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	695b      	ldr	r3, [r3, #20]
 8005b88:	497a      	ldr	r1, [pc, #488]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00a      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b9c:	4b75      	ldr	r3, [pc, #468]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ba2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	4972      	ldr	r1, [pc, #456]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00a      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005bbe:	4b6d      	ldr	r3, [pc, #436]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bc4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	69db      	ldr	r3, [r3, #28]
 8005bcc:	4969      	ldr	r1, [pc, #420]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00a      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005be0:	4b64      	ldr	r3, [pc, #400]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005be6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	4961      	ldr	r1, [pc, #388]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00a      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c02:	4b5c      	ldr	r3, [pc, #368]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c08:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c10:	4958      	ldr	r1, [pc, #352]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d015      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c24:	4b53      	ldr	r3, [pc, #332]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c2a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c32:	4950      	ldr	r1, [pc, #320]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c42:	d105      	bne.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c44:	4b4b      	ldr	r3, [pc, #300]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	4a4a      	ldr	r2, [pc, #296]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c4e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d015      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005c5c:	4b45      	ldr	r3, [pc, #276]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c62:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c6a:	4942      	ldr	r1, [pc, #264]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c7a:	d105      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c7c:	4b3d      	ldr	r3, [pc, #244]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	4a3c      	ldr	r2, [pc, #240]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c86:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d015      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005c94:	4b37      	ldr	r3, [pc, #220]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c9a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ca2:	4934      	ldr	r1, [pc, #208]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005cb2:	d105      	bne.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cb4:	4b2f      	ldr	r3, [pc, #188]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	4a2e      	ldr	r2, [pc, #184]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005cbe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d015      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ccc:	4b29      	ldr	r3, [pc, #164]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cd2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cda:	4926      	ldr	r1, [pc, #152]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ce6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005cea:	d105      	bne.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cec:	4b21      	ldr	r3, [pc, #132]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	4a20      	ldr	r2, [pc, #128]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005cf6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d015      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d04:	4b1b      	ldr	r3, [pc, #108]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d0a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d12:	4918      	ldr	r1, [pc, #96]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d22:	d105      	bne.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d24:	4b13      	ldr	r3, [pc, #76]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	4a12      	ldr	r2, [pc, #72]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d2e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d015      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005d3c:	4b0d      	ldr	r3, [pc, #52]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d42:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d4a:	490a      	ldr	r1, [pc, #40]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d5a:	d105      	bne.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005d5c:	4b05      	ldr	r3, [pc, #20]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	4a04      	ldr	r2, [pc, #16]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d66:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005d68:	7cbb      	ldrb	r3, [r7, #18]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3718      	adds	r7, #24
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	40021000 	.word	0x40021000

08005d78 <siprintf>:
 8005d78:	b40e      	push	{r1, r2, r3}
 8005d7a:	b510      	push	{r4, lr}
 8005d7c:	b09d      	sub	sp, #116	@ 0x74
 8005d7e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005d80:	9002      	str	r0, [sp, #8]
 8005d82:	9006      	str	r0, [sp, #24]
 8005d84:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005d88:	480a      	ldr	r0, [pc, #40]	@ (8005db4 <siprintf+0x3c>)
 8005d8a:	9107      	str	r1, [sp, #28]
 8005d8c:	9104      	str	r1, [sp, #16]
 8005d8e:	490a      	ldr	r1, [pc, #40]	@ (8005db8 <siprintf+0x40>)
 8005d90:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d94:	9105      	str	r1, [sp, #20]
 8005d96:	2400      	movs	r4, #0
 8005d98:	a902      	add	r1, sp, #8
 8005d9a:	6800      	ldr	r0, [r0, #0]
 8005d9c:	9301      	str	r3, [sp, #4]
 8005d9e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005da0:	f000 f994 	bl	80060cc <_svfiprintf_r>
 8005da4:	9b02      	ldr	r3, [sp, #8]
 8005da6:	701c      	strb	r4, [r3, #0]
 8005da8:	b01d      	add	sp, #116	@ 0x74
 8005daa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dae:	b003      	add	sp, #12
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	2000002c 	.word	0x2000002c
 8005db8:	ffff0208 	.word	0xffff0208

08005dbc <memset>:
 8005dbc:	4402      	add	r2, r0
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d100      	bne.n	8005dc6 <memset+0xa>
 8005dc4:	4770      	bx	lr
 8005dc6:	f803 1b01 	strb.w	r1, [r3], #1
 8005dca:	e7f9      	b.n	8005dc0 <memset+0x4>

08005dcc <__errno>:
 8005dcc:	4b01      	ldr	r3, [pc, #4]	@ (8005dd4 <__errno+0x8>)
 8005dce:	6818      	ldr	r0, [r3, #0]
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	2000002c 	.word	0x2000002c

08005dd8 <__libc_init_array>:
 8005dd8:	b570      	push	{r4, r5, r6, lr}
 8005dda:	4d0d      	ldr	r5, [pc, #52]	@ (8005e10 <__libc_init_array+0x38>)
 8005ddc:	4c0d      	ldr	r4, [pc, #52]	@ (8005e14 <__libc_init_array+0x3c>)
 8005dde:	1b64      	subs	r4, r4, r5
 8005de0:	10a4      	asrs	r4, r4, #2
 8005de2:	2600      	movs	r6, #0
 8005de4:	42a6      	cmp	r6, r4
 8005de6:	d109      	bne.n	8005dfc <__libc_init_array+0x24>
 8005de8:	4d0b      	ldr	r5, [pc, #44]	@ (8005e18 <__libc_init_array+0x40>)
 8005dea:	4c0c      	ldr	r4, [pc, #48]	@ (8005e1c <__libc_init_array+0x44>)
 8005dec:	f000 fc64 	bl	80066b8 <_init>
 8005df0:	1b64      	subs	r4, r4, r5
 8005df2:	10a4      	asrs	r4, r4, #2
 8005df4:	2600      	movs	r6, #0
 8005df6:	42a6      	cmp	r6, r4
 8005df8:	d105      	bne.n	8005e06 <__libc_init_array+0x2e>
 8005dfa:	bd70      	pop	{r4, r5, r6, pc}
 8005dfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e00:	4798      	blx	r3
 8005e02:	3601      	adds	r6, #1
 8005e04:	e7ee      	b.n	8005de4 <__libc_init_array+0xc>
 8005e06:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e0a:	4798      	blx	r3
 8005e0c:	3601      	adds	r6, #1
 8005e0e:	e7f2      	b.n	8005df6 <__libc_init_array+0x1e>
 8005e10:	08007c44 	.word	0x08007c44
 8005e14:	08007c44 	.word	0x08007c44
 8005e18:	08007c44 	.word	0x08007c44
 8005e1c:	08007c48 	.word	0x08007c48

08005e20 <__retarget_lock_acquire_recursive>:
 8005e20:	4770      	bx	lr

08005e22 <__retarget_lock_release_recursive>:
 8005e22:	4770      	bx	lr

08005e24 <_free_r>:
 8005e24:	b538      	push	{r3, r4, r5, lr}
 8005e26:	4605      	mov	r5, r0
 8005e28:	2900      	cmp	r1, #0
 8005e2a:	d041      	beq.n	8005eb0 <_free_r+0x8c>
 8005e2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e30:	1f0c      	subs	r4, r1, #4
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	bfb8      	it	lt
 8005e36:	18e4      	addlt	r4, r4, r3
 8005e38:	f000 f8e0 	bl	8005ffc <__malloc_lock>
 8005e3c:	4a1d      	ldr	r2, [pc, #116]	@ (8005eb4 <_free_r+0x90>)
 8005e3e:	6813      	ldr	r3, [r2, #0]
 8005e40:	b933      	cbnz	r3, 8005e50 <_free_r+0x2c>
 8005e42:	6063      	str	r3, [r4, #4]
 8005e44:	6014      	str	r4, [r2, #0]
 8005e46:	4628      	mov	r0, r5
 8005e48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e4c:	f000 b8dc 	b.w	8006008 <__malloc_unlock>
 8005e50:	42a3      	cmp	r3, r4
 8005e52:	d908      	bls.n	8005e66 <_free_r+0x42>
 8005e54:	6820      	ldr	r0, [r4, #0]
 8005e56:	1821      	adds	r1, r4, r0
 8005e58:	428b      	cmp	r3, r1
 8005e5a:	bf01      	itttt	eq
 8005e5c:	6819      	ldreq	r1, [r3, #0]
 8005e5e:	685b      	ldreq	r3, [r3, #4]
 8005e60:	1809      	addeq	r1, r1, r0
 8005e62:	6021      	streq	r1, [r4, #0]
 8005e64:	e7ed      	b.n	8005e42 <_free_r+0x1e>
 8005e66:	461a      	mov	r2, r3
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	b10b      	cbz	r3, 8005e70 <_free_r+0x4c>
 8005e6c:	42a3      	cmp	r3, r4
 8005e6e:	d9fa      	bls.n	8005e66 <_free_r+0x42>
 8005e70:	6811      	ldr	r1, [r2, #0]
 8005e72:	1850      	adds	r0, r2, r1
 8005e74:	42a0      	cmp	r0, r4
 8005e76:	d10b      	bne.n	8005e90 <_free_r+0x6c>
 8005e78:	6820      	ldr	r0, [r4, #0]
 8005e7a:	4401      	add	r1, r0
 8005e7c:	1850      	adds	r0, r2, r1
 8005e7e:	4283      	cmp	r3, r0
 8005e80:	6011      	str	r1, [r2, #0]
 8005e82:	d1e0      	bne.n	8005e46 <_free_r+0x22>
 8005e84:	6818      	ldr	r0, [r3, #0]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	6053      	str	r3, [r2, #4]
 8005e8a:	4408      	add	r0, r1
 8005e8c:	6010      	str	r0, [r2, #0]
 8005e8e:	e7da      	b.n	8005e46 <_free_r+0x22>
 8005e90:	d902      	bls.n	8005e98 <_free_r+0x74>
 8005e92:	230c      	movs	r3, #12
 8005e94:	602b      	str	r3, [r5, #0]
 8005e96:	e7d6      	b.n	8005e46 <_free_r+0x22>
 8005e98:	6820      	ldr	r0, [r4, #0]
 8005e9a:	1821      	adds	r1, r4, r0
 8005e9c:	428b      	cmp	r3, r1
 8005e9e:	bf04      	itt	eq
 8005ea0:	6819      	ldreq	r1, [r3, #0]
 8005ea2:	685b      	ldreq	r3, [r3, #4]
 8005ea4:	6063      	str	r3, [r4, #4]
 8005ea6:	bf04      	itt	eq
 8005ea8:	1809      	addeq	r1, r1, r0
 8005eaa:	6021      	streq	r1, [r4, #0]
 8005eac:	6054      	str	r4, [r2, #4]
 8005eae:	e7ca      	b.n	8005e46 <_free_r+0x22>
 8005eb0:	bd38      	pop	{r3, r4, r5, pc}
 8005eb2:	bf00      	nop
 8005eb4:	200007ac 	.word	0x200007ac

08005eb8 <sbrk_aligned>:
 8005eb8:	b570      	push	{r4, r5, r6, lr}
 8005eba:	4e0f      	ldr	r6, [pc, #60]	@ (8005ef8 <sbrk_aligned+0x40>)
 8005ebc:	460c      	mov	r4, r1
 8005ebe:	6831      	ldr	r1, [r6, #0]
 8005ec0:	4605      	mov	r5, r0
 8005ec2:	b911      	cbnz	r1, 8005eca <sbrk_aligned+0x12>
 8005ec4:	f000 fba4 	bl	8006610 <_sbrk_r>
 8005ec8:	6030      	str	r0, [r6, #0]
 8005eca:	4621      	mov	r1, r4
 8005ecc:	4628      	mov	r0, r5
 8005ece:	f000 fb9f 	bl	8006610 <_sbrk_r>
 8005ed2:	1c43      	adds	r3, r0, #1
 8005ed4:	d103      	bne.n	8005ede <sbrk_aligned+0x26>
 8005ed6:	f04f 34ff 	mov.w	r4, #4294967295
 8005eda:	4620      	mov	r0, r4
 8005edc:	bd70      	pop	{r4, r5, r6, pc}
 8005ede:	1cc4      	adds	r4, r0, #3
 8005ee0:	f024 0403 	bic.w	r4, r4, #3
 8005ee4:	42a0      	cmp	r0, r4
 8005ee6:	d0f8      	beq.n	8005eda <sbrk_aligned+0x22>
 8005ee8:	1a21      	subs	r1, r4, r0
 8005eea:	4628      	mov	r0, r5
 8005eec:	f000 fb90 	bl	8006610 <_sbrk_r>
 8005ef0:	3001      	adds	r0, #1
 8005ef2:	d1f2      	bne.n	8005eda <sbrk_aligned+0x22>
 8005ef4:	e7ef      	b.n	8005ed6 <sbrk_aligned+0x1e>
 8005ef6:	bf00      	nop
 8005ef8:	200007a8 	.word	0x200007a8

08005efc <_malloc_r>:
 8005efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f00:	1ccd      	adds	r5, r1, #3
 8005f02:	f025 0503 	bic.w	r5, r5, #3
 8005f06:	3508      	adds	r5, #8
 8005f08:	2d0c      	cmp	r5, #12
 8005f0a:	bf38      	it	cc
 8005f0c:	250c      	movcc	r5, #12
 8005f0e:	2d00      	cmp	r5, #0
 8005f10:	4606      	mov	r6, r0
 8005f12:	db01      	blt.n	8005f18 <_malloc_r+0x1c>
 8005f14:	42a9      	cmp	r1, r5
 8005f16:	d904      	bls.n	8005f22 <_malloc_r+0x26>
 8005f18:	230c      	movs	r3, #12
 8005f1a:	6033      	str	r3, [r6, #0]
 8005f1c:	2000      	movs	r0, #0
 8005f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005ff8 <_malloc_r+0xfc>
 8005f26:	f000 f869 	bl	8005ffc <__malloc_lock>
 8005f2a:	f8d8 3000 	ldr.w	r3, [r8]
 8005f2e:	461c      	mov	r4, r3
 8005f30:	bb44      	cbnz	r4, 8005f84 <_malloc_r+0x88>
 8005f32:	4629      	mov	r1, r5
 8005f34:	4630      	mov	r0, r6
 8005f36:	f7ff ffbf 	bl	8005eb8 <sbrk_aligned>
 8005f3a:	1c43      	adds	r3, r0, #1
 8005f3c:	4604      	mov	r4, r0
 8005f3e:	d158      	bne.n	8005ff2 <_malloc_r+0xf6>
 8005f40:	f8d8 4000 	ldr.w	r4, [r8]
 8005f44:	4627      	mov	r7, r4
 8005f46:	2f00      	cmp	r7, #0
 8005f48:	d143      	bne.n	8005fd2 <_malloc_r+0xd6>
 8005f4a:	2c00      	cmp	r4, #0
 8005f4c:	d04b      	beq.n	8005fe6 <_malloc_r+0xea>
 8005f4e:	6823      	ldr	r3, [r4, #0]
 8005f50:	4639      	mov	r1, r7
 8005f52:	4630      	mov	r0, r6
 8005f54:	eb04 0903 	add.w	r9, r4, r3
 8005f58:	f000 fb5a 	bl	8006610 <_sbrk_r>
 8005f5c:	4581      	cmp	r9, r0
 8005f5e:	d142      	bne.n	8005fe6 <_malloc_r+0xea>
 8005f60:	6821      	ldr	r1, [r4, #0]
 8005f62:	1a6d      	subs	r5, r5, r1
 8005f64:	4629      	mov	r1, r5
 8005f66:	4630      	mov	r0, r6
 8005f68:	f7ff ffa6 	bl	8005eb8 <sbrk_aligned>
 8005f6c:	3001      	adds	r0, #1
 8005f6e:	d03a      	beq.n	8005fe6 <_malloc_r+0xea>
 8005f70:	6823      	ldr	r3, [r4, #0]
 8005f72:	442b      	add	r3, r5
 8005f74:	6023      	str	r3, [r4, #0]
 8005f76:	f8d8 3000 	ldr.w	r3, [r8]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	bb62      	cbnz	r2, 8005fd8 <_malloc_r+0xdc>
 8005f7e:	f8c8 7000 	str.w	r7, [r8]
 8005f82:	e00f      	b.n	8005fa4 <_malloc_r+0xa8>
 8005f84:	6822      	ldr	r2, [r4, #0]
 8005f86:	1b52      	subs	r2, r2, r5
 8005f88:	d420      	bmi.n	8005fcc <_malloc_r+0xd0>
 8005f8a:	2a0b      	cmp	r2, #11
 8005f8c:	d917      	bls.n	8005fbe <_malloc_r+0xc2>
 8005f8e:	1961      	adds	r1, r4, r5
 8005f90:	42a3      	cmp	r3, r4
 8005f92:	6025      	str	r5, [r4, #0]
 8005f94:	bf18      	it	ne
 8005f96:	6059      	strne	r1, [r3, #4]
 8005f98:	6863      	ldr	r3, [r4, #4]
 8005f9a:	bf08      	it	eq
 8005f9c:	f8c8 1000 	streq.w	r1, [r8]
 8005fa0:	5162      	str	r2, [r4, r5]
 8005fa2:	604b      	str	r3, [r1, #4]
 8005fa4:	4630      	mov	r0, r6
 8005fa6:	f000 f82f 	bl	8006008 <__malloc_unlock>
 8005faa:	f104 000b 	add.w	r0, r4, #11
 8005fae:	1d23      	adds	r3, r4, #4
 8005fb0:	f020 0007 	bic.w	r0, r0, #7
 8005fb4:	1ac2      	subs	r2, r0, r3
 8005fb6:	bf1c      	itt	ne
 8005fb8:	1a1b      	subne	r3, r3, r0
 8005fba:	50a3      	strne	r3, [r4, r2]
 8005fbc:	e7af      	b.n	8005f1e <_malloc_r+0x22>
 8005fbe:	6862      	ldr	r2, [r4, #4]
 8005fc0:	42a3      	cmp	r3, r4
 8005fc2:	bf0c      	ite	eq
 8005fc4:	f8c8 2000 	streq.w	r2, [r8]
 8005fc8:	605a      	strne	r2, [r3, #4]
 8005fca:	e7eb      	b.n	8005fa4 <_malloc_r+0xa8>
 8005fcc:	4623      	mov	r3, r4
 8005fce:	6864      	ldr	r4, [r4, #4]
 8005fd0:	e7ae      	b.n	8005f30 <_malloc_r+0x34>
 8005fd2:	463c      	mov	r4, r7
 8005fd4:	687f      	ldr	r7, [r7, #4]
 8005fd6:	e7b6      	b.n	8005f46 <_malloc_r+0x4a>
 8005fd8:	461a      	mov	r2, r3
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	42a3      	cmp	r3, r4
 8005fde:	d1fb      	bne.n	8005fd8 <_malloc_r+0xdc>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	6053      	str	r3, [r2, #4]
 8005fe4:	e7de      	b.n	8005fa4 <_malloc_r+0xa8>
 8005fe6:	230c      	movs	r3, #12
 8005fe8:	6033      	str	r3, [r6, #0]
 8005fea:	4630      	mov	r0, r6
 8005fec:	f000 f80c 	bl	8006008 <__malloc_unlock>
 8005ff0:	e794      	b.n	8005f1c <_malloc_r+0x20>
 8005ff2:	6005      	str	r5, [r0, #0]
 8005ff4:	e7d6      	b.n	8005fa4 <_malloc_r+0xa8>
 8005ff6:	bf00      	nop
 8005ff8:	200007ac 	.word	0x200007ac

08005ffc <__malloc_lock>:
 8005ffc:	4801      	ldr	r0, [pc, #4]	@ (8006004 <__malloc_lock+0x8>)
 8005ffe:	f7ff bf0f 	b.w	8005e20 <__retarget_lock_acquire_recursive>
 8006002:	bf00      	nop
 8006004:	200007a4 	.word	0x200007a4

08006008 <__malloc_unlock>:
 8006008:	4801      	ldr	r0, [pc, #4]	@ (8006010 <__malloc_unlock+0x8>)
 800600a:	f7ff bf0a 	b.w	8005e22 <__retarget_lock_release_recursive>
 800600e:	bf00      	nop
 8006010:	200007a4 	.word	0x200007a4

08006014 <__ssputs_r>:
 8006014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006018:	688e      	ldr	r6, [r1, #8]
 800601a:	461f      	mov	r7, r3
 800601c:	42be      	cmp	r6, r7
 800601e:	680b      	ldr	r3, [r1, #0]
 8006020:	4682      	mov	sl, r0
 8006022:	460c      	mov	r4, r1
 8006024:	4690      	mov	r8, r2
 8006026:	d82d      	bhi.n	8006084 <__ssputs_r+0x70>
 8006028:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800602c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006030:	d026      	beq.n	8006080 <__ssputs_r+0x6c>
 8006032:	6965      	ldr	r5, [r4, #20]
 8006034:	6909      	ldr	r1, [r1, #16]
 8006036:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800603a:	eba3 0901 	sub.w	r9, r3, r1
 800603e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006042:	1c7b      	adds	r3, r7, #1
 8006044:	444b      	add	r3, r9
 8006046:	106d      	asrs	r5, r5, #1
 8006048:	429d      	cmp	r5, r3
 800604a:	bf38      	it	cc
 800604c:	461d      	movcc	r5, r3
 800604e:	0553      	lsls	r3, r2, #21
 8006050:	d527      	bpl.n	80060a2 <__ssputs_r+0x8e>
 8006052:	4629      	mov	r1, r5
 8006054:	f7ff ff52 	bl	8005efc <_malloc_r>
 8006058:	4606      	mov	r6, r0
 800605a:	b360      	cbz	r0, 80060b6 <__ssputs_r+0xa2>
 800605c:	6921      	ldr	r1, [r4, #16]
 800605e:	464a      	mov	r2, r9
 8006060:	f000 fae6 	bl	8006630 <memcpy>
 8006064:	89a3      	ldrh	r3, [r4, #12]
 8006066:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800606a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800606e:	81a3      	strh	r3, [r4, #12]
 8006070:	6126      	str	r6, [r4, #16]
 8006072:	6165      	str	r5, [r4, #20]
 8006074:	444e      	add	r6, r9
 8006076:	eba5 0509 	sub.w	r5, r5, r9
 800607a:	6026      	str	r6, [r4, #0]
 800607c:	60a5      	str	r5, [r4, #8]
 800607e:	463e      	mov	r6, r7
 8006080:	42be      	cmp	r6, r7
 8006082:	d900      	bls.n	8006086 <__ssputs_r+0x72>
 8006084:	463e      	mov	r6, r7
 8006086:	6820      	ldr	r0, [r4, #0]
 8006088:	4632      	mov	r2, r6
 800608a:	4641      	mov	r1, r8
 800608c:	f000 faa6 	bl	80065dc <memmove>
 8006090:	68a3      	ldr	r3, [r4, #8]
 8006092:	1b9b      	subs	r3, r3, r6
 8006094:	60a3      	str	r3, [r4, #8]
 8006096:	6823      	ldr	r3, [r4, #0]
 8006098:	4433      	add	r3, r6
 800609a:	6023      	str	r3, [r4, #0]
 800609c:	2000      	movs	r0, #0
 800609e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060a2:	462a      	mov	r2, r5
 80060a4:	f000 fad2 	bl	800664c <_realloc_r>
 80060a8:	4606      	mov	r6, r0
 80060aa:	2800      	cmp	r0, #0
 80060ac:	d1e0      	bne.n	8006070 <__ssputs_r+0x5c>
 80060ae:	6921      	ldr	r1, [r4, #16]
 80060b0:	4650      	mov	r0, sl
 80060b2:	f7ff feb7 	bl	8005e24 <_free_r>
 80060b6:	230c      	movs	r3, #12
 80060b8:	f8ca 3000 	str.w	r3, [sl]
 80060bc:	89a3      	ldrh	r3, [r4, #12]
 80060be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060c2:	81a3      	strh	r3, [r4, #12]
 80060c4:	f04f 30ff 	mov.w	r0, #4294967295
 80060c8:	e7e9      	b.n	800609e <__ssputs_r+0x8a>
	...

080060cc <_svfiprintf_r>:
 80060cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d0:	4698      	mov	r8, r3
 80060d2:	898b      	ldrh	r3, [r1, #12]
 80060d4:	061b      	lsls	r3, r3, #24
 80060d6:	b09d      	sub	sp, #116	@ 0x74
 80060d8:	4607      	mov	r7, r0
 80060da:	460d      	mov	r5, r1
 80060dc:	4614      	mov	r4, r2
 80060de:	d510      	bpl.n	8006102 <_svfiprintf_r+0x36>
 80060e0:	690b      	ldr	r3, [r1, #16]
 80060e2:	b973      	cbnz	r3, 8006102 <_svfiprintf_r+0x36>
 80060e4:	2140      	movs	r1, #64	@ 0x40
 80060e6:	f7ff ff09 	bl	8005efc <_malloc_r>
 80060ea:	6028      	str	r0, [r5, #0]
 80060ec:	6128      	str	r0, [r5, #16]
 80060ee:	b930      	cbnz	r0, 80060fe <_svfiprintf_r+0x32>
 80060f0:	230c      	movs	r3, #12
 80060f2:	603b      	str	r3, [r7, #0]
 80060f4:	f04f 30ff 	mov.w	r0, #4294967295
 80060f8:	b01d      	add	sp, #116	@ 0x74
 80060fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060fe:	2340      	movs	r3, #64	@ 0x40
 8006100:	616b      	str	r3, [r5, #20]
 8006102:	2300      	movs	r3, #0
 8006104:	9309      	str	r3, [sp, #36]	@ 0x24
 8006106:	2320      	movs	r3, #32
 8006108:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800610c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006110:	2330      	movs	r3, #48	@ 0x30
 8006112:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80062b0 <_svfiprintf_r+0x1e4>
 8006116:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800611a:	f04f 0901 	mov.w	r9, #1
 800611e:	4623      	mov	r3, r4
 8006120:	469a      	mov	sl, r3
 8006122:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006126:	b10a      	cbz	r2, 800612c <_svfiprintf_r+0x60>
 8006128:	2a25      	cmp	r2, #37	@ 0x25
 800612a:	d1f9      	bne.n	8006120 <_svfiprintf_r+0x54>
 800612c:	ebba 0b04 	subs.w	fp, sl, r4
 8006130:	d00b      	beq.n	800614a <_svfiprintf_r+0x7e>
 8006132:	465b      	mov	r3, fp
 8006134:	4622      	mov	r2, r4
 8006136:	4629      	mov	r1, r5
 8006138:	4638      	mov	r0, r7
 800613a:	f7ff ff6b 	bl	8006014 <__ssputs_r>
 800613e:	3001      	adds	r0, #1
 8006140:	f000 80a7 	beq.w	8006292 <_svfiprintf_r+0x1c6>
 8006144:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006146:	445a      	add	r2, fp
 8006148:	9209      	str	r2, [sp, #36]	@ 0x24
 800614a:	f89a 3000 	ldrb.w	r3, [sl]
 800614e:	2b00      	cmp	r3, #0
 8006150:	f000 809f 	beq.w	8006292 <_svfiprintf_r+0x1c6>
 8006154:	2300      	movs	r3, #0
 8006156:	f04f 32ff 	mov.w	r2, #4294967295
 800615a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800615e:	f10a 0a01 	add.w	sl, sl, #1
 8006162:	9304      	str	r3, [sp, #16]
 8006164:	9307      	str	r3, [sp, #28]
 8006166:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800616a:	931a      	str	r3, [sp, #104]	@ 0x68
 800616c:	4654      	mov	r4, sl
 800616e:	2205      	movs	r2, #5
 8006170:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006174:	484e      	ldr	r0, [pc, #312]	@ (80062b0 <_svfiprintf_r+0x1e4>)
 8006176:	f7fa f853 	bl	8000220 <memchr>
 800617a:	9a04      	ldr	r2, [sp, #16]
 800617c:	b9d8      	cbnz	r0, 80061b6 <_svfiprintf_r+0xea>
 800617e:	06d0      	lsls	r0, r2, #27
 8006180:	bf44      	itt	mi
 8006182:	2320      	movmi	r3, #32
 8006184:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006188:	0711      	lsls	r1, r2, #28
 800618a:	bf44      	itt	mi
 800618c:	232b      	movmi	r3, #43	@ 0x2b
 800618e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006192:	f89a 3000 	ldrb.w	r3, [sl]
 8006196:	2b2a      	cmp	r3, #42	@ 0x2a
 8006198:	d015      	beq.n	80061c6 <_svfiprintf_r+0xfa>
 800619a:	9a07      	ldr	r2, [sp, #28]
 800619c:	4654      	mov	r4, sl
 800619e:	2000      	movs	r0, #0
 80061a0:	f04f 0c0a 	mov.w	ip, #10
 80061a4:	4621      	mov	r1, r4
 80061a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061aa:	3b30      	subs	r3, #48	@ 0x30
 80061ac:	2b09      	cmp	r3, #9
 80061ae:	d94b      	bls.n	8006248 <_svfiprintf_r+0x17c>
 80061b0:	b1b0      	cbz	r0, 80061e0 <_svfiprintf_r+0x114>
 80061b2:	9207      	str	r2, [sp, #28]
 80061b4:	e014      	b.n	80061e0 <_svfiprintf_r+0x114>
 80061b6:	eba0 0308 	sub.w	r3, r0, r8
 80061ba:	fa09 f303 	lsl.w	r3, r9, r3
 80061be:	4313      	orrs	r3, r2
 80061c0:	9304      	str	r3, [sp, #16]
 80061c2:	46a2      	mov	sl, r4
 80061c4:	e7d2      	b.n	800616c <_svfiprintf_r+0xa0>
 80061c6:	9b03      	ldr	r3, [sp, #12]
 80061c8:	1d19      	adds	r1, r3, #4
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	9103      	str	r1, [sp, #12]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	bfbb      	ittet	lt
 80061d2:	425b      	neglt	r3, r3
 80061d4:	f042 0202 	orrlt.w	r2, r2, #2
 80061d8:	9307      	strge	r3, [sp, #28]
 80061da:	9307      	strlt	r3, [sp, #28]
 80061dc:	bfb8      	it	lt
 80061de:	9204      	strlt	r2, [sp, #16]
 80061e0:	7823      	ldrb	r3, [r4, #0]
 80061e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80061e4:	d10a      	bne.n	80061fc <_svfiprintf_r+0x130>
 80061e6:	7863      	ldrb	r3, [r4, #1]
 80061e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80061ea:	d132      	bne.n	8006252 <_svfiprintf_r+0x186>
 80061ec:	9b03      	ldr	r3, [sp, #12]
 80061ee:	1d1a      	adds	r2, r3, #4
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	9203      	str	r2, [sp, #12]
 80061f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80061f8:	3402      	adds	r4, #2
 80061fa:	9305      	str	r3, [sp, #20]
 80061fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80062c0 <_svfiprintf_r+0x1f4>
 8006200:	7821      	ldrb	r1, [r4, #0]
 8006202:	2203      	movs	r2, #3
 8006204:	4650      	mov	r0, sl
 8006206:	f7fa f80b 	bl	8000220 <memchr>
 800620a:	b138      	cbz	r0, 800621c <_svfiprintf_r+0x150>
 800620c:	9b04      	ldr	r3, [sp, #16]
 800620e:	eba0 000a 	sub.w	r0, r0, sl
 8006212:	2240      	movs	r2, #64	@ 0x40
 8006214:	4082      	lsls	r2, r0
 8006216:	4313      	orrs	r3, r2
 8006218:	3401      	adds	r4, #1
 800621a:	9304      	str	r3, [sp, #16]
 800621c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006220:	4824      	ldr	r0, [pc, #144]	@ (80062b4 <_svfiprintf_r+0x1e8>)
 8006222:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006226:	2206      	movs	r2, #6
 8006228:	f7f9 fffa 	bl	8000220 <memchr>
 800622c:	2800      	cmp	r0, #0
 800622e:	d036      	beq.n	800629e <_svfiprintf_r+0x1d2>
 8006230:	4b21      	ldr	r3, [pc, #132]	@ (80062b8 <_svfiprintf_r+0x1ec>)
 8006232:	bb1b      	cbnz	r3, 800627c <_svfiprintf_r+0x1b0>
 8006234:	9b03      	ldr	r3, [sp, #12]
 8006236:	3307      	adds	r3, #7
 8006238:	f023 0307 	bic.w	r3, r3, #7
 800623c:	3308      	adds	r3, #8
 800623e:	9303      	str	r3, [sp, #12]
 8006240:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006242:	4433      	add	r3, r6
 8006244:	9309      	str	r3, [sp, #36]	@ 0x24
 8006246:	e76a      	b.n	800611e <_svfiprintf_r+0x52>
 8006248:	fb0c 3202 	mla	r2, ip, r2, r3
 800624c:	460c      	mov	r4, r1
 800624e:	2001      	movs	r0, #1
 8006250:	e7a8      	b.n	80061a4 <_svfiprintf_r+0xd8>
 8006252:	2300      	movs	r3, #0
 8006254:	3401      	adds	r4, #1
 8006256:	9305      	str	r3, [sp, #20]
 8006258:	4619      	mov	r1, r3
 800625a:	f04f 0c0a 	mov.w	ip, #10
 800625e:	4620      	mov	r0, r4
 8006260:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006264:	3a30      	subs	r2, #48	@ 0x30
 8006266:	2a09      	cmp	r2, #9
 8006268:	d903      	bls.n	8006272 <_svfiprintf_r+0x1a6>
 800626a:	2b00      	cmp	r3, #0
 800626c:	d0c6      	beq.n	80061fc <_svfiprintf_r+0x130>
 800626e:	9105      	str	r1, [sp, #20]
 8006270:	e7c4      	b.n	80061fc <_svfiprintf_r+0x130>
 8006272:	fb0c 2101 	mla	r1, ip, r1, r2
 8006276:	4604      	mov	r4, r0
 8006278:	2301      	movs	r3, #1
 800627a:	e7f0      	b.n	800625e <_svfiprintf_r+0x192>
 800627c:	ab03      	add	r3, sp, #12
 800627e:	9300      	str	r3, [sp, #0]
 8006280:	462a      	mov	r2, r5
 8006282:	4b0e      	ldr	r3, [pc, #56]	@ (80062bc <_svfiprintf_r+0x1f0>)
 8006284:	a904      	add	r1, sp, #16
 8006286:	4638      	mov	r0, r7
 8006288:	f3af 8000 	nop.w
 800628c:	1c42      	adds	r2, r0, #1
 800628e:	4606      	mov	r6, r0
 8006290:	d1d6      	bne.n	8006240 <_svfiprintf_r+0x174>
 8006292:	89ab      	ldrh	r3, [r5, #12]
 8006294:	065b      	lsls	r3, r3, #25
 8006296:	f53f af2d 	bmi.w	80060f4 <_svfiprintf_r+0x28>
 800629a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800629c:	e72c      	b.n	80060f8 <_svfiprintf_r+0x2c>
 800629e:	ab03      	add	r3, sp, #12
 80062a0:	9300      	str	r3, [sp, #0]
 80062a2:	462a      	mov	r2, r5
 80062a4:	4b05      	ldr	r3, [pc, #20]	@ (80062bc <_svfiprintf_r+0x1f0>)
 80062a6:	a904      	add	r1, sp, #16
 80062a8:	4638      	mov	r0, r7
 80062aa:	f000 f879 	bl	80063a0 <_printf_i>
 80062ae:	e7ed      	b.n	800628c <_svfiprintf_r+0x1c0>
 80062b0:	08007c08 	.word	0x08007c08
 80062b4:	08007c12 	.word	0x08007c12
 80062b8:	00000000 	.word	0x00000000
 80062bc:	08006015 	.word	0x08006015
 80062c0:	08007c0e 	.word	0x08007c0e

080062c4 <_printf_common>:
 80062c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062c8:	4616      	mov	r6, r2
 80062ca:	4698      	mov	r8, r3
 80062cc:	688a      	ldr	r2, [r1, #8]
 80062ce:	690b      	ldr	r3, [r1, #16]
 80062d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80062d4:	4293      	cmp	r3, r2
 80062d6:	bfb8      	it	lt
 80062d8:	4613      	movlt	r3, r2
 80062da:	6033      	str	r3, [r6, #0]
 80062dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80062e0:	4607      	mov	r7, r0
 80062e2:	460c      	mov	r4, r1
 80062e4:	b10a      	cbz	r2, 80062ea <_printf_common+0x26>
 80062e6:	3301      	adds	r3, #1
 80062e8:	6033      	str	r3, [r6, #0]
 80062ea:	6823      	ldr	r3, [r4, #0]
 80062ec:	0699      	lsls	r1, r3, #26
 80062ee:	bf42      	ittt	mi
 80062f0:	6833      	ldrmi	r3, [r6, #0]
 80062f2:	3302      	addmi	r3, #2
 80062f4:	6033      	strmi	r3, [r6, #0]
 80062f6:	6825      	ldr	r5, [r4, #0]
 80062f8:	f015 0506 	ands.w	r5, r5, #6
 80062fc:	d106      	bne.n	800630c <_printf_common+0x48>
 80062fe:	f104 0a19 	add.w	sl, r4, #25
 8006302:	68e3      	ldr	r3, [r4, #12]
 8006304:	6832      	ldr	r2, [r6, #0]
 8006306:	1a9b      	subs	r3, r3, r2
 8006308:	42ab      	cmp	r3, r5
 800630a:	dc26      	bgt.n	800635a <_printf_common+0x96>
 800630c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006310:	6822      	ldr	r2, [r4, #0]
 8006312:	3b00      	subs	r3, #0
 8006314:	bf18      	it	ne
 8006316:	2301      	movne	r3, #1
 8006318:	0692      	lsls	r2, r2, #26
 800631a:	d42b      	bmi.n	8006374 <_printf_common+0xb0>
 800631c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006320:	4641      	mov	r1, r8
 8006322:	4638      	mov	r0, r7
 8006324:	47c8      	blx	r9
 8006326:	3001      	adds	r0, #1
 8006328:	d01e      	beq.n	8006368 <_printf_common+0xa4>
 800632a:	6823      	ldr	r3, [r4, #0]
 800632c:	6922      	ldr	r2, [r4, #16]
 800632e:	f003 0306 	and.w	r3, r3, #6
 8006332:	2b04      	cmp	r3, #4
 8006334:	bf02      	ittt	eq
 8006336:	68e5      	ldreq	r5, [r4, #12]
 8006338:	6833      	ldreq	r3, [r6, #0]
 800633a:	1aed      	subeq	r5, r5, r3
 800633c:	68a3      	ldr	r3, [r4, #8]
 800633e:	bf0c      	ite	eq
 8006340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006344:	2500      	movne	r5, #0
 8006346:	4293      	cmp	r3, r2
 8006348:	bfc4      	itt	gt
 800634a:	1a9b      	subgt	r3, r3, r2
 800634c:	18ed      	addgt	r5, r5, r3
 800634e:	2600      	movs	r6, #0
 8006350:	341a      	adds	r4, #26
 8006352:	42b5      	cmp	r5, r6
 8006354:	d11a      	bne.n	800638c <_printf_common+0xc8>
 8006356:	2000      	movs	r0, #0
 8006358:	e008      	b.n	800636c <_printf_common+0xa8>
 800635a:	2301      	movs	r3, #1
 800635c:	4652      	mov	r2, sl
 800635e:	4641      	mov	r1, r8
 8006360:	4638      	mov	r0, r7
 8006362:	47c8      	blx	r9
 8006364:	3001      	adds	r0, #1
 8006366:	d103      	bne.n	8006370 <_printf_common+0xac>
 8006368:	f04f 30ff 	mov.w	r0, #4294967295
 800636c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006370:	3501      	adds	r5, #1
 8006372:	e7c6      	b.n	8006302 <_printf_common+0x3e>
 8006374:	18e1      	adds	r1, r4, r3
 8006376:	1c5a      	adds	r2, r3, #1
 8006378:	2030      	movs	r0, #48	@ 0x30
 800637a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800637e:	4422      	add	r2, r4
 8006380:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006384:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006388:	3302      	adds	r3, #2
 800638a:	e7c7      	b.n	800631c <_printf_common+0x58>
 800638c:	2301      	movs	r3, #1
 800638e:	4622      	mov	r2, r4
 8006390:	4641      	mov	r1, r8
 8006392:	4638      	mov	r0, r7
 8006394:	47c8      	blx	r9
 8006396:	3001      	adds	r0, #1
 8006398:	d0e6      	beq.n	8006368 <_printf_common+0xa4>
 800639a:	3601      	adds	r6, #1
 800639c:	e7d9      	b.n	8006352 <_printf_common+0x8e>
	...

080063a0 <_printf_i>:
 80063a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063a4:	7e0f      	ldrb	r7, [r1, #24]
 80063a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80063a8:	2f78      	cmp	r7, #120	@ 0x78
 80063aa:	4691      	mov	r9, r2
 80063ac:	4680      	mov	r8, r0
 80063ae:	460c      	mov	r4, r1
 80063b0:	469a      	mov	sl, r3
 80063b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80063b6:	d807      	bhi.n	80063c8 <_printf_i+0x28>
 80063b8:	2f62      	cmp	r7, #98	@ 0x62
 80063ba:	d80a      	bhi.n	80063d2 <_printf_i+0x32>
 80063bc:	2f00      	cmp	r7, #0
 80063be:	f000 80d1 	beq.w	8006564 <_printf_i+0x1c4>
 80063c2:	2f58      	cmp	r7, #88	@ 0x58
 80063c4:	f000 80b8 	beq.w	8006538 <_printf_i+0x198>
 80063c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80063d0:	e03a      	b.n	8006448 <_printf_i+0xa8>
 80063d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80063d6:	2b15      	cmp	r3, #21
 80063d8:	d8f6      	bhi.n	80063c8 <_printf_i+0x28>
 80063da:	a101      	add	r1, pc, #4	@ (adr r1, 80063e0 <_printf_i+0x40>)
 80063dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063e0:	08006439 	.word	0x08006439
 80063e4:	0800644d 	.word	0x0800644d
 80063e8:	080063c9 	.word	0x080063c9
 80063ec:	080063c9 	.word	0x080063c9
 80063f0:	080063c9 	.word	0x080063c9
 80063f4:	080063c9 	.word	0x080063c9
 80063f8:	0800644d 	.word	0x0800644d
 80063fc:	080063c9 	.word	0x080063c9
 8006400:	080063c9 	.word	0x080063c9
 8006404:	080063c9 	.word	0x080063c9
 8006408:	080063c9 	.word	0x080063c9
 800640c:	0800654b 	.word	0x0800654b
 8006410:	08006477 	.word	0x08006477
 8006414:	08006505 	.word	0x08006505
 8006418:	080063c9 	.word	0x080063c9
 800641c:	080063c9 	.word	0x080063c9
 8006420:	0800656d 	.word	0x0800656d
 8006424:	080063c9 	.word	0x080063c9
 8006428:	08006477 	.word	0x08006477
 800642c:	080063c9 	.word	0x080063c9
 8006430:	080063c9 	.word	0x080063c9
 8006434:	0800650d 	.word	0x0800650d
 8006438:	6833      	ldr	r3, [r6, #0]
 800643a:	1d1a      	adds	r2, r3, #4
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	6032      	str	r2, [r6, #0]
 8006440:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006444:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006448:	2301      	movs	r3, #1
 800644a:	e09c      	b.n	8006586 <_printf_i+0x1e6>
 800644c:	6833      	ldr	r3, [r6, #0]
 800644e:	6820      	ldr	r0, [r4, #0]
 8006450:	1d19      	adds	r1, r3, #4
 8006452:	6031      	str	r1, [r6, #0]
 8006454:	0606      	lsls	r6, r0, #24
 8006456:	d501      	bpl.n	800645c <_printf_i+0xbc>
 8006458:	681d      	ldr	r5, [r3, #0]
 800645a:	e003      	b.n	8006464 <_printf_i+0xc4>
 800645c:	0645      	lsls	r5, r0, #25
 800645e:	d5fb      	bpl.n	8006458 <_printf_i+0xb8>
 8006460:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006464:	2d00      	cmp	r5, #0
 8006466:	da03      	bge.n	8006470 <_printf_i+0xd0>
 8006468:	232d      	movs	r3, #45	@ 0x2d
 800646a:	426d      	negs	r5, r5
 800646c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006470:	4858      	ldr	r0, [pc, #352]	@ (80065d4 <_printf_i+0x234>)
 8006472:	230a      	movs	r3, #10
 8006474:	e011      	b.n	800649a <_printf_i+0xfa>
 8006476:	6821      	ldr	r1, [r4, #0]
 8006478:	6833      	ldr	r3, [r6, #0]
 800647a:	0608      	lsls	r0, r1, #24
 800647c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006480:	d402      	bmi.n	8006488 <_printf_i+0xe8>
 8006482:	0649      	lsls	r1, r1, #25
 8006484:	bf48      	it	mi
 8006486:	b2ad      	uxthmi	r5, r5
 8006488:	2f6f      	cmp	r7, #111	@ 0x6f
 800648a:	4852      	ldr	r0, [pc, #328]	@ (80065d4 <_printf_i+0x234>)
 800648c:	6033      	str	r3, [r6, #0]
 800648e:	bf14      	ite	ne
 8006490:	230a      	movne	r3, #10
 8006492:	2308      	moveq	r3, #8
 8006494:	2100      	movs	r1, #0
 8006496:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800649a:	6866      	ldr	r6, [r4, #4]
 800649c:	60a6      	str	r6, [r4, #8]
 800649e:	2e00      	cmp	r6, #0
 80064a0:	db05      	blt.n	80064ae <_printf_i+0x10e>
 80064a2:	6821      	ldr	r1, [r4, #0]
 80064a4:	432e      	orrs	r6, r5
 80064a6:	f021 0104 	bic.w	r1, r1, #4
 80064aa:	6021      	str	r1, [r4, #0]
 80064ac:	d04b      	beq.n	8006546 <_printf_i+0x1a6>
 80064ae:	4616      	mov	r6, r2
 80064b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80064b4:	fb03 5711 	mls	r7, r3, r1, r5
 80064b8:	5dc7      	ldrb	r7, [r0, r7]
 80064ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80064be:	462f      	mov	r7, r5
 80064c0:	42bb      	cmp	r3, r7
 80064c2:	460d      	mov	r5, r1
 80064c4:	d9f4      	bls.n	80064b0 <_printf_i+0x110>
 80064c6:	2b08      	cmp	r3, #8
 80064c8:	d10b      	bne.n	80064e2 <_printf_i+0x142>
 80064ca:	6823      	ldr	r3, [r4, #0]
 80064cc:	07df      	lsls	r7, r3, #31
 80064ce:	d508      	bpl.n	80064e2 <_printf_i+0x142>
 80064d0:	6923      	ldr	r3, [r4, #16]
 80064d2:	6861      	ldr	r1, [r4, #4]
 80064d4:	4299      	cmp	r1, r3
 80064d6:	bfde      	ittt	le
 80064d8:	2330      	movle	r3, #48	@ 0x30
 80064da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80064de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80064e2:	1b92      	subs	r2, r2, r6
 80064e4:	6122      	str	r2, [r4, #16]
 80064e6:	f8cd a000 	str.w	sl, [sp]
 80064ea:	464b      	mov	r3, r9
 80064ec:	aa03      	add	r2, sp, #12
 80064ee:	4621      	mov	r1, r4
 80064f0:	4640      	mov	r0, r8
 80064f2:	f7ff fee7 	bl	80062c4 <_printf_common>
 80064f6:	3001      	adds	r0, #1
 80064f8:	d14a      	bne.n	8006590 <_printf_i+0x1f0>
 80064fa:	f04f 30ff 	mov.w	r0, #4294967295
 80064fe:	b004      	add	sp, #16
 8006500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006504:	6823      	ldr	r3, [r4, #0]
 8006506:	f043 0320 	orr.w	r3, r3, #32
 800650a:	6023      	str	r3, [r4, #0]
 800650c:	4832      	ldr	r0, [pc, #200]	@ (80065d8 <_printf_i+0x238>)
 800650e:	2778      	movs	r7, #120	@ 0x78
 8006510:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006514:	6823      	ldr	r3, [r4, #0]
 8006516:	6831      	ldr	r1, [r6, #0]
 8006518:	061f      	lsls	r7, r3, #24
 800651a:	f851 5b04 	ldr.w	r5, [r1], #4
 800651e:	d402      	bmi.n	8006526 <_printf_i+0x186>
 8006520:	065f      	lsls	r7, r3, #25
 8006522:	bf48      	it	mi
 8006524:	b2ad      	uxthmi	r5, r5
 8006526:	6031      	str	r1, [r6, #0]
 8006528:	07d9      	lsls	r1, r3, #31
 800652a:	bf44      	itt	mi
 800652c:	f043 0320 	orrmi.w	r3, r3, #32
 8006530:	6023      	strmi	r3, [r4, #0]
 8006532:	b11d      	cbz	r5, 800653c <_printf_i+0x19c>
 8006534:	2310      	movs	r3, #16
 8006536:	e7ad      	b.n	8006494 <_printf_i+0xf4>
 8006538:	4826      	ldr	r0, [pc, #152]	@ (80065d4 <_printf_i+0x234>)
 800653a:	e7e9      	b.n	8006510 <_printf_i+0x170>
 800653c:	6823      	ldr	r3, [r4, #0]
 800653e:	f023 0320 	bic.w	r3, r3, #32
 8006542:	6023      	str	r3, [r4, #0]
 8006544:	e7f6      	b.n	8006534 <_printf_i+0x194>
 8006546:	4616      	mov	r6, r2
 8006548:	e7bd      	b.n	80064c6 <_printf_i+0x126>
 800654a:	6833      	ldr	r3, [r6, #0]
 800654c:	6825      	ldr	r5, [r4, #0]
 800654e:	6961      	ldr	r1, [r4, #20]
 8006550:	1d18      	adds	r0, r3, #4
 8006552:	6030      	str	r0, [r6, #0]
 8006554:	062e      	lsls	r6, r5, #24
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	d501      	bpl.n	800655e <_printf_i+0x1be>
 800655a:	6019      	str	r1, [r3, #0]
 800655c:	e002      	b.n	8006564 <_printf_i+0x1c4>
 800655e:	0668      	lsls	r0, r5, #25
 8006560:	d5fb      	bpl.n	800655a <_printf_i+0x1ba>
 8006562:	8019      	strh	r1, [r3, #0]
 8006564:	2300      	movs	r3, #0
 8006566:	6123      	str	r3, [r4, #16]
 8006568:	4616      	mov	r6, r2
 800656a:	e7bc      	b.n	80064e6 <_printf_i+0x146>
 800656c:	6833      	ldr	r3, [r6, #0]
 800656e:	1d1a      	adds	r2, r3, #4
 8006570:	6032      	str	r2, [r6, #0]
 8006572:	681e      	ldr	r6, [r3, #0]
 8006574:	6862      	ldr	r2, [r4, #4]
 8006576:	2100      	movs	r1, #0
 8006578:	4630      	mov	r0, r6
 800657a:	f7f9 fe51 	bl	8000220 <memchr>
 800657e:	b108      	cbz	r0, 8006584 <_printf_i+0x1e4>
 8006580:	1b80      	subs	r0, r0, r6
 8006582:	6060      	str	r0, [r4, #4]
 8006584:	6863      	ldr	r3, [r4, #4]
 8006586:	6123      	str	r3, [r4, #16]
 8006588:	2300      	movs	r3, #0
 800658a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800658e:	e7aa      	b.n	80064e6 <_printf_i+0x146>
 8006590:	6923      	ldr	r3, [r4, #16]
 8006592:	4632      	mov	r2, r6
 8006594:	4649      	mov	r1, r9
 8006596:	4640      	mov	r0, r8
 8006598:	47d0      	blx	sl
 800659a:	3001      	adds	r0, #1
 800659c:	d0ad      	beq.n	80064fa <_printf_i+0x15a>
 800659e:	6823      	ldr	r3, [r4, #0]
 80065a0:	079b      	lsls	r3, r3, #30
 80065a2:	d413      	bmi.n	80065cc <_printf_i+0x22c>
 80065a4:	68e0      	ldr	r0, [r4, #12]
 80065a6:	9b03      	ldr	r3, [sp, #12]
 80065a8:	4298      	cmp	r0, r3
 80065aa:	bfb8      	it	lt
 80065ac:	4618      	movlt	r0, r3
 80065ae:	e7a6      	b.n	80064fe <_printf_i+0x15e>
 80065b0:	2301      	movs	r3, #1
 80065b2:	4632      	mov	r2, r6
 80065b4:	4649      	mov	r1, r9
 80065b6:	4640      	mov	r0, r8
 80065b8:	47d0      	blx	sl
 80065ba:	3001      	adds	r0, #1
 80065bc:	d09d      	beq.n	80064fa <_printf_i+0x15a>
 80065be:	3501      	adds	r5, #1
 80065c0:	68e3      	ldr	r3, [r4, #12]
 80065c2:	9903      	ldr	r1, [sp, #12]
 80065c4:	1a5b      	subs	r3, r3, r1
 80065c6:	42ab      	cmp	r3, r5
 80065c8:	dcf2      	bgt.n	80065b0 <_printf_i+0x210>
 80065ca:	e7eb      	b.n	80065a4 <_printf_i+0x204>
 80065cc:	2500      	movs	r5, #0
 80065ce:	f104 0619 	add.w	r6, r4, #25
 80065d2:	e7f5      	b.n	80065c0 <_printf_i+0x220>
 80065d4:	08007c19 	.word	0x08007c19
 80065d8:	08007c2a 	.word	0x08007c2a

080065dc <memmove>:
 80065dc:	4288      	cmp	r0, r1
 80065de:	b510      	push	{r4, lr}
 80065e0:	eb01 0402 	add.w	r4, r1, r2
 80065e4:	d902      	bls.n	80065ec <memmove+0x10>
 80065e6:	4284      	cmp	r4, r0
 80065e8:	4623      	mov	r3, r4
 80065ea:	d807      	bhi.n	80065fc <memmove+0x20>
 80065ec:	1e43      	subs	r3, r0, #1
 80065ee:	42a1      	cmp	r1, r4
 80065f0:	d008      	beq.n	8006604 <memmove+0x28>
 80065f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80065fa:	e7f8      	b.n	80065ee <memmove+0x12>
 80065fc:	4402      	add	r2, r0
 80065fe:	4601      	mov	r1, r0
 8006600:	428a      	cmp	r2, r1
 8006602:	d100      	bne.n	8006606 <memmove+0x2a>
 8006604:	bd10      	pop	{r4, pc}
 8006606:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800660a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800660e:	e7f7      	b.n	8006600 <memmove+0x24>

08006610 <_sbrk_r>:
 8006610:	b538      	push	{r3, r4, r5, lr}
 8006612:	4d06      	ldr	r5, [pc, #24]	@ (800662c <_sbrk_r+0x1c>)
 8006614:	2300      	movs	r3, #0
 8006616:	4604      	mov	r4, r0
 8006618:	4608      	mov	r0, r1
 800661a:	602b      	str	r3, [r5, #0]
 800661c:	f7fa fff2 	bl	8001604 <_sbrk>
 8006620:	1c43      	adds	r3, r0, #1
 8006622:	d102      	bne.n	800662a <_sbrk_r+0x1a>
 8006624:	682b      	ldr	r3, [r5, #0]
 8006626:	b103      	cbz	r3, 800662a <_sbrk_r+0x1a>
 8006628:	6023      	str	r3, [r4, #0]
 800662a:	bd38      	pop	{r3, r4, r5, pc}
 800662c:	200007a0 	.word	0x200007a0

08006630 <memcpy>:
 8006630:	440a      	add	r2, r1
 8006632:	4291      	cmp	r1, r2
 8006634:	f100 33ff 	add.w	r3, r0, #4294967295
 8006638:	d100      	bne.n	800663c <memcpy+0xc>
 800663a:	4770      	bx	lr
 800663c:	b510      	push	{r4, lr}
 800663e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006642:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006646:	4291      	cmp	r1, r2
 8006648:	d1f9      	bne.n	800663e <memcpy+0xe>
 800664a:	bd10      	pop	{r4, pc}

0800664c <_realloc_r>:
 800664c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006650:	4607      	mov	r7, r0
 8006652:	4614      	mov	r4, r2
 8006654:	460d      	mov	r5, r1
 8006656:	b921      	cbnz	r1, 8006662 <_realloc_r+0x16>
 8006658:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800665c:	4611      	mov	r1, r2
 800665e:	f7ff bc4d 	b.w	8005efc <_malloc_r>
 8006662:	b92a      	cbnz	r2, 8006670 <_realloc_r+0x24>
 8006664:	f7ff fbde 	bl	8005e24 <_free_r>
 8006668:	4625      	mov	r5, r4
 800666a:	4628      	mov	r0, r5
 800666c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006670:	f000 f81a 	bl	80066a8 <_malloc_usable_size_r>
 8006674:	4284      	cmp	r4, r0
 8006676:	4606      	mov	r6, r0
 8006678:	d802      	bhi.n	8006680 <_realloc_r+0x34>
 800667a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800667e:	d8f4      	bhi.n	800666a <_realloc_r+0x1e>
 8006680:	4621      	mov	r1, r4
 8006682:	4638      	mov	r0, r7
 8006684:	f7ff fc3a 	bl	8005efc <_malloc_r>
 8006688:	4680      	mov	r8, r0
 800668a:	b908      	cbnz	r0, 8006690 <_realloc_r+0x44>
 800668c:	4645      	mov	r5, r8
 800668e:	e7ec      	b.n	800666a <_realloc_r+0x1e>
 8006690:	42b4      	cmp	r4, r6
 8006692:	4622      	mov	r2, r4
 8006694:	4629      	mov	r1, r5
 8006696:	bf28      	it	cs
 8006698:	4632      	movcs	r2, r6
 800669a:	f7ff ffc9 	bl	8006630 <memcpy>
 800669e:	4629      	mov	r1, r5
 80066a0:	4638      	mov	r0, r7
 80066a2:	f7ff fbbf 	bl	8005e24 <_free_r>
 80066a6:	e7f1      	b.n	800668c <_realloc_r+0x40>

080066a8 <_malloc_usable_size_r>:
 80066a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066ac:	1f18      	subs	r0, r3, #4
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	bfbc      	itt	lt
 80066b2:	580b      	ldrlt	r3, [r1, r0]
 80066b4:	18c0      	addlt	r0, r0, r3
 80066b6:	4770      	bx	lr

080066b8 <_init>:
 80066b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ba:	bf00      	nop
 80066bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066be:	bc08      	pop	{r3}
 80066c0:	469e      	mov	lr, r3
 80066c2:	4770      	bx	lr

080066c4 <_fini>:
 80066c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066c6:	bf00      	nop
 80066c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ca:	bc08      	pop	{r3}
 80066cc:	469e      	mov	lr, r3
 80066ce:	4770      	bx	lr
