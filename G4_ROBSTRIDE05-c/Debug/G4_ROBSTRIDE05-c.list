
G4_ROBSTRIDE05-c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b00  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002cd8  08002cd8  00003cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cf8  08002cf8  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002cf8  08002cf8  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002cf8  08002cf8  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cf8  08002cf8  00003cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002cfc  08002cfc  00003cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002d00  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08002d0c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08002d0c  000040c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000080fb  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000179e  00000000  00000000  0000c137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a8  00000000  00000000  0000d8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000066e  00000000  00000000  0000e180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001befd  00000000  00000000  0000e7ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008a90  00000000  00000000  0002a6eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b1b96  00000000  00000000  0003317b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e4d11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002270  00000000  00000000  000e4d54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e6fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002cc0 	.word	0x08002cc0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002cc0 	.word	0x08002cc0

08000218 <float_to_uint>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_FDCAN1_Init(void);
/* USER CODE BEGIN PFP */
int float_to_uint(float x,float x_min,float x_max,int bits)
{
 8000218:	b480      	push	{r7}
 800021a:	b087      	sub	sp, #28
 800021c:	af00      	add	r7, sp, #0
 800021e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000222:	edc7 0a02 	vstr	s1, [r7, #8]
 8000226:	ed87 1a01 	vstr	s2, [r7, #4]
 800022a:	6038      	str	r0, [r7, #0]
	float span = x_max - x_min;
 800022c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000230:	edd7 7a02 	vldr	s15, [r7, #8]
 8000234:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000238:	edc7 7a05 	vstr	s15, [r7, #20]
	float offset = x_min;
 800023c:	68bb      	ldr	r3, [r7, #8]
 800023e:	613b      	str	r3, [r7, #16]
	if(x > x_max) x = x_max;
 8000240:	ed97 7a03 	vldr	s14, [r7, #12]
 8000244:	edd7 7a01 	vldr	s15, [r7, #4]
 8000248:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800024c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000250:	dd02      	ble.n	8000258 <float_to_uint+0x40>
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	60fb      	str	r3, [r7, #12]
 8000256:	e00a      	b.n	800026e <float_to_uint+0x56>
	else if(x < x_min) x = x_min;
 8000258:	ed97 7a03 	vldr	s14, [r7, #12]
 800025c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000260:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000268:	d501      	bpl.n	800026e <float_to_uint+0x56>
 800026a:	68bb      	ldr	r3, [r7, #8]
 800026c:	60fb      	str	r3, [r7, #12]
	return (int) ((x - offset)*((float)((1<<bits)-1))/span);
 800026e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000272:	edd7 7a04 	vldr	s15, [r7, #16]
 8000276:	ee37 7a67 	vsub.f32	s14, s14, s15
 800027a:	2201      	movs	r2, #1
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	fa02 f303 	lsl.w	r3, r2, r3
 8000282:	3b01      	subs	r3, #1
 8000284:	ee07 3a90 	vmov	s15, r3
 8000288:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800028c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000290:	ed97 7a05 	vldr	s14, [r7, #20]
 8000294:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000298:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800029c:	ee17 3a90 	vmov	r3, s15
}
 80002a0:	4618      	mov	r0, r3
 80002a2:	371c      	adds	r7, #28
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr

080002ac <FDCAN1_Config>:

static void FDCAN1_Config(void){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b088      	sub	sp, #32
 80002b0:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef sFilterConfig;

	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 80002b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002b6:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 80002b8:	2300      	movs	r3, #0
 80002ba:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80002bc:	2302      	movs	r3, #2
 80002be:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80002c0:	2301      	movs	r3, #1
 80002c2:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x000;
 80002c4:	2300      	movs	r3, #0
 80002c6:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x000;
 80002c8:	2300      	movs	r3, #0
 80002ca:	617b      	str	r3, [r7, #20]
	if(HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK){
 80002cc:	463b      	mov	r3, r7
 80002ce:	4619      	mov	r1, r3
 80002d0:	4823      	ldr	r0, [pc, #140]	@ (8000360 <FDCAN1_Config+0xb4>)
 80002d2:	f000 fe47 	bl	8000f64 <HAL_FDCAN_ConfigFilter>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <FDCAN1_Config+0x34>
		Error_Handler();
 80002dc:	f000 fa44 	bl	8000768 <Error_Handler>
	}
	/* Configure global filter to reject all non-matching frames */
	if(HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE) != HAL_OK){
 80002e0:	2301      	movs	r3, #1
 80002e2:	9300      	str	r3, [sp, #0]
 80002e4:	2301      	movs	r3, #1
 80002e6:	2202      	movs	r2, #2
 80002e8:	2102      	movs	r1, #2
 80002ea:	481d      	ldr	r0, [pc, #116]	@ (8000360 <FDCAN1_Config+0xb4>)
 80002ec:	f000 fe94 	bl	8001018 <HAL_FDCAN_ConfigGlobalFilter>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <FDCAN1_Config+0x4e>
		Error_Handler();
 80002f6:	f000 fa37 	bl	8000768 <Error_Handler>
	}
	if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK){
 80002fa:	4819      	ldr	r0, [pc, #100]	@ (8000360 <FDCAN1_Config+0xb4>)
 80002fc:	f000 febd 	bl	800107a <HAL_FDCAN_Start>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <FDCAN1_Config+0x5e>
		Error_Handler();
 8000306:	f000 fa2f 	bl	8000768 <Error_Handler>
	}
	if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK){
 800030a:	2200      	movs	r2, #0
 800030c:	2101      	movs	r1, #1
 800030e:	4814      	ldr	r0, [pc, #80]	@ (8000360 <FDCAN1_Config+0xb4>)
 8000310:	f001 f83a 	bl	8001388 <HAL_FDCAN_ActivateNotification>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <FDCAN1_Config+0x72>
		Error_Handler();
 800031a:	f000 fa25 	bl	8000768 <Error_Handler>
	}

	TxHeader.Identifier = 0x200;
 800031e:	4b11      	ldr	r3, [pc, #68]	@ (8000364 <FDCAN1_Config+0xb8>)
 8000320:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000324:	601a      	str	r2, [r3, #0]
	TxHeader.IdType = FDCAN_EXTENDED_ID;
 8000326:	4b0f      	ldr	r3, [pc, #60]	@ (8000364 <FDCAN1_Config+0xb8>)
 8000328:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800032c:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800032e:	4b0d      	ldr	r3, [pc, #52]	@ (8000364 <FDCAN1_Config+0xb8>)
 8000330:	2200      	movs	r2, #0
 8000332:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = 8;
 8000334:	4b0b      	ldr	r3, [pc, #44]	@ (8000364 <FDCAN1_Config+0xb8>)
 8000336:	2208      	movs	r2, #8
 8000338:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800033a:	4b0a      	ldr	r3, [pc, #40]	@ (8000364 <FDCAN1_Config+0xb8>)
 800033c:	2200      	movs	r2, #0
 800033e:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000340:	4b08      	ldr	r3, [pc, #32]	@ (8000364 <FDCAN1_Config+0xb8>)
 8000342:	2200      	movs	r2, #0
 8000344:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000346:	4b07      	ldr	r3, [pc, #28]	@ (8000364 <FDCAN1_Config+0xb8>)
 8000348:	2200      	movs	r2, #0
 800034a:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800034c:	4b05      	ldr	r3, [pc, #20]	@ (8000364 <FDCAN1_Config+0xb8>)
 800034e:	2200      	movs	r2, #0
 8000350:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;
 8000352:	4b04      	ldr	r3, [pc, #16]	@ (8000364 <FDCAN1_Config+0xb8>)
 8000354:	2200      	movs	r2, #0
 8000356:	621a      	str	r2, [r3, #32]
}
 8000358:	bf00      	nop
 800035a:	3718      	adds	r7, #24
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	20000028 	.word	0x20000028
 8000364:	2000008c 	.word	0x2000008c

08000368 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 8000368:	b580      	push	{r7, lr}
 800036a:	b08c      	sub	sp, #48	@ 0x30
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef RxHeader;

	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET){
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	f003 0301 	and.w	r3, r3, #1
 8000378:	2b00      	cmp	r3, #0
 800037a:	d00b      	beq.n	8000394 <HAL_FDCAN_RxFifo0Callback+0x2c>
		if(HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK){
 800037c:	f107 0208 	add.w	r2, r7, #8
 8000380:	4b06      	ldr	r3, [pc, #24]	@ (800039c <HAL_FDCAN_RxFifo0Callback+0x34>)
 8000382:	2140      	movs	r1, #64	@ 0x40
 8000384:	6878      	ldr	r0, [r7, #4]
 8000386:	f000 fee5 	bl	8001154 <HAL_FDCAN_GetRxMessage>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <HAL_FDCAN_RxFifo0Callback+0x2c>
			Error_Handler();
 8000390:	f000 f9ea 	bl	8000768 <Error_Handler>
		}
	}
}
 8000394:	bf00      	nop
 8000396:	3730      	adds	r7, #48	@ 0x30
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	200000b8 	.word	0x200000b8

080003a0 <EnableMotor>:

void EnableMotor(){
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
	TxHeader.Identifier = 0x03<<24|MASTER_ID<<8|MOTOR_ID;
 80003a6:	4b12      	ldr	r3, [pc, #72]	@ (80003f0 <EnableMotor+0x50>)
 80003a8:	4a12      	ldr	r2, [pc, #72]	@ (80003f4 <EnableMotor+0x54>)
 80003aa:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 7; i++){
 80003ac:	2300      	movs	r3, #0
 80003ae:	71fb      	strb	r3, [r7, #7]
 80003b0:	e006      	b.n	80003c0 <EnableMotor+0x20>
		TxData[i] = 0;
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	4a10      	ldr	r2, [pc, #64]	@ (80003f8 <EnableMotor+0x58>)
 80003b6:	2100      	movs	r1, #0
 80003b8:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 7; i++){
 80003ba:	79fb      	ldrb	r3, [r7, #7]
 80003bc:	3301      	adds	r3, #1
 80003be:	71fb      	strb	r3, [r7, #7]
 80003c0:	79fb      	ldrb	r3, [r7, #7]
 80003c2:	2b06      	cmp	r3, #6
 80003c4:	d9f5      	bls.n	80003b2 <EnableMotor+0x12>
	}
	if(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1)) {
 80003c6:	480d      	ldr	r0, [pc, #52]	@ (80003fc <EnableMotor+0x5c>)
 80003c8:	f000 ffcc 	bl	8001364 <HAL_FDCAN_GetTxFifoFreeLevel>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d009      	beq.n	80003e6 <EnableMotor+0x46>
		if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 80003d2:	4a09      	ldr	r2, [pc, #36]	@ (80003f8 <EnableMotor+0x58>)
 80003d4:	4906      	ldr	r1, [pc, #24]	@ (80003f0 <EnableMotor+0x50>)
 80003d6:	4809      	ldr	r0, [pc, #36]	@ (80003fc <EnableMotor+0x5c>)
 80003d8:	f000 fe77 	bl	80010ca <HAL_FDCAN_AddMessageToTxFifoQ>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <EnableMotor+0x46>
			Error_Handler();
 80003e2:	f000 f9c1 	bl	8000768 <Error_Handler>
		}
	}
}
 80003e6:	bf00      	nop
 80003e8:	3708      	adds	r7, #8
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	2000008c 	.word	0x2000008c
 80003f4:	0300fd7f 	.word	0x0300fd7f
 80003f8:	200000b0 	.word	0x200000b0
 80003fc:	20000028 	.word	0x20000028

08000400 <MoveMotor>:

void MoveMotor(float Torque, float Angle, float Speed, float Kp, float Kd){
 8000400:	b580      	push	{r7, lr}
 8000402:	b086      	sub	sp, #24
 8000404:	af00      	add	r7, sp, #0
 8000406:	ed87 0a05 	vstr	s0, [r7, #20]
 800040a:	edc7 0a04 	vstr	s1, [r7, #16]
 800040e:	ed87 1a03 	vstr	s2, [r7, #12]
 8000412:	edc7 1a02 	vstr	s3, [r7, #8]
 8000416:	ed87 2a01 	vstr	s4, [r7, #4]
	TxHeader.Identifier = 0x001<<24|float_to_uint(Torque,T_MIN,T_MAX,16)|MOTOR_ID;
 800041a:	2010      	movs	r0, #16
 800041c:	eeb3 1a01 	vmov.f32	s2, #49	@ 0x41880000  17.0
 8000420:	eefb 0a01 	vmov.f32	s1, #177	@ 0xc1880000 -17.0
 8000424:	ed97 0a05 	vldr	s0, [r7, #20]
 8000428:	f7ff fef6 	bl	8000218 <float_to_uint>
 800042c:	4603      	mov	r3, r0
 800042e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000432:	f043 037f 	orr.w	r3, r3, #127	@ 0x7f
 8000436:	461a      	mov	r2, r3
 8000438:	4b40      	ldr	r3, [pc, #256]	@ (800053c <MoveMotor+0x13c>)
 800043a:	601a      	str	r2, [r3, #0]
	TxData[0] = float_to_uint(Angle, P_MIN,P_MAX, 16)>>8;
 800043c:	2010      	movs	r0, #16
 800043e:	eeb2 1a09 	vmov.f32	s2, #41	@ 0x41480000  12.5
 8000442:	eefa 0a09 	vmov.f32	s1, #169	@ 0xc1480000 -12.5
 8000446:	ed97 0a04 	vldr	s0, [r7, #16]
 800044a:	f7ff fee5 	bl	8000218 <float_to_uint>
 800044e:	4603      	mov	r3, r0
 8000450:	121b      	asrs	r3, r3, #8
 8000452:	b2da      	uxtb	r2, r3
 8000454:	4b3a      	ldr	r3, [pc, #232]	@ (8000540 <MoveMotor+0x140>)
 8000456:	701a      	strb	r2, [r3, #0]
	TxData[1] = float_to_uint(Angle, P_MIN,P_MAX, 16);
 8000458:	2010      	movs	r0, #16
 800045a:	eeb2 1a09 	vmov.f32	s2, #41	@ 0x41480000  12.5
 800045e:	eefa 0a09 	vmov.f32	s1, #169	@ 0xc1480000 -12.5
 8000462:	ed97 0a04 	vldr	s0, [r7, #16]
 8000466:	f7ff fed7 	bl	8000218 <float_to_uint>
 800046a:	4603      	mov	r3, r0
 800046c:	b2da      	uxtb	r2, r3
 800046e:	4b34      	ldr	r3, [pc, #208]	@ (8000540 <MoveMotor+0x140>)
 8000470:	705a      	strb	r2, [r3, #1]
	TxData[2] = float_to_uint(Speed, V_MIN,V_MAX, 16)>>8;
 8000472:	2010      	movs	r0, #16
 8000474:	ed9f 1a33 	vldr	s2, [pc, #204]	@ 8000544 <MoveMotor+0x144>
 8000478:	eddf 0a33 	vldr	s1, [pc, #204]	@ 8000548 <MoveMotor+0x148>
 800047c:	ed97 0a03 	vldr	s0, [r7, #12]
 8000480:	f7ff feca 	bl	8000218 <float_to_uint>
 8000484:	4603      	mov	r3, r0
 8000486:	121b      	asrs	r3, r3, #8
 8000488:	b2da      	uxtb	r2, r3
 800048a:	4b2d      	ldr	r3, [pc, #180]	@ (8000540 <MoveMotor+0x140>)
 800048c:	709a      	strb	r2, [r3, #2]
	TxData[3] = float_to_uint(Speed, V_MIN,V_MAX, 16);
 800048e:	2010      	movs	r0, #16
 8000490:	ed9f 1a2c 	vldr	s2, [pc, #176]	@ 8000544 <MoveMotor+0x144>
 8000494:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 8000548 <MoveMotor+0x148>
 8000498:	ed97 0a03 	vldr	s0, [r7, #12]
 800049c:	f7ff febc 	bl	8000218 <float_to_uint>
 80004a0:	4603      	mov	r3, r0
 80004a2:	b2da      	uxtb	r2, r3
 80004a4:	4b26      	ldr	r3, [pc, #152]	@ (8000540 <MoveMotor+0x140>)
 80004a6:	70da      	strb	r2, [r3, #3]
	TxData[4] = float_to_uint(Kp, KP_MIN,KP_MAX, 16)>>8;
 80004a8:	2010      	movs	r0, #16
 80004aa:	ed9f 1a28 	vldr	s2, [pc, #160]	@ 800054c <MoveMotor+0x14c>
 80004ae:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8000550 <MoveMotor+0x150>
 80004b2:	ed97 0a02 	vldr	s0, [r7, #8]
 80004b6:	f7ff feaf 	bl	8000218 <float_to_uint>
 80004ba:	4603      	mov	r3, r0
 80004bc:	121b      	asrs	r3, r3, #8
 80004be:	b2da      	uxtb	r2, r3
 80004c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000540 <MoveMotor+0x140>)
 80004c2:	711a      	strb	r2, [r3, #4]
	TxData[5] = float_to_uint(Kp, KP_MIN,KP_MAX, 16);
 80004c4:	2010      	movs	r0, #16
 80004c6:	ed9f 1a21 	vldr	s2, [pc, #132]	@ 800054c <MoveMotor+0x14c>
 80004ca:	eddf 0a21 	vldr	s1, [pc, #132]	@ 8000550 <MoveMotor+0x150>
 80004ce:	ed97 0a02 	vldr	s0, [r7, #8]
 80004d2:	f7ff fea1 	bl	8000218 <float_to_uint>
 80004d6:	4603      	mov	r3, r0
 80004d8:	b2da      	uxtb	r2, r3
 80004da:	4b19      	ldr	r3, [pc, #100]	@ (8000540 <MoveMotor+0x140>)
 80004dc:	715a      	strb	r2, [r3, #5]
	TxData[6] = float_to_uint(Kd, KD_MIN,KD_MAX, 16)>>8;
 80004de:	2010      	movs	r0, #16
 80004e0:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 80004e4:	eddf 0a1a 	vldr	s1, [pc, #104]	@ 8000550 <MoveMotor+0x150>
 80004e8:	ed97 0a01 	vldr	s0, [r7, #4]
 80004ec:	f7ff fe94 	bl	8000218 <float_to_uint>
 80004f0:	4603      	mov	r3, r0
 80004f2:	121b      	asrs	r3, r3, #8
 80004f4:	b2da      	uxtb	r2, r3
 80004f6:	4b12      	ldr	r3, [pc, #72]	@ (8000540 <MoveMotor+0x140>)
 80004f8:	719a      	strb	r2, [r3, #6]
	TxData[7] = float_to_uint(Kd, KD_MIN,KD_MAX, 16);
 80004fa:	2010      	movs	r0, #16
 80004fc:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 8000500:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8000550 <MoveMotor+0x150>
 8000504:	ed97 0a01 	vldr	s0, [r7, #4]
 8000508:	f7ff fe86 	bl	8000218 <float_to_uint>
 800050c:	4603      	mov	r3, r0
 800050e:	b2da      	uxtb	r2, r3
 8000510:	4b0b      	ldr	r3, [pc, #44]	@ (8000540 <MoveMotor+0x140>)
 8000512:	71da      	strb	r2, [r3, #7]
	if(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1)) {
 8000514:	480f      	ldr	r0, [pc, #60]	@ (8000554 <MoveMotor+0x154>)
 8000516:	f000 ff25 	bl	8001364 <HAL_FDCAN_GetTxFifoFreeLevel>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d009      	beq.n	8000534 <MoveMotor+0x134>
		if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 8000520:	4a07      	ldr	r2, [pc, #28]	@ (8000540 <MoveMotor+0x140>)
 8000522:	4906      	ldr	r1, [pc, #24]	@ (800053c <MoveMotor+0x13c>)
 8000524:	480b      	ldr	r0, [pc, #44]	@ (8000554 <MoveMotor+0x154>)
 8000526:	f000 fdd0 	bl	80010ca <HAL_FDCAN_AddMessageToTxFifoQ>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MoveMotor+0x134>
			Error_Handler();
 8000530:	f000 f91a 	bl	8000768 <Error_Handler>
		}
	}
}
 8000534:	bf00      	nop
 8000536:	3718      	adds	r7, #24
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	2000008c 	.word	0x2000008c
 8000540:	200000b0 	.word	0x200000b0
 8000544:	42300000 	.word	0x42300000
 8000548:	c2300000 	.word	0xc2300000
 800054c:	43fa0000 	.word	0x43fa0000
 8000550:	00000000 	.word	0x00000000
 8000554:	20000028 	.word	0x20000028

08000558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055c:	f000 fa05 	bl	800096a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000560:	f000 f864 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000564:	f000 f8e8 	bl	8000738 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000568:	f000 f8a0 	bl	80006ac <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  FDCAN1_Config();
 800056c:	f7ff fe9e 	bl	80002ac <FDCAN1_Config>
  EnableMotor();
 8000570:	f7ff ff16 	bl	80003a0 <EnableMotor>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  static int cnt = 0;
	  cnt ++;
 8000574:	4b29      	ldr	r3, [pc, #164]	@ (800061c <main+0xc4>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	3301      	adds	r3, #1
 800057a:	4a28      	ldr	r2, [pc, #160]	@ (800061c <main+0xc4>)
 800057c:	6013      	str	r3, [r2, #0]
	  if(cnt % 99 == 0 && cnt % 2 == 1){
 800057e:	4b27      	ldr	r3, [pc, #156]	@ (800061c <main+0xc4>)
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	4b27      	ldr	r3, [pc, #156]	@ (8000620 <main+0xc8>)
 8000584:	fb83 1302 	smull	r1, r3, r3, r2
 8000588:	4413      	add	r3, r2
 800058a:	1199      	asrs	r1, r3, #6
 800058c:	17d3      	asrs	r3, r2, #31
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	460b      	mov	r3, r1
 8000592:	005b      	lsls	r3, r3, #1
 8000594:	440b      	add	r3, r1
 8000596:	0159      	lsls	r1, r3, #5
 8000598:	440b      	add	r3, r1
 800059a:	1ad1      	subs	r1, r2, r3
 800059c:	2900      	cmp	r1, #0
 800059e:	d115      	bne.n	80005cc <main+0x74>
 80005a0:	4b1e      	ldr	r3, [pc, #120]	@ (800061c <main+0xc4>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	bfb8      	it	lt
 80005ac:	425b      	neglt	r3, r3
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d10c      	bne.n	80005cc <main+0x74>
		  MoveMotor(0, 2.0, 0, 3.0, 0.2);
 80005b2:	ed9f 2a1c 	vldr	s4, [pc, #112]	@ 8000624 <main+0xcc>
 80005b6:	eef0 1a08 	vmov.f32	s3, #8	@ 0x40400000  3.0
 80005ba:	ed9f 1a1b 	vldr	s2, [pc, #108]	@ 8000628 <main+0xd0>
 80005be:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80005c2:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8000628 <main+0xd0>
 80005c6:	f7ff ff1b 	bl	8000400 <MoveMotor>
 80005ca:	e022      	b.n	8000612 <main+0xba>
	  }else if(cnt % 99 == 0 && cnt % 2 == 0){
 80005cc:	4b13      	ldr	r3, [pc, #76]	@ (800061c <main+0xc4>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b13      	ldr	r3, [pc, #76]	@ (8000620 <main+0xc8>)
 80005d2:	fb83 1302 	smull	r1, r3, r3, r2
 80005d6:	4413      	add	r3, r2
 80005d8:	1199      	asrs	r1, r3, #6
 80005da:	17d3      	asrs	r3, r2, #31
 80005dc:	1ac9      	subs	r1, r1, r3
 80005de:	460b      	mov	r3, r1
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	440b      	add	r3, r1
 80005e4:	0159      	lsls	r1, r3, #5
 80005e6:	440b      	add	r3, r1
 80005e8:	1ad1      	subs	r1, r2, r3
 80005ea:	2900      	cmp	r1, #0
 80005ec:	d111      	bne.n	8000612 <main+0xba>
 80005ee:	4b0b      	ldr	r3, [pc, #44]	@ (800061c <main+0xc4>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d10b      	bne.n	8000612 <main+0xba>
		  MoveMotor(0, 1.0, 0, 3.0, 0.2);
 80005fa:	ed9f 2a0a 	vldr	s4, [pc, #40]	@ 8000624 <main+0xcc>
 80005fe:	eef0 1a08 	vmov.f32	s3, #8	@ 0x40400000  3.0
 8000602:	ed9f 1a09 	vldr	s2, [pc, #36]	@ 8000628 <main+0xd0>
 8000606:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800060a:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8000628 <main+0xd0>
 800060e:	f7ff fef7 	bl	8000400 <MoveMotor>
	  }
	  HAL_Delay(50);
 8000612:	2032      	movs	r0, #50	@ 0x32
 8000614:	f000 fa1a 	bl	8000a4c <HAL_Delay>
  {
 8000618:	e7ac      	b.n	8000574 <main+0x1c>
 800061a:	bf00      	nop
 800061c:	200000c0 	.word	0x200000c0
 8000620:	a57eb503 	.word	0xa57eb503
 8000624:	3e4ccccd 	.word	0x3e4ccccd
 8000628:	00000000 	.word	0x00000000

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	@ 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0318 	add.w	r3, r7, #24
 8000636:	2238      	movs	r2, #56	@ 0x38
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f002 fb14 	bl	8002c68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800064e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000652:	f001 fb6f 	bl	8001d34 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000656:	2302      	movs	r3, #2
 8000658:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800065e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000660:	2340      	movs	r3, #64	@ 0x40
 8000662:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000664:	2300      	movs	r3, #0
 8000666:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0318 	add.w	r3, r7, #24
 800066c:	4618      	mov	r0, r3
 800066e:	f001 fc15 	bl	8001e9c <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000678:	f000 f876 	bl	8000768 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000680:	2301      	movs	r3, #1
 8000682:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	2100      	movs	r1, #0
 8000694:	4618      	mov	r0, r3
 8000696:	f001 ff13 	bl	80024c0 <HAL_RCC_ClockConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80006a0:	f000 f862 	bl	8000768 <Error_Handler>
  }
}
 80006a4:	bf00      	nop
 80006a6:	3750      	adds	r7, #80	@ 0x50
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80006b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000730 <MX_FDCAN1_Init+0x84>)
 80006b2:	4a20      	ldr	r2, [pc, #128]	@ (8000734 <MX_FDCAN1_Init+0x88>)
 80006b4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80006b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000730 <MX_FDCAN1_Init+0x84>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80006bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000730 <MX_FDCAN1_Init+0x84>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80006c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000730 <MX_FDCAN1_Init+0x84>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80006c8:	4b19      	ldr	r3, [pc, #100]	@ (8000730 <MX_FDCAN1_Init+0x84>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80006ce:	4b18      	ldr	r3, [pc, #96]	@ (8000730 <MX_FDCAN1_Init+0x84>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80006d4:	4b16      	ldr	r3, [pc, #88]	@ (8000730 <MX_FDCAN1_Init+0x84>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 80006da:	4b15      	ldr	r3, [pc, #84]	@ (8000730 <MX_FDCAN1_Init+0x84>)
 80006dc:	2202      	movs	r2, #2
 80006de:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80006e0:	4b13      	ldr	r3, [pc, #76]	@ (8000730 <MX_FDCAN1_Init+0x84>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 4;
 80006e6:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <MX_FDCAN1_Init+0x84>)
 80006e8:	2204      	movs	r2, #4
 80006ea:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 3;
 80006ec:	4b10      	ldr	r3, [pc, #64]	@ (8000730 <MX_FDCAN1_Init+0x84>)
 80006ee:	2203      	movs	r2, #3
 80006f0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80006f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000730 <MX_FDCAN1_Init+0x84>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80006f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000730 <MX_FDCAN1_Init+0x84>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80006fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000730 <MX_FDCAN1_Init+0x84>)
 8000700:	2201      	movs	r2, #1
 8000702:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000704:	4b0a      	ldr	r3, [pc, #40]	@ (8000730 <MX_FDCAN1_Init+0x84>)
 8000706:	2201      	movs	r2, #1
 8000708:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800070a:	4b09      	ldr	r3, [pc, #36]	@ (8000730 <MX_FDCAN1_Init+0x84>)
 800070c:	2200      	movs	r2, #0
 800070e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 1;
 8000710:	4b07      	ldr	r3, [pc, #28]	@ (8000730 <MX_FDCAN1_Init+0x84>)
 8000712:	2201      	movs	r2, #1
 8000714:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000716:	4b06      	ldr	r3, [pc, #24]	@ (8000730 <MX_FDCAN1_Init+0x84>)
 8000718:	2200      	movs	r2, #0
 800071a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800071c:	4804      	ldr	r0, [pc, #16]	@ (8000730 <MX_FDCAN1_Init+0x84>)
 800071e:	f000 fac7 	bl	8000cb0 <HAL_FDCAN_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000728:	f000 f81e 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000028 	.word	0x20000028
 8000734:	40006400 	.word	0x40006400

08000738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <MX_GPIO_Init+0x2c>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000742:	4a08      	ldr	r2, [pc, #32]	@ (8000764 <MX_GPIO_Init+0x2c>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800074a:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <MX_GPIO_Init+0x2c>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	40021000 	.word	0x40021000

08000768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076c:	b672      	cpsid	i
}
 800076e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <Error_Handler+0x8>

08000774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077a:	4b0f      	ldr	r3, [pc, #60]	@ (80007b8 <HAL_MspInit+0x44>)
 800077c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800077e:	4a0e      	ldr	r2, [pc, #56]	@ (80007b8 <HAL_MspInit+0x44>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6613      	str	r3, [r2, #96]	@ 0x60
 8000786:	4b0c      	ldr	r3, [pc, #48]	@ (80007b8 <HAL_MspInit+0x44>)
 8000788:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000792:	4b09      	ldr	r3, [pc, #36]	@ (80007b8 <HAL_MspInit+0x44>)
 8000794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000796:	4a08      	ldr	r2, [pc, #32]	@ (80007b8 <HAL_MspInit+0x44>)
 8000798:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800079c:	6593      	str	r3, [r2, #88]	@ 0x58
 800079e:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <HAL_MspInit+0x44>)
 80007a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80007aa:	f001 fb67 	bl	8001e7c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40021000 	.word	0x40021000

080007bc <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b09a      	sub	sp, #104	@ 0x68
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007d4:	f107 0310 	add.w	r3, r7, #16
 80007d8:	2244      	movs	r2, #68	@ 0x44
 80007da:	2100      	movs	r1, #0
 80007dc:	4618      	mov	r0, r3
 80007de:	f002 fa43 	bl	8002c68 <memset>
  if(hfdcan->Instance==FDCAN1)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a24      	ldr	r2, [pc, #144]	@ (8000878 <HAL_FDCAN_MspInit+0xbc>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d141      	bne.n	8000870 <HAL_FDCAN_MspInit+0xb4>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80007ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007f0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80007f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80007f6:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007f8:	f107 0310 	add.w	r3, r7, #16
 80007fc:	4618      	mov	r0, r3
 80007fe:	f002 f843 	bl	8002888 <HAL_RCCEx_PeriphCLKConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000808:	f7ff ffae 	bl	8000768 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800080c:	4b1b      	ldr	r3, [pc, #108]	@ (800087c <HAL_FDCAN_MspInit+0xc0>)
 800080e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000810:	4a1a      	ldr	r2, [pc, #104]	@ (800087c <HAL_FDCAN_MspInit+0xc0>)
 8000812:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000816:	6593      	str	r3, [r2, #88]	@ 0x58
 8000818:	4b18      	ldr	r3, [pc, #96]	@ (800087c <HAL_FDCAN_MspInit+0xc0>)
 800081a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800081c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000824:	4b15      	ldr	r3, [pc, #84]	@ (800087c <HAL_FDCAN_MspInit+0xc0>)
 8000826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000828:	4a14      	ldr	r2, [pc, #80]	@ (800087c <HAL_FDCAN_MspInit+0xc0>)
 800082a:	f043 0301 	orr.w	r3, r3, #1
 800082e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000830:	4b12      	ldr	r3, [pc, #72]	@ (800087c <HAL_FDCAN_MspInit+0xc0>)
 8000832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000834:	f003 0301 	and.w	r3, r3, #1
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800083c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000840:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000842:	2302      	movs	r3, #2
 8000844:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800084e:	2309      	movs	r3, #9
 8000850:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000852:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000856:	4619      	mov	r1, r3
 8000858:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800085c:	f001 f8e8 	bl	8001a30 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000860:	2200      	movs	r2, #0
 8000862:	2100      	movs	r1, #0
 8000864:	2015      	movs	r0, #21
 8000866:	f000 f9ee 	bl	8000c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800086a:	2015      	movs	r0, #21
 800086c:	f000 fa05 	bl	8000c7a <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000870:	bf00      	nop
 8000872:	3768      	adds	r7, #104	@ 0x68
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40006400 	.word	0x40006400
 800087c:	40021000 	.word	0x40021000

08000880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <NMI_Handler+0x4>

08000888 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <HardFault_Handler+0x4>

08000890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <MemManage_Handler+0x4>

08000898 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <BusFault_Handler+0x4>

080008a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <UsageFault_Handler+0x4>

080008a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d6:	f000 f89b 	bl	8000a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80008e4:	4802      	ldr	r0, [pc, #8]	@ (80008f0 <FDCAN1_IT0_IRQHandler+0x10>)
 80008e6:	f000 fe35 	bl	8001554 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000028 	.word	0x20000028

080008f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008f8:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <SystemInit+0x20>)
 80008fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008fe:	4a05      	ldr	r2, [pc, #20]	@ (8000914 <SystemInit+0x20>)
 8000900:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000904:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000918:	480d      	ldr	r0, [pc, #52]	@ (8000950 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800091a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800091c:	f7ff ffea 	bl	80008f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000920:	480c      	ldr	r0, [pc, #48]	@ (8000954 <LoopForever+0x6>)
  ldr r1, =_edata
 8000922:	490d      	ldr	r1, [pc, #52]	@ (8000958 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000924:	4a0d      	ldr	r2, [pc, #52]	@ (800095c <LoopForever+0xe>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000928:	e002      	b.n	8000930 <LoopCopyDataInit>

0800092a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800092c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092e:	3304      	adds	r3, #4

08000930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000934:	d3f9      	bcc.n	800092a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000936:	4a0a      	ldr	r2, [pc, #40]	@ (8000960 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000938:	4c0a      	ldr	r4, [pc, #40]	@ (8000964 <LoopForever+0x16>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800093c:	e001      	b.n	8000942 <LoopFillZerobss>

0800093e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000940:	3204      	adds	r2, #4

08000942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000944:	d3fb      	bcc.n	800093e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000946:	f002 f997 	bl	8002c78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800094a:	f7ff fe05 	bl	8000558 <main>

0800094e <LoopForever>:

LoopForever:
    b LoopForever
 800094e:	e7fe      	b.n	800094e <LoopForever>
  ldr   r0, =_estack
 8000950:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000958:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800095c:	08002d00 	.word	0x08002d00
  ldr r2, =_sbss
 8000960:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000964:	200000c8 	.word	0x200000c8

08000968 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000968:	e7fe      	b.n	8000968 <ADC1_2_IRQHandler>

0800096a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	b082      	sub	sp, #8
 800096e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000970:	2300      	movs	r3, #0
 8000972:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000974:	2003      	movs	r0, #3
 8000976:	f000 f95b 	bl	8000c30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800097a:	200f      	movs	r0, #15
 800097c:	f000 f80e 	bl	800099c <HAL_InitTick>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d002      	beq.n	800098c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000986:	2301      	movs	r3, #1
 8000988:	71fb      	strb	r3, [r7, #7]
 800098a:	e001      	b.n	8000990 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800098c:	f7ff fef2 	bl	8000774 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000990:	79fb      	ldrb	r3, [r7, #7]

}
 8000992:	4618      	mov	r0, r3
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009a4:	2300      	movs	r3, #0
 80009a6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80009a8:	4b16      	ldr	r3, [pc, #88]	@ (8000a04 <HAL_InitTick+0x68>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d022      	beq.n	80009f6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80009b0:	4b15      	ldr	r3, [pc, #84]	@ (8000a08 <HAL_InitTick+0x6c>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	4b13      	ldr	r3, [pc, #76]	@ (8000a04 <HAL_InitTick+0x68>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80009bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80009c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 f966 	bl	8000c96 <HAL_SYSTICK_Config>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d10f      	bne.n	80009f0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2b0f      	cmp	r3, #15
 80009d4:	d809      	bhi.n	80009ea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d6:	2200      	movs	r2, #0
 80009d8:	6879      	ldr	r1, [r7, #4]
 80009da:	f04f 30ff 	mov.w	r0, #4294967295
 80009de:	f000 f932 	bl	8000c46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009e2:	4a0a      	ldr	r2, [pc, #40]	@ (8000a0c <HAL_InitTick+0x70>)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	6013      	str	r3, [r2, #0]
 80009e8:	e007      	b.n	80009fa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	73fb      	strb	r3, [r7, #15]
 80009ee:	e004      	b.n	80009fa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009f0:	2301      	movs	r3, #1
 80009f2:	73fb      	strb	r3, [r7, #15]
 80009f4:	e001      	b.n	80009fa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000008 	.word	0x20000008
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	20000004 	.word	0x20000004

08000a10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a14:	4b05      	ldr	r3, [pc, #20]	@ (8000a2c <HAL_IncTick+0x1c>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	4b05      	ldr	r3, [pc, #20]	@ (8000a30 <HAL_IncTick+0x20>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	4a03      	ldr	r2, [pc, #12]	@ (8000a2c <HAL_IncTick+0x1c>)
 8000a20:	6013      	str	r3, [r2, #0]
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	200000c4 	.word	0x200000c4
 8000a30:	20000008 	.word	0x20000008

08000a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  return uwTick;
 8000a38:	4b03      	ldr	r3, [pc, #12]	@ (8000a48 <HAL_GetTick+0x14>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	200000c4 	.word	0x200000c4

08000a4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a54:	f7ff ffee 	bl	8000a34 <HAL_GetTick>
 8000a58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a64:	d004      	beq.n	8000a70 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a66:	4b09      	ldr	r3, [pc, #36]	@ (8000a8c <HAL_Delay+0x40>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a70:	bf00      	nop
 8000a72:	f7ff ffdf 	bl	8000a34 <HAL_GetTick>
 8000a76:	4602      	mov	r2, r0
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	1ad3      	subs	r3, r2, r3
 8000a7c:	68fa      	ldr	r2, [r7, #12]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d8f7      	bhi.n	8000a72 <HAL_Delay+0x26>
  {
  }
}
 8000a82:	bf00      	nop
 8000a84:	bf00      	nop
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000008 	.word	0x20000008

08000a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000aac:	4013      	ands	r3, r2
 8000aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000abc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ac2:	4a04      	ldr	r2, [pc, #16]	@ (8000ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	60d3      	str	r3, [r2, #12]
}
 8000ac8:	bf00      	nop
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000adc:	4b04      	ldr	r3, [pc, #16]	@ (8000af0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	0a1b      	lsrs	r3, r3, #8
 8000ae2:	f003 0307 	and.w	r3, r3, #7
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	db0b      	blt.n	8000b1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	f003 021f 	and.w	r2, r3, #31
 8000b0c:	4907      	ldr	r1, [pc, #28]	@ (8000b2c <__NVIC_EnableIRQ+0x38>)
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	095b      	lsrs	r3, r3, #5
 8000b14:	2001      	movs	r0, #1
 8000b16:	fa00 f202 	lsl.w	r2, r0, r2
 8000b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000e100 	.word	0xe000e100

08000b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	6039      	str	r1, [r7, #0]
 8000b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	db0a      	blt.n	8000b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	490c      	ldr	r1, [pc, #48]	@ (8000b7c <__NVIC_SetPriority+0x4c>)
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	0112      	lsls	r2, r2, #4
 8000b50:	b2d2      	uxtb	r2, r2
 8000b52:	440b      	add	r3, r1
 8000b54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b58:	e00a      	b.n	8000b70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	4908      	ldr	r1, [pc, #32]	@ (8000b80 <__NVIC_SetPriority+0x50>)
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	f003 030f 	and.w	r3, r3, #15
 8000b66:	3b04      	subs	r3, #4
 8000b68:	0112      	lsls	r2, r2, #4
 8000b6a:	b2d2      	uxtb	r2, r2
 8000b6c:	440b      	add	r3, r1
 8000b6e:	761a      	strb	r2, [r3, #24]
}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000e100 	.word	0xe000e100
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b089      	sub	sp, #36	@ 0x24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b98:	69fb      	ldr	r3, [r7, #28]
 8000b9a:	f1c3 0307 	rsb	r3, r3, #7
 8000b9e:	2b04      	cmp	r3, #4
 8000ba0:	bf28      	it	cs
 8000ba2:	2304      	movcs	r3, #4
 8000ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	3304      	adds	r3, #4
 8000baa:	2b06      	cmp	r3, #6
 8000bac:	d902      	bls.n	8000bb4 <NVIC_EncodePriority+0x30>
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	3b03      	subs	r3, #3
 8000bb2:	e000      	b.n	8000bb6 <NVIC_EncodePriority+0x32>
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bbc:	69bb      	ldr	r3, [r7, #24]
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	43da      	mvns	r2, r3
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	401a      	ands	r2, r3
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd6:	43d9      	mvns	r1, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bdc:	4313      	orrs	r3, r2
         );
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3724      	adds	r7, #36	@ 0x24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
	...

08000bec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bfc:	d301      	bcc.n	8000c02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e00f      	b.n	8000c22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c02:	4a0a      	ldr	r2, [pc, #40]	@ (8000c2c <SysTick_Config+0x40>)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c0a:	210f      	movs	r1, #15
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	f7ff ff8e 	bl	8000b30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c14:	4b05      	ldr	r3, [pc, #20]	@ (8000c2c <SysTick_Config+0x40>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c1a:	4b04      	ldr	r3, [pc, #16]	@ (8000c2c <SysTick_Config+0x40>)
 8000c1c:	2207      	movs	r2, #7
 8000c1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	e000e010 	.word	0xe000e010

08000c30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff ff29 	bl	8000a90 <__NVIC_SetPriorityGrouping>
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b086      	sub	sp, #24
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	60b9      	str	r1, [r7, #8]
 8000c50:	607a      	str	r2, [r7, #4]
 8000c52:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c54:	f7ff ff40 	bl	8000ad8 <__NVIC_GetPriorityGrouping>
 8000c58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	68b9      	ldr	r1, [r7, #8]
 8000c5e:	6978      	ldr	r0, [r7, #20]
 8000c60:	f7ff ff90 	bl	8000b84 <NVIC_EncodePriority>
 8000c64:	4602      	mov	r2, r0
 8000c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c6a:	4611      	mov	r1, r2
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ff5f 	bl	8000b30 <__NVIC_SetPriority>
}
 8000c72:	bf00      	nop
 8000c74:	3718      	adds	r7, #24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	4603      	mov	r3, r0
 8000c82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff ff33 	bl	8000af4 <__NVIC_EnableIRQ>
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f7ff ffa4 	bl	8000bec <SysTick_Config>
 8000ca4:	4603      	mov	r3, r0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d101      	bne.n	8000cc2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e147      	b.n	8000f52 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d106      	bne.n	8000cdc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff fd70 	bl	80007bc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	699a      	ldr	r2, [r3, #24]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f022 0210 	bic.w	r2, r2, #16
 8000cea:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cec:	f7ff fea2 	bl	8000a34 <HAL_GetTick>
 8000cf0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000cf2:	e012      	b.n	8000d1a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000cf4:	f7ff fe9e 	bl	8000a34 <HAL_GetTick>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	2b0a      	cmp	r3, #10
 8000d00:	d90b      	bls.n	8000d1a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d06:	f043 0201 	orr.w	r2, r3, #1
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2203      	movs	r2, #3
 8000d12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e11b      	b.n	8000f52 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	f003 0308 	and.w	r3, r3, #8
 8000d24:	2b08      	cmp	r3, #8
 8000d26:	d0e5      	beq.n	8000cf4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	699a      	ldr	r2, [r3, #24]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f042 0201 	orr.w	r2, r2, #1
 8000d36:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d38:	f7ff fe7c 	bl	8000a34 <HAL_GetTick>
 8000d3c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000d3e:	e012      	b.n	8000d66 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000d40:	f7ff fe78 	bl	8000a34 <HAL_GetTick>
 8000d44:	4602      	mov	r2, r0
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	2b0a      	cmp	r3, #10
 8000d4c:	d90b      	bls.n	8000d66 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d52:	f043 0201 	orr.w	r2, r3, #1
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e0f5      	b.n	8000f52 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d0e5      	beq.n	8000d40 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	699a      	ldr	r2, [r3, #24]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f042 0202 	orr.w	r2, r2, #2
 8000d82:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a74      	ldr	r2, [pc, #464]	@ (8000f5c <HAL_FDCAN_Init+0x2ac>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d103      	bne.n	8000d96 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000d8e:	4a74      	ldr	r2, [pc, #464]	@ (8000f60 <HAL_FDCAN_Init+0x2b0>)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	7c1b      	ldrb	r3, [r3, #16]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d108      	bne.n	8000db0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	699a      	ldr	r2, [r3, #24]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000dac:	619a      	str	r2, [r3, #24]
 8000dae:	e007      	b.n	8000dc0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	699a      	ldr	r2, [r3, #24]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000dbe:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	7c5b      	ldrb	r3, [r3, #17]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d108      	bne.n	8000dda <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	699a      	ldr	r2, [r3, #24]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000dd6:	619a      	str	r2, [r3, #24]
 8000dd8:	e007      	b.n	8000dea <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	699a      	ldr	r2, [r3, #24]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000de8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	7c9b      	ldrb	r3, [r3, #18]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d108      	bne.n	8000e04 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	699a      	ldr	r2, [r3, #24]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000e00:	619a      	str	r2, [r3, #24]
 8000e02:	e007      	b.n	8000e14 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	699a      	ldr	r2, [r3, #24]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000e12:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	699b      	ldr	r3, [r3, #24]
 8000e1a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	689a      	ldr	r2, [r3, #8]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	430a      	orrs	r2, r1
 8000e28:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	699a      	ldr	r2, [r3, #24]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8000e38:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	691a      	ldr	r2, [r3, #16]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f022 0210 	bic.w	r2, r2, #16
 8000e48:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d108      	bne.n	8000e64 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	699a      	ldr	r2, [r3, #24]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f042 0204 	orr.w	r2, r2, #4
 8000e60:	619a      	str	r2, [r3, #24]
 8000e62:	e02c      	b.n	8000ebe <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d028      	beq.n	8000ebe <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d01c      	beq.n	8000eae <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	699a      	ldr	r2, [r3, #24]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000e82:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	691a      	ldr	r2, [r3, #16]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f042 0210 	orr.w	r2, r2, #16
 8000e92:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	2b03      	cmp	r3, #3
 8000e9a:	d110      	bne.n	8000ebe <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	699a      	ldr	r2, [r3, #24]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f042 0220 	orr.w	r2, r2, #32
 8000eaa:	619a      	str	r2, [r3, #24]
 8000eac:	e007      	b.n	8000ebe <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	699a      	ldr	r2, [r3, #24]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f042 0220 	orr.w	r2, r2, #32
 8000ebc:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	699b      	ldr	r3, [r3, #24]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000ece:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6a1b      	ldr	r3, [r3, #32]
 8000ed4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000ed6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000ee6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000ee8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000ef2:	d115      	bne.n	8000f20 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ef8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000efe:	3b01      	subs	r3, #1
 8000f00:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000f02:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000f0c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f14:	3b01      	subs	r3, #1
 8000f16:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000f1c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000f1e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	430a      	orrs	r2, r1
 8000f32:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f000 fca8 	bl	800188c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40006400 	.word	0x40006400
 8000f60:	40006500 	.word	0x40006500

08000f64 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b087      	sub	sp, #28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000f74:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8000f76:	7dfb      	ldrb	r3, [r7, #23]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d002      	beq.n	8000f82 <HAL_FDCAN_ConfigFilter+0x1e>
 8000f7c:	7dfb      	ldrb	r3, [r7, #23]
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d13d      	bne.n	8000ffe <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d119      	bne.n	8000fbe <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000f96:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	691b      	ldr	r3, [r3, #16]
 8000f9c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8000f9e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	4413      	add	r3, r2
 8000fb4:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	e01d      	b.n	8000ffa <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	075a      	lsls	r2, r3, #29
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	691b      	ldr	r3, [r3, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	079a      	lsls	r2, r3, #30
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	4413      	add	r3, r2
 8000fe6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	e006      	b.n	800100c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001002:	f043 0202 	orr.w	r2, r3, #2
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
  }
}
 800100c:	4618      	mov	r0, r3
 800100e:	371c      	adds	r7, #28
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
 8001024:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b01      	cmp	r3, #1
 8001030:	d116      	bne.n	8001060 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800103a:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	011a      	lsls	r2, r3, #4
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	431a      	orrs	r2, r3
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	431a      	orrs	r2, r3
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	431a      	orrs	r2, r3
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	430a      	orrs	r2, r1
 8001058:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 800105c:	2300      	movs	r3, #0
 800105e:	e006      	b.n	800106e <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001064:	f043 0204 	orr.w	r2, r3, #4
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
  }
}
 800106e:	4618      	mov	r0, r3
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b01      	cmp	r3, #1
 800108c:	d110      	bne.n	80010b0 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2202      	movs	r2, #2
 8001092:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	699a      	ldr	r2, [r3, #24]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f022 0201 	bic.w	r2, r2, #1
 80010a4:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80010ac:	2300      	movs	r3, #0
 80010ae:	e006      	b.n	80010be <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010b4:	f043 0204 	orr.w	r2, r3, #4
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
  }
}
 80010be:	4618      	mov	r0, r3
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b086      	sub	sp, #24
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	60f8      	str	r0, [r7, #12]
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d12c      	bne.n	800113c <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80010ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d007      	beq.n	8001102 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010f6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e023      	b.n	800114a <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800110a:	0c1b      	lsrs	r3, r3, #16
 800110c:	f003 0303 	and.w	r3, r3, #3
 8001110:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	68b9      	ldr	r1, [r7, #8]
 8001118:	68f8      	ldr	r0, [r7, #12]
 800111a:	f000 fc0d 	bl	8001938 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2101      	movs	r1, #1
 8001124:	697a      	ldr	r2, [r7, #20]
 8001126:	fa01 f202 	lsl.w	r2, r1, r2
 800112a:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800112e:	2201      	movs	r2, #1
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	409a      	lsls	r2, r3
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001138:	2300      	movs	r3, #0
 800113a:	e006      	b.n	800114a <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001140:	f043 0208 	orr.w	r2, r3, #8
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
  }
}
 800114a:	4618      	mov	r0, r3
 800114c:	3718      	adds	r7, #24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001154:	b480      	push	{r7}
 8001156:	b08b      	sub	sp, #44	@ 0x2c
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
 8001160:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800116c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800116e:	7efb      	ldrb	r3, [r7, #27]
 8001170:	2b02      	cmp	r3, #2
 8001172:	f040 80e8 	bne.w	8001346 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	2b40      	cmp	r3, #64	@ 0x40
 800117a:	d137      	bne.n	80011ec <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001184:	f003 030f 	and.w	r3, r3, #15
 8001188:	2b00      	cmp	r3, #0
 800118a:	d107      	bne.n	800119c <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001190:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e0db      	b.n	8001354 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80011a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011ac:	d10a      	bne.n	80011c4 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011be:	d101      	bne.n	80011c4 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80011c0:	2301      	movs	r3, #1
 80011c2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011cc:	0a1b      	lsrs	r3, r3, #8
 80011ce:	f003 0303 	and.w	r3, r3, #3
 80011d2:	69fa      	ldr	r2, [r7, #28]
 80011d4:	4413      	add	r3, r2
 80011d6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80011dc:	69fa      	ldr	r2, [r7, #28]
 80011de:	4613      	mov	r3, r2
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	4413      	add	r3, r2
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	440b      	add	r3, r1
 80011e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80011ea:	e036      	b.n	800125a <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80011f4:	f003 030f 	and.w	r3, r3, #15
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d107      	bne.n	800120c <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001200:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e0a3      	b.n	8001354 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001214:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001218:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800121c:	d10a      	bne.n	8001234 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800122a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800122e:	d101      	bne.n	8001234 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001230:	2301      	movs	r3, #1
 8001232:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800123c:	0a1b      	lsrs	r3, r3, #8
 800123e:	f003 0303 	and.w	r3, r3, #3
 8001242:	69fa      	ldr	r2, [r7, #28]
 8001244:	4413      	add	r3, r2
 8001246:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800124c:	69fa      	ldr	r2, [r7, #28]
 800124e:	4613      	mov	r3, r2
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	4413      	add	r3, r2
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	440b      	add	r3, r1
 8001258:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800125a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d107      	bne.n	800127e <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800126e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	0c9b      	lsrs	r3, r3, #18
 8001274:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	e005      	b.n	800128a <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800127e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800128a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80012a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a4:	3304      	adds	r3, #4
 80012a6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80012a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80012b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	0c1b      	lsrs	r3, r3, #16
 80012b8:	f003 020f 	and.w	r2, r3, #15
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80012c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80012cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80012d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	0e1b      	lsrs	r3, r3, #24
 80012de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80012e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	0fda      	lsrs	r2, r3, #31
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80012f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f2:	3304      	adds	r3, #4
 80012f4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80012f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f8:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80012fa:	2300      	movs	r3, #0
 80012fc:	623b      	str	r3, [r7, #32]
 80012fe:	e00a      	b.n	8001316 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001300:	697a      	ldr	r2, [r7, #20]
 8001302:	6a3b      	ldr	r3, [r7, #32]
 8001304:	441a      	add	r2, r3
 8001306:	6839      	ldr	r1, [r7, #0]
 8001308:	6a3b      	ldr	r3, [r7, #32]
 800130a:	440b      	add	r3, r1
 800130c:	7812      	ldrb	r2, [r2, #0]
 800130e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001310:	6a3b      	ldr	r3, [r7, #32]
 8001312:	3301      	adds	r3, #1
 8001314:	623b      	str	r3, [r7, #32]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	4a11      	ldr	r2, [pc, #68]	@ (8001360 <HAL_FDCAN_GetRxMessage+0x20c>)
 800131c:	5cd3      	ldrb	r3, [r2, r3]
 800131e:	461a      	mov	r2, r3
 8001320:	6a3b      	ldr	r3, [r7, #32]
 8001322:	4293      	cmp	r3, r2
 8001324:	d3ec      	bcc.n	8001300 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	2b40      	cmp	r3, #64	@ 0x40
 800132a:	d105      	bne.n	8001338 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	69fa      	ldr	r2, [r7, #28]
 8001332:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8001336:	e004      	b.n	8001342 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	69fa      	ldr	r2, [r7, #28]
 800133e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001342:	2300      	movs	r3, #0
 8001344:	e006      	b.n	8001354 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800134a:	f043 0208 	orr.w	r2, r3, #8
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
  }
}
 8001354:	4618      	mov	r0, r3
 8001356:	372c      	adds	r7, #44	@ 0x2c
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	08002ce8 	.word	0x08002ce8

08001364 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001374:	f003 0307 	and.w	r3, r3, #7
 8001378:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 800137a:	68fb      	ldr	r3, [r7, #12]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001388:	b480      	push	{r7}
 800138a:	b087      	sub	sp, #28
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800139a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800139c:	7dfb      	ldrb	r3, [r7, #23]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d003      	beq.n	80013aa <HAL_FDCAN_ActivateNotification+0x22>
 80013a2:	7dfb      	ldrb	r3, [r7, #23]
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	f040 80c8 	bne.w	800153a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b0:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	f003 0307 	and.w	r3, r3, #7
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d004      	beq.n	80013c6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d03b      	beq.n	800143e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d004      	beq.n	80013da <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d031      	beq.n	800143e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d004      	beq.n	80013ee <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	f003 0304 	and.w	r3, r3, #4
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d027      	beq.n	800143e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d004      	beq.n	8001402 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	f003 0308 	and.w	r3, r3, #8
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d01d      	beq.n	800143e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001408:	2b00      	cmp	r3, #0
 800140a:	d004      	beq.n	8001416 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	f003 0310 	and.w	r3, r3, #16
 8001412:	2b00      	cmp	r3, #0
 8001414:	d013      	beq.n	800143e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800141c:	2b00      	cmp	r3, #0
 800141e:	d004      	beq.n	800142a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	f003 0320 	and.w	r3, r3, #32
 8001426:	2b00      	cmp	r3, #0
 8001428:	d009      	beq.n	800143e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001430:	2b00      	cmp	r3, #0
 8001432:	d00c      	beq.n	800144e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800143a:	2b00      	cmp	r3, #0
 800143c:	d107      	bne.n	800144e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f042 0201 	orr.w	r2, r2, #1
 800144c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	2b00      	cmp	r3, #0
 8001456:	d004      	beq.n	8001462 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b00      	cmp	r3, #0
 8001460:	d13b      	bne.n	80014da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001468:	2b00      	cmp	r3, #0
 800146a:	d004      	beq.n	8001476 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d131      	bne.n	80014da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800147c:	2b00      	cmp	r3, #0
 800147e:	d004      	beq.n	800148a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	f003 0304 	and.w	r3, r3, #4
 8001486:	2b00      	cmp	r3, #0
 8001488:	d127      	bne.n	80014da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001490:	2b00      	cmp	r3, #0
 8001492:	d004      	beq.n	800149e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	2b00      	cmp	r3, #0
 800149c:	d11d      	bne.n	80014da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d004      	beq.n	80014b2 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	f003 0310 	and.w	r3, r3, #16
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d113      	bne.n	80014da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d004      	beq.n	80014c6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	f003 0320 	and.w	r3, r3, #32
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d109      	bne.n	80014da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d00c      	beq.n	80014ea <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d007      	beq.n	80014ea <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f042 0202 	orr.w	r2, r2, #2
 80014e8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d009      	beq.n	8001508 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	430a      	orrs	r2, r1
 8001504:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800150e:	2b00      	cmp	r3, #0
 8001510:	d009      	beq.n	8001526 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	430a      	orrs	r2, r1
 8001522:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	68ba      	ldr	r2, [r7, #8]
 8001532:	430a      	orrs	r2, r1
 8001534:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	e006      	b.n	8001548 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800153e:	f043 0202 	orr.w	r2, r3, #2
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
  }
}
 8001548:	4618      	mov	r0, r3
 800154a:	371c      	adds	r7, #28
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08c      	sub	sp, #48	@ 0x30
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001562:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001566:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800156e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001570:	4013      	ands	r3, r2
 8001572:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001586:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001588:	4013      	ands	r3, r2
 800158a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001592:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001596:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800159e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015a0:	4013      	ands	r3, r2
 80015a2:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015aa:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80015ae:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015b6:	6a3a      	ldr	r2, [r7, #32]
 80015b8:	4013      	ands	r3, r2
 80015ba:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015c2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80015c6:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015ce:	69fa      	ldr	r2, [r7, #28]
 80015d0:	4013      	ands	r3, r2
 80015d2:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015da:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015e2:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	099b      	lsrs	r3, r3, #6
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d00c      	beq.n	800160a <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	099b      	lsrs	r3, r3, #6
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d006      	beq.n	800160a <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2240      	movs	r2, #64	@ 0x40
 8001602:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f000 f922 	bl	800184e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	0a1b      	lsrs	r3, r3, #8
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	2b00      	cmp	r3, #0
 8001614:	d01a      	beq.n	800164c <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	0a1b      	lsrs	r3, r3, #8
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b00      	cmp	r3, #0
 8001620:	d014      	beq.n	800164c <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800162a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4013      	ands	r3, r2
 8001638:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001642:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001644:	6939      	ldr	r1, [r7, #16]
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 f8e2 	bl	8001810 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800164c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800164e:	2b00      	cmp	r3, #0
 8001650:	d007      	beq.n	8001662 <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001658:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800165a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f000 f8ac 	bl	80017ba <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001664:	2b00      	cmp	r3, #0
 8001666:	d007      	beq.n	8001678 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800166e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001670:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7fe fe78 	bl	8000368 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167a:	2b00      	cmp	r3, #0
 800167c:	d007      	beq.n	800168e <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001684:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001686:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 f8a1 	bl	80017d0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	0a5b      	lsrs	r3, r3, #9
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00d      	beq.n	80016b6 <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	0a5b      	lsrs	r3, r3, #9
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d007      	beq.n	80016b6 <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016ae:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f000 f898 	bl	80017e6 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	09db      	lsrs	r3, r3, #7
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d019      	beq.n	80016f6 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	09db      	lsrs	r3, r3, #7
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d013      	beq.n	80016f6 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80016d6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	4013      	ands	r3, r2
 80016e4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2280      	movs	r2, #128	@ 0x80
 80016ec:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80016ee:	68f9      	ldr	r1, [r7, #12]
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 f882 	bl	80017fa <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	0b5b      	lsrs	r3, r3, #13
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d00d      	beq.n	800171e <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	0b5b      	lsrs	r3, r3, #13
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b00      	cmp	r3, #0
 800170c:	d007      	beq.n	800171e <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001716:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f000 f884 	bl	8001826 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	0bdb      	lsrs	r3, r3, #15
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00d      	beq.n	8001746 <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	0bdb      	lsrs	r3, r3, #15
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b00      	cmp	r3, #0
 8001734:	d007      	beq.n	8001746 <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800173e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f000 f87a 	bl	800183a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	0b9b      	lsrs	r3, r3, #14
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	d010      	beq.n	8001774 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	0b9b      	lsrs	r3, r3, #14
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00a      	beq.n	8001774 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001766:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800176c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d007      	beq.n	800178a <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	69fa      	ldr	r2, [r7, #28]
 8001780:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001782:	69f9      	ldr	r1, [r7, #28]
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f000 f876 	bl	8001876 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800178a:	6a3b      	ldr	r3, [r7, #32]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d009      	beq.n	80017a4 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6a3a      	ldr	r2, [r7, #32]
 8001796:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800179c:	6a3b      	ldr	r3, [r7, #32]
 800179e:	431a      	orrs	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d002      	beq.n	80017b2 <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 f858 	bl	8001862 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80017b2:	bf00      	nop
 80017b4:	3730      	adds	r7, #48	@ 0x30
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
 8001802:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001894:	4b27      	ldr	r3, [pc, #156]	@ (8001934 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8001896:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80018a6:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018ae:	041a      	lsls	r2, r3, #16
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	430a      	orrs	r2, r1
 80018b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80018cc:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018d4:	061a      	lsls	r2, r3, #24
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	430a      	orrs	r2, r1
 80018dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	e005      	b.n	800191a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	3304      	adds	r3, #4
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001920:	68fa      	ldr	r2, [r7, #12]
 8001922:	429a      	cmp	r2, r3
 8001924:	d3f3      	bcc.n	800190e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001926:	bf00      	nop
 8001928:	bf00      	nop
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	4000a400 	.word	0x4000a400

08001938 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001938:	b480      	push	{r7}
 800193a:	b089      	sub	sp, #36	@ 0x24
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
 8001944:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10a      	bne.n	8001964 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001956:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800195e:	4313      	orrs	r3, r2
 8001960:	61fb      	str	r3, [r7, #28]
 8001962:	e00a      	b.n	800197a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800196c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001972:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001974:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001978:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	6a1b      	ldr	r3, [r3, #32]
 800197e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001984:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800198a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001990:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001998:	4313      	orrs	r3, r2
 800199a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	4613      	mov	r3, r2
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	4413      	add	r3, r2
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	440b      	add	r3, r1
 80019ac:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	69fa      	ldr	r2, [r7, #28]
 80019b2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	3304      	adds	r3, #4
 80019b8:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	3304      	adds	r3, #4
 80019c4:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
 80019ca:	e020      	b.n	8001a0e <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	3303      	adds	r3, #3
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	4413      	add	r3, r2
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	3302      	adds	r3, #2
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	440b      	add	r3, r1
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80019e4:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	3301      	adds	r3, #1
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	440b      	add	r3, r1
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80019f2:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	440a      	add	r2, r1
 80019fa:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80019fc:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	3304      	adds	r3, #4
 8001a06:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	3304      	adds	r3, #4
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	4a06      	ldr	r2, [pc, #24]	@ (8001a2c <FDCAN_CopyMessageToRAM+0xf4>)
 8001a14:	5cd3      	ldrb	r3, [r2, r3]
 8001a16:	461a      	mov	r2, r3
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d3d6      	bcc.n	80019cc <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8001a1e:	bf00      	nop
 8001a20:	bf00      	nop
 8001a22:	3724      	adds	r7, #36	@ 0x24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	08002ce8 	.word	0x08002ce8

08001a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b087      	sub	sp, #28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a3e:	e15a      	b.n	8001cf6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	2101      	movs	r1, #1
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f000 814c 	beq.w	8001cf0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 0303 	and.w	r3, r3, #3
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d005      	beq.n	8001a70 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d130      	bne.n	8001ad2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	4013      	ands	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	68da      	ldr	r2, [r3, #12]
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	091b      	lsrs	r3, r3, #4
 8001abc:	f003 0201 	and.w	r2, r3, #1
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	d017      	beq.n	8001b0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	2203      	movs	r2, #3
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	4013      	ands	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 0303 	and.w	r3, r3, #3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d123      	bne.n	8001b62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	08da      	lsrs	r2, r3, #3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	3208      	adds	r2, #8
 8001b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	220f      	movs	r2, #15
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43db      	mvns	r3, r3
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	691a      	ldr	r2, [r3, #16]
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	08da      	lsrs	r2, r3, #3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3208      	adds	r2, #8
 8001b5c:	6939      	ldr	r1, [r7, #16]
 8001b5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	4013      	ands	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 0203 	and.w	r2, r3, #3
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 80a6 	beq.w	8001cf0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba4:	4b5b      	ldr	r3, [pc, #364]	@ (8001d14 <HAL_GPIO_Init+0x2e4>)
 8001ba6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ba8:	4a5a      	ldr	r2, [pc, #360]	@ (8001d14 <HAL_GPIO_Init+0x2e4>)
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bb0:	4b58      	ldr	r3, [pc, #352]	@ (8001d14 <HAL_GPIO_Init+0x2e4>)
 8001bb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bbc:	4a56      	ldr	r2, [pc, #344]	@ (8001d18 <HAL_GPIO_Init+0x2e8>)
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	089b      	lsrs	r3, r3, #2
 8001bc2:	3302      	adds	r3, #2
 8001bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	220f      	movs	r2, #15
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001be6:	d01f      	beq.n	8001c28 <HAL_GPIO_Init+0x1f8>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a4c      	ldr	r2, [pc, #304]	@ (8001d1c <HAL_GPIO_Init+0x2ec>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d019      	beq.n	8001c24 <HAL_GPIO_Init+0x1f4>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a4b      	ldr	r2, [pc, #300]	@ (8001d20 <HAL_GPIO_Init+0x2f0>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d013      	beq.n	8001c20 <HAL_GPIO_Init+0x1f0>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a4a      	ldr	r2, [pc, #296]	@ (8001d24 <HAL_GPIO_Init+0x2f4>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d00d      	beq.n	8001c1c <HAL_GPIO_Init+0x1ec>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a49      	ldr	r2, [pc, #292]	@ (8001d28 <HAL_GPIO_Init+0x2f8>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d007      	beq.n	8001c18 <HAL_GPIO_Init+0x1e8>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a48      	ldr	r2, [pc, #288]	@ (8001d2c <HAL_GPIO_Init+0x2fc>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d101      	bne.n	8001c14 <HAL_GPIO_Init+0x1e4>
 8001c10:	2305      	movs	r3, #5
 8001c12:	e00a      	b.n	8001c2a <HAL_GPIO_Init+0x1fa>
 8001c14:	2306      	movs	r3, #6
 8001c16:	e008      	b.n	8001c2a <HAL_GPIO_Init+0x1fa>
 8001c18:	2304      	movs	r3, #4
 8001c1a:	e006      	b.n	8001c2a <HAL_GPIO_Init+0x1fa>
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e004      	b.n	8001c2a <HAL_GPIO_Init+0x1fa>
 8001c20:	2302      	movs	r3, #2
 8001c22:	e002      	b.n	8001c2a <HAL_GPIO_Init+0x1fa>
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <HAL_GPIO_Init+0x1fa>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	f002 0203 	and.w	r2, r2, #3
 8001c30:	0092      	lsls	r2, r2, #2
 8001c32:	4093      	lsls	r3, r2
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c3a:	4937      	ldr	r1, [pc, #220]	@ (8001d18 <HAL_GPIO_Init+0x2e8>)
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	089b      	lsrs	r3, r3, #2
 8001c40:	3302      	adds	r3, #2
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c48:	4b39      	ldr	r3, [pc, #228]	@ (8001d30 <HAL_GPIO_Init+0x300>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	43db      	mvns	r3, r3
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	4013      	ands	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d003      	beq.n	8001c6c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c6c:	4a30      	ldr	r2, [pc, #192]	@ (8001d30 <HAL_GPIO_Init+0x300>)
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c72:	4b2f      	ldr	r3, [pc, #188]	@ (8001d30 <HAL_GPIO_Init+0x300>)
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c96:	4a26      	ldr	r2, [pc, #152]	@ (8001d30 <HAL_GPIO_Init+0x300>)
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001c9c:	4b24      	ldr	r3, [pc, #144]	@ (8001d30 <HAL_GPIO_Init+0x300>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cc0:	4a1b      	ldr	r2, [pc, #108]	@ (8001d30 <HAL_GPIO_Init+0x300>)
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d30 <HAL_GPIO_Init+0x300>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cea:	4a11      	ldr	r2, [pc, #68]	@ (8001d30 <HAL_GPIO_Init+0x300>)
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f47f ae9d 	bne.w	8001a40 <HAL_GPIO_Init+0x10>
  }
}
 8001d06:	bf00      	nop
 8001d08:	bf00      	nop
 8001d0a:	371c      	adds	r7, #28
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	40021000 	.word	0x40021000
 8001d18:	40010000 	.word	0x40010000
 8001d1c:	48000400 	.word	0x48000400
 8001d20:	48000800 	.word	0x48000800
 8001d24:	48000c00 	.word	0x48000c00
 8001d28:	48001000 	.word	0x48001000
 8001d2c:	48001400 	.word	0x48001400
 8001d30:	40010400 	.word	0x40010400

08001d34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d141      	bne.n	8001dc6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d42:	4b4b      	ldr	r3, [pc, #300]	@ (8001e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d4e:	d131      	bne.n	8001db4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d50:	4b47      	ldr	r3, [pc, #284]	@ (8001e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d56:	4a46      	ldr	r2, [pc, #280]	@ (8001e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d5c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d60:	4b43      	ldr	r3, [pc, #268]	@ (8001e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d68:	4a41      	ldr	r2, [pc, #260]	@ (8001e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d70:	4b40      	ldr	r3, [pc, #256]	@ (8001e74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2232      	movs	r2, #50	@ 0x32
 8001d76:	fb02 f303 	mul.w	r3, r2, r3
 8001d7a:	4a3f      	ldr	r2, [pc, #252]	@ (8001e78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d80:	0c9b      	lsrs	r3, r3, #18
 8001d82:	3301      	adds	r3, #1
 8001d84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d86:	e002      	b.n	8001d8e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d8e:	4b38      	ldr	r3, [pc, #224]	@ (8001e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d9a:	d102      	bne.n	8001da2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f2      	bne.n	8001d88 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001da2:	4b33      	ldr	r3, [pc, #204]	@ (8001e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001daa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dae:	d158      	bne.n	8001e62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e057      	b.n	8001e64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001db4:	4b2e      	ldr	r3, [pc, #184]	@ (8001e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001dba:	4a2d      	ldr	r2, [pc, #180]	@ (8001e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001dc0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001dc4:	e04d      	b.n	8001e62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001dcc:	d141      	bne.n	8001e52 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dce:	4b28      	ldr	r3, [pc, #160]	@ (8001e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001dd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dda:	d131      	bne.n	8001e40 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ddc:	4b24      	ldr	r3, [pc, #144]	@ (8001e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001de2:	4a23      	ldr	r2, [pc, #140]	@ (8001e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001de4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001de8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dec:	4b20      	ldr	r3, [pc, #128]	@ (8001e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001df4:	4a1e      	ldr	r2, [pc, #120]	@ (8001e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001df6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dfa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001dfc:	4b1d      	ldr	r3, [pc, #116]	@ (8001e74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2232      	movs	r2, #50	@ 0x32
 8001e02:	fb02 f303 	mul.w	r3, r2, r3
 8001e06:	4a1c      	ldr	r2, [pc, #112]	@ (8001e78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e08:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0c:	0c9b      	lsrs	r3, r3, #18
 8001e0e:	3301      	adds	r3, #1
 8001e10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e12:	e002      	b.n	8001e1a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e1a:	4b15      	ldr	r3, [pc, #84]	@ (8001e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e26:	d102      	bne.n	8001e2e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f2      	bne.n	8001e14 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e2e:	4b10      	ldr	r3, [pc, #64]	@ (8001e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e3a:	d112      	bne.n	8001e62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e011      	b.n	8001e64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e40:	4b0b      	ldr	r3, [pc, #44]	@ (8001e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e46:	4a0a      	ldr	r2, [pc, #40]	@ (8001e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001e50:	e007      	b.n	8001e62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e52:	4b07      	ldr	r3, [pc, #28]	@ (8001e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e5a:	4a05      	ldr	r2, [pc, #20]	@ (8001e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e5c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e60:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	40007000 	.word	0x40007000
 8001e74:	20000000 	.word	0x20000000
 8001e78:	431bde83 	.word	0x431bde83

08001e7c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001e80:	4b05      	ldr	r3, [pc, #20]	@ (8001e98 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	4a04      	ldr	r2, [pc, #16]	@ (8001e98 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e8a:	6093      	str	r3, [r2, #8]
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	40007000 	.word	0x40007000

08001e9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b088      	sub	sp, #32
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e2fe      	b.n	80024ac <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d075      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eba:	4b97      	ldr	r3, [pc, #604]	@ (8002118 <HAL_RCC_OscConfig+0x27c>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
 8001ec2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ec4:	4b94      	ldr	r3, [pc, #592]	@ (8002118 <HAL_RCC_OscConfig+0x27c>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f003 0303 	and.w	r3, r3, #3
 8001ecc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	2b0c      	cmp	r3, #12
 8001ed2:	d102      	bne.n	8001eda <HAL_RCC_OscConfig+0x3e>
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	2b03      	cmp	r3, #3
 8001ed8:	d002      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x44>
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	2b08      	cmp	r3, #8
 8001ede:	d10b      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee0:	4b8d      	ldr	r3, [pc, #564]	@ (8002118 <HAL_RCC_OscConfig+0x27c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d05b      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x108>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d157      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e2d9      	b.n	80024ac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f00:	d106      	bne.n	8001f10 <HAL_RCC_OscConfig+0x74>
 8001f02:	4b85      	ldr	r3, [pc, #532]	@ (8002118 <HAL_RCC_OscConfig+0x27c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a84      	ldr	r2, [pc, #528]	@ (8002118 <HAL_RCC_OscConfig+0x27c>)
 8001f08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e01d      	b.n	8001f4c <HAL_RCC_OscConfig+0xb0>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f18:	d10c      	bne.n	8001f34 <HAL_RCC_OscConfig+0x98>
 8001f1a:	4b7f      	ldr	r3, [pc, #508]	@ (8002118 <HAL_RCC_OscConfig+0x27c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a7e      	ldr	r2, [pc, #504]	@ (8002118 <HAL_RCC_OscConfig+0x27c>)
 8001f20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	4b7c      	ldr	r3, [pc, #496]	@ (8002118 <HAL_RCC_OscConfig+0x27c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a7b      	ldr	r2, [pc, #492]	@ (8002118 <HAL_RCC_OscConfig+0x27c>)
 8001f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	e00b      	b.n	8001f4c <HAL_RCC_OscConfig+0xb0>
 8001f34:	4b78      	ldr	r3, [pc, #480]	@ (8002118 <HAL_RCC_OscConfig+0x27c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a77      	ldr	r2, [pc, #476]	@ (8002118 <HAL_RCC_OscConfig+0x27c>)
 8001f3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f3e:	6013      	str	r3, [r2, #0]
 8001f40:	4b75      	ldr	r3, [pc, #468]	@ (8002118 <HAL_RCC_OscConfig+0x27c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a74      	ldr	r2, [pc, #464]	@ (8002118 <HAL_RCC_OscConfig+0x27c>)
 8001f46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d013      	beq.n	8001f7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f54:	f7fe fd6e 	bl	8000a34 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f5c:	f7fe fd6a 	bl	8000a34 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b64      	cmp	r3, #100	@ 0x64
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e29e      	b.n	80024ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f6e:	4b6a      	ldr	r3, [pc, #424]	@ (8002118 <HAL_RCC_OscConfig+0x27c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0f0      	beq.n	8001f5c <HAL_RCC_OscConfig+0xc0>
 8001f7a:	e014      	b.n	8001fa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7c:	f7fe fd5a 	bl	8000a34 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f84:	f7fe fd56 	bl	8000a34 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b64      	cmp	r3, #100	@ 0x64
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e28a      	b.n	80024ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f96:	4b60      	ldr	r3, [pc, #384]	@ (8002118 <HAL_RCC_OscConfig+0x27c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f0      	bne.n	8001f84 <HAL_RCC_OscConfig+0xe8>
 8001fa2:	e000      	b.n	8001fa6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d075      	beq.n	800209e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fb2:	4b59      	ldr	r3, [pc, #356]	@ (8002118 <HAL_RCC_OscConfig+0x27c>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 030c 	and.w	r3, r3, #12
 8001fba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fbc:	4b56      	ldr	r3, [pc, #344]	@ (8002118 <HAL_RCC_OscConfig+0x27c>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	f003 0303 	and.w	r3, r3, #3
 8001fc4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	2b0c      	cmp	r3, #12
 8001fca:	d102      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x136>
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d002      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x13c>
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	2b04      	cmp	r3, #4
 8001fd6:	d11f      	bne.n	8002018 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fd8:	4b4f      	ldr	r3, [pc, #316]	@ (8002118 <HAL_RCC_OscConfig+0x27c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d005      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x154>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e25d      	b.n	80024ac <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff0:	4b49      	ldr	r3, [pc, #292]	@ (8002118 <HAL_RCC_OscConfig+0x27c>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	061b      	lsls	r3, r3, #24
 8001ffe:	4946      	ldr	r1, [pc, #280]	@ (8002118 <HAL_RCC_OscConfig+0x27c>)
 8002000:	4313      	orrs	r3, r2
 8002002:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002004:	4b45      	ldr	r3, [pc, #276]	@ (800211c <HAL_RCC_OscConfig+0x280>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe fcc7 	bl	800099c <HAL_InitTick>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d043      	beq.n	800209c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e249      	b.n	80024ac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d023      	beq.n	8002068 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002020:	4b3d      	ldr	r3, [pc, #244]	@ (8002118 <HAL_RCC_OscConfig+0x27c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a3c      	ldr	r2, [pc, #240]	@ (8002118 <HAL_RCC_OscConfig+0x27c>)
 8002026:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800202a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202c:	f7fe fd02 	bl	8000a34 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002034:	f7fe fcfe 	bl	8000a34 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e232      	b.n	80024ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002046:	4b34      	ldr	r3, [pc, #208]	@ (8002118 <HAL_RCC_OscConfig+0x27c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0f0      	beq.n	8002034 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002052:	4b31      	ldr	r3, [pc, #196]	@ (8002118 <HAL_RCC_OscConfig+0x27c>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	061b      	lsls	r3, r3, #24
 8002060:	492d      	ldr	r1, [pc, #180]	@ (8002118 <HAL_RCC_OscConfig+0x27c>)
 8002062:	4313      	orrs	r3, r2
 8002064:	604b      	str	r3, [r1, #4]
 8002066:	e01a      	b.n	800209e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002068:	4b2b      	ldr	r3, [pc, #172]	@ (8002118 <HAL_RCC_OscConfig+0x27c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a2a      	ldr	r2, [pc, #168]	@ (8002118 <HAL_RCC_OscConfig+0x27c>)
 800206e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002074:	f7fe fcde 	bl	8000a34 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800207c:	f7fe fcda 	bl	8000a34 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e20e      	b.n	80024ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800208e:	4b22      	ldr	r3, [pc, #136]	@ (8002118 <HAL_RCC_OscConfig+0x27c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f0      	bne.n	800207c <HAL_RCC_OscConfig+0x1e0>
 800209a:	e000      	b.n	800209e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800209c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d041      	beq.n	800212e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d01c      	beq.n	80020ec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020b2:	4b19      	ldr	r3, [pc, #100]	@ (8002118 <HAL_RCC_OscConfig+0x27c>)
 80020b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020b8:	4a17      	ldr	r2, [pc, #92]	@ (8002118 <HAL_RCC_OscConfig+0x27c>)
 80020ba:	f043 0301 	orr.w	r3, r3, #1
 80020be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c2:	f7fe fcb7 	bl	8000a34 <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ca:	f7fe fcb3 	bl	8000a34 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e1e7      	b.n	80024ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002118 <HAL_RCC_OscConfig+0x27c>)
 80020de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0ef      	beq.n	80020ca <HAL_RCC_OscConfig+0x22e>
 80020ea:	e020      	b.n	800212e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002118 <HAL_RCC_OscConfig+0x27c>)
 80020ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020f2:	4a09      	ldr	r2, [pc, #36]	@ (8002118 <HAL_RCC_OscConfig+0x27c>)
 80020f4:	f023 0301 	bic.w	r3, r3, #1
 80020f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020fc:	f7fe fc9a 	bl	8000a34 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002102:	e00d      	b.n	8002120 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002104:	f7fe fc96 	bl	8000a34 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d906      	bls.n	8002120 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e1ca      	b.n	80024ac <HAL_RCC_OscConfig+0x610>
 8002116:	bf00      	nop
 8002118:	40021000 	.word	0x40021000
 800211c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002120:	4b8c      	ldr	r3, [pc, #560]	@ (8002354 <HAL_RCC_OscConfig+0x4b8>)
 8002122:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1ea      	bne.n	8002104 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0304 	and.w	r3, r3, #4
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 80a6 	beq.w	8002288 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800213c:	2300      	movs	r3, #0
 800213e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002140:	4b84      	ldr	r3, [pc, #528]	@ (8002354 <HAL_RCC_OscConfig+0x4b8>)
 8002142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002144:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_RCC_OscConfig+0x2b4>
 800214c:	2301      	movs	r3, #1
 800214e:	e000      	b.n	8002152 <HAL_RCC_OscConfig+0x2b6>
 8002150:	2300      	movs	r3, #0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00d      	beq.n	8002172 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002156:	4b7f      	ldr	r3, [pc, #508]	@ (8002354 <HAL_RCC_OscConfig+0x4b8>)
 8002158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800215a:	4a7e      	ldr	r2, [pc, #504]	@ (8002354 <HAL_RCC_OscConfig+0x4b8>)
 800215c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002160:	6593      	str	r3, [r2, #88]	@ 0x58
 8002162:	4b7c      	ldr	r3, [pc, #496]	@ (8002354 <HAL_RCC_OscConfig+0x4b8>)
 8002164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800216e:	2301      	movs	r3, #1
 8002170:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002172:	4b79      	ldr	r3, [pc, #484]	@ (8002358 <HAL_RCC_OscConfig+0x4bc>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800217a:	2b00      	cmp	r3, #0
 800217c:	d118      	bne.n	80021b0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800217e:	4b76      	ldr	r3, [pc, #472]	@ (8002358 <HAL_RCC_OscConfig+0x4bc>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a75      	ldr	r2, [pc, #468]	@ (8002358 <HAL_RCC_OscConfig+0x4bc>)
 8002184:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002188:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800218a:	f7fe fc53 	bl	8000a34 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002192:	f7fe fc4f 	bl	8000a34 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e183      	b.n	80024ac <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021a4:	4b6c      	ldr	r3, [pc, #432]	@ (8002358 <HAL_RCC_OscConfig+0x4bc>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0f0      	beq.n	8002192 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d108      	bne.n	80021ca <HAL_RCC_OscConfig+0x32e>
 80021b8:	4b66      	ldr	r3, [pc, #408]	@ (8002354 <HAL_RCC_OscConfig+0x4b8>)
 80021ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021be:	4a65      	ldr	r2, [pc, #404]	@ (8002354 <HAL_RCC_OscConfig+0x4b8>)
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021c8:	e024      	b.n	8002214 <HAL_RCC_OscConfig+0x378>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	2b05      	cmp	r3, #5
 80021d0:	d110      	bne.n	80021f4 <HAL_RCC_OscConfig+0x358>
 80021d2:	4b60      	ldr	r3, [pc, #384]	@ (8002354 <HAL_RCC_OscConfig+0x4b8>)
 80021d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021d8:	4a5e      	ldr	r2, [pc, #376]	@ (8002354 <HAL_RCC_OscConfig+0x4b8>)
 80021da:	f043 0304 	orr.w	r3, r3, #4
 80021de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021e2:	4b5c      	ldr	r3, [pc, #368]	@ (8002354 <HAL_RCC_OscConfig+0x4b8>)
 80021e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021e8:	4a5a      	ldr	r2, [pc, #360]	@ (8002354 <HAL_RCC_OscConfig+0x4b8>)
 80021ea:	f043 0301 	orr.w	r3, r3, #1
 80021ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021f2:	e00f      	b.n	8002214 <HAL_RCC_OscConfig+0x378>
 80021f4:	4b57      	ldr	r3, [pc, #348]	@ (8002354 <HAL_RCC_OscConfig+0x4b8>)
 80021f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021fa:	4a56      	ldr	r2, [pc, #344]	@ (8002354 <HAL_RCC_OscConfig+0x4b8>)
 80021fc:	f023 0301 	bic.w	r3, r3, #1
 8002200:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002204:	4b53      	ldr	r3, [pc, #332]	@ (8002354 <HAL_RCC_OscConfig+0x4b8>)
 8002206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800220a:	4a52      	ldr	r2, [pc, #328]	@ (8002354 <HAL_RCC_OscConfig+0x4b8>)
 800220c:	f023 0304 	bic.w	r3, r3, #4
 8002210:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d016      	beq.n	800224a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221c:	f7fe fc0a 	bl	8000a34 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002222:	e00a      	b.n	800223a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002224:	f7fe fc06 	bl	8000a34 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002232:	4293      	cmp	r3, r2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e138      	b.n	80024ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800223a:	4b46      	ldr	r3, [pc, #280]	@ (8002354 <HAL_RCC_OscConfig+0x4b8>)
 800223c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0ed      	beq.n	8002224 <HAL_RCC_OscConfig+0x388>
 8002248:	e015      	b.n	8002276 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800224a:	f7fe fbf3 	bl	8000a34 <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002250:	e00a      	b.n	8002268 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002252:	f7fe fbef 	bl	8000a34 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002260:	4293      	cmp	r3, r2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e121      	b.n	80024ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002268:	4b3a      	ldr	r3, [pc, #232]	@ (8002354 <HAL_RCC_OscConfig+0x4b8>)
 800226a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1ed      	bne.n	8002252 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002276:	7ffb      	ldrb	r3, [r7, #31]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d105      	bne.n	8002288 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800227c:	4b35      	ldr	r3, [pc, #212]	@ (8002354 <HAL_RCC_OscConfig+0x4b8>)
 800227e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002280:	4a34      	ldr	r2, [pc, #208]	@ (8002354 <HAL_RCC_OscConfig+0x4b8>)
 8002282:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002286:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0320 	and.w	r3, r3, #32
 8002290:	2b00      	cmp	r3, #0
 8002292:	d03c      	beq.n	800230e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d01c      	beq.n	80022d6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800229c:	4b2d      	ldr	r3, [pc, #180]	@ (8002354 <HAL_RCC_OscConfig+0x4b8>)
 800229e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022a2:	4a2c      	ldr	r2, [pc, #176]	@ (8002354 <HAL_RCC_OscConfig+0x4b8>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ac:	f7fe fbc2 	bl	8000a34 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022b4:	f7fe fbbe 	bl	8000a34 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e0f2      	b.n	80024ac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022c6:	4b23      	ldr	r3, [pc, #140]	@ (8002354 <HAL_RCC_OscConfig+0x4b8>)
 80022c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0ef      	beq.n	80022b4 <HAL_RCC_OscConfig+0x418>
 80022d4:	e01b      	b.n	800230e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022d6:	4b1f      	ldr	r3, [pc, #124]	@ (8002354 <HAL_RCC_OscConfig+0x4b8>)
 80022d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002354 <HAL_RCC_OscConfig+0x4b8>)
 80022de:	f023 0301 	bic.w	r3, r3, #1
 80022e2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e6:	f7fe fba5 	bl	8000a34 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022ee:	f7fe fba1 	bl	8000a34 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e0d5      	b.n	80024ac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002300:	4b14      	ldr	r3, [pc, #80]	@ (8002354 <HAL_RCC_OscConfig+0x4b8>)
 8002302:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1ef      	bne.n	80022ee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	2b00      	cmp	r3, #0
 8002314:	f000 80c9 	beq.w	80024aa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002318:	4b0e      	ldr	r3, [pc, #56]	@ (8002354 <HAL_RCC_OscConfig+0x4b8>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 030c 	and.w	r3, r3, #12
 8002320:	2b0c      	cmp	r3, #12
 8002322:	f000 8083 	beq.w	800242c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	2b02      	cmp	r3, #2
 800232c:	d15e      	bne.n	80023ec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800232e:	4b09      	ldr	r3, [pc, #36]	@ (8002354 <HAL_RCC_OscConfig+0x4b8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a08      	ldr	r2, [pc, #32]	@ (8002354 <HAL_RCC_OscConfig+0x4b8>)
 8002334:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002338:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233a:	f7fe fb7b 	bl	8000a34 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002340:	e00c      	b.n	800235c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002342:	f7fe fb77 	bl	8000a34 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d905      	bls.n	800235c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e0ab      	b.n	80024ac <HAL_RCC_OscConfig+0x610>
 8002354:	40021000 	.word	0x40021000
 8002358:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800235c:	4b55      	ldr	r3, [pc, #340]	@ (80024b4 <HAL_RCC_OscConfig+0x618>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1ec      	bne.n	8002342 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002368:	4b52      	ldr	r3, [pc, #328]	@ (80024b4 <HAL_RCC_OscConfig+0x618>)
 800236a:	68da      	ldr	r2, [r3, #12]
 800236c:	4b52      	ldr	r3, [pc, #328]	@ (80024b8 <HAL_RCC_OscConfig+0x61c>)
 800236e:	4013      	ands	r3, r2
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6a11      	ldr	r1, [r2, #32]
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002378:	3a01      	subs	r2, #1
 800237a:	0112      	lsls	r2, r2, #4
 800237c:	4311      	orrs	r1, r2
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002382:	0212      	lsls	r2, r2, #8
 8002384:	4311      	orrs	r1, r2
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800238a:	0852      	lsrs	r2, r2, #1
 800238c:	3a01      	subs	r2, #1
 800238e:	0552      	lsls	r2, r2, #21
 8002390:	4311      	orrs	r1, r2
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002396:	0852      	lsrs	r2, r2, #1
 8002398:	3a01      	subs	r2, #1
 800239a:	0652      	lsls	r2, r2, #25
 800239c:	4311      	orrs	r1, r2
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80023a2:	06d2      	lsls	r2, r2, #27
 80023a4:	430a      	orrs	r2, r1
 80023a6:	4943      	ldr	r1, [pc, #268]	@ (80024b4 <HAL_RCC_OscConfig+0x618>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023ac:	4b41      	ldr	r3, [pc, #260]	@ (80024b4 <HAL_RCC_OscConfig+0x618>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a40      	ldr	r2, [pc, #256]	@ (80024b4 <HAL_RCC_OscConfig+0x618>)
 80023b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023b6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023b8:	4b3e      	ldr	r3, [pc, #248]	@ (80024b4 <HAL_RCC_OscConfig+0x618>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	4a3d      	ldr	r2, [pc, #244]	@ (80024b4 <HAL_RCC_OscConfig+0x618>)
 80023be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c4:	f7fe fb36 	bl	8000a34 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023cc:	f7fe fb32 	bl	8000a34 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e066      	b.n	80024ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023de:	4b35      	ldr	r3, [pc, #212]	@ (80024b4 <HAL_RCC_OscConfig+0x618>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0f0      	beq.n	80023cc <HAL_RCC_OscConfig+0x530>
 80023ea:	e05e      	b.n	80024aa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ec:	4b31      	ldr	r3, [pc, #196]	@ (80024b4 <HAL_RCC_OscConfig+0x618>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a30      	ldr	r2, [pc, #192]	@ (80024b4 <HAL_RCC_OscConfig+0x618>)
 80023f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f8:	f7fe fb1c 	bl	8000a34 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002400:	f7fe fb18 	bl	8000a34 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e04c      	b.n	80024ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002412:	4b28      	ldr	r3, [pc, #160]	@ (80024b4 <HAL_RCC_OscConfig+0x618>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1f0      	bne.n	8002400 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800241e:	4b25      	ldr	r3, [pc, #148]	@ (80024b4 <HAL_RCC_OscConfig+0x618>)
 8002420:	68da      	ldr	r2, [r3, #12]
 8002422:	4924      	ldr	r1, [pc, #144]	@ (80024b4 <HAL_RCC_OscConfig+0x618>)
 8002424:	4b25      	ldr	r3, [pc, #148]	@ (80024bc <HAL_RCC_OscConfig+0x620>)
 8002426:	4013      	ands	r3, r2
 8002428:	60cb      	str	r3, [r1, #12]
 800242a:	e03e      	b.n	80024aa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e039      	b.n	80024ac <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002438:	4b1e      	ldr	r3, [pc, #120]	@ (80024b4 <HAL_RCC_OscConfig+0x618>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f003 0203 	and.w	r2, r3, #3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	429a      	cmp	r2, r3
 800244a:	d12c      	bne.n	80024a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002456:	3b01      	subs	r3, #1
 8002458:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800245a:	429a      	cmp	r2, r3
 800245c:	d123      	bne.n	80024a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002468:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800246a:	429a      	cmp	r2, r3
 800246c:	d11b      	bne.n	80024a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002478:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800247a:	429a      	cmp	r2, r3
 800247c:	d113      	bne.n	80024a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002488:	085b      	lsrs	r3, r3, #1
 800248a:	3b01      	subs	r3, #1
 800248c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800248e:	429a      	cmp	r2, r3
 8002490:	d109      	bne.n	80024a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800249c:	085b      	lsrs	r3, r3, #1
 800249e:	3b01      	subs	r3, #1
 80024a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d001      	beq.n	80024aa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e000      	b.n	80024ac <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3720      	adds	r7, #32
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40021000 	.word	0x40021000
 80024b8:	019f800c 	.word	0x019f800c
 80024bc:	feeefffc 	.word	0xfeeefffc

080024c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80024ca:	2300      	movs	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e11e      	b.n	8002716 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024d8:	4b91      	ldr	r3, [pc, #580]	@ (8002720 <HAL_RCC_ClockConfig+0x260>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 030f 	and.w	r3, r3, #15
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d910      	bls.n	8002508 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e6:	4b8e      	ldr	r3, [pc, #568]	@ (8002720 <HAL_RCC_ClockConfig+0x260>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f023 020f 	bic.w	r2, r3, #15
 80024ee:	498c      	ldr	r1, [pc, #560]	@ (8002720 <HAL_RCC_ClockConfig+0x260>)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f6:	4b8a      	ldr	r3, [pc, #552]	@ (8002720 <HAL_RCC_ClockConfig+0x260>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d001      	beq.n	8002508 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e106      	b.n	8002716 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b00      	cmp	r3, #0
 8002512:	d073      	beq.n	80025fc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b03      	cmp	r3, #3
 800251a:	d129      	bne.n	8002570 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800251c:	4b81      	ldr	r3, [pc, #516]	@ (8002724 <HAL_RCC_ClockConfig+0x264>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e0f4      	b.n	8002716 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800252c:	f000 f966 	bl	80027fc <RCC_GetSysClockFreqFromPLLSource>
 8002530:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	4a7c      	ldr	r2, [pc, #496]	@ (8002728 <HAL_RCC_ClockConfig+0x268>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d93f      	bls.n	80025ba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800253a:	4b7a      	ldr	r3, [pc, #488]	@ (8002724 <HAL_RCC_ClockConfig+0x264>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d009      	beq.n	800255a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800254e:	2b00      	cmp	r3, #0
 8002550:	d033      	beq.n	80025ba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002556:	2b00      	cmp	r3, #0
 8002558:	d12f      	bne.n	80025ba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800255a:	4b72      	ldr	r3, [pc, #456]	@ (8002724 <HAL_RCC_ClockConfig+0x264>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002562:	4a70      	ldr	r2, [pc, #448]	@ (8002724 <HAL_RCC_ClockConfig+0x264>)
 8002564:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002568:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800256a:	2380      	movs	r3, #128	@ 0x80
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	e024      	b.n	80025ba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b02      	cmp	r3, #2
 8002576:	d107      	bne.n	8002588 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002578:	4b6a      	ldr	r3, [pc, #424]	@ (8002724 <HAL_RCC_ClockConfig+0x264>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d109      	bne.n	8002598 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e0c6      	b.n	8002716 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002588:	4b66      	ldr	r3, [pc, #408]	@ (8002724 <HAL_RCC_ClockConfig+0x264>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e0be      	b.n	8002716 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002598:	f000 f8ce 	bl	8002738 <HAL_RCC_GetSysClockFreq>
 800259c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4a61      	ldr	r2, [pc, #388]	@ (8002728 <HAL_RCC_ClockConfig+0x268>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d909      	bls.n	80025ba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80025a6:	4b5f      	ldr	r3, [pc, #380]	@ (8002724 <HAL_RCC_ClockConfig+0x264>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80025ae:	4a5d      	ldr	r2, [pc, #372]	@ (8002724 <HAL_RCC_ClockConfig+0x264>)
 80025b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025b4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80025b6:	2380      	movs	r3, #128	@ 0x80
 80025b8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025ba:	4b5a      	ldr	r3, [pc, #360]	@ (8002724 <HAL_RCC_ClockConfig+0x264>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f023 0203 	bic.w	r2, r3, #3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	4957      	ldr	r1, [pc, #348]	@ (8002724 <HAL_RCC_ClockConfig+0x264>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025cc:	f7fe fa32 	bl	8000a34 <HAL_GetTick>
 80025d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d2:	e00a      	b.n	80025ea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025d4:	f7fe fa2e 	bl	8000a34 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e095      	b.n	8002716 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ea:	4b4e      	ldr	r3, [pc, #312]	@ (8002724 <HAL_RCC_ClockConfig+0x264>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 020c 	and.w	r2, r3, #12
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d1eb      	bne.n	80025d4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d023      	beq.n	8002650 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b00      	cmp	r3, #0
 8002612:	d005      	beq.n	8002620 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002614:	4b43      	ldr	r3, [pc, #268]	@ (8002724 <HAL_RCC_ClockConfig+0x264>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	4a42      	ldr	r2, [pc, #264]	@ (8002724 <HAL_RCC_ClockConfig+0x264>)
 800261a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800261e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0308 	and.w	r3, r3, #8
 8002628:	2b00      	cmp	r3, #0
 800262a:	d007      	beq.n	800263c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800262c:	4b3d      	ldr	r3, [pc, #244]	@ (8002724 <HAL_RCC_ClockConfig+0x264>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002634:	4a3b      	ldr	r2, [pc, #236]	@ (8002724 <HAL_RCC_ClockConfig+0x264>)
 8002636:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800263a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800263c:	4b39      	ldr	r3, [pc, #228]	@ (8002724 <HAL_RCC_ClockConfig+0x264>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	4936      	ldr	r1, [pc, #216]	@ (8002724 <HAL_RCC_ClockConfig+0x264>)
 800264a:	4313      	orrs	r3, r2
 800264c:	608b      	str	r3, [r1, #8]
 800264e:	e008      	b.n	8002662 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	2b80      	cmp	r3, #128	@ 0x80
 8002654:	d105      	bne.n	8002662 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002656:	4b33      	ldr	r3, [pc, #204]	@ (8002724 <HAL_RCC_ClockConfig+0x264>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	4a32      	ldr	r2, [pc, #200]	@ (8002724 <HAL_RCC_ClockConfig+0x264>)
 800265c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002660:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002662:	4b2f      	ldr	r3, [pc, #188]	@ (8002720 <HAL_RCC_ClockConfig+0x260>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	429a      	cmp	r2, r3
 800266e:	d21d      	bcs.n	80026ac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002670:	4b2b      	ldr	r3, [pc, #172]	@ (8002720 <HAL_RCC_ClockConfig+0x260>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f023 020f 	bic.w	r2, r3, #15
 8002678:	4929      	ldr	r1, [pc, #164]	@ (8002720 <HAL_RCC_ClockConfig+0x260>)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	4313      	orrs	r3, r2
 800267e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002680:	f7fe f9d8 	bl	8000a34 <HAL_GetTick>
 8002684:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002686:	e00a      	b.n	800269e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002688:	f7fe f9d4 	bl	8000a34 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002696:	4293      	cmp	r3, r2
 8002698:	d901      	bls.n	800269e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e03b      	b.n	8002716 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800269e:	4b20      	ldr	r3, [pc, #128]	@ (8002720 <HAL_RCC_ClockConfig+0x260>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d1ed      	bne.n	8002688 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d008      	beq.n	80026ca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002724 <HAL_RCC_ClockConfig+0x264>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	4917      	ldr	r1, [pc, #92]	@ (8002724 <HAL_RCC_ClockConfig+0x264>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d009      	beq.n	80026ea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026d6:	4b13      	ldr	r3, [pc, #76]	@ (8002724 <HAL_RCC_ClockConfig+0x264>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	490f      	ldr	r1, [pc, #60]	@ (8002724 <HAL_RCC_ClockConfig+0x264>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026ea:	f000 f825 	bl	8002738 <HAL_RCC_GetSysClockFreq>
 80026ee:	4602      	mov	r2, r0
 80026f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002724 <HAL_RCC_ClockConfig+0x264>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	091b      	lsrs	r3, r3, #4
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	490c      	ldr	r1, [pc, #48]	@ (800272c <HAL_RCC_ClockConfig+0x26c>)
 80026fc:	5ccb      	ldrb	r3, [r1, r3]
 80026fe:	f003 031f 	and.w	r3, r3, #31
 8002702:	fa22 f303 	lsr.w	r3, r2, r3
 8002706:	4a0a      	ldr	r2, [pc, #40]	@ (8002730 <HAL_RCC_ClockConfig+0x270>)
 8002708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800270a:	4b0a      	ldr	r3, [pc, #40]	@ (8002734 <HAL_RCC_ClockConfig+0x274>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f7fe f944 	bl	800099c <HAL_InitTick>
 8002714:	4603      	mov	r3, r0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40022000 	.word	0x40022000
 8002724:	40021000 	.word	0x40021000
 8002728:	04c4b400 	.word	0x04c4b400
 800272c:	08002cd8 	.word	0x08002cd8
 8002730:	20000000 	.word	0x20000000
 8002734:	20000004 	.word	0x20000004

08002738 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002738:	b480      	push	{r7}
 800273a:	b087      	sub	sp, #28
 800273c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800273e:	4b2c      	ldr	r3, [pc, #176]	@ (80027f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 030c 	and.w	r3, r3, #12
 8002746:	2b04      	cmp	r3, #4
 8002748:	d102      	bne.n	8002750 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800274a:	4b2a      	ldr	r3, [pc, #168]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	e047      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002750:	4b27      	ldr	r3, [pc, #156]	@ (80027f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 030c 	and.w	r3, r3, #12
 8002758:	2b08      	cmp	r3, #8
 800275a:	d102      	bne.n	8002762 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800275c:	4b26      	ldr	r3, [pc, #152]	@ (80027f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	e03e      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002762:	4b23      	ldr	r3, [pc, #140]	@ (80027f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 030c 	and.w	r3, r3, #12
 800276a:	2b0c      	cmp	r3, #12
 800276c:	d136      	bne.n	80027dc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800276e:	4b20      	ldr	r3, [pc, #128]	@ (80027f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002778:	4b1d      	ldr	r3, [pc, #116]	@ (80027f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	091b      	lsrs	r3, r3, #4
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	3301      	adds	r3, #1
 8002784:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2b03      	cmp	r3, #3
 800278a:	d10c      	bne.n	80027a6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800278c:	4a1a      	ldr	r2, [pc, #104]	@ (80027f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	fbb2 f3f3 	udiv	r3, r2, r3
 8002794:	4a16      	ldr	r2, [pc, #88]	@ (80027f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002796:	68d2      	ldr	r2, [r2, #12]
 8002798:	0a12      	lsrs	r2, r2, #8
 800279a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800279e:	fb02 f303 	mul.w	r3, r2, r3
 80027a2:	617b      	str	r3, [r7, #20]
      break;
 80027a4:	e00c      	b.n	80027c0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027a6:	4a13      	ldr	r2, [pc, #76]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ae:	4a10      	ldr	r2, [pc, #64]	@ (80027f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027b0:	68d2      	ldr	r2, [r2, #12]
 80027b2:	0a12      	lsrs	r2, r2, #8
 80027b4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80027b8:	fb02 f303 	mul.w	r3, r2, r3
 80027bc:	617b      	str	r3, [r7, #20]
      break;
 80027be:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027c0:	4b0b      	ldr	r3, [pc, #44]	@ (80027f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	0e5b      	lsrs	r3, r3, #25
 80027c6:	f003 0303 	and.w	r3, r3, #3
 80027ca:	3301      	adds	r3, #1
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	e001      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80027dc:	2300      	movs	r3, #0
 80027de:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80027e0:	693b      	ldr	r3, [r7, #16]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	371c      	adds	r7, #28
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	40021000 	.word	0x40021000
 80027f4:	00f42400 	.word	0x00f42400
 80027f8:	007a1200 	.word	0x007a1200

080027fc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b087      	sub	sp, #28
 8002800:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002802:	4b1e      	ldr	r3, [pc, #120]	@ (800287c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800280c:	4b1b      	ldr	r3, [pc, #108]	@ (800287c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	091b      	lsrs	r3, r3, #4
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	3301      	adds	r3, #1
 8002818:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	2b03      	cmp	r3, #3
 800281e:	d10c      	bne.n	800283a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002820:	4a17      	ldr	r2, [pc, #92]	@ (8002880 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	fbb2 f3f3 	udiv	r3, r2, r3
 8002828:	4a14      	ldr	r2, [pc, #80]	@ (800287c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800282a:	68d2      	ldr	r2, [r2, #12]
 800282c:	0a12      	lsrs	r2, r2, #8
 800282e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002832:	fb02 f303 	mul.w	r3, r2, r3
 8002836:	617b      	str	r3, [r7, #20]
    break;
 8002838:	e00c      	b.n	8002854 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800283a:	4a12      	ldr	r2, [pc, #72]	@ (8002884 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002842:	4a0e      	ldr	r2, [pc, #56]	@ (800287c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002844:	68d2      	ldr	r2, [r2, #12]
 8002846:	0a12      	lsrs	r2, r2, #8
 8002848:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800284c:	fb02 f303 	mul.w	r3, r2, r3
 8002850:	617b      	str	r3, [r7, #20]
    break;
 8002852:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002854:	4b09      	ldr	r3, [pc, #36]	@ (800287c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	0e5b      	lsrs	r3, r3, #25
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	3301      	adds	r3, #1
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	fbb2 f3f3 	udiv	r3, r2, r3
 800286c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800286e:	687b      	ldr	r3, [r7, #4]
}
 8002870:	4618      	mov	r0, r3
 8002872:	371c      	adds	r7, #28
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	40021000 	.word	0x40021000
 8002880:	007a1200 	.word	0x007a1200
 8002884:	00f42400 	.word	0x00f42400

08002888 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002890:	2300      	movs	r3, #0
 8002892:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002894:	2300      	movs	r3, #0
 8002896:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 8098 	beq.w	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028a6:	2300      	movs	r3, #0
 80028a8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028aa:	4b43      	ldr	r3, [pc, #268]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10d      	bne.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028b6:	4b40      	ldr	r3, [pc, #256]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ba:	4a3f      	ldr	r2, [pc, #252]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80028c2:	4b3d      	ldr	r3, [pc, #244]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ca:	60bb      	str	r3, [r7, #8]
 80028cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ce:	2301      	movs	r3, #1
 80028d0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028d2:	4b3a      	ldr	r3, [pc, #232]	@ (80029bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a39      	ldr	r2, [pc, #228]	@ (80029bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80028d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028de:	f7fe f8a9 	bl	8000a34 <HAL_GetTick>
 80028e2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028e4:	e009      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e6:	f7fe f8a5 	bl	8000a34 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d902      	bls.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	74fb      	strb	r3, [r7, #19]
        break;
 80028f8:	e005      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028fa:	4b30      	ldr	r3, [pc, #192]	@ (80029bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0ef      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002906:	7cfb      	ldrb	r3, [r7, #19]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d159      	bne.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800290c:	4b2a      	ldr	r3, [pc, #168]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800290e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002912:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002916:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d01e      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	429a      	cmp	r2, r3
 8002926:	d019      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002928:	4b23      	ldr	r3, [pc, #140]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800292a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800292e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002932:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002934:	4b20      	ldr	r3, [pc, #128]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800293a:	4a1f      	ldr	r2, [pc, #124]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800293c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002940:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002944:	4b1c      	ldr	r3, [pc, #112]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800294a:	4a1b      	ldr	r2, [pc, #108]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800294c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002950:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002954:	4a18      	ldr	r2, [pc, #96]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d016      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002966:	f7fe f865 	bl	8000a34 <HAL_GetTick>
 800296a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800296c:	e00b      	b.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800296e:	f7fe f861 	bl	8000a34 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	f241 3288 	movw	r2, #5000	@ 0x1388
 800297c:	4293      	cmp	r3, r2
 800297e:	d902      	bls.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	74fb      	strb	r3, [r7, #19]
            break;
 8002984:	e006      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002986:	4b0c      	ldr	r3, [pc, #48]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0ec      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002994:	7cfb      	ldrb	r3, [r7, #19]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10b      	bne.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800299a:	4b07      	ldr	r3, [pc, #28]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800299c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a8:	4903      	ldr	r1, [pc, #12]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80029b0:	e008      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029b2:	7cfb      	ldrb	r3, [r7, #19]
 80029b4:	74bb      	strb	r3, [r7, #18]
 80029b6:	e005      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80029b8:	40021000 	.word	0x40021000
 80029bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029c0:	7cfb      	ldrb	r3, [r7, #19]
 80029c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029c4:	7c7b      	ldrb	r3, [r7, #17]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d105      	bne.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ca:	4ba6      	ldr	r3, [pc, #664]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ce:	4aa5      	ldr	r2, [pc, #660]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029d4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00a      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029e2:	4ba0      	ldr	r3, [pc, #640]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e8:	f023 0203 	bic.w	r2, r3, #3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	499c      	ldr	r1, [pc, #624]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00a      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a04:	4b97      	ldr	r3, [pc, #604]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a0a:	f023 020c 	bic.w	r2, r3, #12
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	4994      	ldr	r1, [pc, #592]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00a      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a26:	4b8f      	ldr	r3, [pc, #572]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a2c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	498b      	ldr	r1, [pc, #556]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0308 	and.w	r3, r3, #8
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00a      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a48:	4b86      	ldr	r3, [pc, #536]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a4e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	4983      	ldr	r1, [pc, #524]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00a      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a6a:	4b7e      	ldr	r3, [pc, #504]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a70:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	497a      	ldr	r1, [pc, #488]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00a      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a8c:	4b75      	ldr	r3, [pc, #468]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a92:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	4972      	ldr	r1, [pc, #456]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00a      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002aae:	4b6d      	ldr	r3, [pc, #436]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	4969      	ldr	r1, [pc, #420]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00a      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ad0:	4b64      	ldr	r3, [pc, #400]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ad6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	4961      	ldr	r1, [pc, #388]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00a      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002af2:	4b5c      	ldr	r3, [pc, #368]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002af8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b00:	4958      	ldr	r1, [pc, #352]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d015      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b14:	4b53      	ldr	r3, [pc, #332]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b22:	4950      	ldr	r1, [pc, #320]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b32:	d105      	bne.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b34:	4b4b      	ldr	r3, [pc, #300]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	4a4a      	ldr	r2, [pc, #296]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b3e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d015      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b4c:	4b45      	ldr	r3, [pc, #276]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b52:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b5a:	4942      	ldr	r1, [pc, #264]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b6a:	d105      	bne.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b6c:	4b3d      	ldr	r3, [pc, #244]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	4a3c      	ldr	r2, [pc, #240]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b76:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d015      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b84:	4b37      	ldr	r3, [pc, #220]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b8a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b92:	4934      	ldr	r1, [pc, #208]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ba2:	d105      	bne.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ba4:	4b2f      	ldr	r3, [pc, #188]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	4a2e      	ldr	r2, [pc, #184]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002baa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bae:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d015      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bbc:	4b29      	ldr	r3, [pc, #164]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bc2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bca:	4926      	ldr	r1, [pc, #152]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bda:	d105      	bne.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bdc:	4b21      	ldr	r3, [pc, #132]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	4a20      	ldr	r2, [pc, #128]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002be2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002be6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d015      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bfa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c02:	4918      	ldr	r1, [pc, #96]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c12:	d105      	bne.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c14:	4b13      	ldr	r3, [pc, #76]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	4a12      	ldr	r2, [pc, #72]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c1e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d015      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c32:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c3a:	490a      	ldr	r1, [pc, #40]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c4a:	d105      	bne.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c4c:	4b05      	ldr	r3, [pc, #20]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	4a04      	ldr	r2, [pc, #16]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c56:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002c58:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40021000 	.word	0x40021000

08002c68 <memset>:
 8002c68:	4402      	add	r2, r0
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d100      	bne.n	8002c72 <memset+0xa>
 8002c70:	4770      	bx	lr
 8002c72:	f803 1b01 	strb.w	r1, [r3], #1
 8002c76:	e7f9      	b.n	8002c6c <memset+0x4>

08002c78 <__libc_init_array>:
 8002c78:	b570      	push	{r4, r5, r6, lr}
 8002c7a:	4d0d      	ldr	r5, [pc, #52]	@ (8002cb0 <__libc_init_array+0x38>)
 8002c7c:	4c0d      	ldr	r4, [pc, #52]	@ (8002cb4 <__libc_init_array+0x3c>)
 8002c7e:	1b64      	subs	r4, r4, r5
 8002c80:	10a4      	asrs	r4, r4, #2
 8002c82:	2600      	movs	r6, #0
 8002c84:	42a6      	cmp	r6, r4
 8002c86:	d109      	bne.n	8002c9c <__libc_init_array+0x24>
 8002c88:	4d0b      	ldr	r5, [pc, #44]	@ (8002cb8 <__libc_init_array+0x40>)
 8002c8a:	4c0c      	ldr	r4, [pc, #48]	@ (8002cbc <__libc_init_array+0x44>)
 8002c8c:	f000 f818 	bl	8002cc0 <_init>
 8002c90:	1b64      	subs	r4, r4, r5
 8002c92:	10a4      	asrs	r4, r4, #2
 8002c94:	2600      	movs	r6, #0
 8002c96:	42a6      	cmp	r6, r4
 8002c98:	d105      	bne.n	8002ca6 <__libc_init_array+0x2e>
 8002c9a:	bd70      	pop	{r4, r5, r6, pc}
 8002c9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ca0:	4798      	blx	r3
 8002ca2:	3601      	adds	r6, #1
 8002ca4:	e7ee      	b.n	8002c84 <__libc_init_array+0xc>
 8002ca6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002caa:	4798      	blx	r3
 8002cac:	3601      	adds	r6, #1
 8002cae:	e7f2      	b.n	8002c96 <__libc_init_array+0x1e>
 8002cb0:	08002cf8 	.word	0x08002cf8
 8002cb4:	08002cf8 	.word	0x08002cf8
 8002cb8:	08002cf8 	.word	0x08002cf8
 8002cbc:	08002cfc 	.word	0x08002cfc

08002cc0 <_init>:
 8002cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cc2:	bf00      	nop
 8002cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cc6:	bc08      	pop	{r3}
 8002cc8:	469e      	mov	lr, r3
 8002cca:	4770      	bx	lr

08002ccc <_fini>:
 8002ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cce:	bf00      	nop
 8002cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cd2:	bc08      	pop	{r3}
 8002cd4:	469e      	mov	lr, r3
 8002cd6:	4770      	bx	lr
