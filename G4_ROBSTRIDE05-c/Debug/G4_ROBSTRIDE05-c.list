
G4_ROBSTRIDE05-c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005164  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800533c  0800533c  0000633c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800535c  0800535c  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800535c  0800535c  0000700c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800535c  0800535c  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800535c  0800535c  0000635c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005360  08005360  00006360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005364  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  2000000c  08005370  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08005370  00007194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de2e  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ff6  00000000  00000000  00014e6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00016e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a1f  00000000  00000000  00017bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e1f7  00000000  00000000  000185ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d700  00000000  00000000  000367e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c779a  00000000  00000000  00043ee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010b680  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003994  00000000  00000000  0010b6c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0010f058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005324 	.word	0x08005324

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005324 	.word	0x08005324

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <float_to_uint>:
static void MX_DMA_Init(void);
static void MX_FDCAN1_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */
int float_to_uint(float x,float x_min,float x_max,int bits)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b087      	sub	sp, #28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	ed87 0a03 	vstr	s0, [r7, #12]
 8000a5e:	edc7 0a02 	vstr	s1, [r7, #8]
 8000a62:	ed87 1a01 	vstr	s2, [r7, #4]
 8000a66:	6038      	str	r0, [r7, #0]
	float span = x_max - x_min;
 8000a68:	ed97 7a01 	vldr	s14, [r7, #4]
 8000a6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a74:	edc7 7a05 	vstr	s15, [r7, #20]
	float offset = x_min;
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	613b      	str	r3, [r7, #16]
	if(x > x_max) x = x_max;
 8000a7c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000a80:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a8c:	dd02      	ble.n	8000a94 <float_to_uint+0x40>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	e00a      	b.n	8000aaa <float_to_uint+0x56>
	else if(x < x_min) x = x_min;
 8000a94:	ed97 7a03 	vldr	s14, [r7, #12]
 8000a98:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aa4:	d501      	bpl.n	8000aaa <float_to_uint+0x56>
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	60fb      	str	r3, [r7, #12]
	return (int) ((x - offset)*((float)((1<<bits)-1))/span);
 8000aaa:	ed97 7a03 	vldr	s14, [r7, #12]
 8000aae:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ab2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	ee07 3a90 	vmov	s15, r3
 8000ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ac8:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000acc:	ed97 7a05 	vldr	s14, [r7, #20]
 8000ad0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ad4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ad8:	ee17 3a90 	vmov	r3, s15
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	371c      	adds	r7, #28
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <FDCAN1_Config>:

static void FDCAN1_Config(void){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b088      	sub	sp, #32
 8000aec:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef sFilterConfig;

	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8000aee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000af2:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000af8:	2302      	movs	r3, #2
 8000afa:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000afc:	2301      	movs	r3, #1
 8000afe:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x000;
 8000b00:	2300      	movs	r3, #0
 8000b02:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x000;
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
	if(HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK){
 8000b08:	463b      	mov	r3, r7
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4823      	ldr	r0, [pc, #140]	@ (8000b9c <FDCAN1_Config+0xb4>)
 8000b0e:	f002 fd5b 	bl	80035c8 <HAL_FDCAN_ConfigFilter>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <FDCAN1_Config+0x34>
		Error_Handler();
 8000b18:	f000 fafe 	bl	8001118 <Error_Handler>
	}
	/* Configure global filter to reject all non-matching frames */
	if(HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE) != HAL_OK){
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	9300      	str	r3, [sp, #0]
 8000b20:	2301      	movs	r3, #1
 8000b22:	2202      	movs	r2, #2
 8000b24:	2102      	movs	r1, #2
 8000b26:	481d      	ldr	r0, [pc, #116]	@ (8000b9c <FDCAN1_Config+0xb4>)
 8000b28:	f002 fda8 	bl	800367c <HAL_FDCAN_ConfigGlobalFilter>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <FDCAN1_Config+0x4e>
		Error_Handler();
 8000b32:	f000 faf1 	bl	8001118 <Error_Handler>
	}
	if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK){
 8000b36:	4819      	ldr	r0, [pc, #100]	@ (8000b9c <FDCAN1_Config+0xb4>)
 8000b38:	f002 fdd1 	bl	80036de <HAL_FDCAN_Start>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <FDCAN1_Config+0x5e>
		Error_Handler();
 8000b42:	f000 fae9 	bl	8001118 <Error_Handler>
	}
	if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK){
 8000b46:	2200      	movs	r2, #0
 8000b48:	2101      	movs	r1, #1
 8000b4a:	4814      	ldr	r0, [pc, #80]	@ (8000b9c <FDCAN1_Config+0xb4>)
 8000b4c:	f002 ff4e 	bl	80039ec <HAL_FDCAN_ActivateNotification>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <FDCAN1_Config+0x72>
		Error_Handler();
 8000b56:	f000 fadf 	bl	8001118 <Error_Handler>
	}

	TxHeader.Identifier = 0x200;
 8000b5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ba0 <FDCAN1_Config+0xb8>)
 8000b5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b60:	601a      	str	r2, [r3, #0]
	TxHeader.IdType = FDCAN_EXTENDED_ID;
 8000b62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba0 <FDCAN1_Config+0xb8>)
 8000b64:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b68:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba0 <FDCAN1_Config+0xb8>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = 8;
 8000b70:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba0 <FDCAN1_Config+0xb8>)
 8000b72:	2208      	movs	r2, #8
 8000b74:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000b76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba0 <FDCAN1_Config+0xb8>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000b7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ba0 <FDCAN1_Config+0xb8>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000b82:	4b07      	ldr	r3, [pc, #28]	@ (8000ba0 <FDCAN1_Config+0xb8>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000b88:	4b05      	ldr	r3, [pc, #20]	@ (8000ba0 <FDCAN1_Config+0xb8>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;
 8000b8e:	4b04      	ldr	r3, [pc, #16]	@ (8000ba0 <FDCAN1_Config+0xb8>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	621a      	str	r2, [r3, #32]
}
 8000b94:	bf00      	nop
 8000b96:	3718      	adds	r7, #24
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	200000f4 	.word	0x200000f4
 8000ba0:	20000158 	.word	0x20000158

08000ba4 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08c      	sub	sp, #48	@ 0x30
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef RxHeader;

	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET){
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	f003 0301 	and.w	r3, r3, #1
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d00b      	beq.n	8000bd0 <HAL_FDCAN_RxFifo0Callback+0x2c>
		if(HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK){
 8000bb8:	f107 0208 	add.w	r2, r7, #8
 8000bbc:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <HAL_FDCAN_RxFifo0Callback+0x34>)
 8000bbe:	2140      	movs	r1, #64	@ 0x40
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f002 fdf9 	bl	80037b8 <HAL_FDCAN_GetRxMessage>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <HAL_FDCAN_RxFifo0Callback+0x2c>
			Error_Handler();
 8000bcc:	f000 faa4 	bl	8001118 <Error_Handler>
		}
	}
}
 8000bd0:	bf00      	nop
 8000bd2:	3730      	adds	r7, #48	@ 0x30
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000184 	.word	0x20000184

08000bdc <EnableMotor>:

void EnableMotor(){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
	TxHeader.Identifier = (0x3<<24) | (MASTER_ID<<8) |(MOTOR_ID);
 8000be2:	4b12      	ldr	r3, [pc, #72]	@ (8000c2c <EnableMotor+0x50>)
 8000be4:	4a12      	ldr	r2, [pc, #72]	@ (8000c30 <EnableMotor+0x54>)
 8000be6:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 7; i++){
 8000be8:	2300      	movs	r3, #0
 8000bea:	71fb      	strb	r3, [r7, #7]
 8000bec:	e006      	b.n	8000bfc <EnableMotor+0x20>
		TxData[i] = 0;
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	4a10      	ldr	r2, [pc, #64]	@ (8000c34 <EnableMotor+0x58>)
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 7; i++){
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	71fb      	strb	r3, [r7, #7]
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	2b06      	cmp	r3, #6
 8000c00:	d9f5      	bls.n	8000bee <EnableMotor+0x12>
	}
	if(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1)) {
 8000c02:	480d      	ldr	r0, [pc, #52]	@ (8000c38 <EnableMotor+0x5c>)
 8000c04:	f002 fee0 	bl	80039c8 <HAL_FDCAN_GetTxFifoFreeLevel>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d009      	beq.n	8000c22 <EnableMotor+0x46>
		if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 8000c0e:	4a09      	ldr	r2, [pc, #36]	@ (8000c34 <EnableMotor+0x58>)
 8000c10:	4906      	ldr	r1, [pc, #24]	@ (8000c2c <EnableMotor+0x50>)
 8000c12:	4809      	ldr	r0, [pc, #36]	@ (8000c38 <EnableMotor+0x5c>)
 8000c14:	f002 fd8b 	bl	800372e <HAL_FDCAN_AddMessageToTxFifoQ>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <EnableMotor+0x46>
			Error_Handler();
 8000c1e:	f000 fa7b 	bl	8001118 <Error_Handler>
		}
	}
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000158 	.word	0x20000158
 8000c30:	0300fd7f 	.word	0x0300fd7f
 8000c34:	2000017c 	.word	0x2000017c
 8000c38:	200000f4 	.word	0x200000f4

08000c3c <ResetMotorAngle>:

void ResetMotorAngle(){
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
	TxHeader.Identifier = (0x6<<24) | (MASTER_ID<<8) |(MOTOR_ID);
 8000c42:	4b13      	ldr	r3, [pc, #76]	@ (8000c90 <ResetMotorAngle+0x54>)
 8000c44:	4a13      	ldr	r2, [pc, #76]	@ (8000c94 <ResetMotorAngle+0x58>)
 8000c46:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 7; i++){
 8000c48:	2300      	movs	r3, #0
 8000c4a:	71fb      	strb	r3, [r7, #7]
 8000c4c:	e006      	b.n	8000c5c <ResetMotorAngle+0x20>
		TxData[i] = 0;
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	4a11      	ldr	r2, [pc, #68]	@ (8000c98 <ResetMotorAngle+0x5c>)
 8000c52:	2100      	movs	r1, #0
 8000c54:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 7; i++){
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	71fb      	strb	r3, [r7, #7]
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	2b06      	cmp	r3, #6
 8000c60:	d9f5      	bls.n	8000c4e <ResetMotorAngle+0x12>
	}
	TxData[0] = 1;
 8000c62:	4b0d      	ldr	r3, [pc, #52]	@ (8000c98 <ResetMotorAngle+0x5c>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	701a      	strb	r2, [r3, #0]
	if(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1)) {
 8000c68:	480c      	ldr	r0, [pc, #48]	@ (8000c9c <ResetMotorAngle+0x60>)
 8000c6a:	f002 fead 	bl	80039c8 <HAL_FDCAN_GetTxFifoFreeLevel>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d009      	beq.n	8000c88 <ResetMotorAngle+0x4c>
		if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 8000c74:	4a08      	ldr	r2, [pc, #32]	@ (8000c98 <ResetMotorAngle+0x5c>)
 8000c76:	4906      	ldr	r1, [pc, #24]	@ (8000c90 <ResetMotorAngle+0x54>)
 8000c78:	4808      	ldr	r0, [pc, #32]	@ (8000c9c <ResetMotorAngle+0x60>)
 8000c7a:	f002 fd58 	bl	800372e <HAL_FDCAN_AddMessageToTxFifoQ>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <ResetMotorAngle+0x4c>
			Error_Handler();
 8000c84:	f000 fa48 	bl	8001118 <Error_Handler>
		}
	}
}
 8000c88:	bf00      	nop
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000158 	.word	0x20000158
 8000c94:	0600fd7f 	.word	0x0600fd7f
 8000c98:	2000017c 	.word	0x2000017c
 8000c9c:	200000f4 	.word	0x200000f4

08000ca0 <MoveMotor>:

void MoveMotor(float Torque, float Angle, float Speed, float Kp, float Kd){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	ed87 0a05 	vstr	s0, [r7, #20]
 8000caa:	edc7 0a04 	vstr	s1, [r7, #16]
 8000cae:	ed87 1a03 	vstr	s2, [r7, #12]
 8000cb2:	edc7 1a02 	vstr	s3, [r7, #8]
 8000cb6:	ed87 2a01 	vstr	s4, [r7, #4]
	TxHeader.Identifier = 0x001<<24|(float_to_uint(Torque,T_MIN,T_MAX,16))<<8|MOTOR_ID;
 8000cba:	2010      	movs	r0, #16
 8000cbc:	eeb3 1a01 	vmov.f32	s2, #49	@ 0x41880000  17.0
 8000cc0:	eefb 0a01 	vmov.f32	s1, #177	@ 0xc1880000 -17.0
 8000cc4:	ed97 0a05 	vldr	s0, [r7, #20]
 8000cc8:	f7ff fec4 	bl	8000a54 <float_to_uint>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	021b      	lsls	r3, r3, #8
 8000cd0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000cd4:	f043 037f 	orr.w	r3, r3, #127	@ 0x7f
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b41      	ldr	r3, [pc, #260]	@ (8000de0 <MoveMotor+0x140>)
 8000cdc:	601a      	str	r2, [r3, #0]
	TxData[0] = float_to_uint(Angle, P_MIN,P_MAX, 16)>>8;
 8000cde:	2010      	movs	r0, #16
 8000ce0:	eeb2 1a09 	vmov.f32	s2, #41	@ 0x41480000  12.5
 8000ce4:	eefa 0a09 	vmov.f32	s1, #169	@ 0xc1480000 -12.5
 8000ce8:	ed97 0a04 	vldr	s0, [r7, #16]
 8000cec:	f7ff feb2 	bl	8000a54 <float_to_uint>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	121b      	asrs	r3, r3, #8
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4b3b      	ldr	r3, [pc, #236]	@ (8000de4 <MoveMotor+0x144>)
 8000cf8:	701a      	strb	r2, [r3, #0]
	TxData[1] = float_to_uint(Angle, P_MIN,P_MAX, 16);
 8000cfa:	2010      	movs	r0, #16
 8000cfc:	eeb2 1a09 	vmov.f32	s2, #41	@ 0x41480000  12.5
 8000d00:	eefa 0a09 	vmov.f32	s1, #169	@ 0xc1480000 -12.5
 8000d04:	ed97 0a04 	vldr	s0, [r7, #16]
 8000d08:	f7ff fea4 	bl	8000a54 <float_to_uint>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	4b34      	ldr	r3, [pc, #208]	@ (8000de4 <MoveMotor+0x144>)
 8000d12:	705a      	strb	r2, [r3, #1]
	TxData[2] = float_to_uint(Speed, V_MIN,V_MAX, 16)>>8;
 8000d14:	2010      	movs	r0, #16
 8000d16:	ed9f 1a34 	vldr	s2, [pc, #208]	@ 8000de8 <MoveMotor+0x148>
 8000d1a:	eddf 0a34 	vldr	s1, [pc, #208]	@ 8000dec <MoveMotor+0x14c>
 8000d1e:	ed97 0a03 	vldr	s0, [r7, #12]
 8000d22:	f7ff fe97 	bl	8000a54 <float_to_uint>
 8000d26:	4603      	mov	r3, r0
 8000d28:	121b      	asrs	r3, r3, #8
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	4b2d      	ldr	r3, [pc, #180]	@ (8000de4 <MoveMotor+0x144>)
 8000d2e:	709a      	strb	r2, [r3, #2]
	TxData[3] = float_to_uint(Speed, V_MIN,V_MAX, 16);
 8000d30:	2010      	movs	r0, #16
 8000d32:	ed9f 1a2d 	vldr	s2, [pc, #180]	@ 8000de8 <MoveMotor+0x148>
 8000d36:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 8000dec <MoveMotor+0x14c>
 8000d3a:	ed97 0a03 	vldr	s0, [r7, #12]
 8000d3e:	f7ff fe89 	bl	8000a54 <float_to_uint>
 8000d42:	4603      	mov	r3, r0
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4b27      	ldr	r3, [pc, #156]	@ (8000de4 <MoveMotor+0x144>)
 8000d48:	70da      	strb	r2, [r3, #3]
	TxData[4] = float_to_uint(Kp, KP_MIN,KP_MAX, 16)>>8;
 8000d4a:	2010      	movs	r0, #16
 8000d4c:	ed9f 1a28 	vldr	s2, [pc, #160]	@ 8000df0 <MoveMotor+0x150>
 8000d50:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8000df4 <MoveMotor+0x154>
 8000d54:	ed97 0a02 	vldr	s0, [r7, #8]
 8000d58:	f7ff fe7c 	bl	8000a54 <float_to_uint>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	121b      	asrs	r3, r3, #8
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4b20      	ldr	r3, [pc, #128]	@ (8000de4 <MoveMotor+0x144>)
 8000d64:	711a      	strb	r2, [r3, #4]
	TxData[5] = float_to_uint(Kp, KP_MIN,KP_MAX, 16);
 8000d66:	2010      	movs	r0, #16
 8000d68:	ed9f 1a21 	vldr	s2, [pc, #132]	@ 8000df0 <MoveMotor+0x150>
 8000d6c:	eddf 0a21 	vldr	s1, [pc, #132]	@ 8000df4 <MoveMotor+0x154>
 8000d70:	ed97 0a02 	vldr	s0, [r7, #8]
 8000d74:	f7ff fe6e 	bl	8000a54 <float_to_uint>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	4b19      	ldr	r3, [pc, #100]	@ (8000de4 <MoveMotor+0x144>)
 8000d7e:	715a      	strb	r2, [r3, #5]
	TxData[6] = float_to_uint(Kd, KD_MIN,KD_MAX, 16)>>8;
 8000d80:	2010      	movs	r0, #16
 8000d82:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 8000d86:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 8000df4 <MoveMotor+0x154>
 8000d8a:	ed97 0a01 	vldr	s0, [r7, #4]
 8000d8e:	f7ff fe61 	bl	8000a54 <float_to_uint>
 8000d92:	4603      	mov	r3, r0
 8000d94:	121b      	asrs	r3, r3, #8
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	4b12      	ldr	r3, [pc, #72]	@ (8000de4 <MoveMotor+0x144>)
 8000d9a:	719a      	strb	r2, [r3, #6]
	TxData[7] = float_to_uint(Kd, KD_MIN,KD_MAX, 16);
 8000d9c:	2010      	movs	r0, #16
 8000d9e:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 8000da2:	eddf 0a14 	vldr	s1, [pc, #80]	@ 8000df4 <MoveMotor+0x154>
 8000da6:	ed97 0a01 	vldr	s0, [r7, #4]
 8000daa:	f7ff fe53 	bl	8000a54 <float_to_uint>
 8000dae:	4603      	mov	r3, r0
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <MoveMotor+0x144>)
 8000db4:	71da      	strb	r2, [r3, #7]
	if(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1)) {
 8000db6:	4810      	ldr	r0, [pc, #64]	@ (8000df8 <MoveMotor+0x158>)
 8000db8:	f002 fe06 	bl	80039c8 <HAL_FDCAN_GetTxFifoFreeLevel>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d009      	beq.n	8000dd6 <MoveMotor+0x136>
		if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 8000dc2:	4a08      	ldr	r2, [pc, #32]	@ (8000de4 <MoveMotor+0x144>)
 8000dc4:	4906      	ldr	r1, [pc, #24]	@ (8000de0 <MoveMotor+0x140>)
 8000dc6:	480c      	ldr	r0, [pc, #48]	@ (8000df8 <MoveMotor+0x158>)
 8000dc8:	f002 fcb1 	bl	800372e <HAL_FDCAN_AddMessageToTxFifoQ>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MoveMotor+0x136>
			Error_Handler();
 8000dd2:	f000 f9a1 	bl	8001118 <Error_Handler>
		}
	}
}
 8000dd6:	bf00      	nop
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000158 	.word	0x20000158
 8000de4:	2000017c 	.word	0x2000017c
 8000de8:	42300000 	.word	0x42300000
 8000dec:	c2300000 	.word	0xc2300000
 8000df0:	43fa0000 	.word	0x43fa0000
 8000df4:	00000000 	.word	0x00000000
 8000df8:	200000f4 	.word	0x200000f4

08000dfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e00:	f000 fb17 	bl	8001432 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e04:	f000 f848 	bl	8000e98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e08:	f000 f96e 	bl	80010e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e0c:	f000 f942 	bl	8001094 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8000e10:	f000 f8fa 	bl	8001008 <MX_FDCAN1_Init>
  MX_ADC1_Init();
 8000e14:	f000 f880 	bl	8000f18 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  FDCAN1_Config();
 8000e18:	f7ff fe66 	bl	8000ae8 <FDCAN1_Config>
  EnableMotor();
 8000e1c:	f7ff fede 	bl	8000bdc <EnableMotor>
  HAL_Delay(50);
 8000e20:	2032      	movs	r0, #50	@ 0x32
 8000e22:	f000 fb77 	bl	8001514 <HAL_Delay>
  ResetMotorAngle();
 8000e26:	f7ff ff09 	bl	8000c3c <ResetMotorAngle>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000e2a:	217f      	movs	r1, #127	@ 0x7f
 8000e2c:	4815      	ldr	r0, [pc, #84]	@ (8000e84 <main+0x88>)
 8000e2e:	f001 fde9 	bl	8002a04 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, &value, 1);
 8000e32:	2201      	movs	r2, #1
 8000e34:	4914      	ldr	r1, [pc, #80]	@ (8000e88 <main+0x8c>)
 8000e36:	4813      	ldr	r0, [pc, #76]	@ (8000e84 <main+0x88>)
 8000e38:	f000 ff56 	bl	8001ce8 <HAL_ADC_Start_DMA>
//	  if(cnt % 99 == 0 && cnt % 2 == 1){
//		  MoveMotor(0, 2.0, 0, 3.0, 0.2);
//	  }else if(cnt % 99 == 0 && cnt % 2 == 0){
//		  MoveMotor(0, 1.0, 0, 3.0, 0.2);
//	  }
	  MoveMotor(0, 1.0 * (4096 - value) / 4096, 0, 3.0, 0.2);
 8000e3c:	4b12      	ldr	r3, [pc, #72]	@ (8000e88 <main+0x8c>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fb29 	bl	800049c <__aeabi_ui2d>
 8000e4a:	f04f 0200 	mov.w	r2, #0
 8000e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e8c <main+0x90>)
 8000e50:	f7ff fcc8 	bl	80007e4 <__aeabi_ddiv>
 8000e54:	4602      	mov	r2, r0
 8000e56:	460b      	mov	r3, r1
 8000e58:	4610      	mov	r0, r2
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	f7ff fdaa 	bl	80009b4 <__aeabi_d2f>
 8000e60:	4603      	mov	r3, r0
 8000e62:	ed9f 2a0b 	vldr	s4, [pc, #44]	@ 8000e90 <main+0x94>
 8000e66:	eef0 1a08 	vmov.f32	s3, #8	@ 0x40400000  3.0
 8000e6a:	ed9f 1a0a 	vldr	s2, [pc, #40]	@ 8000e94 <main+0x98>
 8000e6e:	ee00 3a90 	vmov	s1, r3
 8000e72:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8000e94 <main+0x98>
 8000e76:	f7ff ff13 	bl	8000ca0 <MoveMotor>
	  HAL_Delay(50);
 8000e7a:	2032      	movs	r0, #50	@ 0x32
 8000e7c:	f000 fb4a 	bl	8001514 <HAL_Delay>
	  MoveMotor(0, 1.0 * (4096 - value) / 4096, 0, 3.0, 0.2);
 8000e80:	bf00      	nop
 8000e82:	e7db      	b.n	8000e3c <main+0x40>
 8000e84:	20000028 	.word	0x20000028
 8000e88:	2000018c 	.word	0x2000018c
 8000e8c:	40b00000 	.word	0x40b00000
 8000e90:	3e4ccccd 	.word	0x3e4ccccd
 8000e94:	00000000 	.word	0x00000000

08000e98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b094      	sub	sp, #80	@ 0x50
 8000e9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9e:	f107 0318 	add.w	r3, r7, #24
 8000ea2:	2238      	movs	r2, #56	@ 0x38
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f004 fa10 	bl	80052cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]
 8000eb8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000ebe:	f003 fa6b 	bl	8004398 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ec6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000eca:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ecc:	2340      	movs	r3, #64	@ 0x40
 8000ece:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed4:	f107 0318 	add.w	r3, r7, #24
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f003 fb11 	bl	8004500 <HAL_RCC_OscConfig>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000ee4:	f000 f918 	bl	8001118 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee8:	230f      	movs	r3, #15
 8000eea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000eec:	2301      	movs	r3, #1
 8000eee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	2100      	movs	r1, #0
 8000f00:	4618      	mov	r0, r3
 8000f02:	f003 fe0f 	bl	8004b24 <HAL_RCC_ClockConfig>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000f0c:	f000 f904 	bl	8001118 <Error_Handler>
  }
}
 8000f10:	bf00      	nop
 8000f12:	3750      	adds	r7, #80	@ 0x50
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08c      	sub	sp, #48	@ 0x30
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	2220      	movs	r2, #32
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f004 f9cb 	bl	80052cc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f36:	4b32      	ldr	r3, [pc, #200]	@ (8001000 <MX_ADC1_Init+0xe8>)
 8000f38:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000f3c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f3e:	4b30      	ldr	r3, [pc, #192]	@ (8001000 <MX_ADC1_Init+0xe8>)
 8000f40:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f44:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f46:	4b2e      	ldr	r3, [pc, #184]	@ (8001000 <MX_ADC1_Init+0xe8>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f4c:	4b2c      	ldr	r3, [pc, #176]	@ (8001000 <MX_ADC1_Init+0xe8>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f52:	4b2b      	ldr	r3, [pc, #172]	@ (8001000 <MX_ADC1_Init+0xe8>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f58:	4b29      	ldr	r3, [pc, #164]	@ (8001000 <MX_ADC1_Init+0xe8>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f5e:	4b28      	ldr	r3, [pc, #160]	@ (8001000 <MX_ADC1_Init+0xe8>)
 8000f60:	2204      	movs	r2, #4
 8000f62:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f64:	4b26      	ldr	r3, [pc, #152]	@ (8001000 <MX_ADC1_Init+0xe8>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f6a:	4b25      	ldr	r3, [pc, #148]	@ (8001000 <MX_ADC1_Init+0xe8>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f70:	4b23      	ldr	r3, [pc, #140]	@ (8001000 <MX_ADC1_Init+0xe8>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f76:	4b22      	ldr	r3, [pc, #136]	@ (8001000 <MX_ADC1_Init+0xe8>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f7e:	4b20      	ldr	r3, [pc, #128]	@ (8001000 <MX_ADC1_Init+0xe8>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f84:	4b1e      	ldr	r3, [pc, #120]	@ (8001000 <MX_ADC1_Init+0xe8>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001000 <MX_ADC1_Init+0xe8>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f92:	4b1b      	ldr	r3, [pc, #108]	@ (8001000 <MX_ADC1_Init+0xe8>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f98:	4b19      	ldr	r3, [pc, #100]	@ (8001000 <MX_ADC1_Init+0xe8>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fa0:	4817      	ldr	r0, [pc, #92]	@ (8001000 <MX_ADC1_Init+0xe8>)
 8000fa2:	f000 fd1d 	bl	80019e0 <HAL_ADC_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000fac:	f000 f8b4 	bl	8001118 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4811      	ldr	r0, [pc, #68]	@ (8001000 <MX_ADC1_Init+0xe8>)
 8000fbc:	f001 fd84 	bl	8002ac8 <HAL_ADCEx_MultiModeConfigChannel>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000fc6:	f000 f8a7 	bl	8001118 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fca:	4b0e      	ldr	r3, [pc, #56]	@ (8001004 <MX_ADC1_Init+0xec>)
 8000fcc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fce:	2306      	movs	r3, #6
 8000fd0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000fd2:	2307      	movs	r3, #7
 8000fd4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fd6:	237f      	movs	r3, #127	@ 0x7f
 8000fd8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fda:	2304      	movs	r3, #4
 8000fdc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4806      	ldr	r0, [pc, #24]	@ (8001000 <MX_ADC1_Init+0xe8>)
 8000fe8:	f000 ff50 	bl	8001e8c <HAL_ADC_ConfigChannel>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000ff2:	f000 f891 	bl	8001118 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ff6:	bf00      	nop
 8000ff8:	3730      	adds	r7, #48	@ 0x30
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000028 	.word	0x20000028
 8001004:	04300002 	.word	0x04300002

08001008 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800100c:	4b1f      	ldr	r3, [pc, #124]	@ (800108c <MX_FDCAN1_Init+0x84>)
 800100e:	4a20      	ldr	r2, [pc, #128]	@ (8001090 <MX_FDCAN1_Init+0x88>)
 8001010:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001012:	4b1e      	ldr	r3, [pc, #120]	@ (800108c <MX_FDCAN1_Init+0x84>)
 8001014:	2200      	movs	r2, #0
 8001016:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001018:	4b1c      	ldr	r3, [pc, #112]	@ (800108c <MX_FDCAN1_Init+0x84>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800101e:	4b1b      	ldr	r3, [pc, #108]	@ (800108c <MX_FDCAN1_Init+0x84>)
 8001020:	2200      	movs	r2, #0
 8001022:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001024:	4b19      	ldr	r3, [pc, #100]	@ (800108c <MX_FDCAN1_Init+0x84>)
 8001026:	2200      	movs	r2, #0
 8001028:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800102a:	4b18      	ldr	r3, [pc, #96]	@ (800108c <MX_FDCAN1_Init+0x84>)
 800102c:	2200      	movs	r2, #0
 800102e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001030:	4b16      	ldr	r3, [pc, #88]	@ (800108c <MX_FDCAN1_Init+0x84>)
 8001032:	2200      	movs	r2, #0
 8001034:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8001036:	4b15      	ldr	r3, [pc, #84]	@ (800108c <MX_FDCAN1_Init+0x84>)
 8001038:	2202      	movs	r2, #2
 800103a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800103c:	4b13      	ldr	r3, [pc, #76]	@ (800108c <MX_FDCAN1_Init+0x84>)
 800103e:	2201      	movs	r2, #1
 8001040:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 4;
 8001042:	4b12      	ldr	r3, [pc, #72]	@ (800108c <MX_FDCAN1_Init+0x84>)
 8001044:	2204      	movs	r2, #4
 8001046:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 3;
 8001048:	4b10      	ldr	r3, [pc, #64]	@ (800108c <MX_FDCAN1_Init+0x84>)
 800104a:	2203      	movs	r2, #3
 800104c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800104e:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <MX_FDCAN1_Init+0x84>)
 8001050:	2201      	movs	r2, #1
 8001052:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001054:	4b0d      	ldr	r3, [pc, #52]	@ (800108c <MX_FDCAN1_Init+0x84>)
 8001056:	2201      	movs	r2, #1
 8001058:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800105a:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <MX_FDCAN1_Init+0x84>)
 800105c:	2201      	movs	r2, #1
 800105e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001060:	4b0a      	ldr	r3, [pc, #40]	@ (800108c <MX_FDCAN1_Init+0x84>)
 8001062:	2201      	movs	r2, #1
 8001064:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001066:	4b09      	ldr	r3, [pc, #36]	@ (800108c <MX_FDCAN1_Init+0x84>)
 8001068:	2200      	movs	r2, #0
 800106a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 1;
 800106c:	4b07      	ldr	r3, [pc, #28]	@ (800108c <MX_FDCAN1_Init+0x84>)
 800106e:	2201      	movs	r2, #1
 8001070:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001072:	4b06      	ldr	r3, [pc, #24]	@ (800108c <MX_FDCAN1_Init+0x84>)
 8001074:	2200      	movs	r2, #0
 8001076:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001078:	4804      	ldr	r0, [pc, #16]	@ (800108c <MX_FDCAN1_Init+0x84>)
 800107a:	f002 f94b 	bl	8003314 <HAL_FDCAN_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001084:	f000 f848 	bl	8001118 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200000f4 	.word	0x200000f4
 8001090:	40006400 	.word	0x40006400

08001094 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800109a:	4b12      	ldr	r3, [pc, #72]	@ (80010e4 <MX_DMA_Init+0x50>)
 800109c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800109e:	4a11      	ldr	r2, [pc, #68]	@ (80010e4 <MX_DMA_Init+0x50>)
 80010a0:	f043 0304 	orr.w	r3, r3, #4
 80010a4:	6493      	str	r3, [r2, #72]	@ 0x48
 80010a6:	4b0f      	ldr	r3, [pc, #60]	@ (80010e4 <MX_DMA_Init+0x50>)
 80010a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010aa:	f003 0304 	and.w	r3, r3, #4
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010b2:	4b0c      	ldr	r3, [pc, #48]	@ (80010e4 <MX_DMA_Init+0x50>)
 80010b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010b6:	4a0b      	ldr	r2, [pc, #44]	@ (80010e4 <MX_DMA_Init+0x50>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6493      	str	r3, [r2, #72]	@ 0x48
 80010be:	4b09      	ldr	r3, [pc, #36]	@ (80010e4 <MX_DMA_Init+0x50>)
 80010c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	603b      	str	r3, [r7, #0]
 80010c8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2100      	movs	r1, #0
 80010ce:	200b      	movs	r0, #11
 80010d0:	f001 fe79 	bl	8002dc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010d4:	200b      	movs	r0, #11
 80010d6:	f001 fe90 	bl	8002dfa <HAL_NVIC_EnableIRQ>

}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40021000 	.word	0x40021000

080010e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	4b09      	ldr	r3, [pc, #36]	@ (8001114 <MX_GPIO_Init+0x2c>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f2:	4a08      	ldr	r2, [pc, #32]	@ (8001114 <MX_GPIO_Init+0x2c>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010fa:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <MX_GPIO_Init+0x2c>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000

08001118 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800111c:	b672      	cpsid	i
}
 800111e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001120:	bf00      	nop
 8001122:	e7fd      	b.n	8001120 <Error_Handler+0x8>

08001124 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112a:	4b0f      	ldr	r3, [pc, #60]	@ (8001168 <HAL_MspInit+0x44>)
 800112c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800112e:	4a0e      	ldr	r2, [pc, #56]	@ (8001168 <HAL_MspInit+0x44>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6613      	str	r3, [r2, #96]	@ 0x60
 8001136:	4b0c      	ldr	r3, [pc, #48]	@ (8001168 <HAL_MspInit+0x44>)
 8001138:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001142:	4b09      	ldr	r3, [pc, #36]	@ (8001168 <HAL_MspInit+0x44>)
 8001144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001146:	4a08      	ldr	r2, [pc, #32]	@ (8001168 <HAL_MspInit+0x44>)
 8001148:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800114c:	6593      	str	r3, [r2, #88]	@ 0x58
 800114e:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <HAL_MspInit+0x44>)
 8001150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800115a:	f003 f9c1 	bl	80044e0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40021000 	.word	0x40021000

0800116c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b09a      	sub	sp, #104	@ 0x68
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001184:	f107 0310 	add.w	r3, r7, #16
 8001188:	2244      	movs	r2, #68	@ 0x44
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f004 f89d 	bl	80052cc <memset>
  if(hadc->Instance==ADC1)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800119a:	d15f      	bne.n	800125c <HAL_ADC_MspInit+0xf0>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800119c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011a0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80011a2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80011a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a8:	f107 0310 	add.w	r3, r7, #16
 80011ac:	4618      	mov	r0, r3
 80011ae:	f003 fe9d 	bl	8004eec <HAL_RCCEx_PeriphCLKConfig>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80011b8:	f7ff ffae 	bl	8001118 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80011bc:	4b29      	ldr	r3, [pc, #164]	@ (8001264 <HAL_ADC_MspInit+0xf8>)
 80011be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c0:	4a28      	ldr	r2, [pc, #160]	@ (8001264 <HAL_ADC_MspInit+0xf8>)
 80011c2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011c8:	4b26      	ldr	r3, [pc, #152]	@ (8001264 <HAL_ADC_MspInit+0xf8>)
 80011ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d4:	4b23      	ldr	r3, [pc, #140]	@ (8001264 <HAL_ADC_MspInit+0xf8>)
 80011d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d8:	4a22      	ldr	r2, [pc, #136]	@ (8001264 <HAL_ADC_MspInit+0xf8>)
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e0:	4b20      	ldr	r3, [pc, #128]	@ (8001264 <HAL_ADC_MspInit+0xf8>)
 80011e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011ec:	2301      	movs	r3, #1
 80011ee:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011f0:	2303      	movs	r3, #3
 80011f2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011fc:	4619      	mov	r1, r3
 80011fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001202:	f002 ff47 	bl	8004094 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001206:	4b18      	ldr	r3, [pc, #96]	@ (8001268 <HAL_ADC_MspInit+0xfc>)
 8001208:	4a18      	ldr	r2, [pc, #96]	@ (800126c <HAL_ADC_MspInit+0x100>)
 800120a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800120c:	4b16      	ldr	r3, [pc, #88]	@ (8001268 <HAL_ADC_MspInit+0xfc>)
 800120e:	2205      	movs	r2, #5
 8001210:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001212:	4b15      	ldr	r3, [pc, #84]	@ (8001268 <HAL_ADC_MspInit+0xfc>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001218:	4b13      	ldr	r3, [pc, #76]	@ (8001268 <HAL_ADC_MspInit+0xfc>)
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800121e:	4b12      	ldr	r3, [pc, #72]	@ (8001268 <HAL_ADC_MspInit+0xfc>)
 8001220:	2280      	movs	r2, #128	@ 0x80
 8001222:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001224:	4b10      	ldr	r3, [pc, #64]	@ (8001268 <HAL_ADC_MspInit+0xfc>)
 8001226:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800122a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800122c:	4b0e      	ldr	r3, [pc, #56]	@ (8001268 <HAL_ADC_MspInit+0xfc>)
 800122e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001232:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001234:	4b0c      	ldr	r3, [pc, #48]	@ (8001268 <HAL_ADC_MspInit+0xfc>)
 8001236:	2220      	movs	r2, #32
 8001238:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800123a:	4b0b      	ldr	r3, [pc, #44]	@ (8001268 <HAL_ADC_MspInit+0xfc>)
 800123c:	2200      	movs	r2, #0
 800123e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001240:	4809      	ldr	r0, [pc, #36]	@ (8001268 <HAL_ADC_MspInit+0xfc>)
 8001242:	f001 fdf5 	bl	8002e30 <HAL_DMA_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 800124c:	f7ff ff64 	bl	8001118 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a05      	ldr	r2, [pc, #20]	@ (8001268 <HAL_ADC_MspInit+0xfc>)
 8001254:	655a      	str	r2, [r3, #84]	@ 0x54
 8001256:	4a04      	ldr	r2, [pc, #16]	@ (8001268 <HAL_ADC_MspInit+0xfc>)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800125c:	bf00      	nop
 800125e:	3768      	adds	r7, #104	@ 0x68
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40021000 	.word	0x40021000
 8001268:	20000094 	.word	0x20000094
 800126c:	40020008 	.word	0x40020008

08001270 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b09a      	sub	sp, #104	@ 0x68
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001288:	f107 0310 	add.w	r3, r7, #16
 800128c:	2244      	movs	r2, #68	@ 0x44
 800128e:	2100      	movs	r1, #0
 8001290:	4618      	mov	r0, r3
 8001292:	f004 f81b 	bl	80052cc <memset>
  if(hfdcan->Instance==FDCAN1)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a24      	ldr	r2, [pc, #144]	@ (800132c <HAL_FDCAN_MspInit+0xbc>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d141      	bne.n	8001324 <HAL_FDCAN_MspInit+0xb4>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80012a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012a4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80012a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80012aa:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ac:	f107 0310 	add.w	r3, r7, #16
 80012b0:	4618      	mov	r0, r3
 80012b2:	f003 fe1b 	bl	8004eec <HAL_RCCEx_PeriphCLKConfig>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80012bc:	f7ff ff2c 	bl	8001118 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80012c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001330 <HAL_FDCAN_MspInit+0xc0>)
 80012c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012c4:	4a1a      	ldr	r2, [pc, #104]	@ (8001330 <HAL_FDCAN_MspInit+0xc0>)
 80012c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80012cc:	4b18      	ldr	r3, [pc, #96]	@ (8001330 <HAL_FDCAN_MspInit+0xc0>)
 80012ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d8:	4b15      	ldr	r3, [pc, #84]	@ (8001330 <HAL_FDCAN_MspInit+0xc0>)
 80012da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012dc:	4a14      	ldr	r2, [pc, #80]	@ (8001330 <HAL_FDCAN_MspInit+0xc0>)
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012e4:	4b12      	ldr	r3, [pc, #72]	@ (8001330 <HAL_FDCAN_MspInit+0xc0>)
 80012e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80012f0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80012f4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001302:	2309      	movs	r3, #9
 8001304:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001306:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800130a:	4619      	mov	r1, r3
 800130c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001310:	f002 fec0 	bl	8004094 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001314:	2200      	movs	r2, #0
 8001316:	2100      	movs	r1, #0
 8001318:	2015      	movs	r0, #21
 800131a:	f001 fd54 	bl	8002dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800131e:	2015      	movs	r0, #21
 8001320:	f001 fd6b 	bl	8002dfa <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8001324:	bf00      	nop
 8001326:	3768      	adds	r7, #104	@ 0x68
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40006400 	.word	0x40006400
 8001330:	40021000 	.word	0x40021000

08001334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <NMI_Handler+0x4>

0800133c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <HardFault_Handler+0x4>

08001344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <MemManage_Handler+0x4>

0800134c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001350:	bf00      	nop
 8001352:	e7fd      	b.n	8001350 <BusFault_Handler+0x4>

08001354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001358:	bf00      	nop
 800135a:	e7fd      	b.n	8001358 <UsageFault_Handler+0x4>

0800135c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800138a:	f000 f8a5 	bl	80014d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001398:	4802      	ldr	r0, [pc, #8]	@ (80013a4 <DMA1_Channel1_IRQHandler+0x10>)
 800139a:	f001 fe6c 	bl	8003076 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000094 	.word	0x20000094

080013a8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80013ac:	4802      	ldr	r0, [pc, #8]	@ (80013b8 <FDCAN1_IT0_IRQHandler+0x10>)
 80013ae:	f002 fc03 	bl	8003bb8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	200000f4 	.word	0x200000f4

080013bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013c0:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <SystemInit+0x20>)
 80013c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013c6:	4a05      	ldr	r2, [pc, #20]	@ (80013dc <SystemInit+0x20>)
 80013c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013e0:	480d      	ldr	r0, [pc, #52]	@ (8001418 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013e2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80013e4:	f7ff ffea 	bl	80013bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e8:	480c      	ldr	r0, [pc, #48]	@ (800141c <LoopForever+0x6>)
  ldr r1, =_edata
 80013ea:	490d      	ldr	r1, [pc, #52]	@ (8001420 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001424 <LoopForever+0xe>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80013f0:	e002      	b.n	80013f8 <LoopCopyDataInit>

080013f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f6:	3304      	adds	r3, #4

080013f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013fc:	d3f9      	bcc.n	80013f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001428 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001400:	4c0a      	ldr	r4, [pc, #40]	@ (800142c <LoopForever+0x16>)
  movs r3, #0
 8001402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001404:	e001      	b.n	800140a <LoopFillZerobss>

08001406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001408:	3204      	adds	r2, #4

0800140a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800140a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800140c:	d3fb      	bcc.n	8001406 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800140e:	f003 ff65 	bl	80052dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001412:	f7ff fcf3 	bl	8000dfc <main>

08001416 <LoopForever>:

LoopForever:
    b LoopForever
 8001416:	e7fe      	b.n	8001416 <LoopForever>
  ldr   r0, =_estack
 8001418:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800141c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001420:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001424:	08005364 	.word	0x08005364
  ldr r2, =_sbss
 8001428:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800142c:	20000194 	.word	0x20000194

08001430 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001430:	e7fe      	b.n	8001430 <ADC1_2_IRQHandler>

08001432 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001438:	2300      	movs	r3, #0
 800143a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800143c:	2003      	movs	r0, #3
 800143e:	f001 fcb7 	bl	8002db0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001442:	200f      	movs	r0, #15
 8001444:	f000 f80e 	bl	8001464 <HAL_InitTick>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d002      	beq.n	8001454 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	71fb      	strb	r3, [r7, #7]
 8001452:	e001      	b.n	8001458 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001454:	f7ff fe66 	bl	8001124 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001458:	79fb      	ldrb	r3, [r7, #7]

}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
	...

08001464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800146c:	2300      	movs	r3, #0
 800146e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001470:	4b16      	ldr	r3, [pc, #88]	@ (80014cc <HAL_InitTick+0x68>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d022      	beq.n	80014be <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001478:	4b15      	ldr	r3, [pc, #84]	@ (80014d0 <HAL_InitTick+0x6c>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b13      	ldr	r3, [pc, #76]	@ (80014cc <HAL_InitTick+0x68>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001484:	fbb1 f3f3 	udiv	r3, r1, r3
 8001488:	fbb2 f3f3 	udiv	r3, r2, r3
 800148c:	4618      	mov	r0, r3
 800148e:	f001 fcc2 	bl	8002e16 <HAL_SYSTICK_Config>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d10f      	bne.n	80014b8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b0f      	cmp	r3, #15
 800149c:	d809      	bhi.n	80014b2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800149e:	2200      	movs	r2, #0
 80014a0:	6879      	ldr	r1, [r7, #4]
 80014a2:	f04f 30ff 	mov.w	r0, #4294967295
 80014a6:	f001 fc8e 	bl	8002dc6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014aa:	4a0a      	ldr	r2, [pc, #40]	@ (80014d4 <HAL_InitTick+0x70>)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	e007      	b.n	80014c2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	73fb      	strb	r3, [r7, #15]
 80014b6:	e004      	b.n	80014c2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	73fb      	strb	r3, [r7, #15]
 80014bc:	e001      	b.n	80014c2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000008 	.word	0x20000008
 80014d0:	20000000 	.word	0x20000000
 80014d4:	20000004 	.word	0x20000004

080014d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014dc:	4b05      	ldr	r3, [pc, #20]	@ (80014f4 <HAL_IncTick+0x1c>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4b05      	ldr	r3, [pc, #20]	@ (80014f8 <HAL_IncTick+0x20>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4413      	add	r3, r2
 80014e6:	4a03      	ldr	r2, [pc, #12]	@ (80014f4 <HAL_IncTick+0x1c>)
 80014e8:	6013      	str	r3, [r2, #0]
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	20000190 	.word	0x20000190
 80014f8:	20000008 	.word	0x20000008

080014fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001500:	4b03      	ldr	r3, [pc, #12]	@ (8001510 <HAL_GetTick+0x14>)
 8001502:	681b      	ldr	r3, [r3, #0]
}
 8001504:	4618      	mov	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	20000190 	.word	0x20000190

08001514 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800151c:	f7ff ffee 	bl	80014fc <HAL_GetTick>
 8001520:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800152c:	d004      	beq.n	8001538 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800152e:	4b09      	ldr	r3, [pc, #36]	@ (8001554 <HAL_Delay+0x40>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	4413      	add	r3, r2
 8001536:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001538:	bf00      	nop
 800153a:	f7ff ffdf 	bl	80014fc <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	429a      	cmp	r2, r3
 8001548:	d8f7      	bhi.n	800153a <HAL_Delay+0x26>
  {
  }
}
 800154a:	bf00      	nop
 800154c:	bf00      	nop
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000008 	.word	0x20000008

08001558 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	431a      	orrs	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	609a      	str	r2, [r3, #8]
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
 8001586:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	431a      	orrs	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	609a      	str	r2, [r3, #8]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b087      	sub	sp, #28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
 80015cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	3360      	adds	r3, #96	@ 0x60
 80015d2:	461a      	mov	r2, r3
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b08      	ldr	r3, [pc, #32]	@ (8001604 <LL_ADC_SetOffset+0x44>)
 80015e2:	4013      	ands	r3, r2
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	430a      	orrs	r2, r1
 80015ee:	4313      	orrs	r3, r2
 80015f0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80015f8:	bf00      	nop
 80015fa:	371c      	adds	r7, #28
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	03fff000 	.word	0x03fff000

08001608 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	3360      	adds	r3, #96	@ 0x60
 8001616:	461a      	mov	r2, r3
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4413      	add	r3, r2
 800161e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001628:	4618      	mov	r0, r3
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001634:	b480      	push	{r7}
 8001636:	b087      	sub	sp, #28
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	3360      	adds	r3, #96	@ 0x60
 8001644:	461a      	mov	r2, r3
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	431a      	orrs	r2, r3
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800165e:	bf00      	nop
 8001660:	371c      	adds	r7, #28
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800166a:	b480      	push	{r7}
 800166c:	b087      	sub	sp, #28
 800166e:	af00      	add	r7, sp, #0
 8001670:	60f8      	str	r0, [r7, #12]
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	3360      	adds	r3, #96	@ 0x60
 800167a:	461a      	mov	r2, r3
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	431a      	orrs	r2, r3
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001694:	bf00      	nop
 8001696:	371c      	adds	r7, #28
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b087      	sub	sp, #28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	3360      	adds	r3, #96	@ 0x60
 80016b0:	461a      	mov	r2, r3
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	431a      	orrs	r2, r3
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80016ca:	bf00      	nop
 80016cc:	371c      	adds	r7, #28
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	695b      	ldr	r3, [r3, #20]
 80016e4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	431a      	orrs	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	615a      	str	r2, [r3, #20]
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001710:	2301      	movs	r3, #1
 8001712:	e000      	b.n	8001716 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001722:	b480      	push	{r7}
 8001724:	b087      	sub	sp, #28
 8001726:	af00      	add	r7, sp, #0
 8001728:	60f8      	str	r0, [r7, #12]
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	3330      	adds	r3, #48	@ 0x30
 8001732:	461a      	mov	r2, r3
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	0a1b      	lsrs	r3, r3, #8
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	f003 030c 	and.w	r3, r3, #12
 800173e:	4413      	add	r3, r2
 8001740:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	f003 031f 	and.w	r3, r3, #31
 800174c:	211f      	movs	r1, #31
 800174e:	fa01 f303 	lsl.w	r3, r1, r3
 8001752:	43db      	mvns	r3, r3
 8001754:	401a      	ands	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	0e9b      	lsrs	r3, r3, #26
 800175a:	f003 011f 	and.w	r1, r3, #31
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	f003 031f 	and.w	r3, r3, #31
 8001764:	fa01 f303 	lsl.w	r3, r1, r3
 8001768:	431a      	orrs	r2, r3
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800176e:	bf00      	nop
 8001770:	371c      	adds	r7, #28
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800177a:	b480      	push	{r7}
 800177c:	b087      	sub	sp, #28
 800177e:	af00      	add	r7, sp, #0
 8001780:	60f8      	str	r0, [r7, #12]
 8001782:	60b9      	str	r1, [r7, #8]
 8001784:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	3314      	adds	r3, #20
 800178a:	461a      	mov	r2, r3
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	0e5b      	lsrs	r3, r3, #25
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	f003 0304 	and.w	r3, r3, #4
 8001796:	4413      	add	r3, r2
 8001798:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	0d1b      	lsrs	r3, r3, #20
 80017a2:	f003 031f 	and.w	r3, r3, #31
 80017a6:	2107      	movs	r1, #7
 80017a8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	401a      	ands	r2, r3
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	0d1b      	lsrs	r3, r3, #20
 80017b4:	f003 031f 	and.w	r3, r3, #31
 80017b8:	6879      	ldr	r1, [r7, #4]
 80017ba:	fa01 f303 	lsl.w	r3, r1, r3
 80017be:	431a      	orrs	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80017c4:	bf00      	nop
 80017c6:	371c      	adds	r7, #28
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017e8:	43db      	mvns	r3, r3
 80017ea:	401a      	ands	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f003 0318 	and.w	r3, r3, #24
 80017f2:	4908      	ldr	r1, [pc, #32]	@ (8001814 <LL_ADC_SetChannelSingleDiff+0x44>)
 80017f4:	40d9      	lsrs	r1, r3
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	400b      	ands	r3, r1
 80017fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017fe:	431a      	orrs	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001806:	bf00      	nop
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	0007ffff 	.word	0x0007ffff

08001818 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 031f 	and.w	r3, r3, #31
}
 8001828:	4618      	mov	r0, r3
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001844:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	6093      	str	r3, [r2, #8]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001868:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800186c:	d101      	bne.n	8001872 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800186e:	2301      	movs	r3, #1
 8001870:	e000      	b.n	8001874 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001890:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001894:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80018bc:	d101      	bne.n	80018c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80018be:	2301      	movs	r3, #1
 80018c0:	e000      	b.n	80018c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80018e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018e4:	f043 0201 	orr.w	r2, r3, #1
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001908:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800190c:	f043 0202 	orr.w	r2, r3, #2
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	2b01      	cmp	r3, #1
 8001932:	d101      	bne.n	8001938 <LL_ADC_IsEnabled+0x18>
 8001934:	2301      	movs	r3, #1
 8001936:	e000      	b.n	800193a <LL_ADC_IsEnabled+0x1a>
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b02      	cmp	r3, #2
 8001958:	d101      	bne.n	800195e <LL_ADC_IsDisableOngoing+0x18>
 800195a:	2301      	movs	r3, #1
 800195c:	e000      	b.n	8001960 <LL_ADC_IsDisableOngoing+0x1a>
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800197c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001980:	f043 0204 	orr.w	r2, r3, #4
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b04      	cmp	r3, #4
 80019a6:	d101      	bne.n	80019ac <LL_ADC_REG_IsConversionOngoing+0x18>
 80019a8:	2301      	movs	r3, #1
 80019aa:	e000      	b.n	80019ae <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b08      	cmp	r3, #8
 80019cc:	d101      	bne.n	80019d2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80019ce:	2301      	movs	r3, #1
 80019d0:	e000      	b.n	80019d4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019e0:	b590      	push	{r4, r7, lr}
 80019e2:	b089      	sub	sp, #36	@ 0x24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019e8:	2300      	movs	r3, #0
 80019ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e167      	b.n	8001cca <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d109      	bne.n	8001a1c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff fbaf 	bl	800116c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff19 	bl	8001858 <LL_ADC_IsDeepPowerDownEnabled>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d004      	beq.n	8001a36 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff feff 	bl	8001834 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff ff34 	bl	80018a8 <LL_ADC_IsInternalRegulatorEnabled>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d115      	bne.n	8001a72 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff ff18 	bl	8001880 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a50:	4ba0      	ldr	r3, [pc, #640]	@ (8001cd4 <HAL_ADC_Init+0x2f4>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	099b      	lsrs	r3, r3, #6
 8001a56:	4aa0      	ldr	r2, [pc, #640]	@ (8001cd8 <HAL_ADC_Init+0x2f8>)
 8001a58:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5c:	099b      	lsrs	r3, r3, #6
 8001a5e:	3301      	adds	r3, #1
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a64:	e002      	b.n	8001a6c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f9      	bne.n	8001a66 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff ff16 	bl	80018a8 <LL_ADC_IsInternalRegulatorEnabled>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10d      	bne.n	8001a9e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a86:	f043 0210 	orr.w	r2, r3, #16
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a92:	f043 0201 	orr.w	r2, r3, #1
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff ff76 	bl	8001994 <LL_ADC_REG_IsConversionOngoing>
 8001aa8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aae:	f003 0310 	and.w	r3, r3, #16
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f040 8100 	bne.w	8001cb8 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f040 80fc 	bne.w	8001cb8 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ac4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001ac8:	f043 0202 	orr.w	r2, r3, #2
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ff23 	bl	8001920 <LL_ADC_IsEnabled>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d111      	bne.n	8001b04 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ae0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001ae4:	f7ff ff1c 	bl	8001920 <LL_ADC_IsEnabled>
 8001ae8:	4604      	mov	r4, r0
 8001aea:	487c      	ldr	r0, [pc, #496]	@ (8001cdc <HAL_ADC_Init+0x2fc>)
 8001aec:	f7ff ff18 	bl	8001920 <LL_ADC_IsEnabled>
 8001af0:	4603      	mov	r3, r0
 8001af2:	4323      	orrs	r3, r4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d105      	bne.n	8001b04 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	4619      	mov	r1, r3
 8001afe:	4878      	ldr	r0, [pc, #480]	@ (8001ce0 <HAL_ADC_Init+0x300>)
 8001b00:	f7ff fd2a 	bl	8001558 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	7f5b      	ldrb	r3, [r3, #29]
 8001b08:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b0e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001b14:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001b1a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b22:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b24:	4313      	orrs	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d106      	bne.n	8001b40 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b36:	3b01      	subs	r3, #1
 8001b38:	045b      	lsls	r3, r3, #17
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d009      	beq.n	8001b5c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b4c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b54:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68da      	ldr	r2, [r3, #12]
 8001b62:	4b60      	ldr	r3, [pc, #384]	@ (8001ce4 <HAL_ADC_Init+0x304>)
 8001b64:	4013      	ands	r3, r2
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6812      	ldr	r2, [r2, #0]
 8001b6a:	69b9      	ldr	r1, [r7, #24]
 8001b6c:	430b      	orrs	r3, r1
 8001b6e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	430a      	orrs	r2, r1
 8001b84:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff ff15 	bl	80019ba <LL_ADC_INJ_IsConversionOngoing>
 8001b90:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d16d      	bne.n	8001c74 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d16a      	bne.n	8001c74 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ba2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001baa:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001bba:	f023 0302 	bic.w	r3, r3, #2
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6812      	ldr	r2, [r2, #0]
 8001bc2:	69b9      	ldr	r1, [r7, #24]
 8001bc4:	430b      	orrs	r3, r1
 8001bc6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d017      	beq.n	8001c00 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	691a      	ldr	r2, [r3, #16]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001bde:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001be8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001bec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	6911      	ldr	r1, [r2, #16]
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	430b      	orrs	r3, r1
 8001bfa:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001bfe:	e013      	b.n	8001c28 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	691a      	ldr	r2, [r3, #16]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001c0e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	6812      	ldr	r2, [r2, #0]
 8001c1c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001c20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c24:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d118      	bne.n	8001c64 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001c3c:	f023 0304 	bic.w	r3, r3, #4
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001c48:	4311      	orrs	r1, r2
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001c4e:	4311      	orrs	r1, r2
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001c54:	430a      	orrs	r2, r1
 8001c56:	431a      	orrs	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f042 0201 	orr.w	r2, r2, #1
 8001c60:	611a      	str	r2, [r3, #16]
 8001c62:	e007      	b.n	8001c74 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	691a      	ldr	r2, [r3, #16]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 0201 	bic.w	r2, r2, #1
 8001c72:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d10c      	bne.n	8001c96 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c82:	f023 010f 	bic.w	r1, r3, #15
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a1b      	ldr	r3, [r3, #32]
 8001c8a:	1e5a      	subs	r2, r3, #1
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c94:	e007      	b.n	8001ca6 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 020f 	bic.w	r2, r2, #15
 8001ca4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001caa:	f023 0303 	bic.w	r3, r3, #3
 8001cae:	f043 0201 	orr.w	r2, r3, #1
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001cb6:	e007      	b.n	8001cc8 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cbc:	f043 0210 	orr.w	r2, r3, #16
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001cc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3724      	adds	r7, #36	@ 0x24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd90      	pop	{r4, r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000000 	.word	0x20000000
 8001cd8:	053e2d63 	.word	0x053e2d63
 8001cdc:	50000100 	.word	0x50000100
 8001ce0:	50000300 	.word	0x50000300
 8001ce4:	fff04007 	.word	0xfff04007

08001ce8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cf4:	4851      	ldr	r0, [pc, #324]	@ (8001e3c <HAL_ADC_Start_DMA+0x154>)
 8001cf6:	f7ff fd8f 	bl	8001818 <LL_ADC_GetMultimode>
 8001cfa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff fe47 	bl	8001994 <LL_ADC_REG_IsConversionOngoing>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f040 808f 	bne.w	8001e2c <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d101      	bne.n	8001d1c <HAL_ADC_Start_DMA+0x34>
 8001d18:	2302      	movs	r3, #2
 8001d1a:	e08a      	b.n	8001e32 <HAL_ADC_Start_DMA+0x14a>
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d005      	beq.n	8001d36 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	2b05      	cmp	r3, #5
 8001d2e:	d002      	beq.n	8001d36 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	2b09      	cmp	r3, #9
 8001d34:	d173      	bne.n	8001e1e <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f000 fc98 	bl	800266c <ADC_Enable>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001d40:	7dfb      	ldrb	r3, [r7, #23]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d166      	bne.n	8001e14 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d4a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001d4e:	f023 0301 	bic.w	r3, r3, #1
 8001d52:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a38      	ldr	r2, [pc, #224]	@ (8001e40 <HAL_ADC_Start_DMA+0x158>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d002      	beq.n	8001d6a <HAL_ADC_Start_DMA+0x82>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	e001      	b.n	8001d6e <HAL_ADC_Start_DMA+0x86>
 8001d6a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	6812      	ldr	r2, [r2, #0]
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d002      	beq.n	8001d7c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d105      	bne.n	8001d88 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d80:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d006      	beq.n	8001da2 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d98:	f023 0206 	bic.w	r2, r3, #6
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	661a      	str	r2, [r3, #96]	@ 0x60
 8001da0:	e002      	b.n	8001da8 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dac:	4a25      	ldr	r2, [pc, #148]	@ (8001e44 <HAL_ADC_Start_DMA+0x15c>)
 8001dae:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001db4:	4a24      	ldr	r2, [pc, #144]	@ (8001e48 <HAL_ADC_Start_DMA+0x160>)
 8001db6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dbc:	4a23      	ldr	r2, [pc, #140]	@ (8001e4c <HAL_ADC_Start_DMA+0x164>)
 8001dbe:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	221c      	movs	r2, #28
 8001dc6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f042 0210 	orr.w	r2, r2, #16
 8001dde:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68da      	ldr	r2, [r3, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f042 0201 	orr.w	r2, r2, #1
 8001dee:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	3340      	adds	r3, #64	@ 0x40
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	68ba      	ldr	r2, [r7, #8]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f001 f8be 	bl	8002f80 <HAL_DMA_Start_IT>
 8001e04:	4603      	mov	r3, r0
 8001e06:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fdad 	bl	800196c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001e12:	e00d      	b.n	8001e30 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8001e1c:	e008      	b.n	8001e30 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001e2a:	e001      	b.n	8001e30 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	50000300 	.word	0x50000300
 8001e40:	50000100 	.word	0x50000100
 8001e44:	08002837 	.word	0x08002837
 8001e48:	0800290f 	.word	0x0800290f
 8001e4c:	0800292b 	.word	0x0800292b

08001e50 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b0b6      	sub	sp, #216	@ 0xd8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e96:	2300      	movs	r3, #0
 8001e98:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d101      	bne.n	8001eae <HAL_ADC_ConfigChannel+0x22>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	e3c8      	b.n	8002640 <HAL_ADC_ConfigChannel+0x7b4>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff fd6a 	bl	8001994 <LL_ADC_REG_IsConversionOngoing>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f040 83ad 	bne.w	8002622 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6818      	ldr	r0, [r3, #0]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	6859      	ldr	r1, [r3, #4]
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	f7ff fc24 	bl	8001722 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff fd58 	bl	8001994 <LL_ADC_REG_IsConversionOngoing>
 8001ee4:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff fd64 	bl	80019ba <LL_ADC_INJ_IsConversionOngoing>
 8001ef2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ef6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f040 81d9 	bne.w	80022b2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f040 81d4 	bne.w	80022b2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001f12:	d10f      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6818      	ldr	r0, [r3, #0]
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	4619      	mov	r1, r3
 8001f20:	f7ff fc2b 	bl	800177a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff fbd2 	bl	80016d6 <LL_ADC_SetSamplingTimeCommonConfig>
 8001f32:	e00e      	b.n	8001f52 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6818      	ldr	r0, [r3, #0]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	6819      	ldr	r1, [r3, #0]
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	461a      	mov	r2, r3
 8001f42:	f7ff fc1a 	bl	800177a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff fbc2 	bl	80016d6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	695a      	ldr	r2, [r3, #20]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	08db      	lsrs	r3, r3, #3
 8001f5e:	f003 0303 	and.w	r3, r3, #3
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	2b04      	cmp	r3, #4
 8001f72:	d022      	beq.n	8001fba <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6818      	ldr	r0, [r3, #0]
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	6919      	ldr	r1, [r3, #16]
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001f84:	f7ff fb1c 	bl	80015c0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	6919      	ldr	r1, [r3, #16]
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	461a      	mov	r2, r3
 8001f96:	f7ff fb68 	bl	800166a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6818      	ldr	r0, [r3, #0]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d102      	bne.n	8001fb0 <HAL_ADC_ConfigChannel+0x124>
 8001faa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001fae:	e000      	b.n	8001fb2 <HAL_ADC_ConfigChannel+0x126>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	f7ff fb74 	bl	80016a0 <LL_ADC_SetOffsetSaturation>
 8001fb8:	e17b      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff fb21 	bl	8001608 <LL_ADC_GetOffsetChannel>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d10a      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x15a>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff fb16 	bl	8001608 <LL_ADC_GetOffsetChannel>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	0e9b      	lsrs	r3, r3, #26
 8001fe0:	f003 021f 	and.w	r2, r3, #31
 8001fe4:	e01e      	b.n	8002024 <HAL_ADC_ConfigChannel+0x198>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2100      	movs	r1, #0
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff fb0b 	bl	8001608 <LL_ADC_GetOffsetChannel>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001ffc:	fa93 f3a3 	rbit	r3, r3
 8002000:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002004:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002008:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800200c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002014:	2320      	movs	r3, #32
 8002016:	e004      	b.n	8002022 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002018:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800201c:	fab3 f383 	clz	r3, r3
 8002020:	b2db      	uxtb	r3, r3
 8002022:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800202c:	2b00      	cmp	r3, #0
 800202e:	d105      	bne.n	800203c <HAL_ADC_ConfigChannel+0x1b0>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	0e9b      	lsrs	r3, r3, #26
 8002036:	f003 031f 	and.w	r3, r3, #31
 800203a:	e018      	b.n	800206e <HAL_ADC_ConfigChannel+0x1e2>
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002048:	fa93 f3a3 	rbit	r3, r3
 800204c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002050:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002054:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002058:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002060:	2320      	movs	r3, #32
 8002062:	e004      	b.n	800206e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002064:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002068:	fab3 f383 	clz	r3, r3
 800206c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800206e:	429a      	cmp	r2, r3
 8002070:	d106      	bne.n	8002080 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2200      	movs	r2, #0
 8002078:	2100      	movs	r1, #0
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff fada 	bl	8001634 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2101      	movs	r1, #1
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff fabe 	bl	8001608 <LL_ADC_GetOffsetChannel>
 800208c:	4603      	mov	r3, r0
 800208e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10a      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x220>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2101      	movs	r1, #1
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fab3 	bl	8001608 <LL_ADC_GetOffsetChannel>
 80020a2:	4603      	mov	r3, r0
 80020a4:	0e9b      	lsrs	r3, r3, #26
 80020a6:	f003 021f 	and.w	r2, r3, #31
 80020aa:	e01e      	b.n	80020ea <HAL_ADC_ConfigChannel+0x25e>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2101      	movs	r1, #1
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff faa8 	bl	8001608 <LL_ADC_GetOffsetChannel>
 80020b8:	4603      	mov	r3, r0
 80020ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80020c2:	fa93 f3a3 	rbit	r3, r3
 80020c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80020ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80020ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80020d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80020da:	2320      	movs	r3, #32
 80020dc:	e004      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80020de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80020e2:	fab3 f383 	clz	r3, r3
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d105      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x276>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	0e9b      	lsrs	r3, r3, #26
 80020fc:	f003 031f 	and.w	r3, r3, #31
 8002100:	e018      	b.n	8002134 <HAL_ADC_ConfigChannel+0x2a8>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800210e:	fa93 f3a3 	rbit	r3, r3
 8002112:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002116:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800211a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800211e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002126:	2320      	movs	r3, #32
 8002128:	e004      	b.n	8002134 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800212a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800212e:	fab3 f383 	clz	r3, r3
 8002132:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002134:	429a      	cmp	r2, r3
 8002136:	d106      	bne.n	8002146 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2200      	movs	r2, #0
 800213e:	2101      	movs	r1, #1
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff fa77 	bl	8001634 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2102      	movs	r1, #2
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff fa5b 	bl	8001608 <LL_ADC_GetOffsetChannel>
 8002152:	4603      	mov	r3, r0
 8002154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002158:	2b00      	cmp	r3, #0
 800215a:	d10a      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x2e6>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2102      	movs	r1, #2
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff fa50 	bl	8001608 <LL_ADC_GetOffsetChannel>
 8002168:	4603      	mov	r3, r0
 800216a:	0e9b      	lsrs	r3, r3, #26
 800216c:	f003 021f 	and.w	r2, r3, #31
 8002170:	e01e      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x324>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2102      	movs	r1, #2
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff fa45 	bl	8001608 <LL_ADC_GetOffsetChannel>
 800217e:	4603      	mov	r3, r0
 8002180:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002184:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002188:	fa93 f3a3 	rbit	r3, r3
 800218c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002190:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002194:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002198:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80021a0:	2320      	movs	r3, #32
 80021a2:	e004      	b.n	80021ae <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80021a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80021a8:	fab3 f383 	clz	r3, r3
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d105      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x33c>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	0e9b      	lsrs	r3, r3, #26
 80021c2:	f003 031f 	and.w	r3, r3, #31
 80021c6:	e016      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x36a>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021d4:	fa93 f3a3 	rbit	r3, r3
 80021d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80021da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80021dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80021e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80021e8:	2320      	movs	r3, #32
 80021ea:	e004      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80021ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80021f0:	fab3 f383 	clz	r3, r3
 80021f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d106      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2200      	movs	r2, #0
 8002200:	2102      	movs	r1, #2
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fa16 	bl	8001634 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2103      	movs	r1, #3
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff f9fa 	bl	8001608 <LL_ADC_GetOffsetChannel>
 8002214:	4603      	mov	r3, r0
 8002216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10a      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x3a8>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2103      	movs	r1, #3
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff f9ef 	bl	8001608 <LL_ADC_GetOffsetChannel>
 800222a:	4603      	mov	r3, r0
 800222c:	0e9b      	lsrs	r3, r3, #26
 800222e:	f003 021f 	and.w	r2, r3, #31
 8002232:	e017      	b.n	8002264 <HAL_ADC_ConfigChannel+0x3d8>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2103      	movs	r1, #3
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff f9e4 	bl	8001608 <LL_ADC_GetOffsetChannel>
 8002240:	4603      	mov	r3, r0
 8002242:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002244:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002246:	fa93 f3a3 	rbit	r3, r3
 800224a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800224c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800224e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002250:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002256:	2320      	movs	r3, #32
 8002258:	e003      	b.n	8002262 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800225a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800225c:	fab3 f383 	clz	r3, r3
 8002260:	b2db      	uxtb	r3, r3
 8002262:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800226c:	2b00      	cmp	r3, #0
 800226e:	d105      	bne.n	800227c <HAL_ADC_ConfigChannel+0x3f0>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	0e9b      	lsrs	r3, r3, #26
 8002276:	f003 031f 	and.w	r3, r3, #31
 800227a:	e011      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x414>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002282:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002284:	fa93 f3a3 	rbit	r3, r3
 8002288:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800228a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800228c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800228e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002294:	2320      	movs	r3, #32
 8002296:	e003      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002298:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800229a:	fab3 f383 	clz	r3, r3
 800229e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d106      	bne.n	80022b2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2200      	movs	r2, #0
 80022aa:	2103      	movs	r1, #3
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff f9c1 	bl	8001634 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff fb32 	bl	8001920 <LL_ADC_IsEnabled>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f040 8140 	bne.w	8002544 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6818      	ldr	r0, [r3, #0]
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	6819      	ldr	r1, [r3, #0]
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	461a      	mov	r2, r3
 80022d2:	f7ff fa7d 	bl	80017d0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	4a8f      	ldr	r2, [pc, #572]	@ (8002518 <HAL_ADC_ConfigChannel+0x68c>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	f040 8131 	bne.w	8002544 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10b      	bne.n	800230a <HAL_ADC_ConfigChannel+0x47e>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	0e9b      	lsrs	r3, r3, #26
 80022f8:	3301      	adds	r3, #1
 80022fa:	f003 031f 	and.w	r3, r3, #31
 80022fe:	2b09      	cmp	r3, #9
 8002300:	bf94      	ite	ls
 8002302:	2301      	movls	r3, #1
 8002304:	2300      	movhi	r3, #0
 8002306:	b2db      	uxtb	r3, r3
 8002308:	e019      	b.n	800233e <HAL_ADC_ConfigChannel+0x4b2>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002310:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002312:	fa93 f3a3 	rbit	r3, r3
 8002316:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002318:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800231a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800231c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002322:	2320      	movs	r3, #32
 8002324:	e003      	b.n	800232e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002326:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002328:	fab3 f383 	clz	r3, r3
 800232c:	b2db      	uxtb	r3, r3
 800232e:	3301      	adds	r3, #1
 8002330:	f003 031f 	and.w	r3, r3, #31
 8002334:	2b09      	cmp	r3, #9
 8002336:	bf94      	ite	ls
 8002338:	2301      	movls	r3, #1
 800233a:	2300      	movhi	r3, #0
 800233c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800233e:	2b00      	cmp	r3, #0
 8002340:	d079      	beq.n	8002436 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234a:	2b00      	cmp	r3, #0
 800234c:	d107      	bne.n	800235e <HAL_ADC_ConfigChannel+0x4d2>
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	0e9b      	lsrs	r3, r3, #26
 8002354:	3301      	adds	r3, #1
 8002356:	069b      	lsls	r3, r3, #26
 8002358:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800235c:	e015      	b.n	800238a <HAL_ADC_ConfigChannel+0x4fe>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002364:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002366:	fa93 f3a3 	rbit	r3, r3
 800236a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800236c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800236e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002370:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002376:	2320      	movs	r3, #32
 8002378:	e003      	b.n	8002382 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800237a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800237c:	fab3 f383 	clz	r3, r3
 8002380:	b2db      	uxtb	r3, r3
 8002382:	3301      	adds	r3, #1
 8002384:	069b      	lsls	r3, r3, #26
 8002386:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002392:	2b00      	cmp	r3, #0
 8002394:	d109      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x51e>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	0e9b      	lsrs	r3, r3, #26
 800239c:	3301      	adds	r3, #1
 800239e:	f003 031f 	and.w	r3, r3, #31
 80023a2:	2101      	movs	r1, #1
 80023a4:	fa01 f303 	lsl.w	r3, r1, r3
 80023a8:	e017      	b.n	80023da <HAL_ADC_ConfigChannel+0x54e>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023b2:	fa93 f3a3 	rbit	r3, r3
 80023b6:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80023b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80023bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80023c2:	2320      	movs	r3, #32
 80023c4:	e003      	b.n	80023ce <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80023c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023c8:	fab3 f383 	clz	r3, r3
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	3301      	adds	r3, #1
 80023d0:	f003 031f 	and.w	r3, r3, #31
 80023d4:	2101      	movs	r1, #1
 80023d6:	fa01 f303 	lsl.w	r3, r1, r3
 80023da:	ea42 0103 	orr.w	r1, r2, r3
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10a      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x574>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	0e9b      	lsrs	r3, r3, #26
 80023f0:	3301      	adds	r3, #1
 80023f2:	f003 021f 	and.w	r2, r3, #31
 80023f6:	4613      	mov	r3, r2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	4413      	add	r3, r2
 80023fc:	051b      	lsls	r3, r3, #20
 80023fe:	e018      	b.n	8002432 <HAL_ADC_ConfigChannel+0x5a6>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002408:	fa93 f3a3 	rbit	r3, r3
 800240c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800240e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002410:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002418:	2320      	movs	r3, #32
 800241a:	e003      	b.n	8002424 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800241c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800241e:	fab3 f383 	clz	r3, r3
 8002422:	b2db      	uxtb	r3, r3
 8002424:	3301      	adds	r3, #1
 8002426:	f003 021f 	and.w	r2, r3, #31
 800242a:	4613      	mov	r3, r2
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	4413      	add	r3, r2
 8002430:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002432:	430b      	orrs	r3, r1
 8002434:	e081      	b.n	800253a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800243e:	2b00      	cmp	r3, #0
 8002440:	d107      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x5c6>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	0e9b      	lsrs	r3, r3, #26
 8002448:	3301      	adds	r3, #1
 800244a:	069b      	lsls	r3, r3, #26
 800244c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002450:	e015      	b.n	800247e <HAL_ADC_ConfigChannel+0x5f2>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800245a:	fa93 f3a3 	rbit	r3, r3
 800245e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002462:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800246a:	2320      	movs	r3, #32
 800246c:	e003      	b.n	8002476 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800246e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002470:	fab3 f383 	clz	r3, r3
 8002474:	b2db      	uxtb	r3, r3
 8002476:	3301      	adds	r3, #1
 8002478:	069b      	lsls	r3, r3, #26
 800247a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002486:	2b00      	cmp	r3, #0
 8002488:	d109      	bne.n	800249e <HAL_ADC_ConfigChannel+0x612>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	0e9b      	lsrs	r3, r3, #26
 8002490:	3301      	adds	r3, #1
 8002492:	f003 031f 	and.w	r3, r3, #31
 8002496:	2101      	movs	r1, #1
 8002498:	fa01 f303 	lsl.w	r3, r1, r3
 800249c:	e017      	b.n	80024ce <HAL_ADC_ConfigChannel+0x642>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	fa93 f3a3 	rbit	r3, r3
 80024aa:	61fb      	str	r3, [r7, #28]
  return result;
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80024b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80024b6:	2320      	movs	r3, #32
 80024b8:	e003      	b.n	80024c2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80024ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024bc:	fab3 f383 	clz	r3, r3
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	3301      	adds	r3, #1
 80024c4:	f003 031f 	and.w	r3, r3, #31
 80024c8:	2101      	movs	r1, #1
 80024ca:	fa01 f303 	lsl.w	r3, r1, r3
 80024ce:	ea42 0103 	orr.w	r1, r2, r3
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10d      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x66e>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	0e9b      	lsrs	r3, r3, #26
 80024e4:	3301      	adds	r3, #1
 80024e6:	f003 021f 	and.w	r2, r3, #31
 80024ea:	4613      	mov	r3, r2
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	4413      	add	r3, r2
 80024f0:	3b1e      	subs	r3, #30
 80024f2:	051b      	lsls	r3, r3, #20
 80024f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80024f8:	e01e      	b.n	8002538 <HAL_ADC_ConfigChannel+0x6ac>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	fa93 f3a3 	rbit	r3, r3
 8002506:	613b      	str	r3, [r7, #16]
  return result;
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d104      	bne.n	800251c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002512:	2320      	movs	r3, #32
 8002514:	e006      	b.n	8002524 <HAL_ADC_ConfigChannel+0x698>
 8002516:	bf00      	nop
 8002518:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	fab3 f383 	clz	r3, r3
 8002522:	b2db      	uxtb	r3, r3
 8002524:	3301      	adds	r3, #1
 8002526:	f003 021f 	and.w	r2, r3, #31
 800252a:	4613      	mov	r3, r2
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	4413      	add	r3, r2
 8002530:	3b1e      	subs	r3, #30
 8002532:	051b      	lsls	r3, r3, #20
 8002534:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002538:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800253e:	4619      	mov	r1, r3
 8002540:	f7ff f91b 	bl	800177a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	4b3f      	ldr	r3, [pc, #252]	@ (8002648 <HAL_ADC_ConfigChannel+0x7bc>)
 800254a:	4013      	ands	r3, r2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d071      	beq.n	8002634 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002550:	483e      	ldr	r0, [pc, #248]	@ (800264c <HAL_ADC_ConfigChannel+0x7c0>)
 8002552:	f7ff f827 	bl	80015a4 <LL_ADC_GetCommonPathInternalCh>
 8002556:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a3c      	ldr	r2, [pc, #240]	@ (8002650 <HAL_ADC_ConfigChannel+0x7c4>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d004      	beq.n	800256e <HAL_ADC_ConfigChannel+0x6e2>
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a3a      	ldr	r2, [pc, #232]	@ (8002654 <HAL_ADC_ConfigChannel+0x7c8>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d127      	bne.n	80025be <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800256e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002572:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d121      	bne.n	80025be <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002582:	d157      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002584:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002588:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800258c:	4619      	mov	r1, r3
 800258e:	482f      	ldr	r0, [pc, #188]	@ (800264c <HAL_ADC_ConfigChannel+0x7c0>)
 8002590:	f7fe fff5 	bl	800157e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002594:	4b30      	ldr	r3, [pc, #192]	@ (8002658 <HAL_ADC_ConfigChannel+0x7cc>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	099b      	lsrs	r3, r3, #6
 800259a:	4a30      	ldr	r2, [pc, #192]	@ (800265c <HAL_ADC_ConfigChannel+0x7d0>)
 800259c:	fba2 2303 	umull	r2, r3, r2, r3
 80025a0:	099b      	lsrs	r3, r3, #6
 80025a2:	1c5a      	adds	r2, r3, #1
 80025a4:	4613      	mov	r3, r2
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	4413      	add	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80025ae:	e002      	b.n	80025b6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1f9      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025bc:	e03a      	b.n	8002634 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a27      	ldr	r2, [pc, #156]	@ (8002660 <HAL_ADC_ConfigChannel+0x7d4>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d113      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10d      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a22      	ldr	r2, [pc, #136]	@ (8002664 <HAL_ADC_ConfigChannel+0x7d8>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d02a      	beq.n	8002634 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025e6:	4619      	mov	r1, r3
 80025e8:	4818      	ldr	r0, [pc, #96]	@ (800264c <HAL_ADC_ConfigChannel+0x7c0>)
 80025ea:	f7fe ffc8 	bl	800157e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025ee:	e021      	b.n	8002634 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a1c      	ldr	r2, [pc, #112]	@ (8002668 <HAL_ADC_ConfigChannel+0x7dc>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d11c      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d116      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a16      	ldr	r2, [pc, #88]	@ (8002664 <HAL_ADC_ConfigChannel+0x7d8>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d011      	beq.n	8002634 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002610:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002614:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002618:	4619      	mov	r1, r3
 800261a:	480c      	ldr	r0, [pc, #48]	@ (800264c <HAL_ADC_ConfigChannel+0x7c0>)
 800261c:	f7fe ffaf 	bl	800157e <LL_ADC_SetCommonPathInternalCh>
 8002620:	e008      	b.n	8002634 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002626:	f043 0220 	orr.w	r2, r3, #32
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800263c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002640:	4618      	mov	r0, r3
 8002642:	37d8      	adds	r7, #216	@ 0xd8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	80080000 	.word	0x80080000
 800264c:	50000300 	.word	0x50000300
 8002650:	c3210000 	.word	0xc3210000
 8002654:	90c00010 	.word	0x90c00010
 8002658:	20000000 	.word	0x20000000
 800265c:	053e2d63 	.word	0x053e2d63
 8002660:	c7520000 	.word	0xc7520000
 8002664:	50000100 	.word	0x50000100
 8002668:	cb840000 	.word	0xcb840000

0800266c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002674:	2300      	movs	r3, #0
 8002676:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff f94f 	bl	8001920 <LL_ADC_IsEnabled>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d169      	bne.n	800275c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	4b36      	ldr	r3, [pc, #216]	@ (8002768 <ADC_Enable+0xfc>)
 8002690:	4013      	ands	r3, r2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00d      	beq.n	80026b2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800269a:	f043 0210 	orr.w	r2, r3, #16
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026a6:	f043 0201 	orr.w	r2, r3, #1
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e055      	b.n	800275e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff f90a 	bl	80018d0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80026bc:	482b      	ldr	r0, [pc, #172]	@ (800276c <ADC_Enable+0x100>)
 80026be:	f7fe ff71 	bl	80015a4 <LL_ADC_GetCommonPathInternalCh>
 80026c2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80026c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d013      	beq.n	80026f4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026cc:	4b28      	ldr	r3, [pc, #160]	@ (8002770 <ADC_Enable+0x104>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	099b      	lsrs	r3, r3, #6
 80026d2:	4a28      	ldr	r2, [pc, #160]	@ (8002774 <ADC_Enable+0x108>)
 80026d4:	fba2 2303 	umull	r2, r3, r2, r3
 80026d8:	099b      	lsrs	r3, r3, #6
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	4613      	mov	r3, r2
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	4413      	add	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80026e6:	e002      	b.n	80026ee <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1f9      	bne.n	80026e8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80026f4:	f7fe ff02 	bl	80014fc <HAL_GetTick>
 80026f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026fa:	e028      	b.n	800274e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff f90d 	bl	8001920 <LL_ADC_IsEnabled>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d104      	bne.n	8002716 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff f8dd 	bl	80018d0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002716:	f7fe fef1 	bl	80014fc <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d914      	bls.n	800274e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b01      	cmp	r3, #1
 8002730:	d00d      	beq.n	800274e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002736:	f043 0210 	orr.w	r2, r3, #16
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002742:	f043 0201 	orr.w	r2, r3, #1
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e007      	b.n	800275e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b01      	cmp	r3, #1
 800275a:	d1cf      	bne.n	80026fc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	8000003f 	.word	0x8000003f
 800276c:	50000300 	.word	0x50000300
 8002770:	20000000 	.word	0x20000000
 8002774:	053e2d63 	.word	0x053e2d63

08002778 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff f8de 	bl	8001946 <LL_ADC_IsDisableOngoing>
 800278a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff f8c5 	bl	8001920 <LL_ADC_IsEnabled>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d047      	beq.n	800282c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d144      	bne.n	800282c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 030d 	and.w	r3, r3, #13
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d10c      	bne.n	80027ca <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff f89f 	bl	80018f8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2203      	movs	r2, #3
 80027c0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027c2:	f7fe fe9b 	bl	80014fc <HAL_GetTick>
 80027c6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80027c8:	e029      	b.n	800281e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ce:	f043 0210 	orr.w	r2, r3, #16
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027da:	f043 0201 	orr.w	r2, r3, #1
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e023      	b.n	800282e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027e6:	f7fe fe89 	bl	80014fc <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d914      	bls.n	800281e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00d      	beq.n	800281e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002806:	f043 0210 	orr.w	r2, r3, #16
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002812:	f043 0201 	orr.w	r2, r3, #1
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e007      	b.n	800282e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1dc      	bne.n	80027e6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b084      	sub	sp, #16
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002842:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002848:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800284c:	2b00      	cmp	r3, #0
 800284e:	d14b      	bne.n	80028e8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002854:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d021      	beq.n	80028ae <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7fe ff44 	bl	80016fc <LL_ADC_REG_IsTriggerSourceSWStart>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d032      	beq.n	80028e0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d12b      	bne.n	80028e0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800288c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002898:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d11f      	bne.n	80028e0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a4:	f043 0201 	orr.w	r2, r3, #1
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80028ac:	e018      	b.n	80028e0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d111      	bne.n	80028e0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d105      	bne.n	80028e0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d8:	f043 0201 	orr.w	r2, r3, #1
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f7ff fab5 	bl	8001e50 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80028e6:	e00e      	b.n	8002906 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ec:	f003 0310 	and.w	r3, r3, #16
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f7ff fabf 	bl	8001e78 <HAL_ADC_ErrorCallback>
}
 80028fa:	e004      	b.n	8002906 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	4798      	blx	r3
}
 8002906:	bf00      	nop
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b084      	sub	sp, #16
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f7ff faa1 	bl	8001e64 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002922:	bf00      	nop
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b084      	sub	sp, #16
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002936:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800293c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002948:	f043 0204 	orr.w	r2, r3, #4
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f7ff fa91 	bl	8001e78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002956:	bf00      	nop
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <LL_ADC_IsEnabled>:
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b01      	cmp	r3, #1
 8002970:	d101      	bne.n	8002976 <LL_ADC_IsEnabled+0x18>
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <LL_ADC_IsEnabled+0x1a>
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <LL_ADC_StartCalibration>:
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002996:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80029a0:	4313      	orrs	r3, r2
 80029a2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	609a      	str	r2, [r3, #8]
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <LL_ADC_IsCalibrationOnGoing>:
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80029c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80029ca:	d101      	bne.n	80029d0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80029cc:	2301      	movs	r3, #1
 80029ce:	e000      	b.n	80029d2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <LL_ADC_REG_IsConversionOngoing>:
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 0304 	and.w	r3, r3, #4
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d101      	bne.n	80029f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80029f2:	2301      	movs	r3, #1
 80029f4:	e000      	b.n	80029f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <HAL_ADCEx_Calibration_Start+0x1c>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e04d      	b.n	8002abc <HAL_ADCEx_Calibration_Start+0xb8>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f7ff fea5 	bl	8002778 <ADC_Disable>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002a32:	7bfb      	ldrb	r3, [r7, #15]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d136      	bne.n	8002aa6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a3c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002a40:	f023 0302 	bic.w	r3, r3, #2
 8002a44:	f043 0202 	orr.w	r2, r3, #2
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6839      	ldr	r1, [r7, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff ff96 	bl	8002984 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002a58:	e014      	b.n	8002a84 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	4a18      	ldr	r2, [pc, #96]	@ (8002ac4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d90d      	bls.n	8002a84 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a6c:	f023 0312 	bic.w	r3, r3, #18
 8002a70:	f043 0210 	orr.w	r2, r3, #16
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e01b      	b.n	8002abc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff ff94 	bl	80029b6 <LL_ADC_IsCalibrationOnGoing>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1e2      	bne.n	8002a5a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a98:	f023 0303 	bic.w	r3, r3, #3
 8002a9c:	f043 0201 	orr.w	r2, r3, #1
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002aa4:	e005      	b.n	8002ab2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aaa:	f043 0210 	orr.w	r2, r3, #16
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	0004de01 	.word	0x0004de01

08002ac8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002ac8:	b590      	push	{r4, r7, lr}
 8002aca:	b0a1      	sub	sp, #132	@ 0x84
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d101      	bne.n	8002ae6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	e08b      	b.n	8002bfe <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002aee:	2300      	movs	r3, #0
 8002af0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002af2:	2300      	movs	r3, #0
 8002af4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002afe:	d102      	bne.n	8002b06 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002b00:	4b41      	ldr	r3, [pc, #260]	@ (8002c08 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002b02:	60bb      	str	r3, [r7, #8]
 8002b04:	e001      	b.n	8002b0a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002b06:	2300      	movs	r3, #0
 8002b08:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d10b      	bne.n	8002b28 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b14:	f043 0220 	orr.w	r2, r3, #32
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e06a      	b.n	8002bfe <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7ff ff57 	bl	80029de <LL_ADC_REG_IsConversionOngoing>
 8002b30:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff ff51 	bl	80029de <LL_ADC_REG_IsConversionOngoing>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d14c      	bne.n	8002bdc <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002b42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d149      	bne.n	8002bdc <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002b48:	4b30      	ldr	r3, [pc, #192]	@ (8002c0c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002b4a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d028      	beq.n	8002ba6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002b54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	6859      	ldr	r1, [r3, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002b66:	035b      	lsls	r3, r3, #13
 8002b68:	430b      	orrs	r3, r1
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b6e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b70:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002b74:	f7ff fef3 	bl	800295e <LL_ADC_IsEnabled>
 8002b78:	4604      	mov	r4, r0
 8002b7a:	4823      	ldr	r0, [pc, #140]	@ (8002c08 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002b7c:	f7ff feef 	bl	800295e <LL_ADC_IsEnabled>
 8002b80:	4603      	mov	r3, r0
 8002b82:	4323      	orrs	r3, r4
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d133      	bne.n	8002bf0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002b88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002b90:	f023 030f 	bic.w	r3, r3, #15
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	6811      	ldr	r1, [r2, #0]
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	6892      	ldr	r2, [r2, #8]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ba2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ba4:	e024      	b.n	8002bf0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002ba6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bb0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bb2:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002bb6:	f7ff fed2 	bl	800295e <LL_ADC_IsEnabled>
 8002bba:	4604      	mov	r4, r0
 8002bbc:	4812      	ldr	r0, [pc, #72]	@ (8002c08 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002bbe:	f7ff fece 	bl	800295e <LL_ADC_IsEnabled>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	4323      	orrs	r3, r4
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d112      	bne.n	8002bf0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002bca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002bd2:	f023 030f 	bic.w	r3, r3, #15
 8002bd6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002bd8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002bda:	e009      	b.n	8002bf0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be0:	f043 0220 	orr.w	r2, r3, #32
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002bee:	e000      	b.n	8002bf2 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002bf0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002bfa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3784      	adds	r7, #132	@ 0x84
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd90      	pop	{r4, r7, pc}
 8002c06:	bf00      	nop
 8002c08:	50000100 	.word	0x50000100
 8002c0c:	50000300 	.word	0x50000300

08002c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c20:	4b0c      	ldr	r3, [pc, #48]	@ (8002c54 <__NVIC_SetPriorityGrouping+0x44>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c42:	4a04      	ldr	r2, [pc, #16]	@ (8002c54 <__NVIC_SetPriorityGrouping+0x44>)
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	60d3      	str	r3, [r2, #12]
}
 8002c48:	bf00      	nop
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	e000ed00 	.word	0xe000ed00

08002c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c5c:	4b04      	ldr	r3, [pc, #16]	@ (8002c70 <__NVIC_GetPriorityGrouping+0x18>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	0a1b      	lsrs	r3, r3, #8
 8002c62:	f003 0307 	and.w	r3, r3, #7
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	e000ed00 	.word	0xe000ed00

08002c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	db0b      	blt.n	8002c9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c86:	79fb      	ldrb	r3, [r7, #7]
 8002c88:	f003 021f 	and.w	r2, r3, #31
 8002c8c:	4907      	ldr	r1, [pc, #28]	@ (8002cac <__NVIC_EnableIRQ+0x38>)
 8002c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c92:	095b      	lsrs	r3, r3, #5
 8002c94:	2001      	movs	r0, #1
 8002c96:	fa00 f202 	lsl.w	r2, r0, r2
 8002c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	e000e100 	.word	0xe000e100

08002cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	6039      	str	r1, [r7, #0]
 8002cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	db0a      	blt.n	8002cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	490c      	ldr	r1, [pc, #48]	@ (8002cfc <__NVIC_SetPriority+0x4c>)
 8002cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cce:	0112      	lsls	r2, r2, #4
 8002cd0:	b2d2      	uxtb	r2, r2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cd8:	e00a      	b.n	8002cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	4908      	ldr	r1, [pc, #32]	@ (8002d00 <__NVIC_SetPriority+0x50>)
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	3b04      	subs	r3, #4
 8002ce8:	0112      	lsls	r2, r2, #4
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	440b      	add	r3, r1
 8002cee:	761a      	strb	r2, [r3, #24]
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	e000e100 	.word	0xe000e100
 8002d00:	e000ed00 	.word	0xe000ed00

08002d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b089      	sub	sp, #36	@ 0x24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f1c3 0307 	rsb	r3, r3, #7
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	bf28      	it	cs
 8002d22:	2304      	movcs	r3, #4
 8002d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	3304      	adds	r3, #4
 8002d2a:	2b06      	cmp	r3, #6
 8002d2c:	d902      	bls.n	8002d34 <NVIC_EncodePriority+0x30>
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	3b03      	subs	r3, #3
 8002d32:	e000      	b.n	8002d36 <NVIC_EncodePriority+0x32>
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d38:	f04f 32ff 	mov.w	r2, #4294967295
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	43da      	mvns	r2, r3
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	401a      	ands	r2, r3
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	fa01 f303 	lsl.w	r3, r1, r3
 8002d56:	43d9      	mvns	r1, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d5c:	4313      	orrs	r3, r2
         );
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3724      	adds	r7, #36	@ 0x24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
	...

08002d6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d7c:	d301      	bcc.n	8002d82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e00f      	b.n	8002da2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d82:	4a0a      	ldr	r2, [pc, #40]	@ (8002dac <SysTick_Config+0x40>)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d8a:	210f      	movs	r1, #15
 8002d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d90:	f7ff ff8e 	bl	8002cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d94:	4b05      	ldr	r3, [pc, #20]	@ (8002dac <SysTick_Config+0x40>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d9a:	4b04      	ldr	r3, [pc, #16]	@ (8002dac <SysTick_Config+0x40>)
 8002d9c:	2207      	movs	r2, #7
 8002d9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	e000e010 	.word	0xe000e010

08002db0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f7ff ff29 	bl	8002c10 <__NVIC_SetPriorityGrouping>
}
 8002dbe:	bf00      	nop
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b086      	sub	sp, #24
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	4603      	mov	r3, r0
 8002dce:	60b9      	str	r1, [r7, #8]
 8002dd0:	607a      	str	r2, [r7, #4]
 8002dd2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002dd4:	f7ff ff40 	bl	8002c58 <__NVIC_GetPriorityGrouping>
 8002dd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	68b9      	ldr	r1, [r7, #8]
 8002dde:	6978      	ldr	r0, [r7, #20]
 8002de0:	f7ff ff90 	bl	8002d04 <NVIC_EncodePriority>
 8002de4:	4602      	mov	r2, r0
 8002de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dea:	4611      	mov	r1, r2
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff ff5f 	bl	8002cb0 <__NVIC_SetPriority>
}
 8002df2:	bf00      	nop
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b082      	sub	sp, #8
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	4603      	mov	r3, r0
 8002e02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff ff33 	bl	8002c74 <__NVIC_EnableIRQ>
}
 8002e0e:	bf00      	nop
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b082      	sub	sp, #8
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff ffa4 	bl	8002d6c <SysTick_Config>
 8002e24:	4603      	mov	r3, r0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
	...

08002e30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e08d      	b.n	8002f5e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	461a      	mov	r2, r3
 8002e48:	4b47      	ldr	r3, [pc, #284]	@ (8002f68 <HAL_DMA_Init+0x138>)
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d80f      	bhi.n	8002e6e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	461a      	mov	r2, r3
 8002e54:	4b45      	ldr	r3, [pc, #276]	@ (8002f6c <HAL_DMA_Init+0x13c>)
 8002e56:	4413      	add	r3, r2
 8002e58:	4a45      	ldr	r2, [pc, #276]	@ (8002f70 <HAL_DMA_Init+0x140>)
 8002e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5e:	091b      	lsrs	r3, r3, #4
 8002e60:	009a      	lsls	r2, r3, #2
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a42      	ldr	r2, [pc, #264]	@ (8002f74 <HAL_DMA_Init+0x144>)
 8002e6a:	641a      	str	r2, [r3, #64]	@ 0x40
 8002e6c:	e00e      	b.n	8002e8c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	461a      	mov	r2, r3
 8002e74:	4b40      	ldr	r3, [pc, #256]	@ (8002f78 <HAL_DMA_Init+0x148>)
 8002e76:	4413      	add	r3, r2
 8002e78:	4a3d      	ldr	r2, [pc, #244]	@ (8002f70 <HAL_DMA_Init+0x140>)
 8002e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7e:	091b      	lsrs	r3, r3, #4
 8002e80:	009a      	lsls	r2, r3, #2
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a3c      	ldr	r2, [pc, #240]	@ (8002f7c <HAL_DMA_Init+0x14c>)
 8002e8a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002ea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ea6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002eb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ebc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ec8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f9b6 	bl	8003250 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002eec:	d102      	bne.n	8002ef4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f08:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d010      	beq.n	8002f34 <HAL_DMA_Init+0x104>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d80c      	bhi.n	8002f34 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f9d6 	bl	80032cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002f30:	605a      	str	r2, [r3, #4]
 8002f32:	e008      	b.n	8002f46 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	40020407 	.word	0x40020407
 8002f6c:	bffdfff8 	.word	0xbffdfff8
 8002f70:	cccccccd 	.word	0xcccccccd
 8002f74:	40020000 	.word	0x40020000
 8002f78:	bffdfbf8 	.word	0xbffdfbf8
 8002f7c:	40020400 	.word	0x40020400

08002f80 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
 8002f8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d101      	bne.n	8002fa0 <HAL_DMA_Start_IT+0x20>
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	e066      	b.n	800306e <HAL_DMA_Start_IT+0xee>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d155      	bne.n	8003060 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0201 	bic.w	r2, r2, #1
 8002fd0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	68b9      	ldr	r1, [r7, #8]
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 f8fb 	bl	80031d4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d008      	beq.n	8002ff8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f042 020e 	orr.w	r2, r2, #14
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	e00f      	b.n	8003018 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0204 	bic.w	r2, r2, #4
 8003006:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 020a 	orr.w	r2, r2, #10
 8003016:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d007      	beq.n	8003036 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003030:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003034:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800303a:	2b00      	cmp	r3, #0
 800303c:	d007      	beq.n	800304e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003048:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800304c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f042 0201 	orr.w	r2, r2, #1
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	e005      	b.n	800306c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003068:	2302      	movs	r3, #2
 800306a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800306c:	7dfb      	ldrb	r3, [r7, #23]
}
 800306e:	4618      	mov	r0, r3
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b084      	sub	sp, #16
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003092:	f003 031f 	and.w	r3, r3, #31
 8003096:	2204      	movs	r2, #4
 8003098:	409a      	lsls	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	4013      	ands	r3, r2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d026      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x7a>
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d021      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0320 	and.w	r3, r3, #32
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d107      	bne.n	80030ca <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0204 	bic.w	r2, r2, #4
 80030c8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ce:	f003 021f 	and.w	r2, r3, #31
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d6:	2104      	movs	r1, #4
 80030d8:	fa01 f202 	lsl.w	r2, r1, r2
 80030dc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d071      	beq.n	80031ca <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80030ee:	e06c      	b.n	80031ca <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f4:	f003 031f 	and.w	r3, r3, #31
 80030f8:	2202      	movs	r2, #2
 80030fa:	409a      	lsls	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	4013      	ands	r3, r2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d02e      	beq.n	8003162 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d029      	beq.n	8003162 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0320 	and.w	r3, r3, #32
 8003118:	2b00      	cmp	r3, #0
 800311a:	d10b      	bne.n	8003134 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 020a 	bic.w	r2, r2, #10
 800312a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003138:	f003 021f 	and.w	r2, r3, #31
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003140:	2102      	movs	r1, #2
 8003142:	fa01 f202 	lsl.w	r2, r1, r2
 8003146:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003154:	2b00      	cmp	r3, #0
 8003156:	d038      	beq.n	80031ca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003160:	e033      	b.n	80031ca <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003166:	f003 031f 	and.w	r3, r3, #31
 800316a:	2208      	movs	r2, #8
 800316c:	409a      	lsls	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	4013      	ands	r3, r2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d02a      	beq.n	80031cc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	f003 0308 	and.w	r3, r3, #8
 800317c:	2b00      	cmp	r3, #0
 800317e:	d025      	beq.n	80031cc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 020e 	bic.w	r2, r2, #14
 800318e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003194:	f003 021f 	and.w	r2, r3, #31
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319c:	2101      	movs	r1, #1
 800319e:	fa01 f202 	lsl.w	r2, r1, r2
 80031a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d004      	beq.n	80031cc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80031ca:	bf00      	nop
 80031cc:	bf00      	nop
}
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
 80031e0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80031ea:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d004      	beq.n	80031fe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80031fc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003202:	f003 021f 	and.w	r2, r3, #31
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320a:	2101      	movs	r1, #1
 800320c:	fa01 f202 	lsl.w	r2, r1, r2
 8003210:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	2b10      	cmp	r3, #16
 8003220:	d108      	bne.n	8003234 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003232:	e007      	b.n	8003244 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	60da      	str	r2, [r3, #12]
}
 8003244:	bf00      	nop
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003250:	b480      	push	{r7}
 8003252:	b087      	sub	sp, #28
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	461a      	mov	r2, r3
 800325e:	4b16      	ldr	r3, [pc, #88]	@ (80032b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003260:	429a      	cmp	r2, r3
 8003262:	d802      	bhi.n	800326a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003264:	4b15      	ldr	r3, [pc, #84]	@ (80032bc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003266:	617b      	str	r3, [r7, #20]
 8003268:	e001      	b.n	800326e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800326a:	4b15      	ldr	r3, [pc, #84]	@ (80032c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800326c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	b2db      	uxtb	r3, r3
 8003278:	3b08      	subs	r3, #8
 800327a:	4a12      	ldr	r2, [pc, #72]	@ (80032c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800327c:	fba2 2303 	umull	r2, r3, r2, r3
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003288:	089b      	lsrs	r3, r3, #2
 800328a:	009a      	lsls	r2, r3, #2
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	4413      	add	r3, r2
 8003290:	461a      	mov	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a0b      	ldr	r2, [pc, #44]	@ (80032c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800329a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f003 031f 	and.w	r3, r3, #31
 80032a2:	2201      	movs	r2, #1
 80032a4:	409a      	lsls	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80032aa:	bf00      	nop
 80032ac:	371c      	adds	r7, #28
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	40020407 	.word	0x40020407
 80032bc:	40020800 	.word	0x40020800
 80032c0:	40020820 	.word	0x40020820
 80032c4:	cccccccd 	.word	0xcccccccd
 80032c8:	40020880 	.word	0x40020880

080032cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	4b0b      	ldr	r3, [pc, #44]	@ (800330c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80032e0:	4413      	add	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	461a      	mov	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a08      	ldr	r2, [pc, #32]	@ (8003310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80032ee:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	f003 031f 	and.w	r3, r3, #31
 80032f8:	2201      	movs	r2, #1
 80032fa:	409a      	lsls	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003300:	bf00      	nop
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	1000823f 	.word	0x1000823f
 8003310:	40020940 	.word	0x40020940

08003314 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e147      	b.n	80035b6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d106      	bne.n	8003340 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7fd ff98 	bl	8001270 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699a      	ldr	r2, [r3, #24]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0210 	bic.w	r2, r2, #16
 800334e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003350:	f7fe f8d4 	bl	80014fc <HAL_GetTick>
 8003354:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003356:	e012      	b.n	800337e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003358:	f7fe f8d0 	bl	80014fc <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b0a      	cmp	r3, #10
 8003364:	d90b      	bls.n	800337e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800336a:	f043 0201 	orr.w	r2, r3, #1
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2203      	movs	r2, #3
 8003376:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e11b      	b.n	80035b6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	f003 0308 	and.w	r3, r3, #8
 8003388:	2b08      	cmp	r3, #8
 800338a:	d0e5      	beq.n	8003358 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	699a      	ldr	r2, [r3, #24]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0201 	orr.w	r2, r2, #1
 800339a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800339c:	f7fe f8ae 	bl	80014fc <HAL_GetTick>
 80033a0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80033a2:	e012      	b.n	80033ca <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80033a4:	f7fe f8aa 	bl	80014fc <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b0a      	cmp	r3, #10
 80033b0:	d90b      	bls.n	80033ca <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033b6:	f043 0201 	orr.w	r2, r3, #1
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2203      	movs	r2, #3
 80033c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e0f5      	b.n	80035b6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0e5      	beq.n	80033a4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	699a      	ldr	r2, [r3, #24]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0202 	orr.w	r2, r2, #2
 80033e6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a74      	ldr	r2, [pc, #464]	@ (80035c0 <HAL_FDCAN_Init+0x2ac>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d103      	bne.n	80033fa <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80033f2:	4a74      	ldr	r2, [pc, #464]	@ (80035c4 <HAL_FDCAN_Init+0x2b0>)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	7c1b      	ldrb	r3, [r3, #16]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d108      	bne.n	8003414 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	699a      	ldr	r2, [r3, #24]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003410:	619a      	str	r2, [r3, #24]
 8003412:	e007      	b.n	8003424 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	699a      	ldr	r2, [r3, #24]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003422:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	7c5b      	ldrb	r3, [r3, #17]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d108      	bne.n	800343e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	699a      	ldr	r2, [r3, #24]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800343a:	619a      	str	r2, [r3, #24]
 800343c:	e007      	b.n	800344e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	699a      	ldr	r2, [r3, #24]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800344c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	7c9b      	ldrb	r3, [r3, #18]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d108      	bne.n	8003468 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	699a      	ldr	r2, [r3, #24]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003464:	619a      	str	r2, [r3, #24]
 8003466:	e007      	b.n	8003478 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	699a      	ldr	r2, [r3, #24]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003476:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	699a      	ldr	r2, [r3, #24]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800349c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	691a      	ldr	r2, [r3, #16]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0210 	bic.w	r2, r2, #16
 80034ac:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d108      	bne.n	80034c8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	699a      	ldr	r2, [r3, #24]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f042 0204 	orr.w	r2, r2, #4
 80034c4:	619a      	str	r2, [r3, #24]
 80034c6:	e02c      	b.n	8003522 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d028      	beq.n	8003522 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d01c      	beq.n	8003512 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	699a      	ldr	r2, [r3, #24]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80034e6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	691a      	ldr	r2, [r3, #16]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f042 0210 	orr.w	r2, r2, #16
 80034f6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	2b03      	cmp	r3, #3
 80034fe:	d110      	bne.n	8003522 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	699a      	ldr	r2, [r3, #24]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 0220 	orr.w	r2, r2, #32
 800350e:	619a      	str	r2, [r3, #24]
 8003510:	e007      	b.n	8003522 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	699a      	ldr	r2, [r3, #24]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f042 0220 	orr.w	r2, r2, #32
 8003520:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	3b01      	subs	r3, #1
 8003528:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	3b01      	subs	r3, #1
 8003530:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003532:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800353a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	3b01      	subs	r3, #1
 8003544:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800354a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800354c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003556:	d115      	bne.n	8003584 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800355c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003562:	3b01      	subs	r3, #1
 8003564:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003566:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356c:	3b01      	subs	r3, #1
 800356e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003570:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003578:	3b01      	subs	r3, #1
 800357a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003580:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003582:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 fca8 	bl	8003ef0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	40006400 	.word	0x40006400
 80035c4:	40006500 	.word	0x40006500

080035c8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b087      	sub	sp, #28
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80035d8:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80035da:	7dfb      	ldrb	r3, [r7, #23]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d002      	beq.n	80035e6 <HAL_FDCAN_ConfigFilter+0x1e>
 80035e0:	7dfb      	ldrb	r3, [r7, #23]
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d13d      	bne.n	8003662 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d119      	bne.n	8003622 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80035fa:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8003602:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003608:	4313      	orrs	r3, r2
 800360a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	e01d      	b.n	800365e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	075a      	lsls	r2, r3, #29
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	4313      	orrs	r3, r2
 800362e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	079a      	lsls	r2, r3, #30
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	4313      	orrs	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	4413      	add	r3, r2
 800364a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	3304      	adds	r3, #4
 8003656:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800365e:	2300      	movs	r3, #0
 8003660:	e006      	b.n	8003670 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003666:	f043 0202 	orr.w	r2, r3, #2
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
  }
}
 8003670:	4618      	mov	r0, r3
 8003672:	371c      	adds	r7, #28
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b01      	cmp	r3, #1
 8003694:	d116      	bne.n	80036c4 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800369e:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	011a      	lsls	r2, r3, #4
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	431a      	orrs	r2, r3
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	431a      	orrs	r2, r3
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	431a      	orrs	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 80036c0:	2300      	movs	r3, #0
 80036c2:	e006      	b.n	80036d2 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036c8:	f043 0204 	orr.w	r2, r3, #4
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
  }
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3714      	adds	r7, #20
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr

080036de <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d110      	bne.n	8003714 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2202      	movs	r2, #2
 80036f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	699a      	ldr	r2, [r3, #24]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 0201 	bic.w	r2, r2, #1
 8003708:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8003710:	2300      	movs	r3, #0
 8003712:	e006      	b.n	8003722 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003718:	f043 0204 	orr.w	r2, r3, #4
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
  }
}
 8003722:	4618      	mov	r0, r3
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b086      	sub	sp, #24
 8003732:	af00      	add	r7, sp, #0
 8003734:	60f8      	str	r0, [r7, #12]
 8003736:	60b9      	str	r1, [r7, #8]
 8003738:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d12c      	bne.n	80037a0 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800374e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d007      	beq.n	8003766 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800375a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e023      	b.n	80037ae <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800376e:	0c1b      	lsrs	r3, r3, #16
 8003770:	f003 0303 	and.w	r3, r3, #3
 8003774:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	68b9      	ldr	r1, [r7, #8]
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f000 fc0d 	bl	8003f9c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2101      	movs	r1, #1
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	fa01 f202 	lsl.w	r2, r1, r2
 800378e:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003792:	2201      	movs	r2, #1
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	409a      	lsls	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 800379c:	2300      	movs	r3, #0
 800379e:	e006      	b.n	80037ae <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037a4:	f043 0208 	orr.w	r2, r3, #8
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
  }
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3718      	adds	r7, #24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
	...

080037b8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b08b      	sub	sp, #44	@ 0x2c
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
 80037c4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80037c6:	2300      	movs	r3, #0
 80037c8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80037d0:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80037d2:	7efb      	ldrb	r3, [r7, #27]
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	f040 80e8 	bne.w	80039aa <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2b40      	cmp	r3, #64	@ 0x40
 80037de:	d137      	bne.n	8003850 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e8:	f003 030f 	and.w	r3, r3, #15
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d107      	bne.n	8003800 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037f4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e0db      	b.n	80039b8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003808:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800380c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003810:	d10a      	bne.n	8003828 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800381a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800381e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003822:	d101      	bne.n	8003828 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003824:	2301      	movs	r3, #1
 8003826:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003830:	0a1b      	lsrs	r3, r3, #8
 8003832:	f003 0303 	and.w	r3, r3, #3
 8003836:	69fa      	ldr	r2, [r7, #28]
 8003838:	4413      	add	r3, r2
 800383a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8003840:	69fa      	ldr	r2, [r7, #28]
 8003842:	4613      	mov	r3, r2
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	4413      	add	r3, r2
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	440b      	add	r3, r1
 800384c:	627b      	str	r3, [r7, #36]	@ 0x24
 800384e:	e036      	b.n	80038be <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003858:	f003 030f 	and.w	r3, r3, #15
 800385c:	2b00      	cmp	r3, #0
 800385e:	d107      	bne.n	8003870 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003864:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e0a3      	b.n	80039b8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003878:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800387c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003880:	d10a      	bne.n	8003898 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800388a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800388e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003892:	d101      	bne.n	8003898 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003894:	2301      	movs	r3, #1
 8003896:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038a0:	0a1b      	lsrs	r3, r3, #8
 80038a2:	f003 0303 	and.w	r3, r3, #3
 80038a6:	69fa      	ldr	r2, [r7, #28]
 80038a8:	4413      	add	r3, r2
 80038aa:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80038b0:	69fa      	ldr	r2, [r7, #28]
 80038b2:	4613      	mov	r3, r2
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	4413      	add	r3, r2
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	440b      	add	r3, r1
 80038bc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80038be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d107      	bne.n	80038e2 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80038d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	0c9b      	lsrs	r3, r3, #18
 80038d8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	e005      	b.n	80038ee <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80038e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80038ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80038fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003908:	3304      	adds	r3, #4
 800390a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800390c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	b29a      	uxth	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8003916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	0c1b      	lsrs	r3, r3, #16
 800391c:	f003 020f 	and.w	r2, r3, #15
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800393c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	0e1b      	lsrs	r3, r3, #24
 8003942:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800394a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	0fda      	lsrs	r2, r3, #31
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003956:	3304      	adds	r3, #4
 8003958:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800395a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800395e:	2300      	movs	r3, #0
 8003960:	623b      	str	r3, [r7, #32]
 8003962:	e00a      	b.n	800397a <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	441a      	add	r2, r3
 800396a:	6839      	ldr	r1, [r7, #0]
 800396c:	6a3b      	ldr	r3, [r7, #32]
 800396e:	440b      	add	r3, r1
 8003970:	7812      	ldrb	r2, [r2, #0]
 8003972:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	3301      	adds	r3, #1
 8003978:	623b      	str	r3, [r7, #32]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	4a11      	ldr	r2, [pc, #68]	@ (80039c4 <HAL_FDCAN_GetRxMessage+0x20c>)
 8003980:	5cd3      	ldrb	r3, [r2, r3]
 8003982:	461a      	mov	r2, r3
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	4293      	cmp	r3, r2
 8003988:	d3ec      	bcc.n	8003964 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	2b40      	cmp	r3, #64	@ 0x40
 800398e:	d105      	bne.n	800399c <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	69fa      	ldr	r2, [r7, #28]
 8003996:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800399a:	e004      	b.n	80039a6 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	69fa      	ldr	r2, [r7, #28]
 80039a2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80039a6:	2300      	movs	r3, #0
 80039a8:	e006      	b.n	80039b8 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ae:	f043 0208 	orr.w	r2, r3, #8
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
  }
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	372c      	adds	r7, #44	@ 0x2c
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	0800534c 	.word	0x0800534c

080039c8 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 80039de:	68fb      	ldr	r3, [r7, #12]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b087      	sub	sp, #28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80039fe:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003a00:	7dfb      	ldrb	r3, [r7, #23]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d003      	beq.n	8003a0e <HAL_FDCAN_ActivateNotification+0x22>
 8003a06:	7dfb      	ldrb	r3, [r7, #23]
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	f040 80c8 	bne.w	8003b9e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a14:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d004      	beq.n	8003a2a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d03b      	beq.n	8003aa2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d004      	beq.n	8003a3e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d031      	beq.n	8003aa2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d004      	beq.n	8003a52 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	f003 0304 	and.w	r3, r3, #4
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d027      	beq.n	8003aa2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d004      	beq.n	8003a66 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d01d      	beq.n	8003aa2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d004      	beq.n	8003a7a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	f003 0310 	and.w	r3, r3, #16
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d013      	beq.n	8003aa2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d004      	beq.n	8003a8e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	f003 0320 	and.w	r3, r3, #32
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d009      	beq.n	8003aa2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00c      	beq.n	8003ab2 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d107      	bne.n	8003ab2 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f042 0201 	orr.w	r2, r2, #1
 8003ab0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d004      	beq.n	8003ac6 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d13b      	bne.n	8003b3e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d004      	beq.n	8003ada <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d131      	bne.n	8003b3e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d004      	beq.n	8003aee <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f003 0304 	and.w	r3, r3, #4
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d127      	bne.n	8003b3e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d004      	beq.n	8003b02 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	f003 0308 	and.w	r3, r3, #8
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d11d      	bne.n	8003b3e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d004      	beq.n	8003b16 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	f003 0310 	and.w	r3, r3, #16
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d113      	bne.n	8003b3e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d004      	beq.n	8003b2a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	f003 0320 	and.w	r3, r3, #32
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d109      	bne.n	8003b3e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00c      	beq.n	8003b4e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d007      	beq.n	8003b4e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f042 0202 	orr.w	r2, r2, #2
 8003b4c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d009      	beq.n	8003b6c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d009      	beq.n	8003b8a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	e006      	b.n	8003bac <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ba2:	f043 0202 	orr.w	r2, r3, #2
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
  }
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	371c      	adds	r7, #28
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b08c      	sub	sp, #48	@ 0x30
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bc6:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8003bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bde:	f003 0307 	and.w	r3, r3, #7
 8003be2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003bec:	4013      	ands	r3, r2
 8003bee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bf6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bfa:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c04:	4013      	ands	r3, r2
 8003c06:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c0e:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8003c12:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c1a:	6a3a      	ldr	r2, [r7, #32]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c26:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003c2a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c32:	69fa      	ldr	r2, [r7, #28]
 8003c34:	4013      	ands	r3, r2
 8003c36:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c3e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c46:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	099b      	lsrs	r3, r3, #6
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00c      	beq.n	8003c6e <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	099b      	lsrs	r3, r3, #6
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d006      	beq.n	8003c6e <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2240      	movs	r2, #64	@ 0x40
 8003c66:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f922 	bl	8003eb2 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	0a1b      	lsrs	r3, r3, #8
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d01a      	beq.n	8003cb0 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	0a1b      	lsrs	r3, r3, #8
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d014      	beq.n	8003cb0 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003c8e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ca6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003ca8:	6939      	ldr	r1, [r7, #16]
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f8e2 	bl	8003e74 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d007      	beq.n	8003cc6 <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cbc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003cbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 f8ac 	bl	8003e1e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d007      	beq.n	8003cdc <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003cd2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003cd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7fc ff64 	bl	8000ba4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d007      	beq.n	8003cf2 <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ce8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003cea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f8a1 	bl	8003e34 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	0a5b      	lsrs	r3, r3, #9
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00d      	beq.n	8003d1a <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	0a5b      	lsrs	r3, r3, #9
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d007      	beq.n	8003d1a <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d12:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 f898 	bl	8003e4a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	09db      	lsrs	r3, r3, #7
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d019      	beq.n	8003d5a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	09db      	lsrs	r3, r3, #7
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d013      	beq.n	8003d5a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003d3a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	4013      	ands	r3, r2
 8003d48:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2280      	movs	r2, #128	@ 0x80
 8003d50:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003d52:	68f9      	ldr	r1, [r7, #12]
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f882 	bl	8003e5e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	0b5b      	lsrs	r3, r3, #13
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00d      	beq.n	8003d82 <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	0b5b      	lsrs	r3, r3, #13
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d007      	beq.n	8003d82 <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003d7a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f884 	bl	8003e8a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	0bdb      	lsrs	r3, r3, #15
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00d      	beq.n	8003daa <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	0bdb      	lsrs	r3, r3, #15
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d007      	beq.n	8003daa <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003da2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 f87a 	bl	8003e9e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	0b9b      	lsrs	r3, r3, #14
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d010      	beq.n	8003dd8 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	0b9b      	lsrs	r3, r3, #14
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00a      	beq.n	8003dd8 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003dca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dd0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d007      	beq.n	8003dee <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69fa      	ldr	r2, [r7, #28]
 8003de4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003de6:	69f9      	ldr	r1, [r7, #28]
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f876 	bl	8003eda <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003dee:	6a3b      	ldr	r3, [r7, #32]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d009      	beq.n	8003e08 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6a3a      	ldr	r2, [r7, #32]
 8003dfa:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003e00:	6a3b      	ldr	r3, [r7, #32]
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d002      	beq.n	8003e16 <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f858 	bl	8003ec6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8003e16:	bf00      	nop
 8003e18:	3730      	adds	r7, #48	@ 0x30
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
 8003e26:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8003e3e:	bf00      	nop
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8003e52:	bf00      	nop
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
 8003e66:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003e7e:	bf00      	nop
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b083      	sub	sp, #12
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
 8003ee2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003ef8:	4b27      	ldr	r3, [pc, #156]	@ (8003f98 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8003efa:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f0a:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f12:	041a      	lsls	r2, r3, #16
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f30:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f38:	061a      	lsls	r2, r3, #24
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	60fb      	str	r3, [r7, #12]
 8003f70:	e005      	b.n	8003f7e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	3304      	adds	r3, #4
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d3f3      	bcc.n	8003f72 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8003f8a:	bf00      	nop
 8003f8c:	bf00      	nop
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr
 8003f98:	4000a400 	.word	0x4000a400

08003f9c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b089      	sub	sp, #36	@ 0x24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
 8003fa8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10a      	bne.n	8003fc8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003fba:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	61fb      	str	r3, [r7, #28]
 8003fc6:	e00a      	b.n	8003fde <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003fd0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8003fd6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003fd8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003fdc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003fe8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003fee:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003ff4:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	4613      	mov	r3, r2
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	4413      	add	r3, r2
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	440b      	add	r3, r1
 8004010:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	69fa      	ldr	r2, [r7, #28]
 8004016:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	3304      	adds	r3, #4
 800401c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	3304      	adds	r3, #4
 8004028:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800402a:	2300      	movs	r3, #0
 800402c:	617b      	str	r3, [r7, #20]
 800402e:	e020      	b.n	8004072 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	3303      	adds	r3, #3
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	4413      	add	r3, r2
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	3302      	adds	r3, #2
 8004040:	6879      	ldr	r1, [r7, #4]
 8004042:	440b      	add	r3, r1
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004048:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	3301      	adds	r3, #1
 800404e:	6879      	ldr	r1, [r7, #4]
 8004050:	440b      	add	r3, r1
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004056:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004058:	6879      	ldr	r1, [r7, #4]
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	440a      	add	r2, r1
 800405e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004060:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	3304      	adds	r3, #4
 800406a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	3304      	adds	r3, #4
 8004070:	617b      	str	r3, [r7, #20]
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	4a06      	ldr	r2, [pc, #24]	@ (8004090 <FDCAN_CopyMessageToRAM+0xf4>)
 8004078:	5cd3      	ldrb	r3, [r2, r3]
 800407a:	461a      	mov	r2, r3
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	4293      	cmp	r3, r2
 8004080:	d3d6      	bcc.n	8004030 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8004082:	bf00      	nop
 8004084:	bf00      	nop
 8004086:	3724      	adds	r7, #36	@ 0x24
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	0800534c 	.word	0x0800534c

08004094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004094:	b480      	push	{r7}
 8004096:	b087      	sub	sp, #28
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800409e:	2300      	movs	r3, #0
 80040a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80040a2:	e15a      	b.n	800435a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	2101      	movs	r1, #1
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	fa01 f303 	lsl.w	r3, r1, r3
 80040b0:	4013      	ands	r3, r2
 80040b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 814c 	beq.w	8004354 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f003 0303 	and.w	r3, r3, #3
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d005      	beq.n	80040d4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d130      	bne.n	8004136 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	2203      	movs	r2, #3
 80040e0:	fa02 f303 	lsl.w	r3, r2, r3
 80040e4:	43db      	mvns	r3, r3
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	4013      	ands	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	68da      	ldr	r2, [r3, #12]
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	005b      	lsls	r3, r3, #1
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800410a:	2201      	movs	r2, #1
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	fa02 f303 	lsl.w	r3, r2, r3
 8004112:	43db      	mvns	r3, r3
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	4013      	ands	r3, r2
 8004118:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	091b      	lsrs	r3, r3, #4
 8004120:	f003 0201 	and.w	r2, r3, #1
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	fa02 f303 	lsl.w	r3, r2, r3
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	4313      	orrs	r3, r2
 800412e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f003 0303 	and.w	r3, r3, #3
 800413e:	2b03      	cmp	r3, #3
 8004140:	d017      	beq.n	8004172 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	2203      	movs	r2, #3
 800414e:	fa02 f303 	lsl.w	r3, r2, r3
 8004152:	43db      	mvns	r3, r3
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	4013      	ands	r3, r2
 8004158:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	689a      	ldr	r2, [r3, #8]
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	fa02 f303 	lsl.w	r3, r2, r3
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d123      	bne.n	80041c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	08da      	lsrs	r2, r3, #3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3208      	adds	r2, #8
 8004186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800418a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	220f      	movs	r2, #15
 8004196:	fa02 f303 	lsl.w	r3, r2, r3
 800419a:	43db      	mvns	r3, r3
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	4013      	ands	r3, r2
 80041a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	691a      	ldr	r2, [r3, #16]
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	fa02 f303 	lsl.w	r3, r2, r3
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	08da      	lsrs	r2, r3, #3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	3208      	adds	r2, #8
 80041c0:	6939      	ldr	r1, [r7, #16]
 80041c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	2203      	movs	r2, #3
 80041d2:	fa02 f303 	lsl.w	r3, r2, r3
 80041d6:	43db      	mvns	r3, r3
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	4013      	ands	r3, r2
 80041dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f003 0203 	and.w	r2, r3, #3
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	fa02 f303 	lsl.w	r3, r2, r3
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004202:	2b00      	cmp	r3, #0
 8004204:	f000 80a6 	beq.w	8004354 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004208:	4b5b      	ldr	r3, [pc, #364]	@ (8004378 <HAL_GPIO_Init+0x2e4>)
 800420a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800420c:	4a5a      	ldr	r2, [pc, #360]	@ (8004378 <HAL_GPIO_Init+0x2e4>)
 800420e:	f043 0301 	orr.w	r3, r3, #1
 8004212:	6613      	str	r3, [r2, #96]	@ 0x60
 8004214:	4b58      	ldr	r3, [pc, #352]	@ (8004378 <HAL_GPIO_Init+0x2e4>)
 8004216:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	60bb      	str	r3, [r7, #8]
 800421e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004220:	4a56      	ldr	r2, [pc, #344]	@ (800437c <HAL_GPIO_Init+0x2e8>)
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	089b      	lsrs	r3, r3, #2
 8004226:	3302      	adds	r3, #2
 8004228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800422c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	f003 0303 	and.w	r3, r3, #3
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	220f      	movs	r2, #15
 8004238:	fa02 f303 	lsl.w	r3, r2, r3
 800423c:	43db      	mvns	r3, r3
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	4013      	ands	r3, r2
 8004242:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800424a:	d01f      	beq.n	800428c <HAL_GPIO_Init+0x1f8>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a4c      	ldr	r2, [pc, #304]	@ (8004380 <HAL_GPIO_Init+0x2ec>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d019      	beq.n	8004288 <HAL_GPIO_Init+0x1f4>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a4b      	ldr	r2, [pc, #300]	@ (8004384 <HAL_GPIO_Init+0x2f0>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d013      	beq.n	8004284 <HAL_GPIO_Init+0x1f0>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a4a      	ldr	r2, [pc, #296]	@ (8004388 <HAL_GPIO_Init+0x2f4>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d00d      	beq.n	8004280 <HAL_GPIO_Init+0x1ec>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a49      	ldr	r2, [pc, #292]	@ (800438c <HAL_GPIO_Init+0x2f8>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d007      	beq.n	800427c <HAL_GPIO_Init+0x1e8>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a48      	ldr	r2, [pc, #288]	@ (8004390 <HAL_GPIO_Init+0x2fc>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d101      	bne.n	8004278 <HAL_GPIO_Init+0x1e4>
 8004274:	2305      	movs	r3, #5
 8004276:	e00a      	b.n	800428e <HAL_GPIO_Init+0x1fa>
 8004278:	2306      	movs	r3, #6
 800427a:	e008      	b.n	800428e <HAL_GPIO_Init+0x1fa>
 800427c:	2304      	movs	r3, #4
 800427e:	e006      	b.n	800428e <HAL_GPIO_Init+0x1fa>
 8004280:	2303      	movs	r3, #3
 8004282:	e004      	b.n	800428e <HAL_GPIO_Init+0x1fa>
 8004284:	2302      	movs	r3, #2
 8004286:	e002      	b.n	800428e <HAL_GPIO_Init+0x1fa>
 8004288:	2301      	movs	r3, #1
 800428a:	e000      	b.n	800428e <HAL_GPIO_Init+0x1fa>
 800428c:	2300      	movs	r3, #0
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	f002 0203 	and.w	r2, r2, #3
 8004294:	0092      	lsls	r2, r2, #2
 8004296:	4093      	lsls	r3, r2
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	4313      	orrs	r3, r2
 800429c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800429e:	4937      	ldr	r1, [pc, #220]	@ (800437c <HAL_GPIO_Init+0x2e8>)
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	089b      	lsrs	r3, r3, #2
 80042a4:	3302      	adds	r3, #2
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042ac:	4b39      	ldr	r3, [pc, #228]	@ (8004394 <HAL_GPIO_Init+0x300>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	43db      	mvns	r3, r3
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	4013      	ands	r3, r2
 80042ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d003      	beq.n	80042d0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042d0:	4a30      	ldr	r2, [pc, #192]	@ (8004394 <HAL_GPIO_Init+0x300>)
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80042d6:	4b2f      	ldr	r3, [pc, #188]	@ (8004394 <HAL_GPIO_Init+0x300>)
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	43db      	mvns	r3, r3
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	4013      	ands	r3, r2
 80042e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80042fa:	4a26      	ldr	r2, [pc, #152]	@ (8004394 <HAL_GPIO_Init+0x300>)
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004300:	4b24      	ldr	r3, [pc, #144]	@ (8004394 <HAL_GPIO_Init+0x300>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	43db      	mvns	r3, r3
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	4013      	ands	r3, r2
 800430e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d003      	beq.n	8004324 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	4313      	orrs	r3, r2
 8004322:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004324:	4a1b      	ldr	r2, [pc, #108]	@ (8004394 <HAL_GPIO_Init+0x300>)
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800432a:	4b1a      	ldr	r3, [pc, #104]	@ (8004394 <HAL_GPIO_Init+0x300>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	43db      	mvns	r3, r3
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4013      	ands	r3, r2
 8004338:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4313      	orrs	r3, r2
 800434c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800434e:	4a11      	ldr	r2, [pc, #68]	@ (8004394 <HAL_GPIO_Init+0x300>)
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	3301      	adds	r3, #1
 8004358:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	fa22 f303 	lsr.w	r3, r2, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	f47f ae9d 	bne.w	80040a4 <HAL_GPIO_Init+0x10>
  }
}
 800436a:	bf00      	nop
 800436c:	bf00      	nop
 800436e:	371c      	adds	r7, #28
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	40021000 	.word	0x40021000
 800437c:	40010000 	.word	0x40010000
 8004380:	48000400 	.word	0x48000400
 8004384:	48000800 	.word	0x48000800
 8004388:	48000c00 	.word	0x48000c00
 800438c:	48001000 	.word	0x48001000
 8004390:	48001400 	.word	0x48001400
 8004394:	40010400 	.word	0x40010400

08004398 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d141      	bne.n	800442a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80043a6:	4b4b      	ldr	r3, [pc, #300]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80043ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043b2:	d131      	bne.n	8004418 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043b4:	4b47      	ldr	r3, [pc, #284]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043ba:	4a46      	ldr	r2, [pc, #280]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043c4:	4b43      	ldr	r3, [pc, #268]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80043cc:	4a41      	ldr	r2, [pc, #260]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043d4:	4b40      	ldr	r3, [pc, #256]	@ (80044d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2232      	movs	r2, #50	@ 0x32
 80043da:	fb02 f303 	mul.w	r3, r2, r3
 80043de:	4a3f      	ldr	r2, [pc, #252]	@ (80044dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80043e0:	fba2 2303 	umull	r2, r3, r2, r3
 80043e4:	0c9b      	lsrs	r3, r3, #18
 80043e6:	3301      	adds	r3, #1
 80043e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043ea:	e002      	b.n	80043f2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	3b01      	subs	r3, #1
 80043f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043f2:	4b38      	ldr	r3, [pc, #224]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043fe:	d102      	bne.n	8004406 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1f2      	bne.n	80043ec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004406:	4b33      	ldr	r3, [pc, #204]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800440e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004412:	d158      	bne.n	80044c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e057      	b.n	80044c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004418:	4b2e      	ldr	r3, [pc, #184]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800441a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800441e:	4a2d      	ldr	r2, [pc, #180]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004420:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004424:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004428:	e04d      	b.n	80044c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004430:	d141      	bne.n	80044b6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004432:	4b28      	ldr	r3, [pc, #160]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800443a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800443e:	d131      	bne.n	80044a4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004440:	4b24      	ldr	r3, [pc, #144]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004442:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004446:	4a23      	ldr	r2, [pc, #140]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004448:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800444c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004450:	4b20      	ldr	r3, [pc, #128]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004458:	4a1e      	ldr	r2, [pc, #120]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800445a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800445e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004460:	4b1d      	ldr	r3, [pc, #116]	@ (80044d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2232      	movs	r2, #50	@ 0x32
 8004466:	fb02 f303 	mul.w	r3, r2, r3
 800446a:	4a1c      	ldr	r2, [pc, #112]	@ (80044dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800446c:	fba2 2303 	umull	r2, r3, r2, r3
 8004470:	0c9b      	lsrs	r3, r3, #18
 8004472:	3301      	adds	r3, #1
 8004474:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004476:	e002      	b.n	800447e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	3b01      	subs	r3, #1
 800447c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800447e:	4b15      	ldr	r3, [pc, #84]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004486:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800448a:	d102      	bne.n	8004492 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1f2      	bne.n	8004478 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004492:	4b10      	ldr	r3, [pc, #64]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800449a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800449e:	d112      	bne.n	80044c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e011      	b.n	80044c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80044a4:	4b0b      	ldr	r3, [pc, #44]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044aa:	4a0a      	ldr	r2, [pc, #40]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80044b4:	e007      	b.n	80044c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044b6:	4b07      	ldr	r3, [pc, #28]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80044be:	4a05      	ldr	r2, [pc, #20]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80044c4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3714      	adds	r7, #20
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	40007000 	.word	0x40007000
 80044d8:	20000000 	.word	0x20000000
 80044dc:	431bde83 	.word	0x431bde83

080044e0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80044e4:	4b05      	ldr	r3, [pc, #20]	@ (80044fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	4a04      	ldr	r2, [pc, #16]	@ (80044fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80044ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044ee:	6093      	str	r3, [r2, #8]
}
 80044f0:	bf00      	nop
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	40007000 	.word	0x40007000

08004500 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b088      	sub	sp, #32
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e2fe      	b.n	8004b10 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d075      	beq.n	800460a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800451e:	4b97      	ldr	r3, [pc, #604]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 030c 	and.w	r3, r3, #12
 8004526:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004528:	4b94      	ldr	r3, [pc, #592]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f003 0303 	and.w	r3, r3, #3
 8004530:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	2b0c      	cmp	r3, #12
 8004536:	d102      	bne.n	800453e <HAL_RCC_OscConfig+0x3e>
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	2b03      	cmp	r3, #3
 800453c:	d002      	beq.n	8004544 <HAL_RCC_OscConfig+0x44>
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	2b08      	cmp	r3, #8
 8004542:	d10b      	bne.n	800455c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004544:	4b8d      	ldr	r3, [pc, #564]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d05b      	beq.n	8004608 <HAL_RCC_OscConfig+0x108>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d157      	bne.n	8004608 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e2d9      	b.n	8004b10 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004564:	d106      	bne.n	8004574 <HAL_RCC_OscConfig+0x74>
 8004566:	4b85      	ldr	r3, [pc, #532]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a84      	ldr	r2, [pc, #528]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 800456c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004570:	6013      	str	r3, [r2, #0]
 8004572:	e01d      	b.n	80045b0 <HAL_RCC_OscConfig+0xb0>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800457c:	d10c      	bne.n	8004598 <HAL_RCC_OscConfig+0x98>
 800457e:	4b7f      	ldr	r3, [pc, #508]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a7e      	ldr	r2, [pc, #504]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 8004584:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004588:	6013      	str	r3, [r2, #0]
 800458a:	4b7c      	ldr	r3, [pc, #496]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a7b      	ldr	r2, [pc, #492]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 8004590:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	e00b      	b.n	80045b0 <HAL_RCC_OscConfig+0xb0>
 8004598:	4b78      	ldr	r3, [pc, #480]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a77      	ldr	r2, [pc, #476]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 800459e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045a2:	6013      	str	r3, [r2, #0]
 80045a4:	4b75      	ldr	r3, [pc, #468]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a74      	ldr	r2, [pc, #464]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 80045aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d013      	beq.n	80045e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b8:	f7fc ffa0 	bl	80014fc <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045be:	e008      	b.n	80045d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045c0:	f7fc ff9c 	bl	80014fc <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b64      	cmp	r3, #100	@ 0x64
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e29e      	b.n	8004b10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045d2:	4b6a      	ldr	r3, [pc, #424]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d0f0      	beq.n	80045c0 <HAL_RCC_OscConfig+0xc0>
 80045de:	e014      	b.n	800460a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e0:	f7fc ff8c 	bl	80014fc <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045e6:	e008      	b.n	80045fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045e8:	f7fc ff88 	bl	80014fc <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b64      	cmp	r3, #100	@ 0x64
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e28a      	b.n	8004b10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045fa:	4b60      	ldr	r3, [pc, #384]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1f0      	bne.n	80045e8 <HAL_RCC_OscConfig+0xe8>
 8004606:	e000      	b.n	800460a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d075      	beq.n	8004702 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004616:	4b59      	ldr	r3, [pc, #356]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 030c 	and.w	r3, r3, #12
 800461e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004620:	4b56      	ldr	r3, [pc, #344]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	f003 0303 	and.w	r3, r3, #3
 8004628:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	2b0c      	cmp	r3, #12
 800462e:	d102      	bne.n	8004636 <HAL_RCC_OscConfig+0x136>
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	2b02      	cmp	r3, #2
 8004634:	d002      	beq.n	800463c <HAL_RCC_OscConfig+0x13c>
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	2b04      	cmp	r3, #4
 800463a:	d11f      	bne.n	800467c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800463c:	4b4f      	ldr	r3, [pc, #316]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004644:	2b00      	cmp	r3, #0
 8004646:	d005      	beq.n	8004654 <HAL_RCC_OscConfig+0x154>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e25d      	b.n	8004b10 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004654:	4b49      	ldr	r3, [pc, #292]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	061b      	lsls	r3, r3, #24
 8004662:	4946      	ldr	r1, [pc, #280]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 8004664:	4313      	orrs	r3, r2
 8004666:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004668:	4b45      	ldr	r3, [pc, #276]	@ (8004780 <HAL_RCC_OscConfig+0x280>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4618      	mov	r0, r3
 800466e:	f7fc fef9 	bl	8001464 <HAL_InitTick>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d043      	beq.n	8004700 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e249      	b.n	8004b10 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d023      	beq.n	80046cc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004684:	4b3d      	ldr	r3, [pc, #244]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a3c      	ldr	r2, [pc, #240]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 800468a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800468e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004690:	f7fc ff34 	bl	80014fc <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004696:	e008      	b.n	80046aa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004698:	f7fc ff30 	bl	80014fc <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e232      	b.n	8004b10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046aa:	4b34      	ldr	r3, [pc, #208]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d0f0      	beq.n	8004698 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b6:	4b31      	ldr	r3, [pc, #196]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	061b      	lsls	r3, r3, #24
 80046c4:	492d      	ldr	r1, [pc, #180]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	604b      	str	r3, [r1, #4]
 80046ca:	e01a      	b.n	8004702 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046cc:	4b2b      	ldr	r3, [pc, #172]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a2a      	ldr	r2, [pc, #168]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 80046d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d8:	f7fc ff10 	bl	80014fc <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046e0:	f7fc ff0c 	bl	80014fc <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e20e      	b.n	8004b10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046f2:	4b22      	ldr	r3, [pc, #136]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1f0      	bne.n	80046e0 <HAL_RCC_OscConfig+0x1e0>
 80046fe:	e000      	b.n	8004702 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004700:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0308 	and.w	r3, r3, #8
 800470a:	2b00      	cmp	r3, #0
 800470c:	d041      	beq.n	8004792 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d01c      	beq.n	8004750 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004716:	4b19      	ldr	r3, [pc, #100]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 8004718:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800471c:	4a17      	ldr	r2, [pc, #92]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 800471e:	f043 0301 	orr.w	r3, r3, #1
 8004722:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004726:	f7fc fee9 	bl	80014fc <HAL_GetTick>
 800472a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800472c:	e008      	b.n	8004740 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800472e:	f7fc fee5 	bl	80014fc <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b02      	cmp	r3, #2
 800473a:	d901      	bls.n	8004740 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e1e7      	b.n	8004b10 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004740:	4b0e      	ldr	r3, [pc, #56]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 8004742:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d0ef      	beq.n	800472e <HAL_RCC_OscConfig+0x22e>
 800474e:	e020      	b.n	8004792 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004750:	4b0a      	ldr	r3, [pc, #40]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 8004752:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004756:	4a09      	ldr	r2, [pc, #36]	@ (800477c <HAL_RCC_OscConfig+0x27c>)
 8004758:	f023 0301 	bic.w	r3, r3, #1
 800475c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004760:	f7fc fecc 	bl	80014fc <HAL_GetTick>
 8004764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004766:	e00d      	b.n	8004784 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004768:	f7fc fec8 	bl	80014fc <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b02      	cmp	r3, #2
 8004774:	d906      	bls.n	8004784 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e1ca      	b.n	8004b10 <HAL_RCC_OscConfig+0x610>
 800477a:	bf00      	nop
 800477c:	40021000 	.word	0x40021000
 8004780:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004784:	4b8c      	ldr	r3, [pc, #560]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 8004786:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1ea      	bne.n	8004768 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0304 	and.w	r3, r3, #4
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 80a6 	beq.w	80048ec <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047a0:	2300      	movs	r3, #0
 80047a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80047a4:	4b84      	ldr	r3, [pc, #528]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 80047a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <HAL_RCC_OscConfig+0x2b4>
 80047b0:	2301      	movs	r3, #1
 80047b2:	e000      	b.n	80047b6 <HAL_RCC_OscConfig+0x2b6>
 80047b4:	2300      	movs	r3, #0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00d      	beq.n	80047d6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ba:	4b7f      	ldr	r3, [pc, #508]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 80047bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047be:	4a7e      	ldr	r2, [pc, #504]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 80047c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80047c6:	4b7c      	ldr	r3, [pc, #496]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 80047c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80047d2:	2301      	movs	r3, #1
 80047d4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047d6:	4b79      	ldr	r3, [pc, #484]	@ (80049bc <HAL_RCC_OscConfig+0x4bc>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d118      	bne.n	8004814 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047e2:	4b76      	ldr	r3, [pc, #472]	@ (80049bc <HAL_RCC_OscConfig+0x4bc>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a75      	ldr	r2, [pc, #468]	@ (80049bc <HAL_RCC_OscConfig+0x4bc>)
 80047e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047ee:	f7fc fe85 	bl	80014fc <HAL_GetTick>
 80047f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047f4:	e008      	b.n	8004808 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047f6:	f7fc fe81 	bl	80014fc <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b02      	cmp	r3, #2
 8004802:	d901      	bls.n	8004808 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e183      	b.n	8004b10 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004808:	4b6c      	ldr	r3, [pc, #432]	@ (80049bc <HAL_RCC_OscConfig+0x4bc>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004810:	2b00      	cmp	r3, #0
 8004812:	d0f0      	beq.n	80047f6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d108      	bne.n	800482e <HAL_RCC_OscConfig+0x32e>
 800481c:	4b66      	ldr	r3, [pc, #408]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 800481e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004822:	4a65      	ldr	r2, [pc, #404]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 8004824:	f043 0301 	orr.w	r3, r3, #1
 8004828:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800482c:	e024      	b.n	8004878 <HAL_RCC_OscConfig+0x378>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	2b05      	cmp	r3, #5
 8004834:	d110      	bne.n	8004858 <HAL_RCC_OscConfig+0x358>
 8004836:	4b60      	ldr	r3, [pc, #384]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 8004838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800483c:	4a5e      	ldr	r2, [pc, #376]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 800483e:	f043 0304 	orr.w	r3, r3, #4
 8004842:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004846:	4b5c      	ldr	r3, [pc, #368]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 8004848:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800484c:	4a5a      	ldr	r2, [pc, #360]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 800484e:	f043 0301 	orr.w	r3, r3, #1
 8004852:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004856:	e00f      	b.n	8004878 <HAL_RCC_OscConfig+0x378>
 8004858:	4b57      	ldr	r3, [pc, #348]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 800485a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800485e:	4a56      	ldr	r2, [pc, #344]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 8004860:	f023 0301 	bic.w	r3, r3, #1
 8004864:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004868:	4b53      	ldr	r3, [pc, #332]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 800486a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800486e:	4a52      	ldr	r2, [pc, #328]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 8004870:	f023 0304 	bic.w	r3, r3, #4
 8004874:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d016      	beq.n	80048ae <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004880:	f7fc fe3c 	bl	80014fc <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004886:	e00a      	b.n	800489e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004888:	f7fc fe38 	bl	80014fc <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004896:	4293      	cmp	r3, r2
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e138      	b.n	8004b10 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800489e:	4b46      	ldr	r3, [pc, #280]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 80048a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d0ed      	beq.n	8004888 <HAL_RCC_OscConfig+0x388>
 80048ac:	e015      	b.n	80048da <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ae:	f7fc fe25 	bl	80014fc <HAL_GetTick>
 80048b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048b4:	e00a      	b.n	80048cc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048b6:	f7fc fe21 	bl	80014fc <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e121      	b.n	8004b10 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048cc:	4b3a      	ldr	r3, [pc, #232]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 80048ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1ed      	bne.n	80048b6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048da:	7ffb      	ldrb	r3, [r7, #31]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d105      	bne.n	80048ec <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048e0:	4b35      	ldr	r3, [pc, #212]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 80048e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048e4:	4a34      	ldr	r2, [pc, #208]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 80048e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048ea:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0320 	and.w	r3, r3, #32
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d03c      	beq.n	8004972 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d01c      	beq.n	800493a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004900:	4b2d      	ldr	r3, [pc, #180]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 8004902:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004906:	4a2c      	ldr	r2, [pc, #176]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 8004908:	f043 0301 	orr.w	r3, r3, #1
 800490c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004910:	f7fc fdf4 	bl	80014fc <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004918:	f7fc fdf0 	bl	80014fc <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e0f2      	b.n	8004b10 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800492a:	4b23      	ldr	r3, [pc, #140]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 800492c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0ef      	beq.n	8004918 <HAL_RCC_OscConfig+0x418>
 8004938:	e01b      	b.n	8004972 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800493a:	4b1f      	ldr	r3, [pc, #124]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 800493c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004940:	4a1d      	ldr	r2, [pc, #116]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 8004942:	f023 0301 	bic.w	r3, r3, #1
 8004946:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800494a:	f7fc fdd7 	bl	80014fc <HAL_GetTick>
 800494e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004950:	e008      	b.n	8004964 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004952:	f7fc fdd3 	bl	80014fc <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d901      	bls.n	8004964 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e0d5      	b.n	8004b10 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004964:	4b14      	ldr	r3, [pc, #80]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 8004966:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1ef      	bne.n	8004952 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	2b00      	cmp	r3, #0
 8004978:	f000 80c9 	beq.w	8004b0e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800497c:	4b0e      	ldr	r3, [pc, #56]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f003 030c 	and.w	r3, r3, #12
 8004984:	2b0c      	cmp	r3, #12
 8004986:	f000 8083 	beq.w	8004a90 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	2b02      	cmp	r3, #2
 8004990:	d15e      	bne.n	8004a50 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004992:	4b09      	ldr	r3, [pc, #36]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a08      	ldr	r2, [pc, #32]	@ (80049b8 <HAL_RCC_OscConfig+0x4b8>)
 8004998:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800499c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499e:	f7fc fdad 	bl	80014fc <HAL_GetTick>
 80049a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049a4:	e00c      	b.n	80049c0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049a6:	f7fc fda9 	bl	80014fc <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d905      	bls.n	80049c0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e0ab      	b.n	8004b10 <HAL_RCC_OscConfig+0x610>
 80049b8:	40021000 	.word	0x40021000
 80049bc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049c0:	4b55      	ldr	r3, [pc, #340]	@ (8004b18 <HAL_RCC_OscConfig+0x618>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1ec      	bne.n	80049a6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049cc:	4b52      	ldr	r3, [pc, #328]	@ (8004b18 <HAL_RCC_OscConfig+0x618>)
 80049ce:	68da      	ldr	r2, [r3, #12]
 80049d0:	4b52      	ldr	r3, [pc, #328]	@ (8004b1c <HAL_RCC_OscConfig+0x61c>)
 80049d2:	4013      	ands	r3, r2
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	6a11      	ldr	r1, [r2, #32]
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80049dc:	3a01      	subs	r2, #1
 80049de:	0112      	lsls	r2, r2, #4
 80049e0:	4311      	orrs	r1, r2
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80049e6:	0212      	lsls	r2, r2, #8
 80049e8:	4311      	orrs	r1, r2
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80049ee:	0852      	lsrs	r2, r2, #1
 80049f0:	3a01      	subs	r2, #1
 80049f2:	0552      	lsls	r2, r2, #21
 80049f4:	4311      	orrs	r1, r2
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80049fa:	0852      	lsrs	r2, r2, #1
 80049fc:	3a01      	subs	r2, #1
 80049fe:	0652      	lsls	r2, r2, #25
 8004a00:	4311      	orrs	r1, r2
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004a06:	06d2      	lsls	r2, r2, #27
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	4943      	ldr	r1, [pc, #268]	@ (8004b18 <HAL_RCC_OscConfig+0x618>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a10:	4b41      	ldr	r3, [pc, #260]	@ (8004b18 <HAL_RCC_OscConfig+0x618>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a40      	ldr	r2, [pc, #256]	@ (8004b18 <HAL_RCC_OscConfig+0x618>)
 8004a16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a1a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a1c:	4b3e      	ldr	r3, [pc, #248]	@ (8004b18 <HAL_RCC_OscConfig+0x618>)
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	4a3d      	ldr	r2, [pc, #244]	@ (8004b18 <HAL_RCC_OscConfig+0x618>)
 8004a22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a26:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a28:	f7fc fd68 	bl	80014fc <HAL_GetTick>
 8004a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a2e:	e008      	b.n	8004a42 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a30:	f7fc fd64 	bl	80014fc <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e066      	b.n	8004b10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a42:	4b35      	ldr	r3, [pc, #212]	@ (8004b18 <HAL_RCC_OscConfig+0x618>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0f0      	beq.n	8004a30 <HAL_RCC_OscConfig+0x530>
 8004a4e:	e05e      	b.n	8004b0e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a50:	4b31      	ldr	r3, [pc, #196]	@ (8004b18 <HAL_RCC_OscConfig+0x618>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a30      	ldr	r2, [pc, #192]	@ (8004b18 <HAL_RCC_OscConfig+0x618>)
 8004a56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a5c:	f7fc fd4e 	bl	80014fc <HAL_GetTick>
 8004a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a62:	e008      	b.n	8004a76 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a64:	f7fc fd4a 	bl	80014fc <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e04c      	b.n	8004b10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a76:	4b28      	ldr	r3, [pc, #160]	@ (8004b18 <HAL_RCC_OscConfig+0x618>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1f0      	bne.n	8004a64 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004a82:	4b25      	ldr	r3, [pc, #148]	@ (8004b18 <HAL_RCC_OscConfig+0x618>)
 8004a84:	68da      	ldr	r2, [r3, #12]
 8004a86:	4924      	ldr	r1, [pc, #144]	@ (8004b18 <HAL_RCC_OscConfig+0x618>)
 8004a88:	4b25      	ldr	r3, [pc, #148]	@ (8004b20 <HAL_RCC_OscConfig+0x620>)
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	60cb      	str	r3, [r1, #12]
 8004a8e:	e03e      	b.n	8004b0e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d101      	bne.n	8004a9c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e039      	b.n	8004b10 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004a9c:	4b1e      	ldr	r3, [pc, #120]	@ (8004b18 <HAL_RCC_OscConfig+0x618>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f003 0203 	and.w	r2, r3, #3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d12c      	bne.n	8004b0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aba:	3b01      	subs	r3, #1
 8004abc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d123      	bne.n	8004b0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004acc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d11b      	bne.n	8004b0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004adc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d113      	bne.n	8004b0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aec:	085b      	lsrs	r3, r3, #1
 8004aee:	3b01      	subs	r3, #1
 8004af0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d109      	bne.n	8004b0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b00:	085b      	lsrs	r3, r3, #1
 8004b02:	3b01      	subs	r3, #1
 8004b04:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d001      	beq.n	8004b0e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e000      	b.n	8004b10 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3720      	adds	r7, #32
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	40021000 	.word	0x40021000
 8004b1c:	019f800c 	.word	0x019f800c
 8004b20:	feeefffc 	.word	0xfeeefffc

08004b24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d101      	bne.n	8004b3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e11e      	b.n	8004d7a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b3c:	4b91      	ldr	r3, [pc, #580]	@ (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 030f 	and.w	r3, r3, #15
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d910      	bls.n	8004b6c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b4a:	4b8e      	ldr	r3, [pc, #568]	@ (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f023 020f 	bic.w	r2, r3, #15
 8004b52:	498c      	ldr	r1, [pc, #560]	@ (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b5a:	4b8a      	ldr	r3, [pc, #552]	@ (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 030f 	and.w	r3, r3, #15
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d001      	beq.n	8004b6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e106      	b.n	8004d7a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d073      	beq.n	8004c60 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	2b03      	cmp	r3, #3
 8004b7e:	d129      	bne.n	8004bd4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b80:	4b81      	ldr	r3, [pc, #516]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e0f4      	b.n	8004d7a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004b90:	f000 f966 	bl	8004e60 <RCC_GetSysClockFreqFromPLLSource>
 8004b94:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	4a7c      	ldr	r2, [pc, #496]	@ (8004d8c <HAL_RCC_ClockConfig+0x268>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d93f      	bls.n	8004c1e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004b9e:	4b7a      	ldr	r3, [pc, #488]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d009      	beq.n	8004bbe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d033      	beq.n	8004c1e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d12f      	bne.n	8004c1e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004bbe:	4b72      	ldr	r3, [pc, #456]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bc6:	4a70      	ldr	r2, [pc, #448]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004bc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bcc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004bce:	2380      	movs	r3, #128	@ 0x80
 8004bd0:	617b      	str	r3, [r7, #20]
 8004bd2:	e024      	b.n	8004c1e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d107      	bne.n	8004bec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bdc:	4b6a      	ldr	r3, [pc, #424]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d109      	bne.n	8004bfc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e0c6      	b.n	8004d7a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bec:	4b66      	ldr	r3, [pc, #408]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e0be      	b.n	8004d7a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004bfc:	f000 f8ce 	bl	8004d9c <HAL_RCC_GetSysClockFreq>
 8004c00:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	4a61      	ldr	r2, [pc, #388]	@ (8004d8c <HAL_RCC_ClockConfig+0x268>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d909      	bls.n	8004c1e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c0a:	4b5f      	ldr	r3, [pc, #380]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c12:	4a5d      	ldr	r2, [pc, #372]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004c14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c18:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004c1a:	2380      	movs	r3, #128	@ 0x80
 8004c1c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c1e:	4b5a      	ldr	r3, [pc, #360]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f023 0203 	bic.w	r2, r3, #3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	4957      	ldr	r1, [pc, #348]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c30:	f7fc fc64 	bl	80014fc <HAL_GetTick>
 8004c34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c36:	e00a      	b.n	8004c4e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c38:	f7fc fc60 	bl	80014fc <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e095      	b.n	8004d7a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c4e:	4b4e      	ldr	r3, [pc, #312]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f003 020c 	and.w	r2, r3, #12
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d1eb      	bne.n	8004c38 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d023      	beq.n	8004cb4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d005      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c78:	4b43      	ldr	r3, [pc, #268]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	4a42      	ldr	r2, [pc, #264]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004c7e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004c82:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0308 	and.w	r3, r3, #8
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d007      	beq.n	8004ca0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004c90:	4b3d      	ldr	r3, [pc, #244]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004c98:	4a3b      	ldr	r2, [pc, #236]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004c9a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004c9e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ca0:	4b39      	ldr	r3, [pc, #228]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	4936      	ldr	r1, [pc, #216]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	608b      	str	r3, [r1, #8]
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	2b80      	cmp	r3, #128	@ 0x80
 8004cb8:	d105      	bne.n	8004cc6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004cba:	4b33      	ldr	r3, [pc, #204]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	4a32      	ldr	r2, [pc, #200]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004cc0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cc4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cc6:	4b2f      	ldr	r3, [pc, #188]	@ (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 030f 	and.w	r3, r3, #15
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d21d      	bcs.n	8004d10 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cd4:	4b2b      	ldr	r3, [pc, #172]	@ (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f023 020f 	bic.w	r2, r3, #15
 8004cdc:	4929      	ldr	r1, [pc, #164]	@ (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004ce4:	f7fc fc0a 	bl	80014fc <HAL_GetTick>
 8004ce8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cea:	e00a      	b.n	8004d02 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cec:	f7fc fc06 	bl	80014fc <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e03b      	b.n	8004d7a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d02:	4b20      	ldr	r3, [pc, #128]	@ (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 030f 	and.w	r3, r3, #15
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d1ed      	bne.n	8004cec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0304 	and.w	r3, r3, #4
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d008      	beq.n	8004d2e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	4917      	ldr	r1, [pc, #92]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0308 	and.w	r3, r3, #8
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d009      	beq.n	8004d4e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d3a:	4b13      	ldr	r3, [pc, #76]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	490f      	ldr	r1, [pc, #60]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d4e:	f000 f825 	bl	8004d9c <HAL_RCC_GetSysClockFreq>
 8004d52:	4602      	mov	r2, r0
 8004d54:	4b0c      	ldr	r3, [pc, #48]	@ (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	091b      	lsrs	r3, r3, #4
 8004d5a:	f003 030f 	and.w	r3, r3, #15
 8004d5e:	490c      	ldr	r1, [pc, #48]	@ (8004d90 <HAL_RCC_ClockConfig+0x26c>)
 8004d60:	5ccb      	ldrb	r3, [r1, r3]
 8004d62:	f003 031f 	and.w	r3, r3, #31
 8004d66:	fa22 f303 	lsr.w	r3, r2, r3
 8004d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8004d94 <HAL_RCC_ClockConfig+0x270>)
 8004d6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8004d98 <HAL_RCC_ClockConfig+0x274>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7fc fb76 	bl	8001464 <HAL_InitTick>
 8004d78:	4603      	mov	r3, r0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3718      	adds	r7, #24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	40022000 	.word	0x40022000
 8004d88:	40021000 	.word	0x40021000
 8004d8c:	04c4b400 	.word	0x04c4b400
 8004d90:	0800533c 	.word	0x0800533c
 8004d94:	20000000 	.word	0x20000000
 8004d98:	20000004 	.word	0x20000004

08004d9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b087      	sub	sp, #28
 8004da0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004da2:	4b2c      	ldr	r3, [pc, #176]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f003 030c 	and.w	r3, r3, #12
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	d102      	bne.n	8004db4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004dae:	4b2a      	ldr	r3, [pc, #168]	@ (8004e58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004db0:	613b      	str	r3, [r7, #16]
 8004db2:	e047      	b.n	8004e44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004db4:	4b27      	ldr	r3, [pc, #156]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f003 030c 	and.w	r3, r3, #12
 8004dbc:	2b08      	cmp	r3, #8
 8004dbe:	d102      	bne.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004dc0:	4b26      	ldr	r3, [pc, #152]	@ (8004e5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004dc2:	613b      	str	r3, [r7, #16]
 8004dc4:	e03e      	b.n	8004e44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004dc6:	4b23      	ldr	r3, [pc, #140]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f003 030c 	and.w	r3, r3, #12
 8004dce:	2b0c      	cmp	r3, #12
 8004dd0:	d136      	bne.n	8004e40 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004dd2:	4b20      	ldr	r3, [pc, #128]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	f003 0303 	and.w	r3, r3, #3
 8004dda:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	091b      	lsrs	r3, r3, #4
 8004de2:	f003 030f 	and.w	r3, r3, #15
 8004de6:	3301      	adds	r3, #1
 8004de8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2b03      	cmp	r3, #3
 8004dee:	d10c      	bne.n	8004e0a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004df0:	4a1a      	ldr	r2, [pc, #104]	@ (8004e5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df8:	4a16      	ldr	r2, [pc, #88]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dfa:	68d2      	ldr	r2, [r2, #12]
 8004dfc:	0a12      	lsrs	r2, r2, #8
 8004dfe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e02:	fb02 f303 	mul.w	r3, r2, r3
 8004e06:	617b      	str	r3, [r7, #20]
      break;
 8004e08:	e00c      	b.n	8004e24 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e0a:	4a13      	ldr	r2, [pc, #76]	@ (8004e58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e12:	4a10      	ldr	r2, [pc, #64]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e14:	68d2      	ldr	r2, [r2, #12]
 8004e16:	0a12      	lsrs	r2, r2, #8
 8004e18:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e1c:	fb02 f303 	mul.w	r3, r2, r3
 8004e20:	617b      	str	r3, [r7, #20]
      break;
 8004e22:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e24:	4b0b      	ldr	r3, [pc, #44]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	0e5b      	lsrs	r3, r3, #25
 8004e2a:	f003 0303 	and.w	r3, r3, #3
 8004e2e:	3301      	adds	r3, #1
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e3c:	613b      	str	r3, [r7, #16]
 8004e3e:	e001      	b.n	8004e44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004e40:	2300      	movs	r3, #0
 8004e42:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004e44:	693b      	ldr	r3, [r7, #16]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	371c      	adds	r7, #28
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	40021000 	.word	0x40021000
 8004e58:	00f42400 	.word	0x00f42400
 8004e5c:	007a1200 	.word	0x007a1200

08004e60 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b087      	sub	sp, #28
 8004e64:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e66:	4b1e      	ldr	r3, [pc, #120]	@ (8004ee0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	f003 0303 	and.w	r3, r3, #3
 8004e6e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e70:	4b1b      	ldr	r3, [pc, #108]	@ (8004ee0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	091b      	lsrs	r3, r3, #4
 8004e76:	f003 030f 	and.w	r3, r3, #15
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	2b03      	cmp	r3, #3
 8004e82:	d10c      	bne.n	8004e9e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e84:	4a17      	ldr	r2, [pc, #92]	@ (8004ee4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e8c:	4a14      	ldr	r2, [pc, #80]	@ (8004ee0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e8e:	68d2      	ldr	r2, [r2, #12]
 8004e90:	0a12      	lsrs	r2, r2, #8
 8004e92:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e96:	fb02 f303 	mul.w	r3, r2, r3
 8004e9a:	617b      	str	r3, [r7, #20]
    break;
 8004e9c:	e00c      	b.n	8004eb8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e9e:	4a12      	ldr	r2, [pc, #72]	@ (8004ee8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea6:	4a0e      	ldr	r2, [pc, #56]	@ (8004ee0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ea8:	68d2      	ldr	r2, [r2, #12]
 8004eaa:	0a12      	lsrs	r2, r2, #8
 8004eac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004eb0:	fb02 f303 	mul.w	r3, r2, r3
 8004eb4:	617b      	str	r3, [r7, #20]
    break;
 8004eb6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004eb8:	4b09      	ldr	r3, [pc, #36]	@ (8004ee0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	0e5b      	lsrs	r3, r3, #25
 8004ebe:	f003 0303 	and.w	r3, r3, #3
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004ed2:	687b      	ldr	r3, [r7, #4]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	371c      	adds	r7, #28
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	40021000 	.word	0x40021000
 8004ee4:	007a1200 	.word	0x007a1200
 8004ee8:	00f42400 	.word	0x00f42400

08004eec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b086      	sub	sp, #24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ef8:	2300      	movs	r3, #0
 8004efa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f000 8098 	beq.w	800503a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f0e:	4b43      	ldr	r3, [pc, #268]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10d      	bne.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f1a:	4b40      	ldr	r3, [pc, #256]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f1e:	4a3f      	ldr	r2, [pc, #252]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f24:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f26:	4b3d      	ldr	r3, [pc, #244]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f2e:	60bb      	str	r3, [r7, #8]
 8004f30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f32:	2301      	movs	r3, #1
 8004f34:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f36:	4b3a      	ldr	r3, [pc, #232]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a39      	ldr	r2, [pc, #228]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004f3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f40:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f42:	f7fc fadb 	bl	80014fc <HAL_GetTick>
 8004f46:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f48:	e009      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f4a:	f7fc fad7 	bl	80014fc <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d902      	bls.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	74fb      	strb	r3, [r7, #19]
        break;
 8004f5c:	e005      	b.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f5e:	4b30      	ldr	r3, [pc, #192]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0ef      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004f6a:	7cfb      	ldrb	r3, [r7, #19]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d159      	bne.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f70:	4b2a      	ldr	r3, [pc, #168]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f7a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d01e      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d019      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f8c:	4b23      	ldr	r3, [pc, #140]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f96:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f98:	4b20      	ldr	r3, [pc, #128]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f9e:	4a1f      	ldr	r2, [pc, #124]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fa4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fa8:	4b1c      	ldr	r3, [pc, #112]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fae:	4a1b      	ldr	r2, [pc, #108]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004fb8:	4a18      	ldr	r2, [pc, #96]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d016      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fca:	f7fc fa97 	bl	80014fc <HAL_GetTick>
 8004fce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fd0:	e00b      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fd2:	f7fc fa93 	bl	80014fc <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d902      	bls.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	74fb      	strb	r3, [r7, #19]
            break;
 8004fe8:	e006      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fea:	4b0c      	ldr	r3, [pc, #48]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d0ec      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004ff8:	7cfb      	ldrb	r3, [r7, #19]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10b      	bne.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ffe:	4b07      	ldr	r3, [pc, #28]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005004:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500c:	4903      	ldr	r1, [pc, #12]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800500e:	4313      	orrs	r3, r2
 8005010:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005014:	e008      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005016:	7cfb      	ldrb	r3, [r7, #19]
 8005018:	74bb      	strb	r3, [r7, #18]
 800501a:	e005      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800501c:	40021000 	.word	0x40021000
 8005020:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005024:	7cfb      	ldrb	r3, [r7, #19]
 8005026:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005028:	7c7b      	ldrb	r3, [r7, #17]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d105      	bne.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800502e:	4ba6      	ldr	r3, [pc, #664]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005032:	4aa5      	ldr	r2, [pc, #660]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005034:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005038:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00a      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005046:	4ba0      	ldr	r3, [pc, #640]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800504c:	f023 0203 	bic.w	r2, r3, #3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	499c      	ldr	r1, [pc, #624]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005056:	4313      	orrs	r3, r2
 8005058:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00a      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005068:	4b97      	ldr	r3, [pc, #604]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800506a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800506e:	f023 020c 	bic.w	r2, r3, #12
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	4994      	ldr	r1, [pc, #592]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005078:	4313      	orrs	r3, r2
 800507a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0304 	and.w	r3, r3, #4
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800508a:	4b8f      	ldr	r3, [pc, #572]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800508c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005090:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	498b      	ldr	r1, [pc, #556]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800509a:	4313      	orrs	r3, r2
 800509c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0308 	and.w	r3, r3, #8
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00a      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050ac:	4b86      	ldr	r3, [pc, #536]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050b2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	4983      	ldr	r1, [pc, #524]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0320 	and.w	r3, r3, #32
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00a      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050ce:	4b7e      	ldr	r3, [pc, #504]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050d4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	497a      	ldr	r1, [pc, #488]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00a      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050f0:	4b75      	ldr	r3, [pc, #468]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050f6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	4972      	ldr	r1, [pc, #456]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005100:	4313      	orrs	r3, r2
 8005102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00a      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005112:	4b6d      	ldr	r3, [pc, #436]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005114:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005118:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	69db      	ldr	r3, [r3, #28]
 8005120:	4969      	ldr	r1, [pc, #420]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005122:	4313      	orrs	r3, r2
 8005124:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00a      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005134:	4b64      	ldr	r3, [pc, #400]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800513a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	4961      	ldr	r1, [pc, #388]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005144:	4313      	orrs	r3, r2
 8005146:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00a      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005156:	4b5c      	ldr	r3, [pc, #368]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005158:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800515c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005164:	4958      	ldr	r1, [pc, #352]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005166:	4313      	orrs	r3, r2
 8005168:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005174:	2b00      	cmp	r3, #0
 8005176:	d015      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005178:	4b53      	ldr	r3, [pc, #332]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800517a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800517e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005186:	4950      	ldr	r1, [pc, #320]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005188:	4313      	orrs	r3, r2
 800518a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005192:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005196:	d105      	bne.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005198:	4b4b      	ldr	r3, [pc, #300]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	4a4a      	ldr	r2, [pc, #296]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800519e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051a2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d015      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80051b0:	4b45      	ldr	r3, [pc, #276]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051b6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051be:	4942      	ldr	r1, [pc, #264]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80051ce:	d105      	bne.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051d0:	4b3d      	ldr	r3, [pc, #244]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	4a3c      	ldr	r2, [pc, #240]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051da:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d015      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80051e8:	4b37      	ldr	r3, [pc, #220]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ee:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051f6:	4934      	ldr	r1, [pc, #208]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005202:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005206:	d105      	bne.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005208:	4b2f      	ldr	r3, [pc, #188]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	4a2e      	ldr	r2, [pc, #184]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800520e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005212:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d015      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005220:	4b29      	ldr	r3, [pc, #164]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005226:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800522e:	4926      	ldr	r1, [pc, #152]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005230:	4313      	orrs	r3, r2
 8005232:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800523a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800523e:	d105      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005240:	4b21      	ldr	r3, [pc, #132]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	4a20      	ldr	r2, [pc, #128]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005246:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800524a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d015      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005258:	4b1b      	ldr	r3, [pc, #108]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800525a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800525e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005266:	4918      	ldr	r1, [pc, #96]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005268:	4313      	orrs	r3, r2
 800526a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005272:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005276:	d105      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005278:	4b13      	ldr	r3, [pc, #76]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	4a12      	ldr	r2, [pc, #72]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800527e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005282:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d015      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005290:	4b0d      	ldr	r3, [pc, #52]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005296:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800529e:	490a      	ldr	r1, [pc, #40]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052ae:	d105      	bne.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80052b0:	4b05      	ldr	r3, [pc, #20]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	4a04      	ldr	r2, [pc, #16]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052ba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80052bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3718      	adds	r7, #24
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	40021000 	.word	0x40021000

080052cc <memset>:
 80052cc:	4402      	add	r2, r0
 80052ce:	4603      	mov	r3, r0
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d100      	bne.n	80052d6 <memset+0xa>
 80052d4:	4770      	bx	lr
 80052d6:	f803 1b01 	strb.w	r1, [r3], #1
 80052da:	e7f9      	b.n	80052d0 <memset+0x4>

080052dc <__libc_init_array>:
 80052dc:	b570      	push	{r4, r5, r6, lr}
 80052de:	4d0d      	ldr	r5, [pc, #52]	@ (8005314 <__libc_init_array+0x38>)
 80052e0:	4c0d      	ldr	r4, [pc, #52]	@ (8005318 <__libc_init_array+0x3c>)
 80052e2:	1b64      	subs	r4, r4, r5
 80052e4:	10a4      	asrs	r4, r4, #2
 80052e6:	2600      	movs	r6, #0
 80052e8:	42a6      	cmp	r6, r4
 80052ea:	d109      	bne.n	8005300 <__libc_init_array+0x24>
 80052ec:	4d0b      	ldr	r5, [pc, #44]	@ (800531c <__libc_init_array+0x40>)
 80052ee:	4c0c      	ldr	r4, [pc, #48]	@ (8005320 <__libc_init_array+0x44>)
 80052f0:	f000 f818 	bl	8005324 <_init>
 80052f4:	1b64      	subs	r4, r4, r5
 80052f6:	10a4      	asrs	r4, r4, #2
 80052f8:	2600      	movs	r6, #0
 80052fa:	42a6      	cmp	r6, r4
 80052fc:	d105      	bne.n	800530a <__libc_init_array+0x2e>
 80052fe:	bd70      	pop	{r4, r5, r6, pc}
 8005300:	f855 3b04 	ldr.w	r3, [r5], #4
 8005304:	4798      	blx	r3
 8005306:	3601      	adds	r6, #1
 8005308:	e7ee      	b.n	80052e8 <__libc_init_array+0xc>
 800530a:	f855 3b04 	ldr.w	r3, [r5], #4
 800530e:	4798      	blx	r3
 8005310:	3601      	adds	r6, #1
 8005312:	e7f2      	b.n	80052fa <__libc_init_array+0x1e>
 8005314:	0800535c 	.word	0x0800535c
 8005318:	0800535c 	.word	0x0800535c
 800531c:	0800535c 	.word	0x0800535c
 8005320:	08005360 	.word	0x08005360

08005324 <_init>:
 8005324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005326:	bf00      	nop
 8005328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800532a:	bc08      	pop	{r3}
 800532c:	469e      	mov	lr, r3
 800532e:	4770      	bx	lr

08005330 <_fini>:
 8005330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005332:	bf00      	nop
 8005334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005336:	bc08      	pop	{r3}
 8005338:	469e      	mov	lr, r3
 800533a:	4770      	bx	lr
