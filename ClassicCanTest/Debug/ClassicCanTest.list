
ClassicCanTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000624c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001544  0800642c  0800642c  0000742c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007970  08007970  00009074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007970  08007970  00008970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007978  08007978  00009074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007978  08007978  00008978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800797c  0800797c  0000897c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08007980  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000734  20000074  080079f4  00009074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007a8  080079f4  000097a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000120c8  00000000  00000000  000090a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027f1  00000000  00000000  0001b16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  0001d960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001f9ea  00000000  00000000  0001ea48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00013051  00000000  00000000  0003e432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000cdf29  00000000  00000000  00051483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0011f3ac  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000ccf  00000000  00000000  0011f3ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004c50  00000000  00000000  001200c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00124d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006414 	.word	0x08006414

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	08006414 	.word	0x08006414

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <FDCAN_Config>:
static void MX_DMA_Init(void);
static void MX_ADC1_Init(void);
static void MX_FDCAN1_Init(void);
static void MX_I2C3_Init(void);
/* USER CODE BEGIN PFP */
static void FDCAN_Config(void){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b088      	sub	sp, #32
 80002c4:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef sFilterConfig;
    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80002c6:	2300      	movs	r3, #0
 80002c8:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIndex = 0;
 80002ca:	2300      	movs	r3, #0
 80002cc:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80002ce:	2302      	movs	r3, #2
 80002d0:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80002d2:	2301      	movs	r3, #1
 80002d4:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterID1 = 0x7FF;
 80002d6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80002da:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterID2 = 0x000;
 80002dc:	2300      	movs	r3, #0
 80002de:	617b      	str	r3, [r7, #20]
    if(HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK){
 80002e0:	463b      	mov	r3, r7
 80002e2:	4619      	mov	r1, r3
 80002e4:	4822      	ldr	r0, [pc, #136]	@ (8000370 <FDCAN_Config+0xb0>)
 80002e6:	f003 f8bd 	bl	8003464 <HAL_FDCAN_ConfigFilter>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <FDCAN_Config+0x34>
        Error_Handler();
 80002f0:	f000 fb06 	bl	8000900 <Error_Handler>
    }
    /* Configure global filter to reject all non-matching frames */
    if(HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE) != HAL_OK){
 80002f4:	2301      	movs	r3, #1
 80002f6:	9300      	str	r3, [sp, #0]
 80002f8:	2301      	movs	r3, #1
 80002fa:	2202      	movs	r2, #2
 80002fc:	2102      	movs	r1, #2
 80002fe:	481c      	ldr	r0, [pc, #112]	@ (8000370 <FDCAN_Config+0xb0>)
 8000300:	f003 f90a 	bl	8003518 <HAL_FDCAN_ConfigGlobalFilter>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <FDCAN_Config+0x4e>
        Error_Handler();
 800030a:	f000 faf9 	bl	8000900 <Error_Handler>
    }
    if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK){
 800030e:	4818      	ldr	r0, [pc, #96]	@ (8000370 <FDCAN_Config+0xb0>)
 8000310:	f003 f933 	bl	800357a <HAL_FDCAN_Start>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <FDCAN_Config+0x5e>
        Error_Handler();
 800031a:	f000 faf1 	bl	8000900 <Error_Handler>
    }
    if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK){
 800031e:	2200      	movs	r2, #0
 8000320:	2101      	movs	r1, #1
 8000322:	4813      	ldr	r0, [pc, #76]	@ (8000370 <FDCAN_Config+0xb0>)
 8000324:	f003 fab0 	bl	8003888 <HAL_FDCAN_ActivateNotification>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <FDCAN_Config+0x72>
        Error_Handler();
 800032e:	f000 fae7 	bl	8000900 <Error_Handler>
    }
	TxHeader.Identifier = 0x001;
 8000332:	4b10      	ldr	r3, [pc, #64]	@ (8000374 <FDCAN_Config+0xb4>)
 8000334:	2201      	movs	r2, #1
 8000336:	601a      	str	r2, [r3, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8000338:	4b0e      	ldr	r3, [pc, #56]	@ (8000374 <FDCAN_Config+0xb4>)
 800033a:	2200      	movs	r2, #0
 800033c:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800033e:	4b0d      	ldr	r3, [pc, #52]	@ (8000374 <FDCAN_Config+0xb4>)
 8000340:	2200      	movs	r2, #0
 8000342:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000344:	4b0b      	ldr	r3, [pc, #44]	@ (8000374 <FDCAN_Config+0xb4>)
 8000346:	2208      	movs	r2, #8
 8000348:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800034a:	4b0a      	ldr	r3, [pc, #40]	@ (8000374 <FDCAN_Config+0xb4>)
 800034c:	2200      	movs	r2, #0
 800034e:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000350:	4b08      	ldr	r3, [pc, #32]	@ (8000374 <FDCAN_Config+0xb4>)
 8000352:	2200      	movs	r2, #0
 8000354:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000356:	4b07      	ldr	r3, [pc, #28]	@ (8000374 <FDCAN_Config+0xb4>)
 8000358:	2200      	movs	r2, #0
 800035a:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800035c:	4b05      	ldr	r3, [pc, #20]	@ (8000374 <FDCAN_Config+0xb4>)
 800035e:	2200      	movs	r2, #0
 8000360:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;
 8000362:	4b04      	ldr	r3, [pc, #16]	@ (8000374 <FDCAN_Config+0xb4>)
 8000364:	2200      	movs	r2, #0
 8000366:	621a      	str	r2, [r3, #32]
}
 8000368:	bf00      	nop
 800036a:	3718      	adds	r7, #24
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	2000015c 	.word	0x2000015c
 8000374:	20000214 	.word	0x20000214

08000378 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 8000378:	b580      	push	{r7, lr}
 800037a:	b08c      	sub	sp, #48	@ 0x30
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef RxHeader;
    if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET){
 8000382:	683b      	ldr	r3, [r7, #0]
 8000384:	f003 0301 	and.w	r3, r3, #1
 8000388:	2b00      	cmp	r3, #0
 800038a:	d00b      	beq.n	80003a4 <HAL_FDCAN_RxFifo0Callback+0x2c>
        if(HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, (uint8_t*)data) != HAL_OK){
 800038c:	f107 0208 	add.w	r2, r7, #8
 8000390:	4b06      	ldr	r3, [pc, #24]	@ (80003ac <HAL_FDCAN_RxFifo0Callback+0x34>)
 8000392:	2140      	movs	r1, #64	@ 0x40
 8000394:	6878      	ldr	r0, [r7, #4]
 8000396:	f003 f95d 	bl	8003654 <HAL_FDCAN_GetRxMessage>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <HAL_FDCAN_RxFifo0Callback+0x2c>
            Error_Handler();
 80003a0:	f000 faae 	bl	8000900 <Error_Handler>
        }
    }
}
 80003a4:	bf00      	nop
 80003a6:	3730      	adds	r7, #48	@ 0x30
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	20000238 	.word	0x20000238

080003b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003b4:	f000 ff8b 	bl	80012ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b8:	f000 f8f6 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003bc:	f000 fa68 	bl	8000890 <MX_GPIO_Init>
  MX_DMA_Init();
 80003c0:	f000 fa3c 	bl	800083c <MX_DMA_Init>
  MX_ADC1_Init();
 80003c4:	f000 f93c 	bl	8000640 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 80003c8:	f000 f9b2 	bl	8000730 <MX_FDCAN1_Init>
  MX_I2C3_Init();
 80003cc:	f000 f9f6 	bl	80007bc <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  FDCAN_Config();
 80003d0:	f7ff ff76 	bl	80002c0 <FDCAN_Config>

  //for ssd1306
  ssd1306_Init(&hi2c3);
 80003d4:	4866      	ldr	r0, [pc, #408]	@ (8000570 <main+0x1c0>)
 80003d6:	f000 fab1 	bl	800093c <ssd1306_Init>
  ssd1306_SetCursor(0, 36);
 80003da:	2124      	movs	r1, #36	@ 0x24
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 fd29 	bl	8000e34 <ssd1306_SetCursor>
  ssd1306_WriteString("Hello World", Font_11x18, White);
 80003e2:	4a64      	ldr	r2, [pc, #400]	@ (8000574 <main+0x1c4>)
 80003e4:	2301      	movs	r3, #1
 80003e6:	ca06      	ldmia	r2, {r1, r2}
 80003e8:	4863      	ldr	r0, [pc, #396]	@ (8000578 <main+0x1c8>)
 80003ea:	f000 fcfd 	bl	8000de8 <ssd1306_WriteString>
  ssd1306_UpdateScreen(&hi2c3);
 80003ee:	4860      	ldr	r0, [pc, #384]	@ (8000570 <main+0x1c0>)
 80003f0:	f000 fbe8 	bl	8000bc4 <ssd1306_UpdateScreen>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80003f4:	217f      	movs	r1, #127	@ 0x7f
 80003f6:	4861      	ldr	r0, [pc, #388]	@ (800057c <main+0x1cc>)
 80003f8:	f002 fa52 	bl	80028a0 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)&adc_value, 1);
 80003fc:	2201      	movs	r2, #1
 80003fe:	4960      	ldr	r1, [pc, #384]	@ (8000580 <main+0x1d0>)
 8000400:	485e      	ldr	r0, [pc, #376]	@ (800057c <main+0x1cc>)
 8000402:	f001 fbbf 	bl	8001b84 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ssd1306_Fill(Black);
 8000406:	2000      	movs	r0, #0
 8000408:	f000 fbb8 	bl	8000b7c <ssd1306_Fill>

	  sprintf(text,"%u",adc_value);
 800040c:	4b5c      	ldr	r3, [pc, #368]	@ (8000580 <main+0x1d0>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	461a      	mov	r2, r3
 8000412:	495c      	ldr	r1, [pc, #368]	@ (8000584 <main+0x1d4>)
 8000414:	485c      	ldr	r0, [pc, #368]	@ (8000588 <main+0x1d8>)
 8000416:	f005 fb5d 	bl	8005ad4 <siprintf>
	  ssd1306_SetCursor(0,30);
 800041a:	211e      	movs	r1, #30
 800041c:	2000      	movs	r0, #0
 800041e:	f000 fd09 	bl	8000e34 <ssd1306_SetCursor>
	  ssd1306_WriteString(text,Font_7x10,White);
 8000422:	4a5a      	ldr	r2, [pc, #360]	@ (800058c <main+0x1dc>)
 8000424:	2301      	movs	r3, #1
 8000426:	ca06      	ldmia	r2, {r1, r2}
 8000428:	4857      	ldr	r0, [pc, #348]	@ (8000588 <main+0x1d8>)
 800042a:	f000 fcdd 	bl	8000de8 <ssd1306_WriteString>

	  TxData[0] = adc_value % 100;
 800042e:	4b54      	ldr	r3, [pc, #336]	@ (8000580 <main+0x1d0>)
 8000430:	681a      	ldr	r2, [r3, #0]
 8000432:	4b57      	ldr	r3, [pc, #348]	@ (8000590 <main+0x1e0>)
 8000434:	fba3 1302 	umull	r1, r3, r3, r2
 8000438:	095b      	lsrs	r3, r3, #5
 800043a:	2164      	movs	r1, #100	@ 0x64
 800043c:	fb01 f303 	mul.w	r3, r1, r3
 8000440:	1ad3      	subs	r3, r2, r3
 8000442:	b2da      	uxtb	r2, r3
 8000444:	4b53      	ldr	r3, [pc, #332]	@ (8000594 <main+0x1e4>)
 8000446:	701a      	strb	r2, [r3, #0]
	  TxData[1] = adc_value % 100 + 1;
 8000448:	4b4d      	ldr	r3, [pc, #308]	@ (8000580 <main+0x1d0>)
 800044a:	681a      	ldr	r2, [r3, #0]
 800044c:	4b50      	ldr	r3, [pc, #320]	@ (8000590 <main+0x1e0>)
 800044e:	fba3 1302 	umull	r1, r3, r3, r2
 8000452:	095b      	lsrs	r3, r3, #5
 8000454:	2164      	movs	r1, #100	@ 0x64
 8000456:	fb01 f303 	mul.w	r3, r1, r3
 800045a:	1ad3      	subs	r3, r2, r3
 800045c:	b2db      	uxtb	r3, r3
 800045e:	3301      	adds	r3, #1
 8000460:	b2da      	uxtb	r2, r3
 8000462:	4b4c      	ldr	r3, [pc, #304]	@ (8000594 <main+0x1e4>)
 8000464:	705a      	strb	r2, [r3, #1]
	  TxData[2] = adc_value % 100 + 2;
 8000466:	4b46      	ldr	r3, [pc, #280]	@ (8000580 <main+0x1d0>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	4b49      	ldr	r3, [pc, #292]	@ (8000590 <main+0x1e0>)
 800046c:	fba3 1302 	umull	r1, r3, r3, r2
 8000470:	095b      	lsrs	r3, r3, #5
 8000472:	2164      	movs	r1, #100	@ 0x64
 8000474:	fb01 f303 	mul.w	r3, r1, r3
 8000478:	1ad3      	subs	r3, r2, r3
 800047a:	b2db      	uxtb	r3, r3
 800047c:	3302      	adds	r3, #2
 800047e:	b2da      	uxtb	r2, r3
 8000480:	4b44      	ldr	r3, [pc, #272]	@ (8000594 <main+0x1e4>)
 8000482:	709a      	strb	r2, [r3, #2]
	  TxData[3] = adc_value % 100 + 3;
 8000484:	4b3e      	ldr	r3, [pc, #248]	@ (8000580 <main+0x1d0>)
 8000486:	681a      	ldr	r2, [r3, #0]
 8000488:	4b41      	ldr	r3, [pc, #260]	@ (8000590 <main+0x1e0>)
 800048a:	fba3 1302 	umull	r1, r3, r3, r2
 800048e:	095b      	lsrs	r3, r3, #5
 8000490:	2164      	movs	r1, #100	@ 0x64
 8000492:	fb01 f303 	mul.w	r3, r1, r3
 8000496:	1ad3      	subs	r3, r2, r3
 8000498:	b2db      	uxtb	r3, r3
 800049a:	3303      	adds	r3, #3
 800049c:	b2da      	uxtb	r2, r3
 800049e:	4b3d      	ldr	r3, [pc, #244]	@ (8000594 <main+0x1e4>)
 80004a0:	70da      	strb	r2, [r3, #3]
	  TxData[4] = adc_value % 100 + 4;
 80004a2:	4b37      	ldr	r3, [pc, #220]	@ (8000580 <main+0x1d0>)
 80004a4:	681a      	ldr	r2, [r3, #0]
 80004a6:	4b3a      	ldr	r3, [pc, #232]	@ (8000590 <main+0x1e0>)
 80004a8:	fba3 1302 	umull	r1, r3, r3, r2
 80004ac:	095b      	lsrs	r3, r3, #5
 80004ae:	2164      	movs	r1, #100	@ 0x64
 80004b0:	fb01 f303 	mul.w	r3, r1, r3
 80004b4:	1ad3      	subs	r3, r2, r3
 80004b6:	b2db      	uxtb	r3, r3
 80004b8:	3304      	adds	r3, #4
 80004ba:	b2da      	uxtb	r2, r3
 80004bc:	4b35      	ldr	r3, [pc, #212]	@ (8000594 <main+0x1e4>)
 80004be:	711a      	strb	r2, [r3, #4]
	  TxData[5] = adc_value % 100 + 5;
 80004c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000580 <main+0x1d0>)
 80004c2:	681a      	ldr	r2, [r3, #0]
 80004c4:	4b32      	ldr	r3, [pc, #200]	@ (8000590 <main+0x1e0>)
 80004c6:	fba3 1302 	umull	r1, r3, r3, r2
 80004ca:	095b      	lsrs	r3, r3, #5
 80004cc:	2164      	movs	r1, #100	@ 0x64
 80004ce:	fb01 f303 	mul.w	r3, r1, r3
 80004d2:	1ad3      	subs	r3, r2, r3
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	3305      	adds	r3, #5
 80004d8:	b2da      	uxtb	r2, r3
 80004da:	4b2e      	ldr	r3, [pc, #184]	@ (8000594 <main+0x1e4>)
 80004dc:	715a      	strb	r2, [r3, #5]
	  TxData[6] = adc_value % 100 + 6;
 80004de:	4b28      	ldr	r3, [pc, #160]	@ (8000580 <main+0x1d0>)
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000590 <main+0x1e0>)
 80004e4:	fba3 1302 	umull	r1, r3, r3, r2
 80004e8:	095b      	lsrs	r3, r3, #5
 80004ea:	2164      	movs	r1, #100	@ 0x64
 80004ec:	fb01 f303 	mul.w	r3, r1, r3
 80004f0:	1ad3      	subs	r3, r2, r3
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	3306      	adds	r3, #6
 80004f6:	b2da      	uxtb	r2, r3
 80004f8:	4b26      	ldr	r3, [pc, #152]	@ (8000594 <main+0x1e4>)
 80004fa:	719a      	strb	r2, [r3, #6]
	  TxData[7] = adc_value % 100 + 7;
 80004fc:	4b20      	ldr	r3, [pc, #128]	@ (8000580 <main+0x1d0>)
 80004fe:	681a      	ldr	r2, [r3, #0]
 8000500:	4b23      	ldr	r3, [pc, #140]	@ (8000590 <main+0x1e0>)
 8000502:	fba3 1302 	umull	r1, r3, r3, r2
 8000506:	095b      	lsrs	r3, r3, #5
 8000508:	2164      	movs	r1, #100	@ 0x64
 800050a:	fb01 f303 	mul.w	r3, r1, r3
 800050e:	1ad3      	subs	r3, r2, r3
 8000510:	b2db      	uxtb	r3, r3
 8000512:	3307      	adds	r3, #7
 8000514:	b2da      	uxtb	r2, r3
 8000516:	4b1f      	ldr	r3, [pc, #124]	@ (8000594 <main+0x1e4>)
 8000518:	71da      	strb	r2, [r3, #7]
	  if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 800051a:	481f      	ldr	r0, [pc, #124]	@ (8000598 <main+0x1e8>)
 800051c:	f003 f9a2 	bl	8003864 <HAL_FDCAN_GetTxFifoFreeLevel>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d012      	beq.n	800054c <main+0x19c>
		  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) == HAL_OK) {
 8000526:	4a1b      	ldr	r2, [pc, #108]	@ (8000594 <main+0x1e4>)
 8000528:	491c      	ldr	r1, [pc, #112]	@ (800059c <main+0x1ec>)
 800052a:	481b      	ldr	r0, [pc, #108]	@ (8000598 <main+0x1e8>)
 800052c:	f003 f84d 	bl	80035ca <HAL_FDCAN_AddMessageToTxFifoQ>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d114      	bne.n	8000560 <main+0x1b0>
			  //送信した時に行いたい処理
			  ssd1306_SetCursor(0, 10);
 8000536:	210a      	movs	r1, #10
 8000538:	2000      	movs	r0, #0
 800053a:	f000 fc7b 	bl	8000e34 <ssd1306_SetCursor>
			  ssd1306_WriteString("HAL_OK", Font_7x10, White);
 800053e:	4a13      	ldr	r2, [pc, #76]	@ (800058c <main+0x1dc>)
 8000540:	2301      	movs	r3, #1
 8000542:	ca06      	ldmia	r2, {r1, r2}
 8000544:	4816      	ldr	r0, [pc, #88]	@ (80005a0 <main+0x1f0>)
 8000546:	f000 fc4f 	bl	8000de8 <ssd1306_WriteString>
 800054a:	e009      	b.n	8000560 <main+0x1b0>
		  }
	  }else{
		  ssd1306_SetCursor(0, 10);
 800054c:	210a      	movs	r1, #10
 800054e:	2000      	movs	r0, #0
 8000550:	f000 fc70 	bl	8000e34 <ssd1306_SetCursor>
		  ssd1306_WriteString("FreeLevel = 0", Font_7x10, White);
 8000554:	4a0d      	ldr	r2, [pc, #52]	@ (800058c <main+0x1dc>)
 8000556:	2301      	movs	r3, #1
 8000558:	ca06      	ldmia	r2, {r1, r2}
 800055a:	4812      	ldr	r0, [pc, #72]	@ (80005a4 <main+0x1f4>)
 800055c:	f000 fc44 	bl	8000de8 <ssd1306_WriteString>
	  }

	  ssd1306_UpdateScreen(&hi2c3);
 8000560:	4803      	ldr	r0, [pc, #12]	@ (8000570 <main+0x1c0>)
 8000562:	f000 fb2f 	bl	8000bc4 <ssd1306_UpdateScreen>
	  HAL_Delay(10);
 8000566:	200a      	movs	r0, #10
 8000568:	f000 ff22 	bl	80013b0 <HAL_Delay>
  {
 800056c:	e74b      	b.n	8000406 <main+0x56>
 800056e:	bf00      	nop
 8000570:	200001c0 	.word	0x200001c0
 8000574:	20000008 	.word	0x20000008
 8000578:	0800642c 	.word	0x0800642c
 800057c:	20000090 	.word	0x20000090
 8000580:	20000240 	.word	0x20000240
 8000584:	08006438 	.word	0x08006438
 8000588:	20000244 	.word	0x20000244
 800058c:	20000000 	.word	0x20000000
 8000590:	51eb851f 	.word	0x51eb851f
 8000594:	20000010 	.word	0x20000010
 8000598:	2000015c 	.word	0x2000015c
 800059c:	20000214 	.word	0x20000214
 80005a0:	0800643c 	.word	0x0800643c
 80005a4:	08006444 	.word	0x08006444

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b094      	sub	sp, #80	@ 0x50
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0318 	add.w	r3, r7, #24
 80005b2:	2238      	movs	r2, #56	@ 0x38
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f005 faae 	bl	8005b18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005ca:	2000      	movs	r0, #0
 80005cc:	f004 fae8 	bl	8004ba0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d0:	2302      	movs	r3, #2
 80005d2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005d8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005da:	2340      	movs	r3, #64	@ 0x40
 80005dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005de:	2302      	movs	r3, #2
 80005e0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e2:	2302      	movs	r3, #2
 80005e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005e6:	2304      	movs	r3, #4
 80005e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005ea:	2355      	movs	r3, #85	@ 0x55
 80005ec:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ee:	2302      	movs	r3, #2
 80005f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005f6:	2302      	movs	r3, #2
 80005f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fa:	f107 0318 	add.w	r3, r7, #24
 80005fe:	4618      	mov	r0, r3
 8000600:	f004 fb82 	bl	8004d08 <HAL_RCC_OscConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800060a:	f000 f979 	bl	8000900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060e:	230f      	movs	r3, #15
 8000610:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000612:	2303      	movs	r3, #3
 8000614:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2104      	movs	r1, #4
 8000626:	4618      	mov	r0, r3
 8000628:	f004 fe80 	bl	800532c <HAL_RCC_ClockConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000632:	f000 f965 	bl	8000900 <Error_Handler>
  }
}
 8000636:	bf00      	nop
 8000638:	3750      	adds	r7, #80	@ 0x50
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
	...

08000640 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08c      	sub	sp, #48	@ 0x30
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000646:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	2220      	movs	r2, #32
 8000656:	2100      	movs	r1, #0
 8000658:	4618      	mov	r0, r3
 800065a:	f005 fa5d 	bl	8005b18 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800065e:	4b32      	ldr	r3, [pc, #200]	@ (8000728 <MX_ADC1_Init+0xe8>)
 8000660:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000664:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000666:	4b30      	ldr	r3, [pc, #192]	@ (8000728 <MX_ADC1_Init+0xe8>)
 8000668:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800066c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800066e:	4b2e      	ldr	r3, [pc, #184]	@ (8000728 <MX_ADC1_Init+0xe8>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000674:	4b2c      	ldr	r3, [pc, #176]	@ (8000728 <MX_ADC1_Init+0xe8>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800067a:	4b2b      	ldr	r3, [pc, #172]	@ (8000728 <MX_ADC1_Init+0xe8>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000680:	4b29      	ldr	r3, [pc, #164]	@ (8000728 <MX_ADC1_Init+0xe8>)
 8000682:	2200      	movs	r2, #0
 8000684:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000686:	4b28      	ldr	r3, [pc, #160]	@ (8000728 <MX_ADC1_Init+0xe8>)
 8000688:	2204      	movs	r2, #4
 800068a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800068c:	4b26      	ldr	r3, [pc, #152]	@ (8000728 <MX_ADC1_Init+0xe8>)
 800068e:	2200      	movs	r2, #0
 8000690:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000692:	4b25      	ldr	r3, [pc, #148]	@ (8000728 <MX_ADC1_Init+0xe8>)
 8000694:	2201      	movs	r2, #1
 8000696:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000698:	4b23      	ldr	r3, [pc, #140]	@ (8000728 <MX_ADC1_Init+0xe8>)
 800069a:	2201      	movs	r2, #1
 800069c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800069e:	4b22      	ldr	r3, [pc, #136]	@ (8000728 <MX_ADC1_Init+0xe8>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006a6:	4b20      	ldr	r3, [pc, #128]	@ (8000728 <MX_ADC1_Init+0xe8>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000728 <MX_ADC1_Init+0xe8>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000728 <MX_ADC1_Init+0xe8>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000728 <MX_ADC1_Init+0xe8>)
 80006bc:	2200      	movs	r2, #0
 80006be:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80006c0:	4b19      	ldr	r3, [pc, #100]	@ (8000728 <MX_ADC1_Init+0xe8>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006c8:	4817      	ldr	r0, [pc, #92]	@ (8000728 <MX_ADC1_Init+0xe8>)
 80006ca:	f001 f8d7 	bl	800187c <HAL_ADC_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80006d4:	f000 f914 	bl	8000900 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006d8:	2300      	movs	r3, #0
 80006da:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006e0:	4619      	mov	r1, r3
 80006e2:	4811      	ldr	r0, [pc, #68]	@ (8000728 <MX_ADC1_Init+0xe8>)
 80006e4:	f002 f93e 	bl	8002964 <HAL_ADCEx_MultiModeConfigChannel>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80006ee:	f000 f907 	bl	8000900 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <MX_ADC1_Init+0xec>)
 80006f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006f6:	2306      	movs	r3, #6
 80006f8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80006fa:	2307      	movs	r3, #7
 80006fc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006fe:	237f      	movs	r3, #127	@ 0x7f
 8000700:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000702:	2304      	movs	r3, #4
 8000704:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	4619      	mov	r1, r3
 800070e:	4806      	ldr	r0, [pc, #24]	@ (8000728 <MX_ADC1_Init+0xe8>)
 8000710:	f001 fb0a 	bl	8001d28 <HAL_ADC_ConfigChannel>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800071a:	f000 f8f1 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	3730      	adds	r7, #48	@ 0x30
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000090 	.word	0x20000090
 800072c:	04300002 	.word	0x04300002

08000730 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000734:	4b1f      	ldr	r3, [pc, #124]	@ (80007b4 <MX_FDCAN1_Init+0x84>)
 8000736:	4a20      	ldr	r2, [pc, #128]	@ (80007b8 <MX_FDCAN1_Init+0x88>)
 8000738:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800073a:	4b1e      	ldr	r3, [pc, #120]	@ (80007b4 <MX_FDCAN1_Init+0x84>)
 800073c:	2200      	movs	r2, #0
 800073e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000740:	4b1c      	ldr	r3, [pc, #112]	@ (80007b4 <MX_FDCAN1_Init+0x84>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000746:	4b1b      	ldr	r3, [pc, #108]	@ (80007b4 <MX_FDCAN1_Init+0x84>)
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800074c:	4b19      	ldr	r3, [pc, #100]	@ (80007b4 <MX_FDCAN1_Init+0x84>)
 800074e:	2200      	movs	r2, #0
 8000750:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000752:	4b18      	ldr	r3, [pc, #96]	@ (80007b4 <MX_FDCAN1_Init+0x84>)
 8000754:	2200      	movs	r2, #0
 8000756:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000758:	4b16      	ldr	r3, [pc, #88]	@ (80007b4 <MX_FDCAN1_Init+0x84>)
 800075a:	2200      	movs	r2, #0
 800075c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 17;
 800075e:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <MX_FDCAN1_Init+0x84>)
 8000760:	2211      	movs	r2, #17
 8000762:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000764:	4b13      	ldr	r3, [pc, #76]	@ (80007b4 <MX_FDCAN1_Init+0x84>)
 8000766:	2201      	movs	r2, #1
 8000768:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 7;
 800076a:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <MX_FDCAN1_Init+0x84>)
 800076c:	2207      	movs	r2, #7
 800076e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000770:	4b10      	ldr	r3, [pc, #64]	@ (80007b4 <MX_FDCAN1_Init+0x84>)
 8000772:	2202      	movs	r2, #2
 8000774:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000776:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <MX_FDCAN1_Init+0x84>)
 8000778:	2201      	movs	r2, #1
 800077a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800077c:	4b0d      	ldr	r3, [pc, #52]	@ (80007b4 <MX_FDCAN1_Init+0x84>)
 800077e:	2201      	movs	r2, #1
 8000780:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000782:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <MX_FDCAN1_Init+0x84>)
 8000784:	2201      	movs	r2, #1
 8000786:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000788:	4b0a      	ldr	r3, [pc, #40]	@ (80007b4 <MX_FDCAN1_Init+0x84>)
 800078a:	2201      	movs	r2, #1
 800078c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 800078e:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <MX_FDCAN1_Init+0x84>)
 8000790:	2201      	movs	r2, #1
 8000792:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <MX_FDCAN1_Init+0x84>)
 8000796:	2200      	movs	r2, #0
 8000798:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800079a:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <MX_FDCAN1_Init+0x84>)
 800079c:	2200      	movs	r2, #0
 800079e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80007a0:	4804      	ldr	r0, [pc, #16]	@ (80007b4 <MX_FDCAN1_Init+0x84>)
 80007a2:	f002 fd05 	bl	80031b0 <HAL_FDCAN_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80007ac:	f000 f8a8 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2000015c 	.word	0x2000015c
 80007b8:	40006400 	.word	0x40006400

080007bc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80007c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000830 <MX_I2C3_Init+0x74>)
 80007c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000834 <MX_I2C3_Init+0x78>)
 80007c4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x40B285C2;
 80007c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000830 <MX_I2C3_Init+0x74>)
 80007c8:	4a1b      	ldr	r2, [pc, #108]	@ (8000838 <MX_I2C3_Init+0x7c>)
 80007ca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80007cc:	4b18      	ldr	r3, [pc, #96]	@ (8000830 <MX_I2C3_Init+0x74>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d2:	4b17      	ldr	r3, [pc, #92]	@ (8000830 <MX_I2C3_Init+0x74>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d8:	4b15      	ldr	r3, [pc, #84]	@ (8000830 <MX_I2C3_Init+0x74>)
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80007de:	4b14      	ldr	r3, [pc, #80]	@ (8000830 <MX_I2C3_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007e4:	4b12      	ldr	r3, [pc, #72]	@ (8000830 <MX_I2C3_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ea:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <MX_I2C3_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000830 <MX_I2C3_Init+0x74>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80007f6:	480e      	ldr	r0, [pc, #56]	@ (8000830 <MX_I2C3_Init+0x74>)
 80007f8:	f003 fd1c 	bl	8004234 <HAL_I2C_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000802:	f000 f87d 	bl	8000900 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000806:	2100      	movs	r1, #0
 8000808:	4809      	ldr	r0, [pc, #36]	@ (8000830 <MX_I2C3_Init+0x74>)
 800080a:	f004 f931 	bl	8004a70 <HAL_I2CEx_ConfigAnalogFilter>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000814:	f000 f874 	bl	8000900 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000818:	2100      	movs	r1, #0
 800081a:	4805      	ldr	r0, [pc, #20]	@ (8000830 <MX_I2C3_Init+0x74>)
 800081c:	f004 f973 	bl	8004b06 <HAL_I2CEx_ConfigDigitalFilter>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000826:	f000 f86b 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200001c0 	.word	0x200001c0
 8000834:	40007800 	.word	0x40007800
 8000838:	40b285c2 	.word	0x40b285c2

0800083c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000842:	4b12      	ldr	r3, [pc, #72]	@ (800088c <MX_DMA_Init+0x50>)
 8000844:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000846:	4a11      	ldr	r2, [pc, #68]	@ (800088c <MX_DMA_Init+0x50>)
 8000848:	f043 0304 	orr.w	r3, r3, #4
 800084c:	6493      	str	r3, [r2, #72]	@ 0x48
 800084e:	4b0f      	ldr	r3, [pc, #60]	@ (800088c <MX_DMA_Init+0x50>)
 8000850:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000852:	f003 0304 	and.w	r3, r3, #4
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800085a:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <MX_DMA_Init+0x50>)
 800085c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800085e:	4a0b      	ldr	r2, [pc, #44]	@ (800088c <MX_DMA_Init+0x50>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6493      	str	r3, [r2, #72]	@ 0x48
 8000866:	4b09      	ldr	r3, [pc, #36]	@ (800088c <MX_DMA_Init+0x50>)
 8000868:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	2100      	movs	r1, #0
 8000876:	200b      	movs	r0, #11
 8000878:	f002 f9f3 	bl	8002c62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800087c:	200b      	movs	r0, #11
 800087e:	f002 fa0a 	bl	8002c96 <HAL_NVIC_EnableIRQ>

}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40021000 	.word	0x40021000

08000890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000896:	f107 030c 	add.w	r3, r7, #12
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	4b14      	ldr	r3, [pc, #80]	@ (80008f8 <MX_GPIO_Init+0x68>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008aa:	4a13      	ldr	r2, [pc, #76]	@ (80008f8 <MX_GPIO_Init+0x68>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008b2:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <MX_GPIO_Init+0x68>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008be:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <MX_GPIO_Init+0x68>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c2:	4a0d      	ldr	r2, [pc, #52]	@ (80008f8 <MX_GPIO_Init+0x68>)
 80008c4:	f043 0302 	orr.w	r3, r3, #2
 80008c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ca:	4b0b      	ldr	r3, [pc, #44]	@ (80008f8 <MX_GPIO_Init+0x68>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ce:	f003 0302 	and.w	r3, r3, #2
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : GO_Pin BACK_Pin */
  GPIO_InitStruct.Pin = GO_Pin|BACK_Pin;
 80008d6:	23c0      	movs	r3, #192	@ 0xc0
 80008d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e2:	f107 030c 	add.w	r3, r7, #12
 80008e6:	4619      	mov	r1, r3
 80008e8:	4804      	ldr	r0, [pc, #16]	@ (80008fc <MX_GPIO_Init+0x6c>)
 80008ea:	f003 fb21 	bl	8003f30 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008ee:	bf00      	nop
 80008f0:	3720      	adds	r7, #32
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40021000 	.word	0x40021000
 80008fc:	48000400 	.word	0x48000400

08000900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000904:	b672      	cpsid	i
}
 8000906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <Error_Handler+0x8>

0800090c <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b086      	sub	sp, #24
 8000910:	af04      	add	r7, sp, #16
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	460b      	mov	r3, r1
 8000916:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8000918:	230a      	movs	r3, #10
 800091a:	9302      	str	r3, [sp, #8]
 800091c:	2301      	movs	r3, #1
 800091e:	9301      	str	r3, [sp, #4]
 8000920:	1cfb      	adds	r3, r7, #3
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	2301      	movs	r3, #1
 8000926:	2200      	movs	r2, #0
 8000928:	2178      	movs	r1, #120	@ 0x78
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f003 fd1e 	bl	800436c <HAL_I2C_Mem_Write>
 8000930:	4603      	mov	r3, r0
}
 8000932:	4618      	mov	r0, r3
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8000944:	2064      	movs	r0, #100	@ 0x64
 8000946:	f000 fd33 	bl	80013b0 <HAL_Delay>
    int status = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 800094e:	21ae      	movs	r1, #174	@ 0xae
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f7ff ffdb 	bl	800090c <ssd1306_WriteCommand>
 8000956:	4603      	mov	r3, r0
 8000958:	461a      	mov	r2, r3
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	4413      	add	r3, r2
 800095e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8000960:	2120      	movs	r1, #32
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f7ff ffd2 	bl	800090c <ssd1306_WriteCommand>
 8000968:	4603      	mov	r3, r0
 800096a:	461a      	mov	r2, r3
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	4413      	add	r3, r2
 8000970:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000972:	2110      	movs	r1, #16
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f7ff ffc9 	bl	800090c <ssd1306_WriteCommand>
 800097a:	4603      	mov	r3, r0
 800097c:	461a      	mov	r2, r3
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	4413      	add	r3, r2
 8000982:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8000984:	21b0      	movs	r1, #176	@ 0xb0
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f7ff ffc0 	bl	800090c <ssd1306_WriteCommand>
 800098c:	4603      	mov	r3, r0
 800098e:	461a      	mov	r2, r3
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	4413      	add	r3, r2
 8000994:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8000996:	21c8      	movs	r1, #200	@ 0xc8
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f7ff ffb7 	bl	800090c <ssd1306_WriteCommand>
 800099e:	4603      	mov	r3, r0
 80009a0:	461a      	mov	r2, r3
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	4413      	add	r3, r2
 80009a6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 80009a8:	2100      	movs	r1, #0
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff ffae 	bl	800090c <ssd1306_WriteCommand>
 80009b0:	4603      	mov	r3, r0
 80009b2:	461a      	mov	r2, r3
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	4413      	add	r3, r2
 80009b8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 80009ba:	2110      	movs	r1, #16
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f7ff ffa5 	bl	800090c <ssd1306_WriteCommand>
 80009c2:	4603      	mov	r3, r0
 80009c4:	461a      	mov	r2, r3
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	4413      	add	r3, r2
 80009ca:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 80009cc:	2140      	movs	r1, #64	@ 0x40
 80009ce:	6878      	ldr	r0, [r7, #4]
 80009d0:	f7ff ff9c 	bl	800090c <ssd1306_WriteCommand>
 80009d4:	4603      	mov	r3, r0
 80009d6:	461a      	mov	r2, r3
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	4413      	add	r3, r2
 80009dc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 80009de:	2181      	movs	r1, #129	@ 0x81
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f7ff ff93 	bl	800090c <ssd1306_WriteCommand>
 80009e6:	4603      	mov	r3, r0
 80009e8:	461a      	mov	r2, r3
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	4413      	add	r3, r2
 80009ee:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 80009f0:	21ff      	movs	r1, #255	@ 0xff
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f7ff ff8a 	bl	800090c <ssd1306_WriteCommand>
 80009f8:	4603      	mov	r3, r0
 80009fa:	461a      	mov	r2, r3
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	4413      	add	r3, r2
 8000a00:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8000a02:	21a1      	movs	r1, #161	@ 0xa1
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f7ff ff81 	bl	800090c <ssd1306_WriteCommand>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	4413      	add	r3, r2
 8000a12:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8000a14:	21a6      	movs	r1, #166	@ 0xa6
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f7ff ff78 	bl	800090c <ssd1306_WriteCommand>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	461a      	mov	r2, r3
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	4413      	add	r3, r2
 8000a24:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8000a26:	21a8      	movs	r1, #168	@ 0xa8
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f7ff ff6f 	bl	800090c <ssd1306_WriteCommand>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	461a      	mov	r2, r3
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	4413      	add	r3, r2
 8000a36:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8000a38:	213f      	movs	r1, #63	@ 0x3f
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f7ff ff66 	bl	800090c <ssd1306_WriteCommand>
 8000a40:	4603      	mov	r3, r0
 8000a42:	461a      	mov	r2, r3
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	4413      	add	r3, r2
 8000a48:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000a4a:	21a4      	movs	r1, #164	@ 0xa4
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f7ff ff5d 	bl	800090c <ssd1306_WriteCommand>
 8000a52:	4603      	mov	r3, r0
 8000a54:	461a      	mov	r2, r3
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	4413      	add	r3, r2
 8000a5a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8000a5c:	21d3      	movs	r1, #211	@ 0xd3
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f7ff ff54 	bl	800090c <ssd1306_WriteCommand>
 8000a64:	4603      	mov	r3, r0
 8000a66:	461a      	mov	r2, r3
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8000a6e:	2100      	movs	r1, #0
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f7ff ff4b 	bl	800090c <ssd1306_WriteCommand>
 8000a76:	4603      	mov	r3, r0
 8000a78:	461a      	mov	r2, r3
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8000a80:	21d5      	movs	r1, #213	@ 0xd5
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f7ff ff42 	bl	800090c <ssd1306_WriteCommand>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	4413      	add	r3, r2
 8000a90:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8000a92:	21f0      	movs	r1, #240	@ 0xf0
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f7ff ff39 	bl	800090c <ssd1306_WriteCommand>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8000aa4:	21d9      	movs	r1, #217	@ 0xd9
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f7ff ff30 	bl	800090c <ssd1306_WriteCommand>
 8000aac:	4603      	mov	r3, r0
 8000aae:	461a      	mov	r2, r3
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8000ab6:	2122      	movs	r1, #34	@ 0x22
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff ff27 	bl	800090c <ssd1306_WriteCommand>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8000ac8:	21da      	movs	r1, #218	@ 0xda
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff ff1e 	bl	800090c <ssd1306_WriteCommand>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_COM_LR_REMAP << 5 | SSD1306_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);   
 8000ada:	2112      	movs	r1, #18
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f7ff ff15 	bl	800090c <ssd1306_WriteCommand>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	4413      	add	r3, r2
 8000aea:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8000aec:	21db      	movs	r1, #219	@ 0xdb
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f7ff ff0c 	bl	800090c <ssd1306_WriteCommand>
 8000af4:	4603      	mov	r3, r0
 8000af6:	461a      	mov	r2, r3
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4413      	add	r3, r2
 8000afc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8000afe:	2120      	movs	r1, #32
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff ff03 	bl	800090c <ssd1306_WriteCommand>
 8000b06:	4603      	mov	r3, r0
 8000b08:	461a      	mov	r2, r3
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8000b10:	218d      	movs	r1, #141	@ 0x8d
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f7ff fefa 	bl	800090c <ssd1306_WriteCommand>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	4413      	add	r3, r2
 8000b20:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8000b22:	2114      	movs	r1, #20
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f7ff fef1 	bl	800090c <ssd1306_WriteCommand>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	4413      	add	r3, r2
 8000b32:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8000b34:	21af      	movs	r1, #175	@ 0xaf
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f7ff fee8 	bl	800090c <ssd1306_WriteCommand>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	461a      	mov	r2, r3
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	4413      	add	r3, r2
 8000b44:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <ssd1306_Init+0x214>
        return 1;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	e00f      	b.n	8000b70 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8000b50:	2000      	movs	r0, #0
 8000b52:	f000 f813 	bl	8000b7c <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f000 f834 	bl	8000bc4 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <ssd1306_Init+0x23c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000b62:	4b05      	ldr	r3, [pc, #20]	@ (8000b78 <ssd1306_Init+0x23c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8000b68:	4b03      	ldr	r3, [pc, #12]	@ (8000b78 <ssd1306_Init+0x23c>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	715a      	strb	r2, [r3, #5]

    return 0;
 8000b6e:	2300      	movs	r3, #0
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000650 	.word	0x20000650

08000b7c <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	e00d      	b.n	8000ba8 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d101      	bne.n	8000b96 <ssd1306_Fill+0x1a>
 8000b92:	2100      	movs	r1, #0
 8000b94:	e000      	b.n	8000b98 <ssd1306_Fill+0x1c>
 8000b96:	21ff      	movs	r1, #255	@ 0xff
 8000b98:	4a09      	ldr	r2, [pc, #36]	@ (8000bc0 <ssd1306_Fill+0x44>)
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	460a      	mov	r2, r1
 8000ba0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000bae:	d3ed      	bcc.n	8000b8c <ssd1306_Fill+0x10>
    }
}
 8000bb0:	bf00      	nop
 8000bb2:	bf00      	nop
 8000bb4:	3714      	adds	r7, #20
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	20000250 	.word	0x20000250

08000bc4 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af04      	add	r7, sp, #16
 8000bca:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8000bcc:	2300      	movs	r3, #0
 8000bce:	73fb      	strb	r3, [r7, #15]
 8000bd0:	e020      	b.n	8000c14 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8000bd2:	7bfb      	ldrb	r3, [r7, #15]
 8000bd4:	3b50      	subs	r3, #80	@ 0x50
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	4619      	mov	r1, r3
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff fe96 	bl	800090c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8000be0:	2100      	movs	r1, #0
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff fe92 	bl	800090c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8000be8:	2110      	movs	r1, #16
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff fe8e 	bl	800090c <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8000bf0:	7bfb      	ldrb	r3, [r7, #15]
 8000bf2:	01db      	lsls	r3, r3, #7
 8000bf4:	4a0b      	ldr	r2, [pc, #44]	@ (8000c24 <ssd1306_UpdateScreen+0x60>)
 8000bf6:	4413      	add	r3, r2
 8000bf8:	2264      	movs	r2, #100	@ 0x64
 8000bfa:	9202      	str	r2, [sp, #8]
 8000bfc:	2280      	movs	r2, #128	@ 0x80
 8000bfe:	9201      	str	r2, [sp, #4]
 8000c00:	9300      	str	r3, [sp, #0]
 8000c02:	2301      	movs	r3, #1
 8000c04:	2240      	movs	r2, #64	@ 0x40
 8000c06:	2178      	movs	r1, #120	@ 0x78
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f003 fbaf 	bl	800436c <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
 8000c10:	3301      	adds	r3, #1
 8000c12:	73fb      	strb	r3, [r7, #15]
 8000c14:	7bfb      	ldrb	r3, [r7, #15]
 8000c16:	2b07      	cmp	r3, #7
 8000c18:	d9db      	bls.n	8000bd2 <ssd1306_UpdateScreen+0xe>
    }
}
 8000c1a:	bf00      	nop
 8000c1c:	bf00      	nop
 8000c1e:	3710      	adds	r7, #16
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000250 	.word	0x20000250

08000c28 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
 8000c32:	460b      	mov	r3, r1
 8000c34:	71bb      	strb	r3, [r7, #6]
 8000c36:	4613      	mov	r3, r2
 8000c38:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	db48      	blt.n	8000cd4 <ssd1306_DrawPixel+0xac>
 8000c42:	79bb      	ldrb	r3, [r7, #6]
 8000c44:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c46:	d845      	bhi.n	8000cd4 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8000c48:	4b25      	ldr	r3, [pc, #148]	@ (8000ce0 <ssd1306_DrawPixel+0xb8>)
 8000c4a:	791b      	ldrb	r3, [r3, #4]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d006      	beq.n	8000c5e <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8000c50:	797b      	ldrb	r3, [r7, #5]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	bf0c      	ite	eq
 8000c56:	2301      	moveq	r3, #1
 8000c58:	2300      	movne	r3, #0
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8000c5e:	797b      	ldrb	r3, [r7, #5]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d11a      	bne.n	8000c9a <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000c64:	79fa      	ldrb	r2, [r7, #7]
 8000c66:	79bb      	ldrb	r3, [r7, #6]
 8000c68:	08db      	lsrs	r3, r3, #3
 8000c6a:	b2d8      	uxtb	r0, r3
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	01db      	lsls	r3, r3, #7
 8000c70:	4413      	add	r3, r2
 8000c72:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce4 <ssd1306_DrawPixel+0xbc>)
 8000c74:	5cd3      	ldrb	r3, [r2, r3]
 8000c76:	b25a      	sxtb	r2, r3
 8000c78:	79bb      	ldrb	r3, [r7, #6]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	2101      	movs	r1, #1
 8000c80:	fa01 f303 	lsl.w	r3, r1, r3
 8000c84:	b25b      	sxtb	r3, r3
 8000c86:	4313      	orrs	r3, r2
 8000c88:	b259      	sxtb	r1, r3
 8000c8a:	79fa      	ldrb	r2, [r7, #7]
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	01db      	lsls	r3, r3, #7
 8000c90:	4413      	add	r3, r2
 8000c92:	b2c9      	uxtb	r1, r1
 8000c94:	4a13      	ldr	r2, [pc, #76]	@ (8000ce4 <ssd1306_DrawPixel+0xbc>)
 8000c96:	54d1      	strb	r1, [r2, r3]
 8000c98:	e01d      	b.n	8000cd6 <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000c9a:	79fa      	ldrb	r2, [r7, #7]
 8000c9c:	79bb      	ldrb	r3, [r7, #6]
 8000c9e:	08db      	lsrs	r3, r3, #3
 8000ca0:	b2d8      	uxtb	r0, r3
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	01db      	lsls	r3, r3, #7
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a0e      	ldr	r2, [pc, #56]	@ (8000ce4 <ssd1306_DrawPixel+0xbc>)
 8000caa:	5cd3      	ldrb	r3, [r2, r3]
 8000cac:	b25a      	sxtb	r2, r3
 8000cae:	79bb      	ldrb	r3, [r7, #6]
 8000cb0:	f003 0307 	and.w	r3, r3, #7
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cba:	b25b      	sxtb	r3, r3
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	b25b      	sxtb	r3, r3
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	b259      	sxtb	r1, r3
 8000cc4:	79fa      	ldrb	r2, [r7, #7]
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	01db      	lsls	r3, r3, #7
 8000cca:	4413      	add	r3, r2
 8000ccc:	b2c9      	uxtb	r1, r1
 8000cce:	4a05      	ldr	r2, [pc, #20]	@ (8000ce4 <ssd1306_DrawPixel+0xbc>)
 8000cd0:	54d1      	strb	r1, [r2, r3]
 8000cd2:	e000      	b.n	8000cd6 <ssd1306_DrawPixel+0xae>
        return;
 8000cd4:	bf00      	nop
    }
}
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	20000650 	.word	0x20000650
 8000ce4:	20000250 	.word	0x20000250

08000ce8 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8000ce8:	b590      	push	{r4, r7, lr}
 8000cea:	b089      	sub	sp, #36	@ 0x24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	1d38      	adds	r0, r7, #4
 8000cf2:	e880 0006 	stmia.w	r0, {r1, r2}
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4623      	mov	r3, r4
 8000cfa:	73fb      	strb	r3, [r7, #15]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000d00:	4b38      	ldr	r3, [pc, #224]	@ (8000de4 <ssd1306_WriteChar+0xfc>)
 8000d02:	881b      	ldrh	r3, [r3, #0]
 8000d04:	461a      	mov	r2, r3
 8000d06:	793b      	ldrb	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d0c:	dc06      	bgt.n	8000d1c <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8000d0e:	4b35      	ldr	r3, [pc, #212]	@ (8000de4 <ssd1306_WriteChar+0xfc>)
 8000d10:	885b      	ldrh	r3, [r3, #2]
 8000d12:	461a      	mov	r2, r3
 8000d14:	797b      	ldrb	r3, [r7, #5]
 8000d16:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000d18:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d1a:	dd01      	ble.n	8000d20 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	e05c      	b.n	8000dda <ssd1306_WriteChar+0xf2>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8000d20:	2300      	movs	r3, #0
 8000d22:	61fb      	str	r3, [r7, #28]
 8000d24:	e04c      	b.n	8000dc0 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000d26:	68ba      	ldr	r2, [r7, #8]
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
 8000d2a:	3b20      	subs	r3, #32
 8000d2c:	7979      	ldrb	r1, [r7, #5]
 8000d2e:	fb01 f303 	mul.w	r3, r1, r3
 8000d32:	4619      	mov	r1, r3
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	440b      	add	r3, r1
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	4413      	add	r3, r2
 8000d3c:	881b      	ldrh	r3, [r3, #0]
 8000d3e:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8000d40:	2300      	movs	r3, #0
 8000d42:	61bb      	str	r3, [r7, #24]
 8000d44:	e034      	b.n	8000db0 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8000d46:	697a      	ldr	r2, [r7, #20]
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d012      	beq.n	8000d7c <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000d56:	4b23      	ldr	r3, [pc, #140]	@ (8000de4 <ssd1306_WriteChar+0xfc>)
 8000d58:	881b      	ldrh	r3, [r3, #0]
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	4413      	add	r3, r2
 8000d62:	b2d8      	uxtb	r0, r3
 8000d64:	4b1f      	ldr	r3, [pc, #124]	@ (8000de4 <ssd1306_WriteChar+0xfc>)
 8000d66:	885b      	ldrh	r3, [r3, #2]
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	4413      	add	r3, r2
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	7bba      	ldrb	r2, [r7, #14]
 8000d74:	4619      	mov	r1, r3
 8000d76:	f7ff ff57 	bl	8000c28 <ssd1306_DrawPixel>
 8000d7a:	e016      	b.n	8000daa <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000d7c:	4b19      	ldr	r3, [pc, #100]	@ (8000de4 <ssd1306_WriteChar+0xfc>)
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	4413      	add	r3, r2
 8000d88:	b2d8      	uxtb	r0, r3
 8000d8a:	4b16      	ldr	r3, [pc, #88]	@ (8000de4 <ssd1306_WriteChar+0xfc>)
 8000d8c:	885b      	ldrh	r3, [r3, #2]
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	4413      	add	r3, r2
 8000d96:	b2d9      	uxtb	r1, r3
 8000d98:	7bbb      	ldrb	r3, [r7, #14]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	bf0c      	ite	eq
 8000d9e:	2301      	moveq	r3, #1
 8000da0:	2300      	movne	r3, #0
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	461a      	mov	r2, r3
 8000da6:	f7ff ff3f 	bl	8000c28 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	3301      	adds	r3, #1
 8000dae:	61bb      	str	r3, [r7, #24]
 8000db0:	793b      	ldrb	r3, [r7, #4]
 8000db2:	461a      	mov	r2, r3
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d3c5      	bcc.n	8000d46 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	61fb      	str	r3, [r7, #28]
 8000dc0:	797b      	ldrb	r3, [r7, #5]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d3ad      	bcc.n	8000d26 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000dca:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <ssd1306_WriteChar+0xfc>)
 8000dcc:	881b      	ldrh	r3, [r3, #0]
 8000dce:	793a      	ldrb	r2, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	b29a      	uxth	r2, r3
 8000dd4:	4b03      	ldr	r3, [pc, #12]	@ (8000de4 <ssd1306_WriteChar+0xfc>)
 8000dd6:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8000dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3724      	adds	r7, #36	@ 0x24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd90      	pop	{r4, r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000650 	.word	0x20000650

08000de8 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	1d38      	adds	r0, r7, #4
 8000df2:	e880 0006 	stmia.w	r0, {r1, r2}
 8000df6:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8000df8:	e012      	b.n	8000e20 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	7818      	ldrb	r0, [r3, #0]
 8000dfe:	78fb      	ldrb	r3, [r7, #3]
 8000e00:	1d3a      	adds	r2, r7, #4
 8000e02:	ca06      	ldmia	r2, {r1, r2}
 8000e04:	f7ff ff70 	bl	8000ce8 <ssd1306_WriteChar>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d002      	beq.n	8000e1a <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	e008      	b.n	8000e2c <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	60fb      	str	r3, [r7, #12]
    while (*str)
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d1e8      	bne.n	8000dfa <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	781b      	ldrb	r3, [r3, #0]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	460a      	mov	r2, r1
 8000e3e:	71fb      	strb	r3, [r7, #7]
 8000e40:	4613      	mov	r3, r2
 8000e42:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	4b05      	ldr	r3, [pc, #20]	@ (8000e60 <ssd1306_SetCursor+0x2c>)
 8000e4a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000e4c:	79bb      	ldrb	r3, [r7, #6]
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	4b03      	ldr	r3, [pc, #12]	@ (8000e60 <ssd1306_SetCursor+0x2c>)
 8000e52:	805a      	strh	r2, [r3, #2]
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	20000650 	.word	0x20000650

08000e64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea8 <HAL_MspInit+0x44>)
 8000e6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e6e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ea8 <HAL_MspInit+0x44>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <HAL_MspInit+0x44>)
 8000e78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e82:	4b09      	ldr	r3, [pc, #36]	@ (8000ea8 <HAL_MspInit+0x44>)
 8000e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e86:	4a08      	ldr	r2, [pc, #32]	@ (8000ea8 <HAL_MspInit+0x44>)
 8000e88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ea8 <HAL_MspInit+0x44>)
 8000e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e96:	603b      	str	r3, [r7, #0]
 8000e98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000e9a:	f003 ff25 	bl	8004ce8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40021000 	.word	0x40021000

08000eac <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b09a      	sub	sp, #104	@ 0x68
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ec4:	f107 0310 	add.w	r3, r7, #16
 8000ec8:	2244      	movs	r2, #68	@ 0x44
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f004 fe23 	bl	8005b18 <memset>
  if(hadc->Instance==ADC1)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000eda:	d15f      	bne.n	8000f9c <HAL_ADC_MspInit+0xf0>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000edc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ee0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000ee2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000ee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ee8:	f107 0310 	add.w	r3, r7, #16
 8000eec:	4618      	mov	r0, r3
 8000eee:	f004 fc01 	bl	80056f4 <HAL_RCCEx_PeriphCLKConfig>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000ef8:	f7ff fd02 	bl	8000900 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000efc:	4b29      	ldr	r3, [pc, #164]	@ (8000fa4 <HAL_ADC_MspInit+0xf8>)
 8000efe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f00:	4a28      	ldr	r2, [pc, #160]	@ (8000fa4 <HAL_ADC_MspInit+0xf8>)
 8000f02:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f08:	4b26      	ldr	r3, [pc, #152]	@ (8000fa4 <HAL_ADC_MspInit+0xf8>)
 8000f0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f14:	4b23      	ldr	r3, [pc, #140]	@ (8000fa4 <HAL_ADC_MspInit+0xf8>)
 8000f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f18:	4a22      	ldr	r2, [pc, #136]	@ (8000fa4 <HAL_ADC_MspInit+0xf8>)
 8000f1a:	f043 0301 	orr.w	r3, r3, #1
 8000f1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f20:	4b20      	ldr	r3, [pc, #128]	@ (8000fa4 <HAL_ADC_MspInit+0xf8>)
 8000f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f30:	2303      	movs	r3, #3
 8000f32:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f38:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f42:	f002 fff5 	bl	8003f30 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f46:	4b18      	ldr	r3, [pc, #96]	@ (8000fa8 <HAL_ADC_MspInit+0xfc>)
 8000f48:	4a18      	ldr	r2, [pc, #96]	@ (8000fac <HAL_ADC_MspInit+0x100>)
 8000f4a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000f4c:	4b16      	ldr	r3, [pc, #88]	@ (8000fa8 <HAL_ADC_MspInit+0xfc>)
 8000f4e:	2205      	movs	r2, #5
 8000f50:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f52:	4b15      	ldr	r3, [pc, #84]	@ (8000fa8 <HAL_ADC_MspInit+0xfc>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f58:	4b13      	ldr	r3, [pc, #76]	@ (8000fa8 <HAL_ADC_MspInit+0xfc>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f5e:	4b12      	ldr	r3, [pc, #72]	@ (8000fa8 <HAL_ADC_MspInit+0xfc>)
 8000f60:	2280      	movs	r2, #128	@ 0x80
 8000f62:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f64:	4b10      	ldr	r3, [pc, #64]	@ (8000fa8 <HAL_ADC_MspInit+0xfc>)
 8000f66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f6a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa8 <HAL_ADC_MspInit+0xfc>)
 8000f6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f72:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f74:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa8 <HAL_ADC_MspInit+0xfc>)
 8000f76:	2220      	movs	r2, #32
 8000f78:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa8 <HAL_ADC_MspInit+0xfc>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f80:	4809      	ldr	r0, [pc, #36]	@ (8000fa8 <HAL_ADC_MspInit+0xfc>)
 8000f82:	f001 fea3 	bl	8002ccc <HAL_DMA_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8000f8c:	f7ff fcb8 	bl	8000900 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a05      	ldr	r2, [pc, #20]	@ (8000fa8 <HAL_ADC_MspInit+0xfc>)
 8000f94:	655a      	str	r2, [r3, #84]	@ 0x54
 8000f96:	4a04      	ldr	r2, [pc, #16]	@ (8000fa8 <HAL_ADC_MspInit+0xfc>)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000f9c:	bf00      	nop
 8000f9e:	3768      	adds	r7, #104	@ 0x68
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	200000fc 	.word	0x200000fc
 8000fac:	40020008 	.word	0x40020008

08000fb0 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b09a      	sub	sp, #104	@ 0x68
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fc8:	f107 0310 	add.w	r3, r7, #16
 8000fcc:	2244      	movs	r2, #68	@ 0x44
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f004 fda1 	bl	8005b18 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a24      	ldr	r2, [pc, #144]	@ (800106c <HAL_FDCAN_MspInit+0xbc>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d141      	bne.n	8001064 <HAL_FDCAN_MspInit+0xb4>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000fe0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fe4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000fe6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000fea:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f004 fb7f 	bl	80056f4 <HAL_RCCEx_PeriphCLKConfig>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000ffc:	f7ff fc80 	bl	8000900 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001000:	4b1b      	ldr	r3, [pc, #108]	@ (8001070 <HAL_FDCAN_MspInit+0xc0>)
 8001002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001004:	4a1a      	ldr	r2, [pc, #104]	@ (8001070 <HAL_FDCAN_MspInit+0xc0>)
 8001006:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800100a:	6593      	str	r3, [r2, #88]	@ 0x58
 800100c:	4b18      	ldr	r3, [pc, #96]	@ (8001070 <HAL_FDCAN_MspInit+0xc0>)
 800100e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001010:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001018:	4b15      	ldr	r3, [pc, #84]	@ (8001070 <HAL_FDCAN_MspInit+0xc0>)
 800101a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800101c:	4a14      	ldr	r2, [pc, #80]	@ (8001070 <HAL_FDCAN_MspInit+0xc0>)
 800101e:	f043 0301 	orr.w	r3, r3, #1
 8001022:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001024:	4b12      	ldr	r3, [pc, #72]	@ (8001070 <HAL_FDCAN_MspInit+0xc0>)
 8001026:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001028:	f003 0301 	and.w	r3, r3, #1
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001030:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001034:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001036:	2302      	movs	r3, #2
 8001038:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103e:	2300      	movs	r3, #0
 8001040:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001042:	2309      	movs	r3, #9
 8001044:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001046:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800104a:	4619      	mov	r1, r3
 800104c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001050:	f002 ff6e 	bl	8003f30 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001054:	2200      	movs	r2, #0
 8001056:	2100      	movs	r1, #0
 8001058:	2015      	movs	r0, #21
 800105a:	f001 fe02 	bl	8002c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800105e:	2015      	movs	r0, #21
 8001060:	f001 fe19 	bl	8002c96 <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8001064:	bf00      	nop
 8001066:	3768      	adds	r7, #104	@ 0x68
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40006400 	.word	0x40006400
 8001070:	40021000 	.word	0x40021000

08001074 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b09c      	sub	sp, #112	@ 0x70
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800108c:	f107 0318 	add.w	r3, r7, #24
 8001090:	2244      	movs	r2, #68	@ 0x44
 8001092:	2100      	movs	r1, #0
 8001094:	4618      	mov	r0, r3
 8001096:	f004 fd3f 	bl	8005b18 <memset>
  if(hi2c->Instance==I2C3)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a2e      	ldr	r2, [pc, #184]	@ (8001158 <HAL_I2C_MspInit+0xe4>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d154      	bne.n	800114e <HAL_I2C_MspInit+0xda>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80010a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010a8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ae:	f107 0318 	add.w	r3, r7, #24
 80010b2:	4618      	mov	r0, r3
 80010b4:	f004 fb1e 	bl	80056f4 <HAL_RCCEx_PeriphCLKConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80010be:	f7ff fc1f 	bl	8000900 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c2:	4b26      	ldr	r3, [pc, #152]	@ (800115c <HAL_I2C_MspInit+0xe8>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c6:	4a25      	ldr	r2, [pc, #148]	@ (800115c <HAL_I2C_MspInit+0xe8>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ce:	4b23      	ldr	r3, [pc, #140]	@ (800115c <HAL_I2C_MspInit+0xe8>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	617b      	str	r3, [r7, #20]
 80010d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010da:	4b20      	ldr	r3, [pc, #128]	@ (800115c <HAL_I2C_MspInit+0xe8>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010de:	4a1f      	ldr	r2, [pc, #124]	@ (800115c <HAL_I2C_MspInit+0xe8>)
 80010e0:	f043 0302 	orr.w	r3, r3, #2
 80010e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010e6:	4b1d      	ldr	r3, [pc, #116]	@ (800115c <HAL_I2C_MspInit+0xe8>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB5     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010f8:	2312      	movs	r3, #18
 80010fa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2300      	movs	r3, #0
 8001102:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8001104:	2302      	movs	r3, #2
 8001106:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001108:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800110c:	4619      	mov	r1, r3
 800110e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001112:	f002 ff0d 	bl	8003f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001116:	2320      	movs	r3, #32
 8001118:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800111a:	2312      	movs	r3, #18
 800111c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2300      	movs	r3, #0
 8001124:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8001126:	2308      	movs	r3, #8
 8001128:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800112e:	4619      	mov	r1, r3
 8001130:	480b      	ldr	r0, [pc, #44]	@ (8001160 <HAL_I2C_MspInit+0xec>)
 8001132:	f002 fefd 	bl	8003f30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001136:	4b09      	ldr	r3, [pc, #36]	@ (800115c <HAL_I2C_MspInit+0xe8>)
 8001138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800113a:	4a08      	ldr	r2, [pc, #32]	@ (800115c <HAL_I2C_MspInit+0xe8>)
 800113c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001140:	6593      	str	r3, [r2, #88]	@ 0x58
 8001142:	4b06      	ldr	r3, [pc, #24]	@ (800115c <HAL_I2C_MspInit+0xe8>)
 8001144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001146:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 800114e:	bf00      	nop
 8001150:	3770      	adds	r7, #112	@ 0x70
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40007800 	.word	0x40007800
 800115c:	40021000 	.word	0x40021000
 8001160:	48000400 	.word	0x48000400

08001164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <NMI_Handler+0x4>

0800116c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <HardFault_Handler+0x4>

08001174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001178:	bf00      	nop
 800117a:	e7fd      	b.n	8001178 <MemManage_Handler+0x4>

0800117c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001180:	bf00      	nop
 8001182:	e7fd      	b.n	8001180 <BusFault_Handler+0x4>

08001184 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <UsageFault_Handler+0x4>

0800118c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ba:	f000 f8db 	bl	8001374 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80011c8:	4802      	ldr	r0, [pc, #8]	@ (80011d4 <DMA1_Channel1_IRQHandler+0x10>)
 80011ca:	f001 fea2 	bl	8002f12 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200000fc 	.word	0x200000fc

080011d8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80011dc:	4802      	ldr	r0, [pc, #8]	@ (80011e8 <FDCAN1_IT0_IRQHandler+0x10>)
 80011de:	f002 fc39 	bl	8003a54 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	2000015c 	.word	0x2000015c

080011ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011f4:	4a14      	ldr	r2, [pc, #80]	@ (8001248 <_sbrk+0x5c>)
 80011f6:	4b15      	ldr	r3, [pc, #84]	@ (800124c <_sbrk+0x60>)
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001200:	4b13      	ldr	r3, [pc, #76]	@ (8001250 <_sbrk+0x64>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d102      	bne.n	800120e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001208:	4b11      	ldr	r3, [pc, #68]	@ (8001250 <_sbrk+0x64>)
 800120a:	4a12      	ldr	r2, [pc, #72]	@ (8001254 <_sbrk+0x68>)
 800120c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800120e:	4b10      	ldr	r3, [pc, #64]	@ (8001250 <_sbrk+0x64>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4413      	add	r3, r2
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	429a      	cmp	r2, r3
 800121a:	d207      	bcs.n	800122c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800121c:	f004 fc84 	bl	8005b28 <__errno>
 8001220:	4603      	mov	r3, r0
 8001222:	220c      	movs	r2, #12
 8001224:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001226:	f04f 33ff 	mov.w	r3, #4294967295
 800122a:	e009      	b.n	8001240 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800122c:	4b08      	ldr	r3, [pc, #32]	@ (8001250 <_sbrk+0x64>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001232:	4b07      	ldr	r3, [pc, #28]	@ (8001250 <_sbrk+0x64>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4413      	add	r3, r2
 800123a:	4a05      	ldr	r2, [pc, #20]	@ (8001250 <_sbrk+0x64>)
 800123c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800123e:	68fb      	ldr	r3, [r7, #12]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3718      	adds	r7, #24
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20008000 	.word	0x20008000
 800124c:	00000400 	.word	0x00000400
 8001250:	20000658 	.word	0x20000658
 8001254:	200007a8 	.word	0x200007a8

08001258 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800125c:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <SystemInit+0x20>)
 800125e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001262:	4a05      	ldr	r2, [pc, #20]	@ (8001278 <SystemInit+0x20>)
 8001264:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001268:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800127c:	480d      	ldr	r0, [pc, #52]	@ (80012b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800127e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001280:	f7ff ffea 	bl	8001258 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001284:	480c      	ldr	r0, [pc, #48]	@ (80012b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001286:	490d      	ldr	r1, [pc, #52]	@ (80012bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001288:	4a0d      	ldr	r2, [pc, #52]	@ (80012c0 <LoopForever+0xe>)
  movs r3, #0
 800128a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800128c:	e002      	b.n	8001294 <LoopCopyDataInit>

0800128e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800128e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001292:	3304      	adds	r3, #4

08001294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001298:	d3f9      	bcc.n	800128e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800129a:	4a0a      	ldr	r2, [pc, #40]	@ (80012c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800129c:	4c0a      	ldr	r4, [pc, #40]	@ (80012c8 <LoopForever+0x16>)
  movs r3, #0
 800129e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a0:	e001      	b.n	80012a6 <LoopFillZerobss>

080012a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a4:	3204      	adds	r2, #4

080012a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a8:	d3fb      	bcc.n	80012a2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80012aa:	f004 fc43 	bl	8005b34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012ae:	f7ff f87f 	bl	80003b0 <main>

080012b2 <LoopForever>:

LoopForever:
    b LoopForever
 80012b2:	e7fe      	b.n	80012b2 <LoopForever>
  ldr   r0, =_estack
 80012b4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80012b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012bc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80012c0:	08007980 	.word	0x08007980
  ldr r2, =_sbss
 80012c4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80012c8:	200007a8 	.word	0x200007a8

080012cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012cc:	e7fe      	b.n	80012cc <ADC1_2_IRQHandler>

080012ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012d4:	2300      	movs	r3, #0
 80012d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d8:	2003      	movs	r0, #3
 80012da:	f001 fcb7 	bl	8002c4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012de:	200f      	movs	r0, #15
 80012e0:	f000 f80e 	bl	8001300 <HAL_InitTick>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d002      	beq.n	80012f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	71fb      	strb	r3, [r7, #7]
 80012ee:	e001      	b.n	80012f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012f0:	f7ff fdb8 	bl	8000e64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012f4:	79fb      	ldrb	r3, [r7, #7]

}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001308:	2300      	movs	r3, #0
 800130a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800130c:	4b16      	ldr	r3, [pc, #88]	@ (8001368 <HAL_InitTick+0x68>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d022      	beq.n	800135a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001314:	4b15      	ldr	r3, [pc, #84]	@ (800136c <HAL_InitTick+0x6c>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b13      	ldr	r3, [pc, #76]	@ (8001368 <HAL_InitTick+0x68>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001320:	fbb1 f3f3 	udiv	r3, r1, r3
 8001324:	fbb2 f3f3 	udiv	r3, r2, r3
 8001328:	4618      	mov	r0, r3
 800132a:	f001 fcc2 	bl	8002cb2 <HAL_SYSTICK_Config>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d10f      	bne.n	8001354 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b0f      	cmp	r3, #15
 8001338:	d809      	bhi.n	800134e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800133a:	2200      	movs	r2, #0
 800133c:	6879      	ldr	r1, [r7, #4]
 800133e:	f04f 30ff 	mov.w	r0, #4294967295
 8001342:	f001 fc8e 	bl	8002c62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001346:	4a0a      	ldr	r2, [pc, #40]	@ (8001370 <HAL_InitTick+0x70>)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	e007      	b.n	800135e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	73fb      	strb	r3, [r7, #15]
 8001352:	e004      	b.n	800135e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	73fb      	strb	r3, [r7, #15]
 8001358:	e001      	b.n	800135e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800135e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000020 	.word	0x20000020
 800136c:	20000018 	.word	0x20000018
 8001370:	2000001c 	.word	0x2000001c

08001374 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001378:	4b05      	ldr	r3, [pc, #20]	@ (8001390 <HAL_IncTick+0x1c>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4b05      	ldr	r3, [pc, #20]	@ (8001394 <HAL_IncTick+0x20>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4413      	add	r3, r2
 8001382:	4a03      	ldr	r2, [pc, #12]	@ (8001390 <HAL_IncTick+0x1c>)
 8001384:	6013      	str	r3, [r2, #0]
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	2000065c 	.word	0x2000065c
 8001394:	20000020 	.word	0x20000020

08001398 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return uwTick;
 800139c:	4b03      	ldr	r3, [pc, #12]	@ (80013ac <HAL_GetTick+0x14>)
 800139e:	681b      	ldr	r3, [r3, #0]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	2000065c 	.word	0x2000065c

080013b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b8:	f7ff ffee 	bl	8001398 <HAL_GetTick>
 80013bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c8:	d004      	beq.n	80013d4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ca:	4b09      	ldr	r3, [pc, #36]	@ (80013f0 <HAL_Delay+0x40>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	4413      	add	r3, r2
 80013d2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013d4:	bf00      	nop
 80013d6:	f7ff ffdf 	bl	8001398 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d8f7      	bhi.n	80013d6 <HAL_Delay+0x26>
  {
  }
}
 80013e6:	bf00      	nop
 80013e8:	bf00      	nop
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000020 	.word	0x20000020

080013f4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	431a      	orrs	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	609a      	str	r2, [r3, #8]
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
 8001422:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	431a      	orrs	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	609a      	str	r2, [r3, #8]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800145c:	b480      	push	{r7}
 800145e:	b087      	sub	sp, #28
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
 8001468:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	3360      	adds	r3, #96	@ 0x60
 800146e:	461a      	mov	r2, r3
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b08      	ldr	r3, [pc, #32]	@ (80014a0 <LL_ADC_SetOffset+0x44>)
 800147e:	4013      	ands	r3, r2
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	430a      	orrs	r2, r1
 800148a:	4313      	orrs	r3, r2
 800148c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001494:	bf00      	nop
 8001496:	371c      	adds	r7, #28
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	03fff000 	.word	0x03fff000

080014a4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	3360      	adds	r3, #96	@ 0x60
 80014b2:	461a      	mov	r2, r3
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b087      	sub	sp, #28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	3360      	adds	r3, #96	@ 0x60
 80014e0:	461a      	mov	r2, r3
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4413      	add	r3, r2
 80014e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	431a      	orrs	r2, r3
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80014fa:	bf00      	nop
 80014fc:	371c      	adds	r7, #28
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001506:	b480      	push	{r7}
 8001508:	b087      	sub	sp, #28
 800150a:	af00      	add	r7, sp, #0
 800150c:	60f8      	str	r0, [r7, #12]
 800150e:	60b9      	str	r1, [r7, #8]
 8001510:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	3360      	adds	r3, #96	@ 0x60
 8001516:	461a      	mov	r2, r3
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4413      	add	r3, r2
 800151e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	431a      	orrs	r2, r3
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001530:	bf00      	nop
 8001532:	371c      	adds	r7, #28
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800153c:	b480      	push	{r7}
 800153e:	b087      	sub	sp, #28
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	3360      	adds	r3, #96	@ 0x60
 800154c:	461a      	mov	r2, r3
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	431a      	orrs	r2, r3
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001566:	bf00      	nop
 8001568:	371c      	adds	r7, #28
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
 800157a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	695b      	ldr	r3, [r3, #20]
 8001580:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	431a      	orrs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	615a      	str	r2, [r3, #20]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d101      	bne.n	80015b0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80015ac:	2301      	movs	r3, #1
 80015ae:	e000      	b.n	80015b2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80015be:	b480      	push	{r7}
 80015c0:	b087      	sub	sp, #28
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	60f8      	str	r0, [r7, #12]
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	3330      	adds	r3, #48	@ 0x30
 80015ce:	461a      	mov	r2, r3
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	0a1b      	lsrs	r3, r3, #8
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	f003 030c 	and.w	r3, r3, #12
 80015da:	4413      	add	r3, r2
 80015dc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	f003 031f 	and.w	r3, r3, #31
 80015e8:	211f      	movs	r1, #31
 80015ea:	fa01 f303 	lsl.w	r3, r1, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	401a      	ands	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	0e9b      	lsrs	r3, r3, #26
 80015f6:	f003 011f 	and.w	r1, r3, #31
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	f003 031f 	and.w	r3, r3, #31
 8001600:	fa01 f303 	lsl.w	r3, r1, r3
 8001604:	431a      	orrs	r2, r3
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800160a:	bf00      	nop
 800160c:	371c      	adds	r7, #28
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001616:	b480      	push	{r7}
 8001618:	b087      	sub	sp, #28
 800161a:	af00      	add	r7, sp, #0
 800161c:	60f8      	str	r0, [r7, #12]
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	3314      	adds	r3, #20
 8001626:	461a      	mov	r2, r3
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	0e5b      	lsrs	r3, r3, #25
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	f003 0304 	and.w	r3, r3, #4
 8001632:	4413      	add	r3, r2
 8001634:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	0d1b      	lsrs	r3, r3, #20
 800163e:	f003 031f 	and.w	r3, r3, #31
 8001642:	2107      	movs	r1, #7
 8001644:	fa01 f303 	lsl.w	r3, r1, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	401a      	ands	r2, r3
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	0d1b      	lsrs	r3, r3, #20
 8001650:	f003 031f 	and.w	r3, r3, #31
 8001654:	6879      	ldr	r1, [r7, #4]
 8001656:	fa01 f303 	lsl.w	r3, r1, r3
 800165a:	431a      	orrs	r2, r3
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001660:	bf00      	nop
 8001662:	371c      	adds	r7, #28
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001684:	43db      	mvns	r3, r3
 8001686:	401a      	ands	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f003 0318 	and.w	r3, r3, #24
 800168e:	4908      	ldr	r1, [pc, #32]	@ (80016b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001690:	40d9      	lsrs	r1, r3
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	400b      	ands	r3, r1
 8001696:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800169a:	431a      	orrs	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80016a2:	bf00      	nop
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	0007ffff 	.word	0x0007ffff

080016b4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f003 031f 	and.w	r3, r3, #31
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80016e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6093      	str	r3, [r2, #8]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001704:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001708:	d101      	bne.n	800170e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800170a:	2301      	movs	r3, #1
 800170c:	e000      	b.n	8001710 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800172c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001730:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001754:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001758:	d101      	bne.n	800175e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800175a:	2301      	movs	r3, #1
 800175c:	e000      	b.n	8001760 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800177c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001780:	f043 0201 	orr.w	r2, r3, #1
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80017a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80017a8:	f043 0202 	orr.w	r2, r3, #2
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d101      	bne.n	80017d4 <LL_ADC_IsEnabled+0x18>
 80017d0:	2301      	movs	r3, #1
 80017d2:	e000      	b.n	80017d6 <LL_ADC_IsEnabled+0x1a>
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d101      	bne.n	80017fa <LL_ADC_IsDisableOngoing+0x18>
 80017f6:	2301      	movs	r3, #1
 80017f8:	e000      	b.n	80017fc <LL_ADC_IsDisableOngoing+0x1a>
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001818:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800181c:	f043 0204 	orr.w	r2, r3, #4
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b04      	cmp	r3, #4
 8001842:	d101      	bne.n	8001848 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001844:	2301      	movs	r3, #1
 8001846:	e000      	b.n	800184a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	2b08      	cmp	r3, #8
 8001868:	d101      	bne.n	800186e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800186a:	2301      	movs	r3, #1
 800186c:	e000      	b.n	8001870 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b089      	sub	sp, #36	@ 0x24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001884:	2300      	movs	r3, #0
 8001886:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e167      	b.n	8001b66 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d109      	bne.n	80018b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff fb01 	bl	8000eac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff19 	bl	80016f4 <LL_ADC_IsDeepPowerDownEnabled>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d004      	beq.n	80018d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff feff 	bl	80016d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff ff34 	bl	8001744 <LL_ADC_IsInternalRegulatorEnabled>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d115      	bne.n	800190e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff ff18 	bl	800171c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018ec:	4ba0      	ldr	r3, [pc, #640]	@ (8001b70 <HAL_ADC_Init+0x2f4>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	099b      	lsrs	r3, r3, #6
 80018f2:	4aa0      	ldr	r2, [pc, #640]	@ (8001b74 <HAL_ADC_Init+0x2f8>)
 80018f4:	fba2 2303 	umull	r2, r3, r2, r3
 80018f8:	099b      	lsrs	r3, r3, #6
 80018fa:	3301      	adds	r3, #1
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001900:	e002      	b.n	8001908 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	3b01      	subs	r3, #1
 8001906:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1f9      	bne.n	8001902 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff ff16 	bl	8001744 <LL_ADC_IsInternalRegulatorEnabled>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d10d      	bne.n	800193a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001922:	f043 0210 	orr.w	r2, r3, #16
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800192e:	f043 0201 	orr.w	r2, r3, #1
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff ff76 	bl	8001830 <LL_ADC_REG_IsConversionOngoing>
 8001944:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800194a:	f003 0310 	and.w	r3, r3, #16
 800194e:	2b00      	cmp	r3, #0
 8001950:	f040 8100 	bne.w	8001b54 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	2b00      	cmp	r3, #0
 8001958:	f040 80fc 	bne.w	8001b54 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001960:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001964:	f043 0202 	orr.w	r2, r3, #2
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff23 	bl	80017bc <LL_ADC_IsEnabled>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d111      	bne.n	80019a0 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800197c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001980:	f7ff ff1c 	bl	80017bc <LL_ADC_IsEnabled>
 8001984:	4604      	mov	r4, r0
 8001986:	487c      	ldr	r0, [pc, #496]	@ (8001b78 <HAL_ADC_Init+0x2fc>)
 8001988:	f7ff ff18 	bl	80017bc <LL_ADC_IsEnabled>
 800198c:	4603      	mov	r3, r0
 800198e:	4323      	orrs	r3, r4
 8001990:	2b00      	cmp	r3, #0
 8001992:	d105      	bne.n	80019a0 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	4619      	mov	r1, r3
 800199a:	4878      	ldr	r0, [pc, #480]	@ (8001b7c <HAL_ADC_Init+0x300>)
 800199c:	f7ff fd2a 	bl	80013f4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	7f5b      	ldrb	r3, [r3, #29]
 80019a4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019aa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80019b0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80019b6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80019be:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d106      	bne.n	80019dc <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d2:	3b01      	subs	r3, #1
 80019d4:	045b      	lsls	r3, r3, #17
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4313      	orrs	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d009      	beq.n	80019f8 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68da      	ldr	r2, [r3, #12]
 80019fe:	4b60      	ldr	r3, [pc, #384]	@ (8001b80 <HAL_ADC_Init+0x304>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	6812      	ldr	r2, [r2, #0]
 8001a06:	69b9      	ldr	r1, [r7, #24]
 8001a08:	430b      	orrs	r3, r1
 8001a0a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff ff15 	bl	8001856 <LL_ADC_INJ_IsConversionOngoing>
 8001a2c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d16d      	bne.n	8001b10 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d16a      	bne.n	8001b10 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a3e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001a46:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001a56:	f023 0302 	bic.w	r3, r3, #2
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6812      	ldr	r2, [r2, #0]
 8001a5e:	69b9      	ldr	r1, [r7, #24]
 8001a60:	430b      	orrs	r3, r1
 8001a62:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d017      	beq.n	8001a9c <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	691a      	ldr	r2, [r3, #16]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001a7a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001a84:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001a88:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	6911      	ldr	r1, [r2, #16]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6812      	ldr	r2, [r2, #0]
 8001a94:	430b      	orrs	r3, r1
 8001a96:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001a9a:	e013      	b.n	8001ac4 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	691a      	ldr	r2, [r3, #16]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001aaa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	6812      	ldr	r2, [r2, #0]
 8001ab8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001abc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ac0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d118      	bne.n	8001b00 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001ad8:	f023 0304 	bic.w	r3, r3, #4
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001ae4:	4311      	orrs	r1, r2
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001aea:	4311      	orrs	r1, r2
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001af0:	430a      	orrs	r2, r1
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f042 0201 	orr.w	r2, r2, #1
 8001afc:	611a      	str	r2, [r3, #16]
 8001afe:	e007      	b.n	8001b10 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	691a      	ldr	r2, [r3, #16]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 0201 	bic.w	r2, r2, #1
 8001b0e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	695b      	ldr	r3, [r3, #20]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d10c      	bne.n	8001b32 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1e:	f023 010f 	bic.w	r1, r3, #15
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	1e5a      	subs	r2, r3, #1
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b30:	e007      	b.n	8001b42 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 020f 	bic.w	r2, r2, #15
 8001b40:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b46:	f023 0303 	bic.w	r3, r3, #3
 8001b4a:	f043 0201 	orr.w	r2, r3, #1
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b52:	e007      	b.n	8001b64 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b58:	f043 0210 	orr.w	r2, r3, #16
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b64:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3724      	adds	r7, #36	@ 0x24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd90      	pop	{r4, r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000018 	.word	0x20000018
 8001b74:	053e2d63 	.word	0x053e2d63
 8001b78:	50000100 	.word	0x50000100
 8001b7c:	50000300 	.word	0x50000300
 8001b80:	fff04007 	.word	0xfff04007

08001b84 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b90:	4851      	ldr	r0, [pc, #324]	@ (8001cd8 <HAL_ADC_Start_DMA+0x154>)
 8001b92:	f7ff fd8f 	bl	80016b4 <LL_ADC_GetMultimode>
 8001b96:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff fe47 	bl	8001830 <LL_ADC_REG_IsConversionOngoing>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f040 808f 	bne.w	8001cc8 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d101      	bne.n	8001bb8 <HAL_ADC_Start_DMA+0x34>
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	e08a      	b.n	8001cce <HAL_ADC_Start_DMA+0x14a>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d005      	beq.n	8001bd2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	2b05      	cmp	r3, #5
 8001bca:	d002      	beq.n	8001bd2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	2b09      	cmp	r3, #9
 8001bd0:	d173      	bne.n	8001cba <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f000 fc98 	bl	8002508 <ADC_Enable>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001bdc:	7dfb      	ldrb	r3, [r7, #23]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d166      	bne.n	8001cb0 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001be6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001bea:	f023 0301 	bic.w	r3, r3, #1
 8001bee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a38      	ldr	r2, [pc, #224]	@ (8001cdc <HAL_ADC_Start_DMA+0x158>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d002      	beq.n	8001c06 <HAL_ADC_Start_DMA+0x82>
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	e001      	b.n	8001c0a <HAL_ADC_Start_DMA+0x86>
 8001c06:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	6812      	ldr	r2, [r2, #0]
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d002      	beq.n	8001c18 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d105      	bne.n	8001c24 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c1c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d006      	beq.n	8001c3e <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c34:	f023 0206 	bic.w	r2, r3, #6
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	661a      	str	r2, [r3, #96]	@ 0x60
 8001c3c:	e002      	b.n	8001c44 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2200      	movs	r2, #0
 8001c42:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c48:	4a25      	ldr	r2, [pc, #148]	@ (8001ce0 <HAL_ADC_Start_DMA+0x15c>)
 8001c4a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c50:	4a24      	ldr	r2, [pc, #144]	@ (8001ce4 <HAL_ADC_Start_DMA+0x160>)
 8001c52:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c58:	4a23      	ldr	r2, [pc, #140]	@ (8001ce8 <HAL_ADC_Start_DMA+0x164>)
 8001c5a:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	221c      	movs	r2, #28
 8001c62:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f042 0210 	orr.w	r2, r2, #16
 8001c7a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68da      	ldr	r2, [r3, #12]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f042 0201 	orr.w	r2, r2, #1
 8001c8a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	3340      	adds	r3, #64	@ 0x40
 8001c96:	4619      	mov	r1, r3
 8001c98:	68ba      	ldr	r2, [r7, #8]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f001 f8be 	bl	8002e1c <HAL_DMA_Start_IT>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff fdad 	bl	8001808 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001cae:	e00d      	b.n	8001ccc <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8001cb8:	e008      	b.n	8001ccc <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001cc6:	e001      	b.n	8001ccc <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	50000300 	.word	0x50000300
 8001cdc:	50000100 	.word	0x50000100
 8001ce0:	080026d3 	.word	0x080026d3
 8001ce4:	080027ab 	.word	0x080027ab
 8001ce8:	080027c7 	.word	0x080027c7

08001cec <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b0b6      	sub	sp, #216	@ 0xd8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d32:	2300      	movs	r3, #0
 8001d34:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d101      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x22>
 8001d46:	2302      	movs	r3, #2
 8001d48:	e3c8      	b.n	80024dc <HAL_ADC_ConfigChannel+0x7b4>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff fd6a 	bl	8001830 <LL_ADC_REG_IsConversionOngoing>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f040 83ad 	bne.w	80024be <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6818      	ldr	r0, [r3, #0]
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	6859      	ldr	r1, [r3, #4]
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	461a      	mov	r2, r3
 8001d72:	f7ff fc24 	bl	80015be <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff fd58 	bl	8001830 <LL_ADC_REG_IsConversionOngoing>
 8001d80:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff fd64 	bl	8001856 <LL_ADC_INJ_IsConversionOngoing>
 8001d8e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d92:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f040 81d9 	bne.w	800214e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f040 81d4 	bne.w	800214e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001dae:	d10f      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6818      	ldr	r0, [r3, #0]
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2200      	movs	r2, #0
 8001dba:	4619      	mov	r1, r3
 8001dbc:	f7ff fc2b 	bl	8001616 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff fbd2 	bl	8001572 <LL_ADC_SetSamplingTimeCommonConfig>
 8001dce:	e00e      	b.n	8001dee <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6818      	ldr	r0, [r3, #0]
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	6819      	ldr	r1, [r3, #0]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	f7ff fc1a 	bl	8001616 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2100      	movs	r1, #0
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff fbc2 	bl	8001572 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	695a      	ldr	r2, [r3, #20]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	08db      	lsrs	r3, r3, #3
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	2b04      	cmp	r3, #4
 8001e0e:	d022      	beq.n	8001e56 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6818      	ldr	r0, [r3, #0]
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	6919      	ldr	r1, [r3, #16]
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001e20:	f7ff fb1c 	bl	800145c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6818      	ldr	r0, [r3, #0]
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	6919      	ldr	r1, [r3, #16]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	461a      	mov	r2, r3
 8001e32:	f7ff fb68 	bl	8001506 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6818      	ldr	r0, [r3, #0]
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d102      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x124>
 8001e46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e4a:	e000      	b.n	8001e4e <HAL_ADC_ConfigChannel+0x126>
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	461a      	mov	r2, r3
 8001e50:	f7ff fb74 	bl	800153c <LL_ADC_SetOffsetSaturation>
 8001e54:	e17b      	b.n	800214e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff fb21 	bl	80014a4 <LL_ADC_GetOffsetChannel>
 8001e62:	4603      	mov	r3, r0
 8001e64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10a      	bne.n	8001e82 <HAL_ADC_ConfigChannel+0x15a>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2100      	movs	r1, #0
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff fb16 	bl	80014a4 <LL_ADC_GetOffsetChannel>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	0e9b      	lsrs	r3, r3, #26
 8001e7c:	f003 021f 	and.w	r2, r3, #31
 8001e80:	e01e      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0x198>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2100      	movs	r1, #0
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff fb0b 	bl	80014a4 <LL_ADC_GetOffsetChannel>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001e98:	fa93 f3a3 	rbit	r3, r3
 8001e9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ea0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ea4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ea8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001eb0:	2320      	movs	r3, #32
 8001eb2:	e004      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001eb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001eb8:	fab3 f383 	clz	r3, r3
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d105      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x1b0>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	0e9b      	lsrs	r3, r3, #26
 8001ed2:	f003 031f 	and.w	r3, r3, #31
 8001ed6:	e018      	b.n	8001f0a <HAL_ADC_ConfigChannel+0x1e2>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001ee4:	fa93 f3a3 	rbit	r3, r3
 8001ee8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001eec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ef0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001ef4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001efc:	2320      	movs	r3, #32
 8001efe:	e004      	b.n	8001f0a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001f00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001f04:	fab3 f383 	clz	r3, r3
 8001f08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d106      	bne.n	8001f1c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2200      	movs	r2, #0
 8001f14:	2100      	movs	r1, #0
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff fada 	bl	80014d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2101      	movs	r1, #1
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff fabe 	bl	80014a4 <LL_ADC_GetOffsetChannel>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10a      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x220>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2101      	movs	r1, #1
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff fab3 	bl	80014a4 <LL_ADC_GetOffsetChannel>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	0e9b      	lsrs	r3, r3, #26
 8001f42:	f003 021f 	and.w	r2, r3, #31
 8001f46:	e01e      	b.n	8001f86 <HAL_ADC_ConfigChannel+0x25e>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff faa8 	bl	80014a4 <LL_ADC_GetOffsetChannel>
 8001f54:	4603      	mov	r3, r0
 8001f56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001f5e:	fa93 f3a3 	rbit	r3, r3
 8001f62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001f66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001f6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001f6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001f76:	2320      	movs	r3, #32
 8001f78:	e004      	b.n	8001f84 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001f7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f7e:	fab3 f383 	clz	r3, r3
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d105      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x276>
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	0e9b      	lsrs	r3, r3, #26
 8001f98:	f003 031f 	and.w	r3, r3, #31
 8001f9c:	e018      	b.n	8001fd0 <HAL_ADC_ConfigChannel+0x2a8>
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001faa:	fa93 f3a3 	rbit	r3, r3
 8001fae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001fb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001fb6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001fba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001fc2:	2320      	movs	r3, #32
 8001fc4:	e004      	b.n	8001fd0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001fc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001fca:	fab3 f383 	clz	r3, r3
 8001fce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d106      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2101      	movs	r1, #1
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff fa77 	bl	80014d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2102      	movs	r1, #2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fa5b 	bl	80014a4 <LL_ADC_GetOffsetChannel>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d10a      	bne.n	800200e <HAL_ADC_ConfigChannel+0x2e6>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2102      	movs	r1, #2
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fa50 	bl	80014a4 <LL_ADC_GetOffsetChannel>
 8002004:	4603      	mov	r3, r0
 8002006:	0e9b      	lsrs	r3, r3, #26
 8002008:	f003 021f 	and.w	r2, r3, #31
 800200c:	e01e      	b.n	800204c <HAL_ADC_ConfigChannel+0x324>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2102      	movs	r1, #2
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fa45 	bl	80014a4 <LL_ADC_GetOffsetChannel>
 800201a:	4603      	mov	r3, r0
 800201c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002020:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002024:	fa93 f3a3 	rbit	r3, r3
 8002028:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800202c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002030:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002034:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002038:	2b00      	cmp	r3, #0
 800203a:	d101      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 800203c:	2320      	movs	r3, #32
 800203e:	e004      	b.n	800204a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002040:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002044:	fab3 f383 	clz	r3, r3
 8002048:	b2db      	uxtb	r3, r3
 800204a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002054:	2b00      	cmp	r3, #0
 8002056:	d105      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x33c>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	0e9b      	lsrs	r3, r3, #26
 800205e:	f003 031f 	and.w	r3, r3, #31
 8002062:	e016      	b.n	8002092 <HAL_ADC_ConfigChannel+0x36a>
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002070:	fa93 f3a3 	rbit	r3, r3
 8002074:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002076:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002078:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800207c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002084:	2320      	movs	r3, #32
 8002086:	e004      	b.n	8002092 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002088:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800208c:	fab3 f383 	clz	r3, r3
 8002090:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002092:	429a      	cmp	r2, r3
 8002094:	d106      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2200      	movs	r2, #0
 800209c:	2102      	movs	r1, #2
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff fa16 	bl	80014d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2103      	movs	r1, #3
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff f9fa 	bl	80014a4 <LL_ADC_GetOffsetChannel>
 80020b0:	4603      	mov	r3, r0
 80020b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10a      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x3a8>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2103      	movs	r1, #3
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff f9ef 	bl	80014a4 <LL_ADC_GetOffsetChannel>
 80020c6:	4603      	mov	r3, r0
 80020c8:	0e9b      	lsrs	r3, r3, #26
 80020ca:	f003 021f 	and.w	r2, r3, #31
 80020ce:	e017      	b.n	8002100 <HAL_ADC_ConfigChannel+0x3d8>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2103      	movs	r1, #3
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff f9e4 	bl	80014a4 <LL_ADC_GetOffsetChannel>
 80020dc:	4603      	mov	r3, r0
 80020de:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020e2:	fa93 f3a3 	rbit	r3, r3
 80020e6:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80020e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020ea:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80020ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80020f2:	2320      	movs	r3, #32
 80020f4:	e003      	b.n	80020fe <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80020f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80020f8:	fab3 f383 	clz	r3, r3
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002108:	2b00      	cmp	r3, #0
 800210a:	d105      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x3f0>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	0e9b      	lsrs	r3, r3, #26
 8002112:	f003 031f 	and.w	r3, r3, #31
 8002116:	e011      	b.n	800213c <HAL_ADC_ConfigChannel+0x414>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002120:	fa93 f3a3 	rbit	r3, r3
 8002124:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002126:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002128:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800212a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002130:	2320      	movs	r3, #32
 8002132:	e003      	b.n	800213c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002134:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002136:	fab3 f383 	clz	r3, r3
 800213a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800213c:	429a      	cmp	r2, r3
 800213e:	d106      	bne.n	800214e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2200      	movs	r2, #0
 8002146:	2103      	movs	r1, #3
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff f9c1 	bl	80014d0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff fb32 	bl	80017bc <LL_ADC_IsEnabled>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	f040 8140 	bne.w	80023e0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6818      	ldr	r0, [r3, #0]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	6819      	ldr	r1, [r3, #0]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	461a      	mov	r2, r3
 800216e:	f7ff fa7d 	bl	800166c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	4a8f      	ldr	r2, [pc, #572]	@ (80023b4 <HAL_ADC_ConfigChannel+0x68c>)
 8002178:	4293      	cmp	r3, r2
 800217a:	f040 8131 	bne.w	80023e0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10b      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x47e>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	0e9b      	lsrs	r3, r3, #26
 8002194:	3301      	adds	r3, #1
 8002196:	f003 031f 	and.w	r3, r3, #31
 800219a:	2b09      	cmp	r3, #9
 800219c:	bf94      	ite	ls
 800219e:	2301      	movls	r3, #1
 80021a0:	2300      	movhi	r3, #0
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	e019      	b.n	80021da <HAL_ADC_ConfigChannel+0x4b2>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021ae:	fa93 f3a3 	rbit	r3, r3
 80021b2:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80021b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80021b6:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80021b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80021be:	2320      	movs	r3, #32
 80021c0:	e003      	b.n	80021ca <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80021c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80021c4:	fab3 f383 	clz	r3, r3
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	3301      	adds	r3, #1
 80021cc:	f003 031f 	and.w	r3, r3, #31
 80021d0:	2b09      	cmp	r3, #9
 80021d2:	bf94      	ite	ls
 80021d4:	2301      	movls	r3, #1
 80021d6:	2300      	movhi	r3, #0
 80021d8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d079      	beq.n	80022d2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d107      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x4d2>
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	0e9b      	lsrs	r3, r3, #26
 80021f0:	3301      	adds	r3, #1
 80021f2:	069b      	lsls	r3, r3, #26
 80021f4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021f8:	e015      	b.n	8002226 <HAL_ADC_ConfigChannel+0x4fe>
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002200:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002202:	fa93 f3a3 	rbit	r3, r3
 8002206:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002208:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800220a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800220c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002212:	2320      	movs	r3, #32
 8002214:	e003      	b.n	800221e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002216:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002218:	fab3 f383 	clz	r3, r3
 800221c:	b2db      	uxtb	r3, r3
 800221e:	3301      	adds	r3, #1
 8002220:	069b      	lsls	r3, r3, #26
 8002222:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800222e:	2b00      	cmp	r3, #0
 8002230:	d109      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x51e>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	0e9b      	lsrs	r3, r3, #26
 8002238:	3301      	adds	r3, #1
 800223a:	f003 031f 	and.w	r3, r3, #31
 800223e:	2101      	movs	r1, #1
 8002240:	fa01 f303 	lsl.w	r3, r1, r3
 8002244:	e017      	b.n	8002276 <HAL_ADC_ConfigChannel+0x54e>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800224e:	fa93 f3a3 	rbit	r3, r3
 8002252:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002254:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002256:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002258:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800225e:	2320      	movs	r3, #32
 8002260:	e003      	b.n	800226a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002262:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002264:	fab3 f383 	clz	r3, r3
 8002268:	b2db      	uxtb	r3, r3
 800226a:	3301      	adds	r3, #1
 800226c:	f003 031f 	and.w	r3, r3, #31
 8002270:	2101      	movs	r1, #1
 8002272:	fa01 f303 	lsl.w	r3, r1, r3
 8002276:	ea42 0103 	orr.w	r1, r2, r3
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10a      	bne.n	800229c <HAL_ADC_ConfigChannel+0x574>
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	0e9b      	lsrs	r3, r3, #26
 800228c:	3301      	adds	r3, #1
 800228e:	f003 021f 	and.w	r2, r3, #31
 8002292:	4613      	mov	r3, r2
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	4413      	add	r3, r2
 8002298:	051b      	lsls	r3, r3, #20
 800229a:	e018      	b.n	80022ce <HAL_ADC_ConfigChannel+0x5a6>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022a4:	fa93 f3a3 	rbit	r3, r3
 80022a8:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80022aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80022ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80022b4:	2320      	movs	r3, #32
 80022b6:	e003      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80022b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022ba:	fab3 f383 	clz	r3, r3
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	3301      	adds	r3, #1
 80022c2:	f003 021f 	and.w	r2, r3, #31
 80022c6:	4613      	mov	r3, r2
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	4413      	add	r3, r2
 80022cc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022ce:	430b      	orrs	r3, r1
 80022d0:	e081      	b.n	80023d6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d107      	bne.n	80022ee <HAL_ADC_ConfigChannel+0x5c6>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	0e9b      	lsrs	r3, r3, #26
 80022e4:	3301      	adds	r3, #1
 80022e6:	069b      	lsls	r3, r3, #26
 80022e8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022ec:	e015      	b.n	800231a <HAL_ADC_ConfigChannel+0x5f2>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022f6:	fa93 f3a3 	rbit	r3, r3
 80022fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80022fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022fe:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002306:	2320      	movs	r3, #32
 8002308:	e003      	b.n	8002312 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800230a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800230c:	fab3 f383 	clz	r3, r3
 8002310:	b2db      	uxtb	r3, r3
 8002312:	3301      	adds	r3, #1
 8002314:	069b      	lsls	r3, r3, #26
 8002316:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002322:	2b00      	cmp	r3, #0
 8002324:	d109      	bne.n	800233a <HAL_ADC_ConfigChannel+0x612>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	0e9b      	lsrs	r3, r3, #26
 800232c:	3301      	adds	r3, #1
 800232e:	f003 031f 	and.w	r3, r3, #31
 8002332:	2101      	movs	r1, #1
 8002334:	fa01 f303 	lsl.w	r3, r1, r3
 8002338:	e017      	b.n	800236a <HAL_ADC_ConfigChannel+0x642>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002340:	6a3b      	ldr	r3, [r7, #32]
 8002342:	fa93 f3a3 	rbit	r3, r3
 8002346:	61fb      	str	r3, [r7, #28]
  return result;
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800234c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002352:	2320      	movs	r3, #32
 8002354:	e003      	b.n	800235e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002358:	fab3 f383 	clz	r3, r3
 800235c:	b2db      	uxtb	r3, r3
 800235e:	3301      	adds	r3, #1
 8002360:	f003 031f 	and.w	r3, r3, #31
 8002364:	2101      	movs	r1, #1
 8002366:	fa01 f303 	lsl.w	r3, r1, r3
 800236a:	ea42 0103 	orr.w	r1, r2, r3
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10d      	bne.n	8002396 <HAL_ADC_ConfigChannel+0x66e>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	0e9b      	lsrs	r3, r3, #26
 8002380:	3301      	adds	r3, #1
 8002382:	f003 021f 	and.w	r2, r3, #31
 8002386:	4613      	mov	r3, r2
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	4413      	add	r3, r2
 800238c:	3b1e      	subs	r3, #30
 800238e:	051b      	lsls	r3, r3, #20
 8002390:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002394:	e01e      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x6ac>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	fa93 f3a3 	rbit	r3, r3
 80023a2:	613b      	str	r3, [r7, #16]
  return result;
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d104      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80023ae:	2320      	movs	r3, #32
 80023b0:	e006      	b.n	80023c0 <HAL_ADC_ConfigChannel+0x698>
 80023b2:	bf00      	nop
 80023b4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	fab3 f383 	clz	r3, r3
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	3301      	adds	r3, #1
 80023c2:	f003 021f 	and.w	r2, r3, #31
 80023c6:	4613      	mov	r3, r2
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	4413      	add	r3, r2
 80023cc:	3b1e      	subs	r3, #30
 80023ce:	051b      	lsls	r3, r3, #20
 80023d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023d4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023da:	4619      	mov	r1, r3
 80023dc:	f7ff f91b 	bl	8001616 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	4b3f      	ldr	r3, [pc, #252]	@ (80024e4 <HAL_ADC_ConfigChannel+0x7bc>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d071      	beq.n	80024d0 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023ec:	483e      	ldr	r0, [pc, #248]	@ (80024e8 <HAL_ADC_ConfigChannel+0x7c0>)
 80023ee:	f7ff f827 	bl	8001440 <LL_ADC_GetCommonPathInternalCh>
 80023f2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a3c      	ldr	r2, [pc, #240]	@ (80024ec <HAL_ADC_ConfigChannel+0x7c4>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d004      	beq.n	800240a <HAL_ADC_ConfigChannel+0x6e2>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a3a      	ldr	r2, [pc, #232]	@ (80024f0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d127      	bne.n	800245a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800240a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800240e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d121      	bne.n	800245a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800241e:	d157      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002420:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002424:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002428:	4619      	mov	r1, r3
 800242a:	482f      	ldr	r0, [pc, #188]	@ (80024e8 <HAL_ADC_ConfigChannel+0x7c0>)
 800242c:	f7fe fff5 	bl	800141a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002430:	4b30      	ldr	r3, [pc, #192]	@ (80024f4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	099b      	lsrs	r3, r3, #6
 8002436:	4a30      	ldr	r2, [pc, #192]	@ (80024f8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002438:	fba2 2303 	umull	r2, r3, r2, r3
 800243c:	099b      	lsrs	r3, r3, #6
 800243e:	1c5a      	adds	r2, r3, #1
 8002440:	4613      	mov	r3, r2
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	4413      	add	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800244a:	e002      	b.n	8002452 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	3b01      	subs	r3, #1
 8002450:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1f9      	bne.n	800244c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002458:	e03a      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a27      	ldr	r2, [pc, #156]	@ (80024fc <HAL_ADC_ConfigChannel+0x7d4>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d113      	bne.n	800248c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002464:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002468:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10d      	bne.n	800248c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a22      	ldr	r2, [pc, #136]	@ (8002500 <HAL_ADC_ConfigChannel+0x7d8>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d02a      	beq.n	80024d0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800247a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800247e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002482:	4619      	mov	r1, r3
 8002484:	4818      	ldr	r0, [pc, #96]	@ (80024e8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002486:	f7fe ffc8 	bl	800141a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800248a:	e021      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a1c      	ldr	r2, [pc, #112]	@ (8002504 <HAL_ADC_ConfigChannel+0x7dc>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d11c      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002496:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800249a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d116      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a16      	ldr	r2, [pc, #88]	@ (8002500 <HAL_ADC_ConfigChannel+0x7d8>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d011      	beq.n	80024d0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80024b4:	4619      	mov	r1, r3
 80024b6:	480c      	ldr	r0, [pc, #48]	@ (80024e8 <HAL_ADC_ConfigChannel+0x7c0>)
 80024b8:	f7fe ffaf 	bl	800141a <LL_ADC_SetCommonPathInternalCh>
 80024bc:	e008      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c2:	f043 0220 	orr.w	r2, r3, #32
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80024d8:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80024dc:	4618      	mov	r0, r3
 80024de:	37d8      	adds	r7, #216	@ 0xd8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	80080000 	.word	0x80080000
 80024e8:	50000300 	.word	0x50000300
 80024ec:	c3210000 	.word	0xc3210000
 80024f0:	90c00010 	.word	0x90c00010
 80024f4:	20000018 	.word	0x20000018
 80024f8:	053e2d63 	.word	0x053e2d63
 80024fc:	c7520000 	.word	0xc7520000
 8002500:	50000100 	.word	0x50000100
 8002504:	cb840000 	.word	0xcb840000

08002508 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002510:	2300      	movs	r3, #0
 8002512:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff f94f 	bl	80017bc <LL_ADC_IsEnabled>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d169      	bne.n	80025f8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	4b36      	ldr	r3, [pc, #216]	@ (8002604 <ADC_Enable+0xfc>)
 800252c:	4013      	ands	r3, r2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00d      	beq.n	800254e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002536:	f043 0210 	orr.w	r2, r3, #16
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002542:	f043 0201 	orr.w	r2, r3, #1
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e055      	b.n	80025fa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff f90a 	bl	800176c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002558:	482b      	ldr	r0, [pc, #172]	@ (8002608 <ADC_Enable+0x100>)
 800255a:	f7fe ff71 	bl	8001440 <LL_ADC_GetCommonPathInternalCh>
 800255e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002560:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002564:	2b00      	cmp	r3, #0
 8002566:	d013      	beq.n	8002590 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002568:	4b28      	ldr	r3, [pc, #160]	@ (800260c <ADC_Enable+0x104>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	099b      	lsrs	r3, r3, #6
 800256e:	4a28      	ldr	r2, [pc, #160]	@ (8002610 <ADC_Enable+0x108>)
 8002570:	fba2 2303 	umull	r2, r3, r2, r3
 8002574:	099b      	lsrs	r3, r3, #6
 8002576:	1c5a      	adds	r2, r3, #1
 8002578:	4613      	mov	r3, r2
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	4413      	add	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002582:	e002      	b.n	800258a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	3b01      	subs	r3, #1
 8002588:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1f9      	bne.n	8002584 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002590:	f7fe ff02 	bl	8001398 <HAL_GetTick>
 8002594:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002596:	e028      	b.n	80025ea <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff f90d 	bl	80017bc <LL_ADC_IsEnabled>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d104      	bne.n	80025b2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff f8dd 	bl	800176c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80025b2:	f7fe fef1 	bl	8001398 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d914      	bls.n	80025ea <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d00d      	beq.n	80025ea <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025d2:	f043 0210 	orr.w	r2, r3, #16
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025de:	f043 0201 	orr.w	r2, r3, #1
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e007      	b.n	80025fa <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d1cf      	bne.n	8002598 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	8000003f 	.word	0x8000003f
 8002608:	50000300 	.word	0x50000300
 800260c:	20000018 	.word	0x20000018
 8002610:	053e2d63 	.word	0x053e2d63

08002614 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff f8de 	bl	80017e2 <LL_ADC_IsDisableOngoing>
 8002626:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff f8c5 	bl	80017bc <LL_ADC_IsEnabled>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d047      	beq.n	80026c8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d144      	bne.n	80026c8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f003 030d 	and.w	r3, r3, #13
 8002648:	2b01      	cmp	r3, #1
 800264a:	d10c      	bne.n	8002666 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff f89f 	bl	8001794 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2203      	movs	r2, #3
 800265c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800265e:	f7fe fe9b 	bl	8001398 <HAL_GetTick>
 8002662:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002664:	e029      	b.n	80026ba <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800266a:	f043 0210 	orr.w	r2, r3, #16
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002676:	f043 0201 	orr.w	r2, r3, #1
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e023      	b.n	80026ca <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002682:	f7fe fe89 	bl	8001398 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d914      	bls.n	80026ba <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00d      	beq.n	80026ba <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a2:	f043 0210 	orr.w	r2, r3, #16
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026ae:	f043 0201 	orr.w	r2, r3, #1
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e007      	b.n	80026ca <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1dc      	bne.n	8002682 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b084      	sub	sp, #16
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026de:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d14b      	bne.n	8002784 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026f0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0308 	and.w	r3, r3, #8
 8002702:	2b00      	cmp	r3, #0
 8002704:	d021      	beq.n	800274a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f7fe ff44 	bl	8001598 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d032      	beq.n	800277c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d12b      	bne.n	800277c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002728:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002734:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d11f      	bne.n	800277c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002740:	f043 0201 	orr.w	r2, r3, #1
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002748:	e018      	b.n	800277c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d111      	bne.n	800277c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800275c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002768:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d105      	bne.n	800277c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002774:	f043 0201 	orr.w	r2, r3, #1
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f7ff fab5 	bl	8001cec <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002782:	e00e      	b.n	80027a2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002788:	f003 0310 	and.w	r3, r3, #16
 800278c:	2b00      	cmp	r3, #0
 800278e:	d003      	beq.n	8002798 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f7ff fabf 	bl	8001d14 <HAL_ADC_ErrorCallback>
}
 8002796:	e004      	b.n	80027a2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800279c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	4798      	blx	r3
}
 80027a2:	bf00      	nop
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b084      	sub	sp, #16
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f7ff faa1 	bl	8001d00 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027be:	bf00      	nop
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b084      	sub	sp, #16
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027d8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027e4:	f043 0204 	orr.w	r2, r3, #4
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f7ff fa91 	bl	8001d14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027f2:	bf00      	nop
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <LL_ADC_IsEnabled>:
{
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b01      	cmp	r3, #1
 800280c:	d101      	bne.n	8002812 <LL_ADC_IsEnabled+0x18>
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <LL_ADC_IsEnabled+0x1a>
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <LL_ADC_StartCalibration>:
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002832:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800283c:	4313      	orrs	r3, r2
 800283e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	609a      	str	r2, [r3, #8]
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <LL_ADC_IsCalibrationOnGoing>:
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002862:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002866:	d101      	bne.n	800286c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002868:	2301      	movs	r3, #1
 800286a:	e000      	b.n	800286e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <LL_ADC_REG_IsConversionOngoing>:
{
 800287a:	b480      	push	{r7}
 800287c:	b083      	sub	sp, #12
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 0304 	and.w	r3, r3, #4
 800288a:	2b04      	cmp	r3, #4
 800288c:	d101      	bne.n	8002892 <LL_ADC_REG_IsConversionOngoing+0x18>
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80028aa:	2300      	movs	r3, #0
 80028ac:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d101      	bne.n	80028bc <HAL_ADCEx_Calibration_Start+0x1c>
 80028b8:	2302      	movs	r3, #2
 80028ba:	e04d      	b.n	8002958 <HAL_ADCEx_Calibration_Start+0xb8>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f7ff fea5 	bl	8002614 <ADC_Disable>
 80028ca:	4603      	mov	r3, r0
 80028cc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d136      	bne.n	8002942 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80028dc:	f023 0302 	bic.w	r3, r3, #2
 80028e0:	f043 0202 	orr.w	r2, r3, #2
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6839      	ldr	r1, [r7, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff ff96 	bl	8002820 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80028f4:	e014      	b.n	8002920 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	3301      	adds	r3, #1
 80028fa:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	4a18      	ldr	r2, [pc, #96]	@ (8002960 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d90d      	bls.n	8002920 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002908:	f023 0312 	bic.w	r3, r3, #18
 800290c:	f043 0210 	orr.w	r2, r3, #16
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e01b      	b.n	8002958 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff ff94 	bl	8002852 <LL_ADC_IsCalibrationOnGoing>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1e2      	bne.n	80028f6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002934:	f023 0303 	bic.w	r3, r3, #3
 8002938:	f043 0201 	orr.w	r2, r3, #1
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002940:	e005      	b.n	800294e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002946:	f043 0210 	orr.w	r2, r3, #16
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002956:	7bfb      	ldrb	r3, [r7, #15]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	0004de01 	.word	0x0004de01

08002964 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002964:	b590      	push	{r4, r7, lr}
 8002966:	b0a1      	sub	sp, #132	@ 0x84
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800296e:	2300      	movs	r3, #0
 8002970:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800297a:	2b01      	cmp	r3, #1
 800297c:	d101      	bne.n	8002982 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800297e:	2302      	movs	r3, #2
 8002980:	e08b      	b.n	8002a9a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800298a:	2300      	movs	r3, #0
 800298c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800298e:	2300      	movs	r3, #0
 8002990:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800299a:	d102      	bne.n	80029a2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800299c:	4b41      	ldr	r3, [pc, #260]	@ (8002aa4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800299e:	60bb      	str	r3, [r7, #8]
 80029a0:	e001      	b.n	80029a6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80029a2:	2300      	movs	r3, #0
 80029a4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10b      	bne.n	80029c4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b0:	f043 0220 	orr.w	r2, r3, #32
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e06a      	b.n	8002a9a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff ff57 	bl	800287a <LL_ADC_REG_IsConversionOngoing>
 80029cc:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff ff51 	bl	800287a <LL_ADC_REG_IsConversionOngoing>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d14c      	bne.n	8002a78 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80029de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d149      	bne.n	8002a78 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80029e4:	4b30      	ldr	r3, [pc, #192]	@ (8002aa8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80029e6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d028      	beq.n	8002a42 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80029f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	6859      	ldr	r1, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002a02:	035b      	lsls	r3, r3, #13
 8002a04:	430b      	orrs	r3, r1
 8002a06:	431a      	orrs	r2, r3
 8002a08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a0a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a0c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002a10:	f7ff fef3 	bl	80027fa <LL_ADC_IsEnabled>
 8002a14:	4604      	mov	r4, r0
 8002a16:	4823      	ldr	r0, [pc, #140]	@ (8002aa4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002a18:	f7ff feef 	bl	80027fa <LL_ADC_IsEnabled>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	4323      	orrs	r3, r4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d133      	bne.n	8002a8c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002a2c:	f023 030f 	bic.w	r3, r3, #15
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	6811      	ldr	r1, [r2, #0]
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	6892      	ldr	r2, [r2, #8]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a3e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a40:	e024      	b.n	8002a8c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a4c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a4e:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002a52:	f7ff fed2 	bl	80027fa <LL_ADC_IsEnabled>
 8002a56:	4604      	mov	r4, r0
 8002a58:	4812      	ldr	r0, [pc, #72]	@ (8002aa4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002a5a:	f7ff fece 	bl	80027fa <LL_ADC_IsEnabled>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	4323      	orrs	r3, r4
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d112      	bne.n	8002a8c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002a6e:	f023 030f 	bic.w	r3, r3, #15
 8002a72:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002a74:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a76:	e009      	b.n	8002a8c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a7c:	f043 0220 	orr.w	r2, r3, #32
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002a8a:	e000      	b.n	8002a8e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a8c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002a96:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3784      	adds	r7, #132	@ 0x84
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd90      	pop	{r4, r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	50000100 	.word	0x50000100
 8002aa8:	50000300 	.word	0x50000300

08002aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002abc:	4b0c      	ldr	r3, [pc, #48]	@ (8002af0 <__NVIC_SetPriorityGrouping+0x44>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ac8:	4013      	ands	r3, r2
 8002aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ad4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ad8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ade:	4a04      	ldr	r2, [pc, #16]	@ (8002af0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	60d3      	str	r3, [r2, #12]
}
 8002ae4:	bf00      	nop
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	e000ed00 	.word	0xe000ed00

08002af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002af8:	4b04      	ldr	r3, [pc, #16]	@ (8002b0c <__NVIC_GetPriorityGrouping+0x18>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	0a1b      	lsrs	r3, r3, #8
 8002afe:	f003 0307 	and.w	r3, r3, #7
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	e000ed00 	.word	0xe000ed00

08002b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	db0b      	blt.n	8002b3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b22:	79fb      	ldrb	r3, [r7, #7]
 8002b24:	f003 021f 	and.w	r2, r3, #31
 8002b28:	4907      	ldr	r1, [pc, #28]	@ (8002b48 <__NVIC_EnableIRQ+0x38>)
 8002b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2e:	095b      	lsrs	r3, r3, #5
 8002b30:	2001      	movs	r0, #1
 8002b32:	fa00 f202 	lsl.w	r2, r0, r2
 8002b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	e000e100 	.word	0xe000e100

08002b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	6039      	str	r1, [r7, #0]
 8002b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	db0a      	blt.n	8002b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	490c      	ldr	r1, [pc, #48]	@ (8002b98 <__NVIC_SetPriority+0x4c>)
 8002b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6a:	0112      	lsls	r2, r2, #4
 8002b6c:	b2d2      	uxtb	r2, r2
 8002b6e:	440b      	add	r3, r1
 8002b70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b74:	e00a      	b.n	8002b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	4908      	ldr	r1, [pc, #32]	@ (8002b9c <__NVIC_SetPriority+0x50>)
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	3b04      	subs	r3, #4
 8002b84:	0112      	lsls	r2, r2, #4
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	440b      	add	r3, r1
 8002b8a:	761a      	strb	r2, [r3, #24]
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	e000e100 	.word	0xe000e100
 8002b9c:	e000ed00 	.word	0xe000ed00

08002ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b089      	sub	sp, #36	@ 0x24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	f1c3 0307 	rsb	r3, r3, #7
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	bf28      	it	cs
 8002bbe:	2304      	movcs	r3, #4
 8002bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	2b06      	cmp	r3, #6
 8002bc8:	d902      	bls.n	8002bd0 <NVIC_EncodePriority+0x30>
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	3b03      	subs	r3, #3
 8002bce:	e000      	b.n	8002bd2 <NVIC_EncodePriority+0x32>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	43da      	mvns	r2, r3
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	401a      	ands	r2, r3
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002be8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf2:	43d9      	mvns	r1, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf8:	4313      	orrs	r3, r2
         );
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3724      	adds	r7, #36	@ 0x24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
	...

08002c08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3b01      	subs	r3, #1
 8002c14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c18:	d301      	bcc.n	8002c1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e00f      	b.n	8002c3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c48 <SysTick_Config+0x40>)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c26:	210f      	movs	r1, #15
 8002c28:	f04f 30ff 	mov.w	r0, #4294967295
 8002c2c:	f7ff ff8e 	bl	8002b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c30:	4b05      	ldr	r3, [pc, #20]	@ (8002c48 <SysTick_Config+0x40>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c36:	4b04      	ldr	r3, [pc, #16]	@ (8002c48 <SysTick_Config+0x40>)
 8002c38:	2207      	movs	r2, #7
 8002c3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	e000e010 	.word	0xe000e010

08002c4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7ff ff29 	bl	8002aac <__NVIC_SetPriorityGrouping>
}
 8002c5a:	bf00      	nop
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b086      	sub	sp, #24
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	4603      	mov	r3, r0
 8002c6a:	60b9      	str	r1, [r7, #8]
 8002c6c:	607a      	str	r2, [r7, #4]
 8002c6e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c70:	f7ff ff40 	bl	8002af4 <__NVIC_GetPriorityGrouping>
 8002c74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	68b9      	ldr	r1, [r7, #8]
 8002c7a:	6978      	ldr	r0, [r7, #20]
 8002c7c:	f7ff ff90 	bl	8002ba0 <NVIC_EncodePriority>
 8002c80:	4602      	mov	r2, r0
 8002c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c86:	4611      	mov	r1, r2
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff ff5f 	bl	8002b4c <__NVIC_SetPriority>
}
 8002c8e:	bf00      	nop
 8002c90:	3718      	adds	r7, #24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b082      	sub	sp, #8
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff ff33 	bl	8002b10 <__NVIC_EnableIRQ>
}
 8002caa:	bf00      	nop
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b082      	sub	sp, #8
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff ffa4 	bl	8002c08 <SysTick_Config>
 8002cc0:	4603      	mov	r3, r0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e08d      	b.n	8002dfa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	4b47      	ldr	r3, [pc, #284]	@ (8002e04 <HAL_DMA_Init+0x138>)
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d80f      	bhi.n	8002d0a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	4b45      	ldr	r3, [pc, #276]	@ (8002e08 <HAL_DMA_Init+0x13c>)
 8002cf2:	4413      	add	r3, r2
 8002cf4:	4a45      	ldr	r2, [pc, #276]	@ (8002e0c <HAL_DMA_Init+0x140>)
 8002cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfa:	091b      	lsrs	r3, r3, #4
 8002cfc:	009a      	lsls	r2, r3, #2
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a42      	ldr	r2, [pc, #264]	@ (8002e10 <HAL_DMA_Init+0x144>)
 8002d06:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d08:	e00e      	b.n	8002d28 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	4b40      	ldr	r3, [pc, #256]	@ (8002e14 <HAL_DMA_Init+0x148>)
 8002d12:	4413      	add	r3, r2
 8002d14:	4a3d      	ldr	r2, [pc, #244]	@ (8002e0c <HAL_DMA_Init+0x140>)
 8002d16:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1a:	091b      	lsrs	r3, r3, #4
 8002d1c:	009a      	lsls	r2, r3, #2
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a3c      	ldr	r2, [pc, #240]	@ (8002e18 <HAL_DMA_Init+0x14c>)
 8002d26:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002d3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d42:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002d4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f9b6 	bl	80030ec <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d88:	d102      	bne.n	8002d90 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d98:	b2d2      	uxtb	r2, r2
 8002d9a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002da4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d010      	beq.n	8002dd0 <HAL_DMA_Init+0x104>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d80c      	bhi.n	8002dd0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f9d6 	bl	8003168 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002dcc:	605a      	str	r2, [r3, #4]
 8002dce:	e008      	b.n	8002de2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	40020407 	.word	0x40020407
 8002e08:	bffdfff8 	.word	0xbffdfff8
 8002e0c:	cccccccd 	.word	0xcccccccd
 8002e10:	40020000 	.word	0x40020000
 8002e14:	bffdfbf8 	.word	0xbffdfbf8
 8002e18:	40020400 	.word	0x40020400

08002e1c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
 8002e28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <HAL_DMA_Start_IT+0x20>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	e066      	b.n	8002f0a <HAL_DMA_Start_IT+0xee>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d155      	bne.n	8002efc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2202      	movs	r2, #2
 8002e54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 0201 	bic.w	r2, r2, #1
 8002e6c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	68b9      	ldr	r1, [r7, #8]
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 f8fb 	bl	8003070 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d008      	beq.n	8002e94 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f042 020e 	orr.w	r2, r2, #14
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	e00f      	b.n	8002eb4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 0204 	bic.w	r2, r2, #4
 8002ea2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 020a 	orr.w	r2, r2, #10
 8002eb2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d007      	beq.n	8002ed2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ecc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ed0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d007      	beq.n	8002eea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ee4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ee8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f042 0201 	orr.w	r2, r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	e005      	b.n	8002f08 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f04:	2302      	movs	r3, #2
 8002f06:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3718      	adds	r7, #24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b084      	sub	sp, #16
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f2e:	f003 031f 	and.w	r3, r3, #31
 8002f32:	2204      	movs	r2, #4
 8002f34:	409a      	lsls	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d026      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x7a>
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d021      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0320 	and.w	r3, r3, #32
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d107      	bne.n	8002f66 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 0204 	bic.w	r2, r2, #4
 8002f64:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f6a:	f003 021f 	and.w	r2, r3, #31
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f72:	2104      	movs	r1, #4
 8002f74:	fa01 f202 	lsl.w	r2, r1, r2
 8002f78:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d071      	beq.n	8003066 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002f8a:	e06c      	b.n	8003066 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f90:	f003 031f 	and.w	r3, r3, #31
 8002f94:	2202      	movs	r2, #2
 8002f96:	409a      	lsls	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d02e      	beq.n	8002ffe <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d029      	beq.n	8002ffe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0320 	and.w	r3, r3, #32
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10b      	bne.n	8002fd0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 020a 	bic.w	r2, r2, #10
 8002fc6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd4:	f003 021f 	and.w	r2, r3, #31
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fdc:	2102      	movs	r1, #2
 8002fde:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d038      	beq.n	8003066 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002ffc:	e033      	b.n	8003066 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003002:	f003 031f 	and.w	r3, r3, #31
 8003006:	2208      	movs	r2, #8
 8003008:	409a      	lsls	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	4013      	ands	r3, r2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d02a      	beq.n	8003068 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	f003 0308 	and.w	r3, r3, #8
 8003018:	2b00      	cmp	r3, #0
 800301a:	d025      	beq.n	8003068 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 020e 	bic.w	r2, r2, #14
 800302a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003030:	f003 021f 	and.w	r2, r3, #31
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003038:	2101      	movs	r1, #1
 800303a:	fa01 f202 	lsl.w	r2, r1, r2
 800303e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800305a:	2b00      	cmp	r3, #0
 800305c:	d004      	beq.n	8003068 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003066:	bf00      	nop
 8003068:	bf00      	nop
}
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
 800307c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003086:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800308c:	2b00      	cmp	r3, #0
 800308e:	d004      	beq.n	800309a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003098:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800309e:	f003 021f 	and.w	r2, r3, #31
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a6:	2101      	movs	r1, #1
 80030a8:	fa01 f202 	lsl.w	r2, r1, r2
 80030ac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	2b10      	cmp	r3, #16
 80030bc:	d108      	bne.n	80030d0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80030ce:	e007      	b.n	80030e0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68ba      	ldr	r2, [r7, #8]
 80030d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	60da      	str	r2, [r3, #12]
}
 80030e0:	bf00      	nop
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	461a      	mov	r2, r3
 80030fa:	4b16      	ldr	r3, [pc, #88]	@ (8003154 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d802      	bhi.n	8003106 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003100:	4b15      	ldr	r3, [pc, #84]	@ (8003158 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003102:	617b      	str	r3, [r7, #20]
 8003104:	e001      	b.n	800310a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003106:	4b15      	ldr	r3, [pc, #84]	@ (800315c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003108:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	b2db      	uxtb	r3, r3
 8003114:	3b08      	subs	r3, #8
 8003116:	4a12      	ldr	r2, [pc, #72]	@ (8003160 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003118:	fba2 2303 	umull	r2, r3, r2, r3
 800311c:	091b      	lsrs	r3, r3, #4
 800311e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003124:	089b      	lsrs	r3, r3, #2
 8003126:	009a      	lsls	r2, r3, #2
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	4413      	add	r3, r2
 800312c:	461a      	mov	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a0b      	ldr	r2, [pc, #44]	@ (8003164 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003136:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f003 031f 	and.w	r3, r3, #31
 800313e:	2201      	movs	r2, #1
 8003140:	409a      	lsls	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003146:	bf00      	nop
 8003148:	371c      	adds	r7, #28
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	40020407 	.word	0x40020407
 8003158:	40020800 	.word	0x40020800
 800315c:	40020820 	.word	0x40020820
 8003160:	cccccccd 	.word	0xcccccccd
 8003164:	40020880 	.word	0x40020880

08003168 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	b2db      	uxtb	r3, r3
 8003176:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	4b0b      	ldr	r3, [pc, #44]	@ (80031a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800317c:	4413      	add	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	461a      	mov	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a08      	ldr	r2, [pc, #32]	@ (80031ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800318a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	3b01      	subs	r3, #1
 8003190:	f003 031f 	and.w	r3, r3, #31
 8003194:	2201      	movs	r2, #1
 8003196:	409a      	lsls	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800319c:	bf00      	nop
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	1000823f 	.word	0x1000823f
 80031ac:	40020940 	.word	0x40020940

080031b0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e147      	b.n	8003452 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d106      	bne.n	80031dc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7fd feea 	bl	8000fb0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	699a      	ldr	r2, [r3, #24]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 0210 	bic.w	r2, r2, #16
 80031ea:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031ec:	f7fe f8d4 	bl	8001398 <HAL_GetTick>
 80031f0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80031f2:	e012      	b.n	800321a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80031f4:	f7fe f8d0 	bl	8001398 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b0a      	cmp	r3, #10
 8003200:	d90b      	bls.n	800321a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003206:	f043 0201 	orr.w	r2, r3, #1
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2203      	movs	r2, #3
 8003212:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e11b      	b.n	8003452 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	f003 0308 	and.w	r3, r3, #8
 8003224:	2b08      	cmp	r3, #8
 8003226:	d0e5      	beq.n	80031f4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	699a      	ldr	r2, [r3, #24]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0201 	orr.w	r2, r2, #1
 8003236:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003238:	f7fe f8ae 	bl	8001398 <HAL_GetTick>
 800323c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800323e:	e012      	b.n	8003266 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003240:	f7fe f8aa 	bl	8001398 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b0a      	cmp	r3, #10
 800324c:	d90b      	bls.n	8003266 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003252:	f043 0201 	orr.w	r2, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2203      	movs	r2, #3
 800325e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e0f5      	b.n	8003452 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0e5      	beq.n	8003240 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	699a      	ldr	r2, [r3, #24]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f042 0202 	orr.w	r2, r2, #2
 8003282:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a74      	ldr	r2, [pc, #464]	@ (800345c <HAL_FDCAN_Init+0x2ac>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d103      	bne.n	8003296 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800328e:	4a74      	ldr	r2, [pc, #464]	@ (8003460 <HAL_FDCAN_Init+0x2b0>)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	7c1b      	ldrb	r3, [r3, #16]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d108      	bne.n	80032b0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	699a      	ldr	r2, [r3, #24]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032ac:	619a      	str	r2, [r3, #24]
 80032ae:	e007      	b.n	80032c0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	699a      	ldr	r2, [r3, #24]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032be:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	7c5b      	ldrb	r3, [r3, #17]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d108      	bne.n	80032da <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	699a      	ldr	r2, [r3, #24]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032d6:	619a      	str	r2, [r3, #24]
 80032d8:	e007      	b.n	80032ea <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	699a      	ldr	r2, [r3, #24]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80032e8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	7c9b      	ldrb	r3, [r3, #18]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d108      	bne.n	8003304 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	699a      	ldr	r2, [r3, #24]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003300:	619a      	str	r2, [r3, #24]
 8003302:	e007      	b.n	8003314 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	699a      	ldr	r2, [r3, #24]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003312:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689a      	ldr	r2, [r3, #8]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	699a      	ldr	r2, [r3, #24]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003338:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	691a      	ldr	r2, [r3, #16]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0210 	bic.w	r2, r2, #16
 8003348:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d108      	bne.n	8003364 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	699a      	ldr	r2, [r3, #24]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f042 0204 	orr.w	r2, r2, #4
 8003360:	619a      	str	r2, [r3, #24]
 8003362:	e02c      	b.n	80033be <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d028      	beq.n	80033be <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	2b02      	cmp	r3, #2
 8003372:	d01c      	beq.n	80033ae <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699a      	ldr	r2, [r3, #24]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003382:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	691a      	ldr	r2, [r3, #16]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 0210 	orr.w	r2, r2, #16
 8003392:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	2b03      	cmp	r3, #3
 800339a:	d110      	bne.n	80033be <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	699a      	ldr	r2, [r3, #24]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f042 0220 	orr.w	r2, r2, #32
 80033aa:	619a      	str	r2, [r3, #24]
 80033ac:	e007      	b.n	80033be <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	699a      	ldr	r2, [r3, #24]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f042 0220 	orr.w	r2, r2, #32
 80033bc:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	3b01      	subs	r3, #1
 80033c4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80033ce:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80033d6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	3b01      	subs	r3, #1
 80033e0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80033e6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80033e8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033f2:	d115      	bne.n	8003420 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033fe:	3b01      	subs	r3, #1
 8003400:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003402:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003408:	3b01      	subs	r3, #1
 800340a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800340c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003414:	3b01      	subs	r3, #1
 8003416:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800341c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800341e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 fca8 	bl	8003d8c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	40006400 	.word	0x40006400
 8003460:	40006500 	.word	0x40006500

08003464 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8003464:	b480      	push	{r7}
 8003466:	b087      	sub	sp, #28
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003474:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003476:	7dfb      	ldrb	r3, [r7, #23]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d002      	beq.n	8003482 <HAL_FDCAN_ConfigFilter+0x1e>
 800347c:	7dfb      	ldrb	r3, [r7, #23]
 800347e:	2b02      	cmp	r3, #2
 8003480:	d13d      	bne.n	80034fe <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d119      	bne.n	80034be <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003496:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800349e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80034a4:	4313      	orrs	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	e01d      	b.n	80034fa <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	075a      	lsls	r2, r3, #29
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	079a      	lsls	r2, r3, #30
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	4413      	add	r3, r2
 80034e6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	3304      	adds	r3, #4
 80034f2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80034fa:	2300      	movs	r3, #0
 80034fc:	e006      	b.n	800350c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003502:	f043 0202 	orr.w	r2, r3, #2
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
  }
}
 800350c:	4618      	mov	r0, r3
 800350e:	371c      	adds	r7, #28
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
 8003524:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b01      	cmp	r3, #1
 8003530:	d116      	bne.n	8003560 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800353a:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	011a      	lsls	r2, r3, #4
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	431a      	orrs	r2, r3
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	431a      	orrs	r2, r3
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	431a      	orrs	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 800355c:	2300      	movs	r3, #0
 800355e:	e006      	b.n	800356e <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003564:	f043 0204 	orr.w	r2, r3, #4
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
  }
}
 800356e:	4618      	mov	r0, r3
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b01      	cmp	r3, #1
 800358c:	d110      	bne.n	80035b0 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2202      	movs	r2, #2
 8003592:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	699a      	ldr	r2, [r3, #24]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0201 	bic.w	r2, r2, #1
 80035a4:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80035ac:	2300      	movs	r3, #0
 80035ae:	e006      	b.n	80035be <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035b4:	f043 0204 	orr.w	r2, r3, #4
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
  }
}
 80035be:	4618      	mov	r0, r3
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b086      	sub	sp, #24
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	60f8      	str	r0, [r7, #12]
 80035d2:	60b9      	str	r1, [r7, #8]
 80035d4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d12c      	bne.n	800363c <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80035ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d007      	beq.n	8003602 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035f6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e023      	b.n	800364a <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800360a:	0c1b      	lsrs	r3, r3, #16
 800360c:	f003 0303 	and.w	r3, r3, #3
 8003610:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	68b9      	ldr	r1, [r7, #8]
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f000 fc0d 	bl	8003e38 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2101      	movs	r1, #1
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	fa01 f202 	lsl.w	r2, r1, r2
 800362a:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800362e:	2201      	movs	r2, #1
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	409a      	lsls	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8003638:	2300      	movs	r3, #0
 800363a:	e006      	b.n	800364a <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003640:	f043 0208 	orr.w	r2, r3, #8
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
  }
}
 800364a:	4618      	mov	r0, r3
 800364c:	3718      	adds	r7, #24
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
	...

08003654 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003654:	b480      	push	{r7}
 8003656:	b08b      	sub	sp, #44	@ 0x2c
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
 8003660:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8003662:	2300      	movs	r3, #0
 8003664:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800366c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800366e:	7efb      	ldrb	r3, [r7, #27]
 8003670:	2b02      	cmp	r3, #2
 8003672:	f040 80e8 	bne.w	8003846 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2b40      	cmp	r3, #64	@ 0x40
 800367a:	d137      	bne.n	80036ec <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003684:	f003 030f 	and.w	r3, r3, #15
 8003688:	2b00      	cmp	r3, #0
 800368a:	d107      	bne.n	800369c <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003690:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e0db      	b.n	8003854 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036ac:	d10a      	bne.n	80036c4 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036be:	d101      	bne.n	80036c4 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80036c0:	2301      	movs	r3, #1
 80036c2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036cc:	0a1b      	lsrs	r3, r3, #8
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	69fa      	ldr	r2, [r7, #28]
 80036d4:	4413      	add	r3, r2
 80036d6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80036dc:	69fa      	ldr	r2, [r7, #28]
 80036de:	4613      	mov	r3, r2
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	4413      	add	r3, r2
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	440b      	add	r3, r1
 80036e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80036ea:	e036      	b.n	800375a <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036f4:	f003 030f 	and.w	r3, r3, #15
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d107      	bne.n	800370c <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003700:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e0a3      	b.n	8003854 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003714:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003718:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800371c:	d10a      	bne.n	8003734 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800372a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800372e:	d101      	bne.n	8003734 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003730:	2301      	movs	r3, #1
 8003732:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800373c:	0a1b      	lsrs	r3, r3, #8
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	69fa      	ldr	r2, [r7, #28]
 8003744:	4413      	add	r3, r2
 8003746:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800374c:	69fa      	ldr	r2, [r7, #28]
 800374e:	4613      	mov	r3, r2
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	4413      	add	r3, r2
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	440b      	add	r3, r1
 8003758:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800375a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d107      	bne.n	800377e <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800376e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	0c9b      	lsrs	r3, r3, #18
 8003774:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	e005      	b.n	800378a <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800377e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800378a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80037a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a4:	3304      	adds	r3, #4
 80037a6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80037a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80037b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	0c1b      	lsrs	r3, r3, #16
 80037b8:	f003 020f 	and.w	r2, r3, #15
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80037c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80037cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80037d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	0e1b      	lsrs	r3, r3, #24
 80037de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80037e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	0fda      	lsrs	r2, r3, #31
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80037f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f2:	3304      	adds	r3, #4
 80037f4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80037f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f8:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80037fa:	2300      	movs	r3, #0
 80037fc:	623b      	str	r3, [r7, #32]
 80037fe:	e00a      	b.n	8003816 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	6a3b      	ldr	r3, [r7, #32]
 8003804:	441a      	add	r2, r3
 8003806:	6839      	ldr	r1, [r7, #0]
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	440b      	add	r3, r1
 800380c:	7812      	ldrb	r2, [r2, #0]
 800380e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	3301      	adds	r3, #1
 8003814:	623b      	str	r3, [r7, #32]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	4a11      	ldr	r2, [pc, #68]	@ (8003860 <HAL_FDCAN_GetRxMessage+0x20c>)
 800381c:	5cd3      	ldrb	r3, [r2, r3]
 800381e:	461a      	mov	r2, r3
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	4293      	cmp	r3, r2
 8003824:	d3ec      	bcc.n	8003800 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	2b40      	cmp	r3, #64	@ 0x40
 800382a:	d105      	bne.n	8003838 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	69fa      	ldr	r2, [r7, #28]
 8003832:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8003836:	e004      	b.n	8003842 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	69fa      	ldr	r2, [r7, #28]
 800383e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8003842:	2300      	movs	r3, #0
 8003844:	e006      	b.n	8003854 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800384a:	f043 0208 	orr.w	r2, r3, #8
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
  }
}
 8003854:	4618      	mov	r0, r3
 8003856:	372c      	adds	r7, #44	@ 0x2c
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr
 8003860:	0800792c 	.word	0x0800792c

08003864 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003874:	f003 0307 	and.w	r3, r3, #7
 8003878:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 800387a:	68fb      	ldr	r3, [r7, #12]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8003888:	b480      	push	{r7}
 800388a:	b087      	sub	sp, #28
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800389a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800389c:	7dfb      	ldrb	r3, [r7, #23]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d003      	beq.n	80038aa <HAL_FDCAN_ActivateNotification+0x22>
 80038a2:	7dfb      	ldrb	r3, [r7, #23]
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	f040 80c8 	bne.w	8003a3a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038b0:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d004      	beq.n	80038c6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d03b      	beq.n	800393e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d004      	beq.n	80038da <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d031      	beq.n	800393e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d004      	beq.n	80038ee <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	f003 0304 	and.w	r3, r3, #4
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d027      	beq.n	800393e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d004      	beq.n	8003902 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d01d      	beq.n	800393e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003908:	2b00      	cmp	r3, #0
 800390a:	d004      	beq.n	8003916 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	f003 0310 	and.w	r3, r3, #16
 8003912:	2b00      	cmp	r3, #0
 8003914:	d013      	beq.n	800393e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800391c:	2b00      	cmp	r3, #0
 800391e:	d004      	beq.n	800392a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	f003 0320 	and.w	r3, r3, #32
 8003926:	2b00      	cmp	r3, #0
 8003928:	d009      	beq.n	800393e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00c      	beq.n	800394e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800393a:	2b00      	cmp	r3, #0
 800393c:	d107      	bne.n	800394e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f042 0201 	orr.w	r2, r2, #1
 800394c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	2b00      	cmp	r3, #0
 8003956:	d004      	beq.n	8003962 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d13b      	bne.n	80039da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003968:	2b00      	cmp	r3, #0
 800396a:	d004      	beq.n	8003976 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d131      	bne.n	80039da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800397c:	2b00      	cmp	r3, #0
 800397e:	d004      	beq.n	800398a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f003 0304 	and.w	r3, r3, #4
 8003986:	2b00      	cmp	r3, #0
 8003988:	d127      	bne.n	80039da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003990:	2b00      	cmp	r3, #0
 8003992:	d004      	beq.n	800399e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	f003 0308 	and.w	r3, r3, #8
 800399a:	2b00      	cmp	r3, #0
 800399c:	d11d      	bne.n	80039da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d004      	beq.n	80039b2 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f003 0310 	and.w	r3, r3, #16
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d113      	bne.n	80039da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d004      	beq.n	80039c6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	f003 0320 	and.w	r3, r3, #32
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d109      	bne.n	80039da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00c      	beq.n	80039ea <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d007      	beq.n	80039ea <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f042 0202 	orr.w	r2, r2, #2
 80039e8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d009      	beq.n	8003a08 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d009      	beq.n	8003a26 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8003a36:	2300      	movs	r3, #0
 8003a38:	e006      	b.n	8003a48 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a3e:	f043 0202 	orr.w	r2, r3, #2
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
  }
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	371c      	adds	r7, #28
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08c      	sub	sp, #48	@ 0x30
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a62:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8003a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a70:	4013      	ands	r3, r2
 8003a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a7a:	f003 0307 	and.w	r3, r3, #7
 8003a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a88:	4013      	ands	r3, r2
 8003a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a96:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aaa:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8003aae:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ab6:	6a3a      	ldr	r2, [r7, #32]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ac2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003ac6:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ace:	69fa      	ldr	r2, [r7, #28]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ada:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ae2:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	099b      	lsrs	r3, r3, #6
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00c      	beq.n	8003b0a <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	099b      	lsrs	r3, r3, #6
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d006      	beq.n	8003b0a <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2240      	movs	r2, #64	@ 0x40
 8003b02:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 f922 	bl	8003d4e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	0a1b      	lsrs	r3, r3, #8
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d01a      	beq.n	8003b4c <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	0a1b      	lsrs	r3, r3, #8
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d014      	beq.n	8003b4c <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003b2a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	4013      	ands	r3, r2
 8003b38:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b42:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003b44:	6939      	ldr	r1, [r7, #16]
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f8e2 	bl	8003d10 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d007      	beq.n	8003b62 <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b58:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003b5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 f8ac 	bl	8003cba <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d007      	beq.n	8003b78 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b6e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003b70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7fc fc00 	bl	8000378 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d007      	beq.n	8003b8e <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b84:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003b86:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f8a1 	bl	8003cd0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	0a5b      	lsrs	r3, r3, #9
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00d      	beq.n	8003bb6 <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	0a5b      	lsrs	r3, r3, #9
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d007      	beq.n	8003bb6 <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bae:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f898 	bl	8003ce6 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	09db      	lsrs	r3, r3, #7
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d019      	beq.n	8003bf6 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	09db      	lsrs	r3, r3, #7
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d013      	beq.n	8003bf6 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003bd6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	4013      	ands	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2280      	movs	r2, #128	@ 0x80
 8003bec:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003bee:	68f9      	ldr	r1, [r7, #12]
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f882 	bl	8003cfa <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	0b5b      	lsrs	r3, r3, #13
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00d      	beq.n	8003c1e <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	0b5b      	lsrs	r3, r3, #13
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d007      	beq.n	8003c1e <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c16:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 f884 	bl	8003d26 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	0bdb      	lsrs	r3, r3, #15
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00d      	beq.n	8003c46 <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	0bdb      	lsrs	r3, r3, #15
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d007      	beq.n	8003c46 <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003c3e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 f87a 	bl	8003d3a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	0b9b      	lsrs	r3, r3, #14
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d010      	beq.n	8003c74 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	0b9b      	lsrs	r3, r3, #14
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00a      	beq.n	8003c74 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003c66:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c6c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d007      	beq.n	8003c8a <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	69fa      	ldr	r2, [r7, #28]
 8003c80:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003c82:	69f9      	ldr	r1, [r7, #28]
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 f876 	bl	8003d76 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d009      	beq.n	8003ca4 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6a3a      	ldr	r2, [r7, #32]
 8003c96:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d002      	beq.n	8003cb2 <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 f858 	bl	8003d62 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8003cb2:	bf00      	nop
 8003cb4:	3730      	adds	r7, #48	@ 0x30
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
 8003cc2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
 8003d02:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003d62:	b480      	push	{r7}
 8003d64:	b083      	sub	sp, #12
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003d6a:	bf00      	nop
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b083      	sub	sp, #12
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
 8003d7e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003d94:	4b27      	ldr	r3, [pc, #156]	@ (8003e34 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8003d96:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003da6:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dae:	041a      	lsls	r2, r3, #16
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dcc:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd4:	061a      	lsls	r2, r3, #24
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	60fb      	str	r3, [r7, #12]
 8003e0c:	e005      	b.n	8003e1a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	3304      	adds	r3, #4
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d3f3      	bcc.n	8003e0e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8003e26:	bf00      	nop
 8003e28:	bf00      	nop
 8003e2a:	3714      	adds	r7, #20
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	4000a400 	.word	0x4000a400

08003e38 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b089      	sub	sp, #36	@ 0x24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
 8003e44:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10a      	bne.n	8003e64 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003e56:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	61fb      	str	r3, [r7, #28]
 8003e62:	e00a      	b.n	8003e7a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003e6c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8003e72:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003e74:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e78:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003e84:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003e8a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003e90:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	4413      	add	r3, r2
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	440b      	add	r3, r1
 8003eac:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	69fa      	ldr	r2, [r7, #28]
 8003eb2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	3304      	adds	r3, #4
 8003eb8:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	617b      	str	r3, [r7, #20]
 8003eca:	e020      	b.n	8003f0e <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	3303      	adds	r3, #3
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	3302      	adds	r3, #2
 8003edc:	6879      	ldr	r1, [r7, #4]
 8003ede:	440b      	add	r3, r1
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003ee4:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	3301      	adds	r3, #1
 8003eea:	6879      	ldr	r1, [r7, #4]
 8003eec:	440b      	add	r3, r1
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003ef2:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003ef4:	6879      	ldr	r1, [r7, #4]
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	440a      	add	r2, r1
 8003efa:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003efc:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	3304      	adds	r3, #4
 8003f06:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	3304      	adds	r3, #4
 8003f0c:	617b      	str	r3, [r7, #20]
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	4a06      	ldr	r2, [pc, #24]	@ (8003f2c <FDCAN_CopyMessageToRAM+0xf4>)
 8003f14:	5cd3      	ldrb	r3, [r2, r3]
 8003f16:	461a      	mov	r2, r3
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d3d6      	bcc.n	8003ecc <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8003f1e:	bf00      	nop
 8003f20:	bf00      	nop
 8003f22:	3724      	adds	r7, #36	@ 0x24
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr
 8003f2c:	0800792c 	.word	0x0800792c

08003f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b087      	sub	sp, #28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003f3e:	e15a      	b.n	80041f6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	2101      	movs	r1, #1
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	fa01 f303 	lsl.w	r3, r1, r3
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 814c 	beq.w	80041f0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f003 0303 	and.w	r3, r3, #3
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d005      	beq.n	8003f70 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d130      	bne.n	8003fd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	2203      	movs	r2, #3
 8003f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f80:	43db      	mvns	r3, r3
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	4013      	ands	r3, r2
 8003f86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	68da      	ldr	r2, [r3, #12]
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	fa02 f303 	lsl.w	r3, r2, r3
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	fa02 f303 	lsl.w	r3, r2, r3
 8003fae:	43db      	mvns	r3, r3
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	091b      	lsrs	r3, r3, #4
 8003fbc:	f003 0201 	and.w	r2, r3, #1
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f003 0303 	and.w	r3, r3, #3
 8003fda:	2b03      	cmp	r3, #3
 8003fdc:	d017      	beq.n	800400e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	2203      	movs	r2, #3
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	43db      	mvns	r3, r3
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	4313      	orrs	r3, r2
 8004006:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f003 0303 	and.w	r3, r3, #3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d123      	bne.n	8004062 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	08da      	lsrs	r2, r3, #3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	3208      	adds	r2, #8
 8004022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004026:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	220f      	movs	r2, #15
 8004032:	fa02 f303 	lsl.w	r3, r2, r3
 8004036:	43db      	mvns	r3, r3
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	4013      	ands	r3, r2
 800403c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	691a      	ldr	r2, [r3, #16]
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	fa02 f303 	lsl.w	r3, r2, r3
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	4313      	orrs	r3, r2
 8004052:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	08da      	lsrs	r2, r3, #3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3208      	adds	r2, #8
 800405c:	6939      	ldr	r1, [r7, #16]
 800405e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	2203      	movs	r2, #3
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	43db      	mvns	r3, r3
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	4013      	ands	r3, r2
 8004078:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f003 0203 	and.w	r2, r3, #3
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	fa02 f303 	lsl.w	r3, r2, r3
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	4313      	orrs	r3, r2
 800408e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 80a6 	beq.w	80041f0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040a4:	4b5b      	ldr	r3, [pc, #364]	@ (8004214 <HAL_GPIO_Init+0x2e4>)
 80040a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040a8:	4a5a      	ldr	r2, [pc, #360]	@ (8004214 <HAL_GPIO_Init+0x2e4>)
 80040aa:	f043 0301 	orr.w	r3, r3, #1
 80040ae:	6613      	str	r3, [r2, #96]	@ 0x60
 80040b0:	4b58      	ldr	r3, [pc, #352]	@ (8004214 <HAL_GPIO_Init+0x2e4>)
 80040b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	60bb      	str	r3, [r7, #8]
 80040ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040bc:	4a56      	ldr	r2, [pc, #344]	@ (8004218 <HAL_GPIO_Init+0x2e8>)
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	089b      	lsrs	r3, r3, #2
 80040c2:	3302      	adds	r3, #2
 80040c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f003 0303 	and.w	r3, r3, #3
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	220f      	movs	r2, #15
 80040d4:	fa02 f303 	lsl.w	r3, r2, r3
 80040d8:	43db      	mvns	r3, r3
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	4013      	ands	r3, r2
 80040de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80040e6:	d01f      	beq.n	8004128 <HAL_GPIO_Init+0x1f8>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a4c      	ldr	r2, [pc, #304]	@ (800421c <HAL_GPIO_Init+0x2ec>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d019      	beq.n	8004124 <HAL_GPIO_Init+0x1f4>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a4b      	ldr	r2, [pc, #300]	@ (8004220 <HAL_GPIO_Init+0x2f0>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d013      	beq.n	8004120 <HAL_GPIO_Init+0x1f0>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a4a      	ldr	r2, [pc, #296]	@ (8004224 <HAL_GPIO_Init+0x2f4>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d00d      	beq.n	800411c <HAL_GPIO_Init+0x1ec>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a49      	ldr	r2, [pc, #292]	@ (8004228 <HAL_GPIO_Init+0x2f8>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d007      	beq.n	8004118 <HAL_GPIO_Init+0x1e8>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a48      	ldr	r2, [pc, #288]	@ (800422c <HAL_GPIO_Init+0x2fc>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d101      	bne.n	8004114 <HAL_GPIO_Init+0x1e4>
 8004110:	2305      	movs	r3, #5
 8004112:	e00a      	b.n	800412a <HAL_GPIO_Init+0x1fa>
 8004114:	2306      	movs	r3, #6
 8004116:	e008      	b.n	800412a <HAL_GPIO_Init+0x1fa>
 8004118:	2304      	movs	r3, #4
 800411a:	e006      	b.n	800412a <HAL_GPIO_Init+0x1fa>
 800411c:	2303      	movs	r3, #3
 800411e:	e004      	b.n	800412a <HAL_GPIO_Init+0x1fa>
 8004120:	2302      	movs	r3, #2
 8004122:	e002      	b.n	800412a <HAL_GPIO_Init+0x1fa>
 8004124:	2301      	movs	r3, #1
 8004126:	e000      	b.n	800412a <HAL_GPIO_Init+0x1fa>
 8004128:	2300      	movs	r3, #0
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	f002 0203 	and.w	r2, r2, #3
 8004130:	0092      	lsls	r2, r2, #2
 8004132:	4093      	lsls	r3, r2
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	4313      	orrs	r3, r2
 8004138:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800413a:	4937      	ldr	r1, [pc, #220]	@ (8004218 <HAL_GPIO_Init+0x2e8>)
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	089b      	lsrs	r3, r3, #2
 8004140:	3302      	adds	r3, #2
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004148:	4b39      	ldr	r3, [pc, #228]	@ (8004230 <HAL_GPIO_Init+0x300>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	43db      	mvns	r3, r3
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	4013      	ands	r3, r2
 8004156:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d003      	beq.n	800416c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800416c:	4a30      	ldr	r2, [pc, #192]	@ (8004230 <HAL_GPIO_Init+0x300>)
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004172:	4b2f      	ldr	r3, [pc, #188]	@ (8004230 <HAL_GPIO_Init+0x300>)
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	43db      	mvns	r3, r3
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	4013      	ands	r3, r2
 8004180:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4313      	orrs	r3, r2
 8004194:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004196:	4a26      	ldr	r2, [pc, #152]	@ (8004230 <HAL_GPIO_Init+0x300>)
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800419c:	4b24      	ldr	r3, [pc, #144]	@ (8004230 <HAL_GPIO_Init+0x300>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	43db      	mvns	r3, r3
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	4013      	ands	r3, r2
 80041aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	4313      	orrs	r3, r2
 80041be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80041c0:	4a1b      	ldr	r2, [pc, #108]	@ (8004230 <HAL_GPIO_Init+0x300>)
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80041c6:	4b1a      	ldr	r3, [pc, #104]	@ (8004230 <HAL_GPIO_Init+0x300>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	43db      	mvns	r3, r3
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	4013      	ands	r3, r2
 80041d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80041ea:	4a11      	ldr	r2, [pc, #68]	@ (8004230 <HAL_GPIO_Init+0x300>)
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	3301      	adds	r3, #1
 80041f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004200:	2b00      	cmp	r3, #0
 8004202:	f47f ae9d 	bne.w	8003f40 <HAL_GPIO_Init+0x10>
  }
}
 8004206:	bf00      	nop
 8004208:	bf00      	nop
 800420a:	371c      	adds	r7, #28
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	40021000 	.word	0x40021000
 8004218:	40010000 	.word	0x40010000
 800421c:	48000400 	.word	0x48000400
 8004220:	48000800 	.word	0x48000800
 8004224:	48000c00 	.word	0x48000c00
 8004228:	48001000 	.word	0x48001000
 800422c:	48001400 	.word	0x48001400
 8004230:	40010400 	.word	0x40010400

08004234 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e08d      	b.n	8004362 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d106      	bne.n	8004260 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7fc ff0a 	bl	8001074 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2224      	movs	r2, #36	@ 0x24
 8004264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 0201 	bic.w	r2, r2, #1
 8004276:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004284:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689a      	ldr	r2, [r3, #8]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004294:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d107      	bne.n	80042ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	689a      	ldr	r2, [r3, #8]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042aa:	609a      	str	r2, [r3, #8]
 80042ac:	e006      	b.n	80042bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	689a      	ldr	r2, [r3, #8]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80042ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d108      	bne.n	80042d6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042d2:	605a      	str	r2, [r3, #4]
 80042d4:	e007      	b.n	80042e6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6812      	ldr	r2, [r2, #0]
 80042f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80042f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68da      	ldr	r2, [r3, #12]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004308:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	691a      	ldr	r2, [r3, #16]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	430a      	orrs	r2, r1
 8004322:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	69d9      	ldr	r1, [r3, #28]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a1a      	ldr	r2, [r3, #32]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	430a      	orrs	r2, r1
 8004332:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f042 0201 	orr.w	r2, r2, #1
 8004342:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2220      	movs	r2, #32
 800434e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
	...

0800436c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b088      	sub	sp, #32
 8004370:	af02      	add	r7, sp, #8
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	4608      	mov	r0, r1
 8004376:	4611      	mov	r1, r2
 8004378:	461a      	mov	r2, r3
 800437a:	4603      	mov	r3, r0
 800437c:	817b      	strh	r3, [r7, #10]
 800437e:	460b      	mov	r3, r1
 8004380:	813b      	strh	r3, [r7, #8]
 8004382:	4613      	mov	r3, r2
 8004384:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b20      	cmp	r3, #32
 8004390:	f040 80f9 	bne.w	8004586 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004394:	6a3b      	ldr	r3, [r7, #32]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <HAL_I2C_Mem_Write+0x34>
 800439a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800439c:	2b00      	cmp	r3, #0
 800439e:	d105      	bne.n	80043ac <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043a6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e0ed      	b.n	8004588 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d101      	bne.n	80043ba <HAL_I2C_Mem_Write+0x4e>
 80043b6:	2302      	movs	r3, #2
 80043b8:	e0e6      	b.n	8004588 <HAL_I2C_Mem_Write+0x21c>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80043c2:	f7fc ffe9 	bl	8001398 <HAL_GetTick>
 80043c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	2319      	movs	r3, #25
 80043ce:	2201      	movs	r2, #1
 80043d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 f955 	bl	8004684 <I2C_WaitOnFlagUntilTimeout>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e0d1      	b.n	8004588 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2221      	movs	r2, #33	@ 0x21
 80043e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2240      	movs	r2, #64	@ 0x40
 80043f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6a3a      	ldr	r2, [r7, #32]
 80043fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004404:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800440c:	88f8      	ldrh	r0, [r7, #6]
 800440e:	893a      	ldrh	r2, [r7, #8]
 8004410:	8979      	ldrh	r1, [r7, #10]
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	9301      	str	r3, [sp, #4]
 8004416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004418:	9300      	str	r3, [sp, #0]
 800441a:	4603      	mov	r3, r0
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 f8b9 	bl	8004594 <I2C_RequestMemoryWrite>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d005      	beq.n	8004434 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e0a9      	b.n	8004588 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004438:	b29b      	uxth	r3, r3
 800443a:	2bff      	cmp	r3, #255	@ 0xff
 800443c:	d90e      	bls.n	800445c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	22ff      	movs	r2, #255	@ 0xff
 8004442:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004448:	b2da      	uxtb	r2, r3
 800444a:	8979      	ldrh	r1, [r7, #10]
 800444c:	2300      	movs	r3, #0
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f000 fad9 	bl	8004a0c <I2C_TransferConfig>
 800445a:	e00f      	b.n	800447c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004460:	b29a      	uxth	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800446a:	b2da      	uxtb	r2, r3
 800446c:	8979      	ldrh	r1, [r7, #10]
 800446e:	2300      	movs	r3, #0
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f000 fac8 	bl	8004a0c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 f958 	bl	8004736 <I2C_WaitOnTXISFlagUntilTimeout>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e07b      	b.n	8004588 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004494:	781a      	ldrb	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a0:	1c5a      	adds	r2, r3, #1
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	3b01      	subs	r3, #1
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044b8:	3b01      	subs	r3, #1
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d034      	beq.n	8004534 <HAL_I2C_Mem_Write+0x1c8>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d130      	bne.n	8004534 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044d8:	2200      	movs	r2, #0
 80044da:	2180      	movs	r1, #128	@ 0x80
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 f8d1 	bl	8004684 <I2C_WaitOnFlagUntilTimeout>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e04d      	b.n	8004588 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	2bff      	cmp	r3, #255	@ 0xff
 80044f4:	d90e      	bls.n	8004514 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	22ff      	movs	r2, #255	@ 0xff
 80044fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004500:	b2da      	uxtb	r2, r3
 8004502:	8979      	ldrh	r1, [r7, #10]
 8004504:	2300      	movs	r3, #0
 8004506:	9300      	str	r3, [sp, #0]
 8004508:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f000 fa7d 	bl	8004a0c <I2C_TransferConfig>
 8004512:	e00f      	b.n	8004534 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004518:	b29a      	uxth	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004522:	b2da      	uxtb	r2, r3
 8004524:	8979      	ldrh	r1, [r7, #10]
 8004526:	2300      	movs	r3, #0
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 fa6c 	bl	8004a0c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004538:	b29b      	uxth	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d19e      	bne.n	800447c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f93e 	bl	80047c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e01a      	b.n	8004588 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2220      	movs	r2, #32
 8004558:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6859      	ldr	r1, [r3, #4]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	4b0a      	ldr	r3, [pc, #40]	@ (8004590 <HAL_I2C_Mem_Write+0x224>)
 8004566:	400b      	ands	r3, r1
 8004568:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2220      	movs	r2, #32
 800456e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004582:	2300      	movs	r3, #0
 8004584:	e000      	b.n	8004588 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004586:	2302      	movs	r3, #2
  }
}
 8004588:	4618      	mov	r0, r3
 800458a:	3718      	adds	r7, #24
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	fe00e800 	.word	0xfe00e800

08004594 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af02      	add	r7, sp, #8
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	4608      	mov	r0, r1
 800459e:	4611      	mov	r1, r2
 80045a0:	461a      	mov	r2, r3
 80045a2:	4603      	mov	r3, r0
 80045a4:	817b      	strh	r3, [r7, #10]
 80045a6:	460b      	mov	r3, r1
 80045a8:	813b      	strh	r3, [r7, #8]
 80045aa:	4613      	mov	r3, r2
 80045ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80045ae:	88fb      	ldrh	r3, [r7, #6]
 80045b0:	b2da      	uxtb	r2, r3
 80045b2:	8979      	ldrh	r1, [r7, #10]
 80045b4:	4b20      	ldr	r3, [pc, #128]	@ (8004638 <I2C_RequestMemoryWrite+0xa4>)
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 fa25 	bl	8004a0c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045c2:	69fa      	ldr	r2, [r7, #28]
 80045c4:	69b9      	ldr	r1, [r7, #24]
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f000 f8b5 	bl	8004736 <I2C_WaitOnTXISFlagUntilTimeout>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e02c      	b.n	8004630 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045d6:	88fb      	ldrh	r3, [r7, #6]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d105      	bne.n	80045e8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045dc:	893b      	ldrh	r3, [r7, #8]
 80045de:	b2da      	uxtb	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80045e6:	e015      	b.n	8004614 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80045e8:	893b      	ldrh	r3, [r7, #8]
 80045ea:	0a1b      	lsrs	r3, r3, #8
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045f6:	69fa      	ldr	r2, [r7, #28]
 80045f8:	69b9      	ldr	r1, [r7, #24]
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f000 f89b 	bl	8004736 <I2C_WaitOnTXISFlagUntilTimeout>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e012      	b.n	8004630 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800460a:	893b      	ldrh	r3, [r7, #8]
 800460c:	b2da      	uxtb	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	2200      	movs	r2, #0
 800461c:	2180      	movs	r1, #128	@ 0x80
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f000 f830 	bl	8004684 <I2C_WaitOnFlagUntilTimeout>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e000      	b.n	8004630 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	80002000 	.word	0x80002000

0800463c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b02      	cmp	r3, #2
 8004650:	d103      	bne.n	800465a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2200      	movs	r2, #0
 8004658:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b01      	cmp	r3, #1
 8004666:	d007      	beq.n	8004678 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	699a      	ldr	r2, [r3, #24]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f042 0201 	orr.w	r2, r2, #1
 8004676:	619a      	str	r2, [r3, #24]
  }
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	603b      	str	r3, [r7, #0]
 8004690:	4613      	mov	r3, r2
 8004692:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004694:	e03b      	b.n	800470e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	6839      	ldr	r1, [r7, #0]
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 f8d6 	bl	800484c <I2C_IsErrorOccurred>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e041      	b.n	800472e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b0:	d02d      	beq.n	800470e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b2:	f7fc fe71 	bl	8001398 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d302      	bcc.n	80046c8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d122      	bne.n	800470e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	699a      	ldr	r2, [r3, #24]
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	4013      	ands	r3, r2
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	bf0c      	ite	eq
 80046d8:	2301      	moveq	r3, #1
 80046da:	2300      	movne	r3, #0
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	461a      	mov	r2, r3
 80046e0:	79fb      	ldrb	r3, [r7, #7]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d113      	bne.n	800470e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ea:	f043 0220 	orr.w	r2, r3, #32
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e00f      	b.n	800472e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	699a      	ldr	r2, [r3, #24]
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	4013      	ands	r3, r2
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	429a      	cmp	r2, r3
 800471c:	bf0c      	ite	eq
 800471e:	2301      	moveq	r3, #1
 8004720:	2300      	movne	r3, #0
 8004722:	b2db      	uxtb	r3, r3
 8004724:	461a      	mov	r2, r3
 8004726:	79fb      	ldrb	r3, [r7, #7]
 8004728:	429a      	cmp	r2, r3
 800472a:	d0b4      	beq.n	8004696 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b084      	sub	sp, #16
 800473a:	af00      	add	r7, sp, #0
 800473c:	60f8      	str	r0, [r7, #12]
 800473e:	60b9      	str	r1, [r7, #8]
 8004740:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004742:	e033      	b.n	80047ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	68b9      	ldr	r1, [r7, #8]
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f000 f87f 	bl	800484c <I2C_IsErrorOccurred>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d001      	beq.n	8004758 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e031      	b.n	80047bc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475e:	d025      	beq.n	80047ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004760:	f7fc fe1a 	bl	8001398 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	68ba      	ldr	r2, [r7, #8]
 800476c:	429a      	cmp	r2, r3
 800476e:	d302      	bcc.n	8004776 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d11a      	bne.n	80047ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b02      	cmp	r3, #2
 8004782:	d013      	beq.n	80047ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004788:	f043 0220 	orr.w	r2, r3, #32
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2220      	movs	r2, #32
 8004794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e007      	b.n	80047bc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d1c4      	bne.n	8004744 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047d0:	e02f      	b.n	8004832 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	68b9      	ldr	r1, [r7, #8]
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 f838 	bl	800484c <I2C_IsErrorOccurred>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e02d      	b.n	8004842 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047e6:	f7fc fdd7 	bl	8001398 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d302      	bcc.n	80047fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d11a      	bne.n	8004832 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	f003 0320 	and.w	r3, r3, #32
 8004806:	2b20      	cmp	r3, #32
 8004808:	d013      	beq.n	8004832 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800480e:	f043 0220 	orr.w	r2, r3, #32
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2220      	movs	r2, #32
 800481a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e007      	b.n	8004842 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	f003 0320 	and.w	r3, r3, #32
 800483c:	2b20      	cmp	r3, #32
 800483e:	d1c8      	bne.n	80047d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
	...

0800484c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b08a      	sub	sp, #40	@ 0x28
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004858:	2300      	movs	r3, #0
 800485a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004866:	2300      	movs	r3, #0
 8004868:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	f003 0310 	and.w	r3, r3, #16
 8004874:	2b00      	cmp	r3, #0
 8004876:	d068      	beq.n	800494a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2210      	movs	r2, #16
 800487e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004880:	e049      	b.n	8004916 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004888:	d045      	beq.n	8004916 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800488a:	f7fc fd85 	bl	8001398 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	429a      	cmp	r2, r3
 8004898:	d302      	bcc.n	80048a0 <I2C_IsErrorOccurred+0x54>
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d13a      	bne.n	8004916 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048b2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048c2:	d121      	bne.n	8004908 <I2C_IsErrorOccurred+0xbc>
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048ca:	d01d      	beq.n	8004908 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80048cc:	7cfb      	ldrb	r3, [r7, #19]
 80048ce:	2b20      	cmp	r3, #32
 80048d0:	d01a      	beq.n	8004908 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048e0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80048e2:	f7fc fd59 	bl	8001398 <HAL_GetTick>
 80048e6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048e8:	e00e      	b.n	8004908 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80048ea:	f7fc fd55 	bl	8001398 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b19      	cmp	r3, #25
 80048f6:	d907      	bls.n	8004908 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80048f8:	6a3b      	ldr	r3, [r7, #32]
 80048fa:	f043 0320 	orr.w	r3, r3, #32
 80048fe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004906:	e006      	b.n	8004916 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	f003 0320 	and.w	r3, r3, #32
 8004912:	2b20      	cmp	r3, #32
 8004914:	d1e9      	bne.n	80048ea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	f003 0320 	and.w	r3, r3, #32
 8004920:	2b20      	cmp	r3, #32
 8004922:	d003      	beq.n	800492c <I2C_IsErrorOccurred+0xe0>
 8004924:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0aa      	beq.n	8004882 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800492c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004930:	2b00      	cmp	r3, #0
 8004932:	d103      	bne.n	800493c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2220      	movs	r2, #32
 800493a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800493c:	6a3b      	ldr	r3, [r7, #32]
 800493e:	f043 0304 	orr.w	r3, r3, #4
 8004942:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00b      	beq.n	8004974 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800495c:	6a3b      	ldr	r3, [r7, #32]
 800495e:	f043 0301 	orr.w	r3, r3, #1
 8004962:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800496c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00b      	beq.n	8004996 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800497e:	6a3b      	ldr	r3, [r7, #32]
 8004980:	f043 0308 	orr.w	r3, r3, #8
 8004984:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800498e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00b      	beq.n	80049b8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80049a0:	6a3b      	ldr	r3, [r7, #32]
 80049a2:	f043 0302 	orr.w	r3, r3, #2
 80049a6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80049b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d01c      	beq.n	80049fa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f7ff fe3b 	bl	800463c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	6859      	ldr	r1, [r3, #4]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	4b0d      	ldr	r3, [pc, #52]	@ (8004a08 <I2C_IsErrorOccurred+0x1bc>)
 80049d2:	400b      	ands	r3, r1
 80049d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049da:	6a3b      	ldr	r3, [r7, #32]
 80049dc:	431a      	orrs	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2220      	movs	r2, #32
 80049e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80049fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3728      	adds	r7, #40	@ 0x28
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	fe00e800 	.word	0xfe00e800

08004a0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	607b      	str	r3, [r7, #4]
 8004a16:	460b      	mov	r3, r1
 8004a18:	817b      	strh	r3, [r7, #10]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a1e:	897b      	ldrh	r3, [r7, #10]
 8004a20:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a24:	7a7b      	ldrb	r3, [r7, #9]
 8004a26:	041b      	lsls	r3, r3, #16
 8004a28:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a2c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a32:	6a3b      	ldr	r3, [r7, #32]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a3a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	6a3b      	ldr	r3, [r7, #32]
 8004a44:	0d5b      	lsrs	r3, r3, #21
 8004a46:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004a4a:	4b08      	ldr	r3, [pc, #32]	@ (8004a6c <I2C_TransferConfig+0x60>)
 8004a4c:	430b      	orrs	r3, r1
 8004a4e:	43db      	mvns	r3, r3
 8004a50:	ea02 0103 	and.w	r1, r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004a5e:	bf00      	nop
 8004a60:	371c      	adds	r7, #28
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	03ff63ff 	.word	0x03ff63ff

08004a70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b20      	cmp	r3, #32
 8004a84:	d138      	bne.n	8004af8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d101      	bne.n	8004a94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a90:	2302      	movs	r3, #2
 8004a92:	e032      	b.n	8004afa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2224      	movs	r2, #36	@ 0x24
 8004aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 0201 	bic.w	r2, r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004ac2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6819      	ldr	r1, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f042 0201 	orr.w	r2, r2, #1
 8004ae2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004af4:	2300      	movs	r3, #0
 8004af6:	e000      	b.n	8004afa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004af8:	2302      	movs	r3, #2
  }
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b06:	b480      	push	{r7}
 8004b08:	b085      	sub	sp, #20
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
 8004b0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b20      	cmp	r3, #32
 8004b1a:	d139      	bne.n	8004b90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d101      	bne.n	8004b2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b26:	2302      	movs	r3, #2
 8004b28:	e033      	b.n	8004b92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2224      	movs	r2, #36	@ 0x24
 8004b36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f022 0201 	bic.w	r2, r2, #1
 8004b48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004b58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	021b      	lsls	r3, r3, #8
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f042 0201 	orr.w	r2, r2, #1
 8004b7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	e000      	b.n	8004b92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b90:	2302      	movs	r3, #2
  }
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3714      	adds	r7, #20
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
	...

08004ba0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d141      	bne.n	8004c32 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004bae:	4b4b      	ldr	r3, [pc, #300]	@ (8004cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004bb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bba:	d131      	bne.n	8004c20 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bbc:	4b47      	ldr	r3, [pc, #284]	@ (8004cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bc2:	4a46      	ldr	r2, [pc, #280]	@ (8004cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bc8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bcc:	4b43      	ldr	r3, [pc, #268]	@ (8004cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004bd4:	4a41      	ldr	r2, [pc, #260]	@ (8004cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004bda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004bdc:	4b40      	ldr	r3, [pc, #256]	@ (8004ce0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2232      	movs	r2, #50	@ 0x32
 8004be2:	fb02 f303 	mul.w	r3, r2, r3
 8004be6:	4a3f      	ldr	r2, [pc, #252]	@ (8004ce4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004be8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bec:	0c9b      	lsrs	r3, r3, #18
 8004bee:	3301      	adds	r3, #1
 8004bf0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bf2:	e002      	b.n	8004bfa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bfa:	4b38      	ldr	r3, [pc, #224]	@ (8004cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c06:	d102      	bne.n	8004c0e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1f2      	bne.n	8004bf4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c0e:	4b33      	ldr	r3, [pc, #204]	@ (8004cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c1a:	d158      	bne.n	8004cce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e057      	b.n	8004cd0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c20:	4b2e      	ldr	r3, [pc, #184]	@ (8004cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c26:	4a2d      	ldr	r2, [pc, #180]	@ (8004cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c2c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004c30:	e04d      	b.n	8004cce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c38:	d141      	bne.n	8004cbe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c3a:	4b28      	ldr	r3, [pc, #160]	@ (8004cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004c42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c46:	d131      	bne.n	8004cac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c48:	4b24      	ldr	r3, [pc, #144]	@ (8004cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c4e:	4a23      	ldr	r2, [pc, #140]	@ (8004cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c58:	4b20      	ldr	r3, [pc, #128]	@ (8004cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c60:	4a1e      	ldr	r2, [pc, #120]	@ (8004cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c68:	4b1d      	ldr	r3, [pc, #116]	@ (8004ce0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2232      	movs	r2, #50	@ 0x32
 8004c6e:	fb02 f303 	mul.w	r3, r2, r3
 8004c72:	4a1c      	ldr	r2, [pc, #112]	@ (8004ce4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c74:	fba2 2303 	umull	r2, r3, r2, r3
 8004c78:	0c9b      	lsrs	r3, r3, #18
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c7e:	e002      	b.n	8004c86 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	3b01      	subs	r3, #1
 8004c84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c86:	4b15      	ldr	r3, [pc, #84]	@ (8004cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c92:	d102      	bne.n	8004c9a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1f2      	bne.n	8004c80 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c9a:	4b10      	ldr	r3, [pc, #64]	@ (8004cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ca2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ca6:	d112      	bne.n	8004cce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e011      	b.n	8004cd0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004cac:	4b0b      	ldr	r3, [pc, #44]	@ (8004cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8004cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cb8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004cbc:	e007      	b.n	8004cce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004cbe:	4b07      	ldr	r3, [pc, #28]	@ (8004cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004cc6:	4a05      	ldr	r2, [pc, #20]	@ (8004cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cc8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ccc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3714      	adds	r7, #20
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr
 8004cdc:	40007000 	.word	0x40007000
 8004ce0:	20000018 	.word	0x20000018
 8004ce4:	431bde83 	.word	0x431bde83

08004ce8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004cec:	4b05      	ldr	r3, [pc, #20]	@ (8004d04 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	4a04      	ldr	r2, [pc, #16]	@ (8004d04 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004cf2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004cf6:	6093      	str	r3, [r2, #8]
}
 8004cf8:	bf00      	nop
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	40007000 	.word	0x40007000

08004d08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b088      	sub	sp, #32
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e2fe      	b.n	8005318 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d075      	beq.n	8004e12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d26:	4b97      	ldr	r3, [pc, #604]	@ (8004f84 <HAL_RCC_OscConfig+0x27c>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 030c 	and.w	r3, r3, #12
 8004d2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d30:	4b94      	ldr	r3, [pc, #592]	@ (8004f84 <HAL_RCC_OscConfig+0x27c>)
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f003 0303 	and.w	r3, r3, #3
 8004d38:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	2b0c      	cmp	r3, #12
 8004d3e:	d102      	bne.n	8004d46 <HAL_RCC_OscConfig+0x3e>
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	2b03      	cmp	r3, #3
 8004d44:	d002      	beq.n	8004d4c <HAL_RCC_OscConfig+0x44>
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	d10b      	bne.n	8004d64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d4c:	4b8d      	ldr	r3, [pc, #564]	@ (8004f84 <HAL_RCC_OscConfig+0x27c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d05b      	beq.n	8004e10 <HAL_RCC_OscConfig+0x108>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d157      	bne.n	8004e10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e2d9      	b.n	8005318 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d6c:	d106      	bne.n	8004d7c <HAL_RCC_OscConfig+0x74>
 8004d6e:	4b85      	ldr	r3, [pc, #532]	@ (8004f84 <HAL_RCC_OscConfig+0x27c>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a84      	ldr	r2, [pc, #528]	@ (8004f84 <HAL_RCC_OscConfig+0x27c>)
 8004d74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d78:	6013      	str	r3, [r2, #0]
 8004d7a:	e01d      	b.n	8004db8 <HAL_RCC_OscConfig+0xb0>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d84:	d10c      	bne.n	8004da0 <HAL_RCC_OscConfig+0x98>
 8004d86:	4b7f      	ldr	r3, [pc, #508]	@ (8004f84 <HAL_RCC_OscConfig+0x27c>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a7e      	ldr	r2, [pc, #504]	@ (8004f84 <HAL_RCC_OscConfig+0x27c>)
 8004d8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d90:	6013      	str	r3, [r2, #0]
 8004d92:	4b7c      	ldr	r3, [pc, #496]	@ (8004f84 <HAL_RCC_OscConfig+0x27c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a7b      	ldr	r2, [pc, #492]	@ (8004f84 <HAL_RCC_OscConfig+0x27c>)
 8004d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d9c:	6013      	str	r3, [r2, #0]
 8004d9e:	e00b      	b.n	8004db8 <HAL_RCC_OscConfig+0xb0>
 8004da0:	4b78      	ldr	r3, [pc, #480]	@ (8004f84 <HAL_RCC_OscConfig+0x27c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a77      	ldr	r2, [pc, #476]	@ (8004f84 <HAL_RCC_OscConfig+0x27c>)
 8004da6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004daa:	6013      	str	r3, [r2, #0]
 8004dac:	4b75      	ldr	r3, [pc, #468]	@ (8004f84 <HAL_RCC_OscConfig+0x27c>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a74      	ldr	r2, [pc, #464]	@ (8004f84 <HAL_RCC_OscConfig+0x27c>)
 8004db2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d013      	beq.n	8004de8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc0:	f7fc faea 	bl	8001398 <HAL_GetTick>
 8004dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dc6:	e008      	b.n	8004dda <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dc8:	f7fc fae6 	bl	8001398 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b64      	cmp	r3, #100	@ 0x64
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e29e      	b.n	8005318 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dda:	4b6a      	ldr	r3, [pc, #424]	@ (8004f84 <HAL_RCC_OscConfig+0x27c>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d0f0      	beq.n	8004dc8 <HAL_RCC_OscConfig+0xc0>
 8004de6:	e014      	b.n	8004e12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de8:	f7fc fad6 	bl	8001398 <HAL_GetTick>
 8004dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dee:	e008      	b.n	8004e02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004df0:	f7fc fad2 	bl	8001398 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b64      	cmp	r3, #100	@ 0x64
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e28a      	b.n	8005318 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e02:	4b60      	ldr	r3, [pc, #384]	@ (8004f84 <HAL_RCC_OscConfig+0x27c>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1f0      	bne.n	8004df0 <HAL_RCC_OscConfig+0xe8>
 8004e0e:	e000      	b.n	8004e12 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d075      	beq.n	8004f0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e1e:	4b59      	ldr	r3, [pc, #356]	@ (8004f84 <HAL_RCC_OscConfig+0x27c>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f003 030c 	and.w	r3, r3, #12
 8004e26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e28:	4b56      	ldr	r3, [pc, #344]	@ (8004f84 <HAL_RCC_OscConfig+0x27c>)
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f003 0303 	and.w	r3, r3, #3
 8004e30:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	2b0c      	cmp	r3, #12
 8004e36:	d102      	bne.n	8004e3e <HAL_RCC_OscConfig+0x136>
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d002      	beq.n	8004e44 <HAL_RCC_OscConfig+0x13c>
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	2b04      	cmp	r3, #4
 8004e42:	d11f      	bne.n	8004e84 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e44:	4b4f      	ldr	r3, [pc, #316]	@ (8004f84 <HAL_RCC_OscConfig+0x27c>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d005      	beq.n	8004e5c <HAL_RCC_OscConfig+0x154>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e25d      	b.n	8005318 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e5c:	4b49      	ldr	r3, [pc, #292]	@ (8004f84 <HAL_RCC_OscConfig+0x27c>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	061b      	lsls	r3, r3, #24
 8004e6a:	4946      	ldr	r1, [pc, #280]	@ (8004f84 <HAL_RCC_OscConfig+0x27c>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004e70:	4b45      	ldr	r3, [pc, #276]	@ (8004f88 <HAL_RCC_OscConfig+0x280>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7fc fa43 	bl	8001300 <HAL_InitTick>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d043      	beq.n	8004f08 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e249      	b.n	8005318 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d023      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e8c:	4b3d      	ldr	r3, [pc, #244]	@ (8004f84 <HAL_RCC_OscConfig+0x27c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a3c      	ldr	r2, [pc, #240]	@ (8004f84 <HAL_RCC_OscConfig+0x27c>)
 8004e92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e98:	f7fc fa7e 	bl	8001398 <HAL_GetTick>
 8004e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ea0:	f7fc fa7a 	bl	8001398 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e232      	b.n	8005318 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004eb2:	4b34      	ldr	r3, [pc, #208]	@ (8004f84 <HAL_RCC_OscConfig+0x27c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0f0      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ebe:	4b31      	ldr	r3, [pc, #196]	@ (8004f84 <HAL_RCC_OscConfig+0x27c>)
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	061b      	lsls	r3, r3, #24
 8004ecc:	492d      	ldr	r1, [pc, #180]	@ (8004f84 <HAL_RCC_OscConfig+0x27c>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	604b      	str	r3, [r1, #4]
 8004ed2:	e01a      	b.n	8004f0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ed4:	4b2b      	ldr	r3, [pc, #172]	@ (8004f84 <HAL_RCC_OscConfig+0x27c>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a2a      	ldr	r2, [pc, #168]	@ (8004f84 <HAL_RCC_OscConfig+0x27c>)
 8004eda:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee0:	f7fc fa5a 	bl	8001398 <HAL_GetTick>
 8004ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ee6:	e008      	b.n	8004efa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ee8:	f7fc fa56 	bl	8001398 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e20e      	b.n	8005318 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004efa:	4b22      	ldr	r3, [pc, #136]	@ (8004f84 <HAL_RCC_OscConfig+0x27c>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1f0      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x1e0>
 8004f06:	e000      	b.n	8004f0a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0308 	and.w	r3, r3, #8
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d041      	beq.n	8004f9a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d01c      	beq.n	8004f58 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f1e:	4b19      	ldr	r3, [pc, #100]	@ (8004f84 <HAL_RCC_OscConfig+0x27c>)
 8004f20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f24:	4a17      	ldr	r2, [pc, #92]	@ (8004f84 <HAL_RCC_OscConfig+0x27c>)
 8004f26:	f043 0301 	orr.w	r3, r3, #1
 8004f2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f2e:	f7fc fa33 	bl	8001398 <HAL_GetTick>
 8004f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f34:	e008      	b.n	8004f48 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f36:	f7fc fa2f 	bl	8001398 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d901      	bls.n	8004f48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e1e7      	b.n	8005318 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f48:	4b0e      	ldr	r3, [pc, #56]	@ (8004f84 <HAL_RCC_OscConfig+0x27c>)
 8004f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d0ef      	beq.n	8004f36 <HAL_RCC_OscConfig+0x22e>
 8004f56:	e020      	b.n	8004f9a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f58:	4b0a      	ldr	r3, [pc, #40]	@ (8004f84 <HAL_RCC_OscConfig+0x27c>)
 8004f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f5e:	4a09      	ldr	r2, [pc, #36]	@ (8004f84 <HAL_RCC_OscConfig+0x27c>)
 8004f60:	f023 0301 	bic.w	r3, r3, #1
 8004f64:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f68:	f7fc fa16 	bl	8001398 <HAL_GetTick>
 8004f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f6e:	e00d      	b.n	8004f8c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f70:	f7fc fa12 	bl	8001398 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d906      	bls.n	8004f8c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e1ca      	b.n	8005318 <HAL_RCC_OscConfig+0x610>
 8004f82:	bf00      	nop
 8004f84:	40021000 	.word	0x40021000
 8004f88:	2000001c 	.word	0x2000001c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f8c:	4b8c      	ldr	r3, [pc, #560]	@ (80051c0 <HAL_RCC_OscConfig+0x4b8>)
 8004f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1ea      	bne.n	8004f70 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0304 	and.w	r3, r3, #4
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 80a6 	beq.w	80050f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004fac:	4b84      	ldr	r3, [pc, #528]	@ (80051c0 <HAL_RCC_OscConfig+0x4b8>)
 8004fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d101      	bne.n	8004fbc <HAL_RCC_OscConfig+0x2b4>
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e000      	b.n	8004fbe <HAL_RCC_OscConfig+0x2b6>
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00d      	beq.n	8004fde <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fc2:	4b7f      	ldr	r3, [pc, #508]	@ (80051c0 <HAL_RCC_OscConfig+0x4b8>)
 8004fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fc6:	4a7e      	ldr	r2, [pc, #504]	@ (80051c0 <HAL_RCC_OscConfig+0x4b8>)
 8004fc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fce:	4b7c      	ldr	r3, [pc, #496]	@ (80051c0 <HAL_RCC_OscConfig+0x4b8>)
 8004fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fde:	4b79      	ldr	r3, [pc, #484]	@ (80051c4 <HAL_RCC_OscConfig+0x4bc>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d118      	bne.n	800501c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fea:	4b76      	ldr	r3, [pc, #472]	@ (80051c4 <HAL_RCC_OscConfig+0x4bc>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a75      	ldr	r2, [pc, #468]	@ (80051c4 <HAL_RCC_OscConfig+0x4bc>)
 8004ff0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ff4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ff6:	f7fc f9cf 	bl	8001398 <HAL_GetTick>
 8004ffa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ffc:	e008      	b.n	8005010 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ffe:	f7fc f9cb 	bl	8001398 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b02      	cmp	r3, #2
 800500a:	d901      	bls.n	8005010 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e183      	b.n	8005318 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005010:	4b6c      	ldr	r3, [pc, #432]	@ (80051c4 <HAL_RCC_OscConfig+0x4bc>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005018:	2b00      	cmp	r3, #0
 800501a:	d0f0      	beq.n	8004ffe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d108      	bne.n	8005036 <HAL_RCC_OscConfig+0x32e>
 8005024:	4b66      	ldr	r3, [pc, #408]	@ (80051c0 <HAL_RCC_OscConfig+0x4b8>)
 8005026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800502a:	4a65      	ldr	r2, [pc, #404]	@ (80051c0 <HAL_RCC_OscConfig+0x4b8>)
 800502c:	f043 0301 	orr.w	r3, r3, #1
 8005030:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005034:	e024      	b.n	8005080 <HAL_RCC_OscConfig+0x378>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	2b05      	cmp	r3, #5
 800503c:	d110      	bne.n	8005060 <HAL_RCC_OscConfig+0x358>
 800503e:	4b60      	ldr	r3, [pc, #384]	@ (80051c0 <HAL_RCC_OscConfig+0x4b8>)
 8005040:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005044:	4a5e      	ldr	r2, [pc, #376]	@ (80051c0 <HAL_RCC_OscConfig+0x4b8>)
 8005046:	f043 0304 	orr.w	r3, r3, #4
 800504a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800504e:	4b5c      	ldr	r3, [pc, #368]	@ (80051c0 <HAL_RCC_OscConfig+0x4b8>)
 8005050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005054:	4a5a      	ldr	r2, [pc, #360]	@ (80051c0 <HAL_RCC_OscConfig+0x4b8>)
 8005056:	f043 0301 	orr.w	r3, r3, #1
 800505a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800505e:	e00f      	b.n	8005080 <HAL_RCC_OscConfig+0x378>
 8005060:	4b57      	ldr	r3, [pc, #348]	@ (80051c0 <HAL_RCC_OscConfig+0x4b8>)
 8005062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005066:	4a56      	ldr	r2, [pc, #344]	@ (80051c0 <HAL_RCC_OscConfig+0x4b8>)
 8005068:	f023 0301 	bic.w	r3, r3, #1
 800506c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005070:	4b53      	ldr	r3, [pc, #332]	@ (80051c0 <HAL_RCC_OscConfig+0x4b8>)
 8005072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005076:	4a52      	ldr	r2, [pc, #328]	@ (80051c0 <HAL_RCC_OscConfig+0x4b8>)
 8005078:	f023 0304 	bic.w	r3, r3, #4
 800507c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d016      	beq.n	80050b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005088:	f7fc f986 	bl	8001398 <HAL_GetTick>
 800508c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800508e:	e00a      	b.n	80050a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005090:	f7fc f982 	bl	8001398 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800509e:	4293      	cmp	r3, r2
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e138      	b.n	8005318 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050a6:	4b46      	ldr	r3, [pc, #280]	@ (80051c0 <HAL_RCC_OscConfig+0x4b8>)
 80050a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ac:	f003 0302 	and.w	r3, r3, #2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d0ed      	beq.n	8005090 <HAL_RCC_OscConfig+0x388>
 80050b4:	e015      	b.n	80050e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b6:	f7fc f96f 	bl	8001398 <HAL_GetTick>
 80050ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050bc:	e00a      	b.n	80050d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050be:	f7fc f96b 	bl	8001398 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e121      	b.n	8005318 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050d4:	4b3a      	ldr	r3, [pc, #232]	@ (80051c0 <HAL_RCC_OscConfig+0x4b8>)
 80050d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1ed      	bne.n	80050be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050e2:	7ffb      	ldrb	r3, [r7, #31]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d105      	bne.n	80050f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050e8:	4b35      	ldr	r3, [pc, #212]	@ (80051c0 <HAL_RCC_OscConfig+0x4b8>)
 80050ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050ec:	4a34      	ldr	r2, [pc, #208]	@ (80051c0 <HAL_RCC_OscConfig+0x4b8>)
 80050ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050f2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0320 	and.w	r3, r3, #32
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d03c      	beq.n	800517a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d01c      	beq.n	8005142 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005108:	4b2d      	ldr	r3, [pc, #180]	@ (80051c0 <HAL_RCC_OscConfig+0x4b8>)
 800510a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800510e:	4a2c      	ldr	r2, [pc, #176]	@ (80051c0 <HAL_RCC_OscConfig+0x4b8>)
 8005110:	f043 0301 	orr.w	r3, r3, #1
 8005114:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005118:	f7fc f93e 	bl	8001398 <HAL_GetTick>
 800511c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800511e:	e008      	b.n	8005132 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005120:	f7fc f93a 	bl	8001398 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b02      	cmp	r3, #2
 800512c:	d901      	bls.n	8005132 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e0f2      	b.n	8005318 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005132:	4b23      	ldr	r3, [pc, #140]	@ (80051c0 <HAL_RCC_OscConfig+0x4b8>)
 8005134:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d0ef      	beq.n	8005120 <HAL_RCC_OscConfig+0x418>
 8005140:	e01b      	b.n	800517a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005142:	4b1f      	ldr	r3, [pc, #124]	@ (80051c0 <HAL_RCC_OscConfig+0x4b8>)
 8005144:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005148:	4a1d      	ldr	r2, [pc, #116]	@ (80051c0 <HAL_RCC_OscConfig+0x4b8>)
 800514a:	f023 0301 	bic.w	r3, r3, #1
 800514e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005152:	f7fc f921 	bl	8001398 <HAL_GetTick>
 8005156:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005158:	e008      	b.n	800516c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800515a:	f7fc f91d 	bl	8001398 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d901      	bls.n	800516c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e0d5      	b.n	8005318 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800516c:	4b14      	ldr	r3, [pc, #80]	@ (80051c0 <HAL_RCC_OscConfig+0x4b8>)
 800516e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1ef      	bne.n	800515a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	2b00      	cmp	r3, #0
 8005180:	f000 80c9 	beq.w	8005316 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005184:	4b0e      	ldr	r3, [pc, #56]	@ (80051c0 <HAL_RCC_OscConfig+0x4b8>)
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f003 030c 	and.w	r3, r3, #12
 800518c:	2b0c      	cmp	r3, #12
 800518e:	f000 8083 	beq.w	8005298 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	69db      	ldr	r3, [r3, #28]
 8005196:	2b02      	cmp	r3, #2
 8005198:	d15e      	bne.n	8005258 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800519a:	4b09      	ldr	r3, [pc, #36]	@ (80051c0 <HAL_RCC_OscConfig+0x4b8>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a08      	ldr	r2, [pc, #32]	@ (80051c0 <HAL_RCC_OscConfig+0x4b8>)
 80051a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a6:	f7fc f8f7 	bl	8001398 <HAL_GetTick>
 80051aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051ac:	e00c      	b.n	80051c8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ae:	f7fc f8f3 	bl	8001398 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d905      	bls.n	80051c8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e0ab      	b.n	8005318 <HAL_RCC_OscConfig+0x610>
 80051c0:	40021000 	.word	0x40021000
 80051c4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051c8:	4b55      	ldr	r3, [pc, #340]	@ (8005320 <HAL_RCC_OscConfig+0x618>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1ec      	bne.n	80051ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051d4:	4b52      	ldr	r3, [pc, #328]	@ (8005320 <HAL_RCC_OscConfig+0x618>)
 80051d6:	68da      	ldr	r2, [r3, #12]
 80051d8:	4b52      	ldr	r3, [pc, #328]	@ (8005324 <HAL_RCC_OscConfig+0x61c>)
 80051da:	4013      	ands	r3, r2
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	6a11      	ldr	r1, [r2, #32]
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80051e4:	3a01      	subs	r2, #1
 80051e6:	0112      	lsls	r2, r2, #4
 80051e8:	4311      	orrs	r1, r2
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80051ee:	0212      	lsls	r2, r2, #8
 80051f0:	4311      	orrs	r1, r2
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80051f6:	0852      	lsrs	r2, r2, #1
 80051f8:	3a01      	subs	r2, #1
 80051fa:	0552      	lsls	r2, r2, #21
 80051fc:	4311      	orrs	r1, r2
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005202:	0852      	lsrs	r2, r2, #1
 8005204:	3a01      	subs	r2, #1
 8005206:	0652      	lsls	r2, r2, #25
 8005208:	4311      	orrs	r1, r2
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800520e:	06d2      	lsls	r2, r2, #27
 8005210:	430a      	orrs	r2, r1
 8005212:	4943      	ldr	r1, [pc, #268]	@ (8005320 <HAL_RCC_OscConfig+0x618>)
 8005214:	4313      	orrs	r3, r2
 8005216:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005218:	4b41      	ldr	r3, [pc, #260]	@ (8005320 <HAL_RCC_OscConfig+0x618>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a40      	ldr	r2, [pc, #256]	@ (8005320 <HAL_RCC_OscConfig+0x618>)
 800521e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005222:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005224:	4b3e      	ldr	r3, [pc, #248]	@ (8005320 <HAL_RCC_OscConfig+0x618>)
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	4a3d      	ldr	r2, [pc, #244]	@ (8005320 <HAL_RCC_OscConfig+0x618>)
 800522a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800522e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005230:	f7fc f8b2 	bl	8001398 <HAL_GetTick>
 8005234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005236:	e008      	b.n	800524a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005238:	f7fc f8ae 	bl	8001398 <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b02      	cmp	r3, #2
 8005244:	d901      	bls.n	800524a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e066      	b.n	8005318 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800524a:	4b35      	ldr	r3, [pc, #212]	@ (8005320 <HAL_RCC_OscConfig+0x618>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d0f0      	beq.n	8005238 <HAL_RCC_OscConfig+0x530>
 8005256:	e05e      	b.n	8005316 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005258:	4b31      	ldr	r3, [pc, #196]	@ (8005320 <HAL_RCC_OscConfig+0x618>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a30      	ldr	r2, [pc, #192]	@ (8005320 <HAL_RCC_OscConfig+0x618>)
 800525e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005262:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005264:	f7fc f898 	bl	8001398 <HAL_GetTick>
 8005268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800526a:	e008      	b.n	800527e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800526c:	f7fc f894 	bl	8001398 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b02      	cmp	r3, #2
 8005278:	d901      	bls.n	800527e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e04c      	b.n	8005318 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800527e:	4b28      	ldr	r3, [pc, #160]	@ (8005320 <HAL_RCC_OscConfig+0x618>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1f0      	bne.n	800526c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800528a:	4b25      	ldr	r3, [pc, #148]	@ (8005320 <HAL_RCC_OscConfig+0x618>)
 800528c:	68da      	ldr	r2, [r3, #12]
 800528e:	4924      	ldr	r1, [pc, #144]	@ (8005320 <HAL_RCC_OscConfig+0x618>)
 8005290:	4b25      	ldr	r3, [pc, #148]	@ (8005328 <HAL_RCC_OscConfig+0x620>)
 8005292:	4013      	ands	r3, r2
 8005294:	60cb      	str	r3, [r1, #12]
 8005296:	e03e      	b.n	8005316 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	69db      	ldr	r3, [r3, #28]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d101      	bne.n	80052a4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e039      	b.n	8005318 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80052a4:	4b1e      	ldr	r3, [pc, #120]	@ (8005320 <HAL_RCC_OscConfig+0x618>)
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f003 0203 	and.w	r2, r3, #3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a1b      	ldr	r3, [r3, #32]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d12c      	bne.n	8005312 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c2:	3b01      	subs	r3, #1
 80052c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d123      	bne.n	8005312 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d11b      	bne.n	8005312 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d113      	bne.n	8005312 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052f4:	085b      	lsrs	r3, r3, #1
 80052f6:	3b01      	subs	r3, #1
 80052f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d109      	bne.n	8005312 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005308:	085b      	lsrs	r3, r3, #1
 800530a:	3b01      	subs	r3, #1
 800530c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800530e:	429a      	cmp	r2, r3
 8005310:	d001      	beq.n	8005316 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e000      	b.n	8005318 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3720      	adds	r7, #32
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	40021000 	.word	0x40021000
 8005324:	019f800c 	.word	0x019f800c
 8005328:	feeefffc 	.word	0xfeeefffc

0800532c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005336:	2300      	movs	r3, #0
 8005338:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d101      	bne.n	8005344 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e11e      	b.n	8005582 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005344:	4b91      	ldr	r3, [pc, #580]	@ (800558c <HAL_RCC_ClockConfig+0x260>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 030f 	and.w	r3, r3, #15
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	429a      	cmp	r2, r3
 8005350:	d910      	bls.n	8005374 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005352:	4b8e      	ldr	r3, [pc, #568]	@ (800558c <HAL_RCC_ClockConfig+0x260>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f023 020f 	bic.w	r2, r3, #15
 800535a:	498c      	ldr	r1, [pc, #560]	@ (800558c <HAL_RCC_ClockConfig+0x260>)
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	4313      	orrs	r3, r2
 8005360:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005362:	4b8a      	ldr	r3, [pc, #552]	@ (800558c <HAL_RCC_ClockConfig+0x260>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 030f 	and.w	r3, r3, #15
 800536a:	683a      	ldr	r2, [r7, #0]
 800536c:	429a      	cmp	r2, r3
 800536e:	d001      	beq.n	8005374 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e106      	b.n	8005582 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	2b00      	cmp	r3, #0
 800537e:	d073      	beq.n	8005468 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	2b03      	cmp	r3, #3
 8005386:	d129      	bne.n	80053dc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005388:	4b81      	ldr	r3, [pc, #516]	@ (8005590 <HAL_RCC_ClockConfig+0x264>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e0f4      	b.n	8005582 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005398:	f000 f966 	bl	8005668 <RCC_GetSysClockFreqFromPLLSource>
 800539c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	4a7c      	ldr	r2, [pc, #496]	@ (8005594 <HAL_RCC_ClockConfig+0x268>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d93f      	bls.n	8005426 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80053a6:	4b7a      	ldr	r3, [pc, #488]	@ (8005590 <HAL_RCC_ClockConfig+0x264>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d009      	beq.n	80053c6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d033      	beq.n	8005426 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d12f      	bne.n	8005426 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80053c6:	4b72      	ldr	r3, [pc, #456]	@ (8005590 <HAL_RCC_ClockConfig+0x264>)
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053ce:	4a70      	ldr	r2, [pc, #448]	@ (8005590 <HAL_RCC_ClockConfig+0x264>)
 80053d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80053d6:	2380      	movs	r3, #128	@ 0x80
 80053d8:	617b      	str	r3, [r7, #20]
 80053da:	e024      	b.n	8005426 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d107      	bne.n	80053f4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053e4:	4b6a      	ldr	r3, [pc, #424]	@ (8005590 <HAL_RCC_ClockConfig+0x264>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d109      	bne.n	8005404 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e0c6      	b.n	8005582 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053f4:	4b66      	ldr	r3, [pc, #408]	@ (8005590 <HAL_RCC_ClockConfig+0x264>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d101      	bne.n	8005404 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e0be      	b.n	8005582 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005404:	f000 f8ce 	bl	80055a4 <HAL_RCC_GetSysClockFreq>
 8005408:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	4a61      	ldr	r2, [pc, #388]	@ (8005594 <HAL_RCC_ClockConfig+0x268>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d909      	bls.n	8005426 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005412:	4b5f      	ldr	r3, [pc, #380]	@ (8005590 <HAL_RCC_ClockConfig+0x264>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800541a:	4a5d      	ldr	r2, [pc, #372]	@ (8005590 <HAL_RCC_ClockConfig+0x264>)
 800541c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005420:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005422:	2380      	movs	r3, #128	@ 0x80
 8005424:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005426:	4b5a      	ldr	r3, [pc, #360]	@ (8005590 <HAL_RCC_ClockConfig+0x264>)
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f023 0203 	bic.w	r2, r3, #3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	4957      	ldr	r1, [pc, #348]	@ (8005590 <HAL_RCC_ClockConfig+0x264>)
 8005434:	4313      	orrs	r3, r2
 8005436:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005438:	f7fb ffae 	bl	8001398 <HAL_GetTick>
 800543c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800543e:	e00a      	b.n	8005456 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005440:	f7fb ffaa 	bl	8001398 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800544e:	4293      	cmp	r3, r2
 8005450:	d901      	bls.n	8005456 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e095      	b.n	8005582 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005456:	4b4e      	ldr	r3, [pc, #312]	@ (8005590 <HAL_RCC_ClockConfig+0x264>)
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f003 020c 	and.w	r2, r3, #12
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	429a      	cmp	r2, r3
 8005466:	d1eb      	bne.n	8005440 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0302 	and.w	r3, r3, #2
 8005470:	2b00      	cmp	r3, #0
 8005472:	d023      	beq.n	80054bc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0304 	and.w	r3, r3, #4
 800547c:	2b00      	cmp	r3, #0
 800547e:	d005      	beq.n	800548c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005480:	4b43      	ldr	r3, [pc, #268]	@ (8005590 <HAL_RCC_ClockConfig+0x264>)
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	4a42      	ldr	r2, [pc, #264]	@ (8005590 <HAL_RCC_ClockConfig+0x264>)
 8005486:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800548a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0308 	and.w	r3, r3, #8
 8005494:	2b00      	cmp	r3, #0
 8005496:	d007      	beq.n	80054a8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005498:	4b3d      	ldr	r3, [pc, #244]	@ (8005590 <HAL_RCC_ClockConfig+0x264>)
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80054a0:	4a3b      	ldr	r2, [pc, #236]	@ (8005590 <HAL_RCC_ClockConfig+0x264>)
 80054a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80054a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054a8:	4b39      	ldr	r3, [pc, #228]	@ (8005590 <HAL_RCC_ClockConfig+0x264>)
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	4936      	ldr	r1, [pc, #216]	@ (8005590 <HAL_RCC_ClockConfig+0x264>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	608b      	str	r3, [r1, #8]
 80054ba:	e008      	b.n	80054ce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	2b80      	cmp	r3, #128	@ 0x80
 80054c0:	d105      	bne.n	80054ce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80054c2:	4b33      	ldr	r3, [pc, #204]	@ (8005590 <HAL_RCC_ClockConfig+0x264>)
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	4a32      	ldr	r2, [pc, #200]	@ (8005590 <HAL_RCC_ClockConfig+0x264>)
 80054c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054cc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054ce:	4b2f      	ldr	r3, [pc, #188]	@ (800558c <HAL_RCC_ClockConfig+0x260>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 030f 	and.w	r3, r3, #15
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d21d      	bcs.n	8005518 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054dc:	4b2b      	ldr	r3, [pc, #172]	@ (800558c <HAL_RCC_ClockConfig+0x260>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f023 020f 	bic.w	r2, r3, #15
 80054e4:	4929      	ldr	r1, [pc, #164]	@ (800558c <HAL_RCC_ClockConfig+0x260>)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80054ec:	f7fb ff54 	bl	8001398 <HAL_GetTick>
 80054f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054f2:	e00a      	b.n	800550a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054f4:	f7fb ff50 	bl	8001398 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005502:	4293      	cmp	r3, r2
 8005504:	d901      	bls.n	800550a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e03b      	b.n	8005582 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800550a:	4b20      	ldr	r3, [pc, #128]	@ (800558c <HAL_RCC_ClockConfig+0x260>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 030f 	and.w	r3, r3, #15
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	429a      	cmp	r2, r3
 8005516:	d1ed      	bne.n	80054f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0304 	and.w	r3, r3, #4
 8005520:	2b00      	cmp	r3, #0
 8005522:	d008      	beq.n	8005536 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005524:	4b1a      	ldr	r3, [pc, #104]	@ (8005590 <HAL_RCC_ClockConfig+0x264>)
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	4917      	ldr	r1, [pc, #92]	@ (8005590 <HAL_RCC_ClockConfig+0x264>)
 8005532:	4313      	orrs	r3, r2
 8005534:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0308 	and.w	r3, r3, #8
 800553e:	2b00      	cmp	r3, #0
 8005540:	d009      	beq.n	8005556 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005542:	4b13      	ldr	r3, [pc, #76]	@ (8005590 <HAL_RCC_ClockConfig+0x264>)
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	00db      	lsls	r3, r3, #3
 8005550:	490f      	ldr	r1, [pc, #60]	@ (8005590 <HAL_RCC_ClockConfig+0x264>)
 8005552:	4313      	orrs	r3, r2
 8005554:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005556:	f000 f825 	bl	80055a4 <HAL_RCC_GetSysClockFreq>
 800555a:	4602      	mov	r2, r0
 800555c:	4b0c      	ldr	r3, [pc, #48]	@ (8005590 <HAL_RCC_ClockConfig+0x264>)
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	091b      	lsrs	r3, r3, #4
 8005562:	f003 030f 	and.w	r3, r3, #15
 8005566:	490c      	ldr	r1, [pc, #48]	@ (8005598 <HAL_RCC_ClockConfig+0x26c>)
 8005568:	5ccb      	ldrb	r3, [r1, r3]
 800556a:	f003 031f 	and.w	r3, r3, #31
 800556e:	fa22 f303 	lsr.w	r3, r2, r3
 8005572:	4a0a      	ldr	r2, [pc, #40]	@ (800559c <HAL_RCC_ClockConfig+0x270>)
 8005574:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005576:	4b0a      	ldr	r3, [pc, #40]	@ (80055a0 <HAL_RCC_ClockConfig+0x274>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4618      	mov	r0, r3
 800557c:	f7fb fec0 	bl	8001300 <HAL_InitTick>
 8005580:	4603      	mov	r3, r0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3718      	adds	r7, #24
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	40022000 	.word	0x40022000
 8005590:	40021000 	.word	0x40021000
 8005594:	04c4b400 	.word	0x04c4b400
 8005598:	0800791c 	.word	0x0800791c
 800559c:	20000018 	.word	0x20000018
 80055a0:	2000001c 	.word	0x2000001c

080055a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b087      	sub	sp, #28
 80055a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80055aa:	4b2c      	ldr	r3, [pc, #176]	@ (800565c <HAL_RCC_GetSysClockFreq+0xb8>)
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f003 030c 	and.w	r3, r3, #12
 80055b2:	2b04      	cmp	r3, #4
 80055b4:	d102      	bne.n	80055bc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80055b6:	4b2a      	ldr	r3, [pc, #168]	@ (8005660 <HAL_RCC_GetSysClockFreq+0xbc>)
 80055b8:	613b      	str	r3, [r7, #16]
 80055ba:	e047      	b.n	800564c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80055bc:	4b27      	ldr	r3, [pc, #156]	@ (800565c <HAL_RCC_GetSysClockFreq+0xb8>)
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f003 030c 	and.w	r3, r3, #12
 80055c4:	2b08      	cmp	r3, #8
 80055c6:	d102      	bne.n	80055ce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055c8:	4b26      	ldr	r3, [pc, #152]	@ (8005664 <HAL_RCC_GetSysClockFreq+0xc0>)
 80055ca:	613b      	str	r3, [r7, #16]
 80055cc:	e03e      	b.n	800564c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80055ce:	4b23      	ldr	r3, [pc, #140]	@ (800565c <HAL_RCC_GetSysClockFreq+0xb8>)
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f003 030c 	and.w	r3, r3, #12
 80055d6:	2b0c      	cmp	r3, #12
 80055d8:	d136      	bne.n	8005648 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055da:	4b20      	ldr	r3, [pc, #128]	@ (800565c <HAL_RCC_GetSysClockFreq+0xb8>)
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	f003 0303 	and.w	r3, r3, #3
 80055e2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055e4:	4b1d      	ldr	r3, [pc, #116]	@ (800565c <HAL_RCC_GetSysClockFreq+0xb8>)
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	091b      	lsrs	r3, r3, #4
 80055ea:	f003 030f 	and.w	r3, r3, #15
 80055ee:	3301      	adds	r3, #1
 80055f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2b03      	cmp	r3, #3
 80055f6:	d10c      	bne.n	8005612 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055f8:	4a1a      	ldr	r2, [pc, #104]	@ (8005664 <HAL_RCC_GetSysClockFreq+0xc0>)
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005600:	4a16      	ldr	r2, [pc, #88]	@ (800565c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005602:	68d2      	ldr	r2, [r2, #12]
 8005604:	0a12      	lsrs	r2, r2, #8
 8005606:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800560a:	fb02 f303 	mul.w	r3, r2, r3
 800560e:	617b      	str	r3, [r7, #20]
      break;
 8005610:	e00c      	b.n	800562c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005612:	4a13      	ldr	r2, [pc, #76]	@ (8005660 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	fbb2 f3f3 	udiv	r3, r2, r3
 800561a:	4a10      	ldr	r2, [pc, #64]	@ (800565c <HAL_RCC_GetSysClockFreq+0xb8>)
 800561c:	68d2      	ldr	r2, [r2, #12]
 800561e:	0a12      	lsrs	r2, r2, #8
 8005620:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005624:	fb02 f303 	mul.w	r3, r2, r3
 8005628:	617b      	str	r3, [r7, #20]
      break;
 800562a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800562c:	4b0b      	ldr	r3, [pc, #44]	@ (800565c <HAL_RCC_GetSysClockFreq+0xb8>)
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	0e5b      	lsrs	r3, r3, #25
 8005632:	f003 0303 	and.w	r3, r3, #3
 8005636:	3301      	adds	r3, #1
 8005638:	005b      	lsls	r3, r3, #1
 800563a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	fbb2 f3f3 	udiv	r3, r2, r3
 8005644:	613b      	str	r3, [r7, #16]
 8005646:	e001      	b.n	800564c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005648:	2300      	movs	r3, #0
 800564a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800564c:	693b      	ldr	r3, [r7, #16]
}
 800564e:	4618      	mov	r0, r3
 8005650:	371c      	adds	r7, #28
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	40021000 	.word	0x40021000
 8005660:	00f42400 	.word	0x00f42400
 8005664:	007a1200 	.word	0x007a1200

08005668 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005668:	b480      	push	{r7}
 800566a:	b087      	sub	sp, #28
 800566c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800566e:	4b1e      	ldr	r3, [pc, #120]	@ (80056e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	f003 0303 	and.w	r3, r3, #3
 8005676:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005678:	4b1b      	ldr	r3, [pc, #108]	@ (80056e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	091b      	lsrs	r3, r3, #4
 800567e:	f003 030f 	and.w	r3, r3, #15
 8005682:	3301      	adds	r3, #1
 8005684:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	2b03      	cmp	r3, #3
 800568a:	d10c      	bne.n	80056a6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800568c:	4a17      	ldr	r2, [pc, #92]	@ (80056ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	fbb2 f3f3 	udiv	r3, r2, r3
 8005694:	4a14      	ldr	r2, [pc, #80]	@ (80056e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005696:	68d2      	ldr	r2, [r2, #12]
 8005698:	0a12      	lsrs	r2, r2, #8
 800569a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800569e:	fb02 f303 	mul.w	r3, r2, r3
 80056a2:	617b      	str	r3, [r7, #20]
    break;
 80056a4:	e00c      	b.n	80056c0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056a6:	4a12      	ldr	r2, [pc, #72]	@ (80056f0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ae:	4a0e      	ldr	r2, [pc, #56]	@ (80056e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056b0:	68d2      	ldr	r2, [r2, #12]
 80056b2:	0a12      	lsrs	r2, r2, #8
 80056b4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80056b8:	fb02 f303 	mul.w	r3, r2, r3
 80056bc:	617b      	str	r3, [r7, #20]
    break;
 80056be:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056c0:	4b09      	ldr	r3, [pc, #36]	@ (80056e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	0e5b      	lsrs	r3, r3, #25
 80056c6:	f003 0303 	and.w	r3, r3, #3
 80056ca:	3301      	adds	r3, #1
 80056cc:	005b      	lsls	r3, r3, #1
 80056ce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80056da:	687b      	ldr	r3, [r7, #4]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	371c      	adds	r7, #28
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	40021000 	.word	0x40021000
 80056ec:	007a1200 	.word	0x007a1200
 80056f0:	00f42400 	.word	0x00f42400

080056f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80056fc:	2300      	movs	r3, #0
 80056fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005700:	2300      	movs	r3, #0
 8005702:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 8098 	beq.w	8005842 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005712:	2300      	movs	r3, #0
 8005714:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005716:	4b43      	ldr	r3, [pc, #268]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800571a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10d      	bne.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005722:	4b40      	ldr	r3, [pc, #256]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005726:	4a3f      	ldr	r2, [pc, #252]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005728:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800572c:	6593      	str	r3, [r2, #88]	@ 0x58
 800572e:	4b3d      	ldr	r3, [pc, #244]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005732:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005736:	60bb      	str	r3, [r7, #8]
 8005738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800573a:	2301      	movs	r3, #1
 800573c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800573e:	4b3a      	ldr	r3, [pc, #232]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a39      	ldr	r2, [pc, #228]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005744:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005748:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800574a:	f7fb fe25 	bl	8001398 <HAL_GetTick>
 800574e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005750:	e009      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005752:	f7fb fe21 	bl	8001398 <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	2b02      	cmp	r3, #2
 800575e:	d902      	bls.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	74fb      	strb	r3, [r7, #19]
        break;
 8005764:	e005      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005766:	4b30      	ldr	r3, [pc, #192]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800576e:	2b00      	cmp	r3, #0
 8005770:	d0ef      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005772:	7cfb      	ldrb	r3, [r7, #19]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d159      	bne.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005778:	4b2a      	ldr	r3, [pc, #168]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800577a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800577e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005782:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d01e      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	429a      	cmp	r2, r3
 8005792:	d019      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005794:	4b23      	ldr	r3, [pc, #140]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800579a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800579e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80057a0:	4b20      	ldr	r3, [pc, #128]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057a6:	4a1f      	ldr	r2, [pc, #124]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057b0:	4b1c      	ldr	r3, [pc, #112]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057b6:	4a1b      	ldr	r2, [pc, #108]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80057c0:	4a18      	ldr	r2, [pc, #96]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d016      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d2:	f7fb fde1 	bl	8001398 <HAL_GetTick>
 80057d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057d8:	e00b      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057da:	f7fb fddd 	bl	8001398 <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d902      	bls.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	74fb      	strb	r3, [r7, #19]
            break;
 80057f0:	e006      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d0ec      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005800:	7cfb      	ldrb	r3, [r7, #19]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10b      	bne.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005806:	4b07      	ldr	r3, [pc, #28]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005808:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800580c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005814:	4903      	ldr	r1, [pc, #12]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005816:	4313      	orrs	r3, r2
 8005818:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800581c:	e008      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800581e:	7cfb      	ldrb	r3, [r7, #19]
 8005820:	74bb      	strb	r3, [r7, #18]
 8005822:	e005      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005824:	40021000 	.word	0x40021000
 8005828:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800582c:	7cfb      	ldrb	r3, [r7, #19]
 800582e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005830:	7c7b      	ldrb	r3, [r7, #17]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d105      	bne.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005836:	4ba6      	ldr	r3, [pc, #664]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800583a:	4aa5      	ldr	r2, [pc, #660]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800583c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005840:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00a      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800584e:	4ba0      	ldr	r3, [pc, #640]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005850:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005854:	f023 0203 	bic.w	r2, r3, #3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	499c      	ldr	r1, [pc, #624]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800585e:	4313      	orrs	r3, r2
 8005860:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0302 	and.w	r3, r3, #2
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00a      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005870:	4b97      	ldr	r3, [pc, #604]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005876:	f023 020c 	bic.w	r2, r3, #12
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	4994      	ldr	r1, [pc, #592]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005880:	4313      	orrs	r3, r2
 8005882:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0304 	and.w	r3, r3, #4
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00a      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005892:	4b8f      	ldr	r3, [pc, #572]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005898:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	498b      	ldr	r1, [pc, #556]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0308 	and.w	r3, r3, #8
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00a      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80058b4:	4b86      	ldr	r3, [pc, #536]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	4983      	ldr	r1, [pc, #524]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 0320 	and.w	r3, r3, #32
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00a      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058d6:	4b7e      	ldr	r3, [pc, #504]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058dc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	497a      	ldr	r1, [pc, #488]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00a      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058f8:	4b75      	ldr	r3, [pc, #468]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058fe:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	4972      	ldr	r1, [pc, #456]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005908:	4313      	orrs	r3, r2
 800590a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00a      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800591a:	4b6d      	ldr	r3, [pc, #436]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800591c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005920:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	69db      	ldr	r3, [r3, #28]
 8005928:	4969      	ldr	r1, [pc, #420]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800592a:	4313      	orrs	r3, r2
 800592c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00a      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800593c:	4b64      	ldr	r3, [pc, #400]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800593e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005942:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	4961      	ldr	r1, [pc, #388]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800594c:	4313      	orrs	r3, r2
 800594e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00a      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800595e:	4b5c      	ldr	r3, [pc, #368]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005964:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596c:	4958      	ldr	r1, [pc, #352]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800596e:	4313      	orrs	r3, r2
 8005970:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800597c:	2b00      	cmp	r3, #0
 800597e:	d015      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005980:	4b53      	ldr	r3, [pc, #332]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005986:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800598e:	4950      	ldr	r1, [pc, #320]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005990:	4313      	orrs	r3, r2
 8005992:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800599a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800599e:	d105      	bne.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059a0:	4b4b      	ldr	r3, [pc, #300]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	4a4a      	ldr	r2, [pc, #296]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059aa:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d015      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80059b8:	4b45      	ldr	r3, [pc, #276]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059be:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c6:	4942      	ldr	r1, [pc, #264]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80059d6:	d105      	bne.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059d8:	4b3d      	ldr	r3, [pc, #244]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	4a3c      	ldr	r2, [pc, #240]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059e2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d015      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80059f0:	4b37      	ldr	r3, [pc, #220]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059f6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059fe:	4934      	ldr	r1, [pc, #208]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a0e:	d105      	bne.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a10:	4b2f      	ldr	r3, [pc, #188]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	4a2e      	ldr	r2, [pc, #184]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a1a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d015      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a28:	4b29      	ldr	r3, [pc, #164]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a2e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a36:	4926      	ldr	r1, [pc, #152]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a46:	d105      	bne.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a48:	4b21      	ldr	r3, [pc, #132]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	4a20      	ldr	r2, [pc, #128]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a52:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d015      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a60:	4b1b      	ldr	r3, [pc, #108]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a66:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a6e:	4918      	ldr	r1, [pc, #96]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a7e:	d105      	bne.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a80:	4b13      	ldr	r3, [pc, #76]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	4a12      	ldr	r2, [pc, #72]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a8a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d015      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005a98:	4b0d      	ldr	r3, [pc, #52]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a9e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aa6:	490a      	ldr	r1, [pc, #40]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ab2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ab6:	d105      	bne.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ab8:	4b05      	ldr	r3, [pc, #20]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	4a04      	ldr	r2, [pc, #16]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005abe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ac2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005ac4:	7cbb      	ldrb	r3, [r7, #18]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3718      	adds	r7, #24
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	40021000 	.word	0x40021000

08005ad4 <siprintf>:
 8005ad4:	b40e      	push	{r1, r2, r3}
 8005ad6:	b510      	push	{r4, lr}
 8005ad8:	b09d      	sub	sp, #116	@ 0x74
 8005ada:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005adc:	9002      	str	r0, [sp, #8]
 8005ade:	9006      	str	r0, [sp, #24]
 8005ae0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005ae4:	480a      	ldr	r0, [pc, #40]	@ (8005b10 <siprintf+0x3c>)
 8005ae6:	9107      	str	r1, [sp, #28]
 8005ae8:	9104      	str	r1, [sp, #16]
 8005aea:	490a      	ldr	r1, [pc, #40]	@ (8005b14 <siprintf+0x40>)
 8005aec:	f853 2b04 	ldr.w	r2, [r3], #4
 8005af0:	9105      	str	r1, [sp, #20]
 8005af2:	2400      	movs	r4, #0
 8005af4:	a902      	add	r1, sp, #8
 8005af6:	6800      	ldr	r0, [r0, #0]
 8005af8:	9301      	str	r3, [sp, #4]
 8005afa:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005afc:	f000 f994 	bl	8005e28 <_svfiprintf_r>
 8005b00:	9b02      	ldr	r3, [sp, #8]
 8005b02:	701c      	strb	r4, [r3, #0]
 8005b04:	b01d      	add	sp, #116	@ 0x74
 8005b06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b0a:	b003      	add	sp, #12
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	20000024 	.word	0x20000024
 8005b14:	ffff0208 	.word	0xffff0208

08005b18 <memset>:
 8005b18:	4402      	add	r2, r0
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d100      	bne.n	8005b22 <memset+0xa>
 8005b20:	4770      	bx	lr
 8005b22:	f803 1b01 	strb.w	r1, [r3], #1
 8005b26:	e7f9      	b.n	8005b1c <memset+0x4>

08005b28 <__errno>:
 8005b28:	4b01      	ldr	r3, [pc, #4]	@ (8005b30 <__errno+0x8>)
 8005b2a:	6818      	ldr	r0, [r3, #0]
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	20000024 	.word	0x20000024

08005b34 <__libc_init_array>:
 8005b34:	b570      	push	{r4, r5, r6, lr}
 8005b36:	4d0d      	ldr	r5, [pc, #52]	@ (8005b6c <__libc_init_array+0x38>)
 8005b38:	4c0d      	ldr	r4, [pc, #52]	@ (8005b70 <__libc_init_array+0x3c>)
 8005b3a:	1b64      	subs	r4, r4, r5
 8005b3c:	10a4      	asrs	r4, r4, #2
 8005b3e:	2600      	movs	r6, #0
 8005b40:	42a6      	cmp	r6, r4
 8005b42:	d109      	bne.n	8005b58 <__libc_init_array+0x24>
 8005b44:	4d0b      	ldr	r5, [pc, #44]	@ (8005b74 <__libc_init_array+0x40>)
 8005b46:	4c0c      	ldr	r4, [pc, #48]	@ (8005b78 <__libc_init_array+0x44>)
 8005b48:	f000 fc64 	bl	8006414 <_init>
 8005b4c:	1b64      	subs	r4, r4, r5
 8005b4e:	10a4      	asrs	r4, r4, #2
 8005b50:	2600      	movs	r6, #0
 8005b52:	42a6      	cmp	r6, r4
 8005b54:	d105      	bne.n	8005b62 <__libc_init_array+0x2e>
 8005b56:	bd70      	pop	{r4, r5, r6, pc}
 8005b58:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b5c:	4798      	blx	r3
 8005b5e:	3601      	adds	r6, #1
 8005b60:	e7ee      	b.n	8005b40 <__libc_init_array+0xc>
 8005b62:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b66:	4798      	blx	r3
 8005b68:	3601      	adds	r6, #1
 8005b6a:	e7f2      	b.n	8005b52 <__libc_init_array+0x1e>
 8005b6c:	08007978 	.word	0x08007978
 8005b70:	08007978 	.word	0x08007978
 8005b74:	08007978 	.word	0x08007978
 8005b78:	0800797c 	.word	0x0800797c

08005b7c <__retarget_lock_acquire_recursive>:
 8005b7c:	4770      	bx	lr

08005b7e <__retarget_lock_release_recursive>:
 8005b7e:	4770      	bx	lr

08005b80 <_free_r>:
 8005b80:	b538      	push	{r3, r4, r5, lr}
 8005b82:	4605      	mov	r5, r0
 8005b84:	2900      	cmp	r1, #0
 8005b86:	d041      	beq.n	8005c0c <_free_r+0x8c>
 8005b88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b8c:	1f0c      	subs	r4, r1, #4
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	bfb8      	it	lt
 8005b92:	18e4      	addlt	r4, r4, r3
 8005b94:	f000 f8e0 	bl	8005d58 <__malloc_lock>
 8005b98:	4a1d      	ldr	r2, [pc, #116]	@ (8005c10 <_free_r+0x90>)
 8005b9a:	6813      	ldr	r3, [r2, #0]
 8005b9c:	b933      	cbnz	r3, 8005bac <_free_r+0x2c>
 8005b9e:	6063      	str	r3, [r4, #4]
 8005ba0:	6014      	str	r4, [r2, #0]
 8005ba2:	4628      	mov	r0, r5
 8005ba4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ba8:	f000 b8dc 	b.w	8005d64 <__malloc_unlock>
 8005bac:	42a3      	cmp	r3, r4
 8005bae:	d908      	bls.n	8005bc2 <_free_r+0x42>
 8005bb0:	6820      	ldr	r0, [r4, #0]
 8005bb2:	1821      	adds	r1, r4, r0
 8005bb4:	428b      	cmp	r3, r1
 8005bb6:	bf01      	itttt	eq
 8005bb8:	6819      	ldreq	r1, [r3, #0]
 8005bba:	685b      	ldreq	r3, [r3, #4]
 8005bbc:	1809      	addeq	r1, r1, r0
 8005bbe:	6021      	streq	r1, [r4, #0]
 8005bc0:	e7ed      	b.n	8005b9e <_free_r+0x1e>
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	b10b      	cbz	r3, 8005bcc <_free_r+0x4c>
 8005bc8:	42a3      	cmp	r3, r4
 8005bca:	d9fa      	bls.n	8005bc2 <_free_r+0x42>
 8005bcc:	6811      	ldr	r1, [r2, #0]
 8005bce:	1850      	adds	r0, r2, r1
 8005bd0:	42a0      	cmp	r0, r4
 8005bd2:	d10b      	bne.n	8005bec <_free_r+0x6c>
 8005bd4:	6820      	ldr	r0, [r4, #0]
 8005bd6:	4401      	add	r1, r0
 8005bd8:	1850      	adds	r0, r2, r1
 8005bda:	4283      	cmp	r3, r0
 8005bdc:	6011      	str	r1, [r2, #0]
 8005bde:	d1e0      	bne.n	8005ba2 <_free_r+0x22>
 8005be0:	6818      	ldr	r0, [r3, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	6053      	str	r3, [r2, #4]
 8005be6:	4408      	add	r0, r1
 8005be8:	6010      	str	r0, [r2, #0]
 8005bea:	e7da      	b.n	8005ba2 <_free_r+0x22>
 8005bec:	d902      	bls.n	8005bf4 <_free_r+0x74>
 8005bee:	230c      	movs	r3, #12
 8005bf0:	602b      	str	r3, [r5, #0]
 8005bf2:	e7d6      	b.n	8005ba2 <_free_r+0x22>
 8005bf4:	6820      	ldr	r0, [r4, #0]
 8005bf6:	1821      	adds	r1, r4, r0
 8005bf8:	428b      	cmp	r3, r1
 8005bfa:	bf04      	itt	eq
 8005bfc:	6819      	ldreq	r1, [r3, #0]
 8005bfe:	685b      	ldreq	r3, [r3, #4]
 8005c00:	6063      	str	r3, [r4, #4]
 8005c02:	bf04      	itt	eq
 8005c04:	1809      	addeq	r1, r1, r0
 8005c06:	6021      	streq	r1, [r4, #0]
 8005c08:	6054      	str	r4, [r2, #4]
 8005c0a:	e7ca      	b.n	8005ba2 <_free_r+0x22>
 8005c0c:	bd38      	pop	{r3, r4, r5, pc}
 8005c0e:	bf00      	nop
 8005c10:	200007a4 	.word	0x200007a4

08005c14 <sbrk_aligned>:
 8005c14:	b570      	push	{r4, r5, r6, lr}
 8005c16:	4e0f      	ldr	r6, [pc, #60]	@ (8005c54 <sbrk_aligned+0x40>)
 8005c18:	460c      	mov	r4, r1
 8005c1a:	6831      	ldr	r1, [r6, #0]
 8005c1c:	4605      	mov	r5, r0
 8005c1e:	b911      	cbnz	r1, 8005c26 <sbrk_aligned+0x12>
 8005c20:	f000 fba4 	bl	800636c <_sbrk_r>
 8005c24:	6030      	str	r0, [r6, #0]
 8005c26:	4621      	mov	r1, r4
 8005c28:	4628      	mov	r0, r5
 8005c2a:	f000 fb9f 	bl	800636c <_sbrk_r>
 8005c2e:	1c43      	adds	r3, r0, #1
 8005c30:	d103      	bne.n	8005c3a <sbrk_aligned+0x26>
 8005c32:	f04f 34ff 	mov.w	r4, #4294967295
 8005c36:	4620      	mov	r0, r4
 8005c38:	bd70      	pop	{r4, r5, r6, pc}
 8005c3a:	1cc4      	adds	r4, r0, #3
 8005c3c:	f024 0403 	bic.w	r4, r4, #3
 8005c40:	42a0      	cmp	r0, r4
 8005c42:	d0f8      	beq.n	8005c36 <sbrk_aligned+0x22>
 8005c44:	1a21      	subs	r1, r4, r0
 8005c46:	4628      	mov	r0, r5
 8005c48:	f000 fb90 	bl	800636c <_sbrk_r>
 8005c4c:	3001      	adds	r0, #1
 8005c4e:	d1f2      	bne.n	8005c36 <sbrk_aligned+0x22>
 8005c50:	e7ef      	b.n	8005c32 <sbrk_aligned+0x1e>
 8005c52:	bf00      	nop
 8005c54:	200007a0 	.word	0x200007a0

08005c58 <_malloc_r>:
 8005c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c5c:	1ccd      	adds	r5, r1, #3
 8005c5e:	f025 0503 	bic.w	r5, r5, #3
 8005c62:	3508      	adds	r5, #8
 8005c64:	2d0c      	cmp	r5, #12
 8005c66:	bf38      	it	cc
 8005c68:	250c      	movcc	r5, #12
 8005c6a:	2d00      	cmp	r5, #0
 8005c6c:	4606      	mov	r6, r0
 8005c6e:	db01      	blt.n	8005c74 <_malloc_r+0x1c>
 8005c70:	42a9      	cmp	r1, r5
 8005c72:	d904      	bls.n	8005c7e <_malloc_r+0x26>
 8005c74:	230c      	movs	r3, #12
 8005c76:	6033      	str	r3, [r6, #0]
 8005c78:	2000      	movs	r0, #0
 8005c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d54 <_malloc_r+0xfc>
 8005c82:	f000 f869 	bl	8005d58 <__malloc_lock>
 8005c86:	f8d8 3000 	ldr.w	r3, [r8]
 8005c8a:	461c      	mov	r4, r3
 8005c8c:	bb44      	cbnz	r4, 8005ce0 <_malloc_r+0x88>
 8005c8e:	4629      	mov	r1, r5
 8005c90:	4630      	mov	r0, r6
 8005c92:	f7ff ffbf 	bl	8005c14 <sbrk_aligned>
 8005c96:	1c43      	adds	r3, r0, #1
 8005c98:	4604      	mov	r4, r0
 8005c9a:	d158      	bne.n	8005d4e <_malloc_r+0xf6>
 8005c9c:	f8d8 4000 	ldr.w	r4, [r8]
 8005ca0:	4627      	mov	r7, r4
 8005ca2:	2f00      	cmp	r7, #0
 8005ca4:	d143      	bne.n	8005d2e <_malloc_r+0xd6>
 8005ca6:	2c00      	cmp	r4, #0
 8005ca8:	d04b      	beq.n	8005d42 <_malloc_r+0xea>
 8005caa:	6823      	ldr	r3, [r4, #0]
 8005cac:	4639      	mov	r1, r7
 8005cae:	4630      	mov	r0, r6
 8005cb0:	eb04 0903 	add.w	r9, r4, r3
 8005cb4:	f000 fb5a 	bl	800636c <_sbrk_r>
 8005cb8:	4581      	cmp	r9, r0
 8005cba:	d142      	bne.n	8005d42 <_malloc_r+0xea>
 8005cbc:	6821      	ldr	r1, [r4, #0]
 8005cbe:	1a6d      	subs	r5, r5, r1
 8005cc0:	4629      	mov	r1, r5
 8005cc2:	4630      	mov	r0, r6
 8005cc4:	f7ff ffa6 	bl	8005c14 <sbrk_aligned>
 8005cc8:	3001      	adds	r0, #1
 8005cca:	d03a      	beq.n	8005d42 <_malloc_r+0xea>
 8005ccc:	6823      	ldr	r3, [r4, #0]
 8005cce:	442b      	add	r3, r5
 8005cd0:	6023      	str	r3, [r4, #0]
 8005cd2:	f8d8 3000 	ldr.w	r3, [r8]
 8005cd6:	685a      	ldr	r2, [r3, #4]
 8005cd8:	bb62      	cbnz	r2, 8005d34 <_malloc_r+0xdc>
 8005cda:	f8c8 7000 	str.w	r7, [r8]
 8005cde:	e00f      	b.n	8005d00 <_malloc_r+0xa8>
 8005ce0:	6822      	ldr	r2, [r4, #0]
 8005ce2:	1b52      	subs	r2, r2, r5
 8005ce4:	d420      	bmi.n	8005d28 <_malloc_r+0xd0>
 8005ce6:	2a0b      	cmp	r2, #11
 8005ce8:	d917      	bls.n	8005d1a <_malloc_r+0xc2>
 8005cea:	1961      	adds	r1, r4, r5
 8005cec:	42a3      	cmp	r3, r4
 8005cee:	6025      	str	r5, [r4, #0]
 8005cf0:	bf18      	it	ne
 8005cf2:	6059      	strne	r1, [r3, #4]
 8005cf4:	6863      	ldr	r3, [r4, #4]
 8005cf6:	bf08      	it	eq
 8005cf8:	f8c8 1000 	streq.w	r1, [r8]
 8005cfc:	5162      	str	r2, [r4, r5]
 8005cfe:	604b      	str	r3, [r1, #4]
 8005d00:	4630      	mov	r0, r6
 8005d02:	f000 f82f 	bl	8005d64 <__malloc_unlock>
 8005d06:	f104 000b 	add.w	r0, r4, #11
 8005d0a:	1d23      	adds	r3, r4, #4
 8005d0c:	f020 0007 	bic.w	r0, r0, #7
 8005d10:	1ac2      	subs	r2, r0, r3
 8005d12:	bf1c      	itt	ne
 8005d14:	1a1b      	subne	r3, r3, r0
 8005d16:	50a3      	strne	r3, [r4, r2]
 8005d18:	e7af      	b.n	8005c7a <_malloc_r+0x22>
 8005d1a:	6862      	ldr	r2, [r4, #4]
 8005d1c:	42a3      	cmp	r3, r4
 8005d1e:	bf0c      	ite	eq
 8005d20:	f8c8 2000 	streq.w	r2, [r8]
 8005d24:	605a      	strne	r2, [r3, #4]
 8005d26:	e7eb      	b.n	8005d00 <_malloc_r+0xa8>
 8005d28:	4623      	mov	r3, r4
 8005d2a:	6864      	ldr	r4, [r4, #4]
 8005d2c:	e7ae      	b.n	8005c8c <_malloc_r+0x34>
 8005d2e:	463c      	mov	r4, r7
 8005d30:	687f      	ldr	r7, [r7, #4]
 8005d32:	e7b6      	b.n	8005ca2 <_malloc_r+0x4a>
 8005d34:	461a      	mov	r2, r3
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	42a3      	cmp	r3, r4
 8005d3a:	d1fb      	bne.n	8005d34 <_malloc_r+0xdc>
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	6053      	str	r3, [r2, #4]
 8005d40:	e7de      	b.n	8005d00 <_malloc_r+0xa8>
 8005d42:	230c      	movs	r3, #12
 8005d44:	6033      	str	r3, [r6, #0]
 8005d46:	4630      	mov	r0, r6
 8005d48:	f000 f80c 	bl	8005d64 <__malloc_unlock>
 8005d4c:	e794      	b.n	8005c78 <_malloc_r+0x20>
 8005d4e:	6005      	str	r5, [r0, #0]
 8005d50:	e7d6      	b.n	8005d00 <_malloc_r+0xa8>
 8005d52:	bf00      	nop
 8005d54:	200007a4 	.word	0x200007a4

08005d58 <__malloc_lock>:
 8005d58:	4801      	ldr	r0, [pc, #4]	@ (8005d60 <__malloc_lock+0x8>)
 8005d5a:	f7ff bf0f 	b.w	8005b7c <__retarget_lock_acquire_recursive>
 8005d5e:	bf00      	nop
 8005d60:	2000079c 	.word	0x2000079c

08005d64 <__malloc_unlock>:
 8005d64:	4801      	ldr	r0, [pc, #4]	@ (8005d6c <__malloc_unlock+0x8>)
 8005d66:	f7ff bf0a 	b.w	8005b7e <__retarget_lock_release_recursive>
 8005d6a:	bf00      	nop
 8005d6c:	2000079c 	.word	0x2000079c

08005d70 <__ssputs_r>:
 8005d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d74:	688e      	ldr	r6, [r1, #8]
 8005d76:	461f      	mov	r7, r3
 8005d78:	42be      	cmp	r6, r7
 8005d7a:	680b      	ldr	r3, [r1, #0]
 8005d7c:	4682      	mov	sl, r0
 8005d7e:	460c      	mov	r4, r1
 8005d80:	4690      	mov	r8, r2
 8005d82:	d82d      	bhi.n	8005de0 <__ssputs_r+0x70>
 8005d84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d88:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005d8c:	d026      	beq.n	8005ddc <__ssputs_r+0x6c>
 8005d8e:	6965      	ldr	r5, [r4, #20]
 8005d90:	6909      	ldr	r1, [r1, #16]
 8005d92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d96:	eba3 0901 	sub.w	r9, r3, r1
 8005d9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d9e:	1c7b      	adds	r3, r7, #1
 8005da0:	444b      	add	r3, r9
 8005da2:	106d      	asrs	r5, r5, #1
 8005da4:	429d      	cmp	r5, r3
 8005da6:	bf38      	it	cc
 8005da8:	461d      	movcc	r5, r3
 8005daa:	0553      	lsls	r3, r2, #21
 8005dac:	d527      	bpl.n	8005dfe <__ssputs_r+0x8e>
 8005dae:	4629      	mov	r1, r5
 8005db0:	f7ff ff52 	bl	8005c58 <_malloc_r>
 8005db4:	4606      	mov	r6, r0
 8005db6:	b360      	cbz	r0, 8005e12 <__ssputs_r+0xa2>
 8005db8:	6921      	ldr	r1, [r4, #16]
 8005dba:	464a      	mov	r2, r9
 8005dbc:	f000 fae6 	bl	800638c <memcpy>
 8005dc0:	89a3      	ldrh	r3, [r4, #12]
 8005dc2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005dc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dca:	81a3      	strh	r3, [r4, #12]
 8005dcc:	6126      	str	r6, [r4, #16]
 8005dce:	6165      	str	r5, [r4, #20]
 8005dd0:	444e      	add	r6, r9
 8005dd2:	eba5 0509 	sub.w	r5, r5, r9
 8005dd6:	6026      	str	r6, [r4, #0]
 8005dd8:	60a5      	str	r5, [r4, #8]
 8005dda:	463e      	mov	r6, r7
 8005ddc:	42be      	cmp	r6, r7
 8005dde:	d900      	bls.n	8005de2 <__ssputs_r+0x72>
 8005de0:	463e      	mov	r6, r7
 8005de2:	6820      	ldr	r0, [r4, #0]
 8005de4:	4632      	mov	r2, r6
 8005de6:	4641      	mov	r1, r8
 8005de8:	f000 faa6 	bl	8006338 <memmove>
 8005dec:	68a3      	ldr	r3, [r4, #8]
 8005dee:	1b9b      	subs	r3, r3, r6
 8005df0:	60a3      	str	r3, [r4, #8]
 8005df2:	6823      	ldr	r3, [r4, #0]
 8005df4:	4433      	add	r3, r6
 8005df6:	6023      	str	r3, [r4, #0]
 8005df8:	2000      	movs	r0, #0
 8005dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dfe:	462a      	mov	r2, r5
 8005e00:	f000 fad2 	bl	80063a8 <_realloc_r>
 8005e04:	4606      	mov	r6, r0
 8005e06:	2800      	cmp	r0, #0
 8005e08:	d1e0      	bne.n	8005dcc <__ssputs_r+0x5c>
 8005e0a:	6921      	ldr	r1, [r4, #16]
 8005e0c:	4650      	mov	r0, sl
 8005e0e:	f7ff feb7 	bl	8005b80 <_free_r>
 8005e12:	230c      	movs	r3, #12
 8005e14:	f8ca 3000 	str.w	r3, [sl]
 8005e18:	89a3      	ldrh	r3, [r4, #12]
 8005e1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e1e:	81a3      	strh	r3, [r4, #12]
 8005e20:	f04f 30ff 	mov.w	r0, #4294967295
 8005e24:	e7e9      	b.n	8005dfa <__ssputs_r+0x8a>
	...

08005e28 <_svfiprintf_r>:
 8005e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e2c:	4698      	mov	r8, r3
 8005e2e:	898b      	ldrh	r3, [r1, #12]
 8005e30:	061b      	lsls	r3, r3, #24
 8005e32:	b09d      	sub	sp, #116	@ 0x74
 8005e34:	4607      	mov	r7, r0
 8005e36:	460d      	mov	r5, r1
 8005e38:	4614      	mov	r4, r2
 8005e3a:	d510      	bpl.n	8005e5e <_svfiprintf_r+0x36>
 8005e3c:	690b      	ldr	r3, [r1, #16]
 8005e3e:	b973      	cbnz	r3, 8005e5e <_svfiprintf_r+0x36>
 8005e40:	2140      	movs	r1, #64	@ 0x40
 8005e42:	f7ff ff09 	bl	8005c58 <_malloc_r>
 8005e46:	6028      	str	r0, [r5, #0]
 8005e48:	6128      	str	r0, [r5, #16]
 8005e4a:	b930      	cbnz	r0, 8005e5a <_svfiprintf_r+0x32>
 8005e4c:	230c      	movs	r3, #12
 8005e4e:	603b      	str	r3, [r7, #0]
 8005e50:	f04f 30ff 	mov.w	r0, #4294967295
 8005e54:	b01d      	add	sp, #116	@ 0x74
 8005e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e5a:	2340      	movs	r3, #64	@ 0x40
 8005e5c:	616b      	str	r3, [r5, #20]
 8005e5e:	2300      	movs	r3, #0
 8005e60:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e62:	2320      	movs	r3, #32
 8005e64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e68:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e6c:	2330      	movs	r3, #48	@ 0x30
 8005e6e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800600c <_svfiprintf_r+0x1e4>
 8005e72:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e76:	f04f 0901 	mov.w	r9, #1
 8005e7a:	4623      	mov	r3, r4
 8005e7c:	469a      	mov	sl, r3
 8005e7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e82:	b10a      	cbz	r2, 8005e88 <_svfiprintf_r+0x60>
 8005e84:	2a25      	cmp	r2, #37	@ 0x25
 8005e86:	d1f9      	bne.n	8005e7c <_svfiprintf_r+0x54>
 8005e88:	ebba 0b04 	subs.w	fp, sl, r4
 8005e8c:	d00b      	beq.n	8005ea6 <_svfiprintf_r+0x7e>
 8005e8e:	465b      	mov	r3, fp
 8005e90:	4622      	mov	r2, r4
 8005e92:	4629      	mov	r1, r5
 8005e94:	4638      	mov	r0, r7
 8005e96:	f7ff ff6b 	bl	8005d70 <__ssputs_r>
 8005e9a:	3001      	adds	r0, #1
 8005e9c:	f000 80a7 	beq.w	8005fee <_svfiprintf_r+0x1c6>
 8005ea0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ea2:	445a      	add	r2, fp
 8005ea4:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ea6:	f89a 3000 	ldrb.w	r3, [sl]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f000 809f 	beq.w	8005fee <_svfiprintf_r+0x1c6>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8005eb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005eba:	f10a 0a01 	add.w	sl, sl, #1
 8005ebe:	9304      	str	r3, [sp, #16]
 8005ec0:	9307      	str	r3, [sp, #28]
 8005ec2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005ec6:	931a      	str	r3, [sp, #104]	@ 0x68
 8005ec8:	4654      	mov	r4, sl
 8005eca:	2205      	movs	r2, #5
 8005ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ed0:	484e      	ldr	r0, [pc, #312]	@ (800600c <_svfiprintf_r+0x1e4>)
 8005ed2:	f7fa f9a5 	bl	8000220 <memchr>
 8005ed6:	9a04      	ldr	r2, [sp, #16]
 8005ed8:	b9d8      	cbnz	r0, 8005f12 <_svfiprintf_r+0xea>
 8005eda:	06d0      	lsls	r0, r2, #27
 8005edc:	bf44      	itt	mi
 8005ede:	2320      	movmi	r3, #32
 8005ee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ee4:	0711      	lsls	r1, r2, #28
 8005ee6:	bf44      	itt	mi
 8005ee8:	232b      	movmi	r3, #43	@ 0x2b
 8005eea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005eee:	f89a 3000 	ldrb.w	r3, [sl]
 8005ef2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ef4:	d015      	beq.n	8005f22 <_svfiprintf_r+0xfa>
 8005ef6:	9a07      	ldr	r2, [sp, #28]
 8005ef8:	4654      	mov	r4, sl
 8005efa:	2000      	movs	r0, #0
 8005efc:	f04f 0c0a 	mov.w	ip, #10
 8005f00:	4621      	mov	r1, r4
 8005f02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f06:	3b30      	subs	r3, #48	@ 0x30
 8005f08:	2b09      	cmp	r3, #9
 8005f0a:	d94b      	bls.n	8005fa4 <_svfiprintf_r+0x17c>
 8005f0c:	b1b0      	cbz	r0, 8005f3c <_svfiprintf_r+0x114>
 8005f0e:	9207      	str	r2, [sp, #28]
 8005f10:	e014      	b.n	8005f3c <_svfiprintf_r+0x114>
 8005f12:	eba0 0308 	sub.w	r3, r0, r8
 8005f16:	fa09 f303 	lsl.w	r3, r9, r3
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	9304      	str	r3, [sp, #16]
 8005f1e:	46a2      	mov	sl, r4
 8005f20:	e7d2      	b.n	8005ec8 <_svfiprintf_r+0xa0>
 8005f22:	9b03      	ldr	r3, [sp, #12]
 8005f24:	1d19      	adds	r1, r3, #4
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	9103      	str	r1, [sp, #12]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	bfbb      	ittet	lt
 8005f2e:	425b      	neglt	r3, r3
 8005f30:	f042 0202 	orrlt.w	r2, r2, #2
 8005f34:	9307      	strge	r3, [sp, #28]
 8005f36:	9307      	strlt	r3, [sp, #28]
 8005f38:	bfb8      	it	lt
 8005f3a:	9204      	strlt	r2, [sp, #16]
 8005f3c:	7823      	ldrb	r3, [r4, #0]
 8005f3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f40:	d10a      	bne.n	8005f58 <_svfiprintf_r+0x130>
 8005f42:	7863      	ldrb	r3, [r4, #1]
 8005f44:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f46:	d132      	bne.n	8005fae <_svfiprintf_r+0x186>
 8005f48:	9b03      	ldr	r3, [sp, #12]
 8005f4a:	1d1a      	adds	r2, r3, #4
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	9203      	str	r2, [sp, #12]
 8005f50:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005f54:	3402      	adds	r4, #2
 8005f56:	9305      	str	r3, [sp, #20]
 8005f58:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800601c <_svfiprintf_r+0x1f4>
 8005f5c:	7821      	ldrb	r1, [r4, #0]
 8005f5e:	2203      	movs	r2, #3
 8005f60:	4650      	mov	r0, sl
 8005f62:	f7fa f95d 	bl	8000220 <memchr>
 8005f66:	b138      	cbz	r0, 8005f78 <_svfiprintf_r+0x150>
 8005f68:	9b04      	ldr	r3, [sp, #16]
 8005f6a:	eba0 000a 	sub.w	r0, r0, sl
 8005f6e:	2240      	movs	r2, #64	@ 0x40
 8005f70:	4082      	lsls	r2, r0
 8005f72:	4313      	orrs	r3, r2
 8005f74:	3401      	adds	r4, #1
 8005f76:	9304      	str	r3, [sp, #16]
 8005f78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f7c:	4824      	ldr	r0, [pc, #144]	@ (8006010 <_svfiprintf_r+0x1e8>)
 8005f7e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f82:	2206      	movs	r2, #6
 8005f84:	f7fa f94c 	bl	8000220 <memchr>
 8005f88:	2800      	cmp	r0, #0
 8005f8a:	d036      	beq.n	8005ffa <_svfiprintf_r+0x1d2>
 8005f8c:	4b21      	ldr	r3, [pc, #132]	@ (8006014 <_svfiprintf_r+0x1ec>)
 8005f8e:	bb1b      	cbnz	r3, 8005fd8 <_svfiprintf_r+0x1b0>
 8005f90:	9b03      	ldr	r3, [sp, #12]
 8005f92:	3307      	adds	r3, #7
 8005f94:	f023 0307 	bic.w	r3, r3, #7
 8005f98:	3308      	adds	r3, #8
 8005f9a:	9303      	str	r3, [sp, #12]
 8005f9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f9e:	4433      	add	r3, r6
 8005fa0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fa2:	e76a      	b.n	8005e7a <_svfiprintf_r+0x52>
 8005fa4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fa8:	460c      	mov	r4, r1
 8005faa:	2001      	movs	r0, #1
 8005fac:	e7a8      	b.n	8005f00 <_svfiprintf_r+0xd8>
 8005fae:	2300      	movs	r3, #0
 8005fb0:	3401      	adds	r4, #1
 8005fb2:	9305      	str	r3, [sp, #20]
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	f04f 0c0a 	mov.w	ip, #10
 8005fba:	4620      	mov	r0, r4
 8005fbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fc0:	3a30      	subs	r2, #48	@ 0x30
 8005fc2:	2a09      	cmp	r2, #9
 8005fc4:	d903      	bls.n	8005fce <_svfiprintf_r+0x1a6>
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d0c6      	beq.n	8005f58 <_svfiprintf_r+0x130>
 8005fca:	9105      	str	r1, [sp, #20]
 8005fcc:	e7c4      	b.n	8005f58 <_svfiprintf_r+0x130>
 8005fce:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e7f0      	b.n	8005fba <_svfiprintf_r+0x192>
 8005fd8:	ab03      	add	r3, sp, #12
 8005fda:	9300      	str	r3, [sp, #0]
 8005fdc:	462a      	mov	r2, r5
 8005fde:	4b0e      	ldr	r3, [pc, #56]	@ (8006018 <_svfiprintf_r+0x1f0>)
 8005fe0:	a904      	add	r1, sp, #16
 8005fe2:	4638      	mov	r0, r7
 8005fe4:	f3af 8000 	nop.w
 8005fe8:	1c42      	adds	r2, r0, #1
 8005fea:	4606      	mov	r6, r0
 8005fec:	d1d6      	bne.n	8005f9c <_svfiprintf_r+0x174>
 8005fee:	89ab      	ldrh	r3, [r5, #12]
 8005ff0:	065b      	lsls	r3, r3, #25
 8005ff2:	f53f af2d 	bmi.w	8005e50 <_svfiprintf_r+0x28>
 8005ff6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ff8:	e72c      	b.n	8005e54 <_svfiprintf_r+0x2c>
 8005ffa:	ab03      	add	r3, sp, #12
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	462a      	mov	r2, r5
 8006000:	4b05      	ldr	r3, [pc, #20]	@ (8006018 <_svfiprintf_r+0x1f0>)
 8006002:	a904      	add	r1, sp, #16
 8006004:	4638      	mov	r0, r7
 8006006:	f000 f879 	bl	80060fc <_printf_i>
 800600a:	e7ed      	b.n	8005fe8 <_svfiprintf_r+0x1c0>
 800600c:	0800793c 	.word	0x0800793c
 8006010:	08007946 	.word	0x08007946
 8006014:	00000000 	.word	0x00000000
 8006018:	08005d71 	.word	0x08005d71
 800601c:	08007942 	.word	0x08007942

08006020 <_printf_common>:
 8006020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006024:	4616      	mov	r6, r2
 8006026:	4698      	mov	r8, r3
 8006028:	688a      	ldr	r2, [r1, #8]
 800602a:	690b      	ldr	r3, [r1, #16]
 800602c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006030:	4293      	cmp	r3, r2
 8006032:	bfb8      	it	lt
 8006034:	4613      	movlt	r3, r2
 8006036:	6033      	str	r3, [r6, #0]
 8006038:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800603c:	4607      	mov	r7, r0
 800603e:	460c      	mov	r4, r1
 8006040:	b10a      	cbz	r2, 8006046 <_printf_common+0x26>
 8006042:	3301      	adds	r3, #1
 8006044:	6033      	str	r3, [r6, #0]
 8006046:	6823      	ldr	r3, [r4, #0]
 8006048:	0699      	lsls	r1, r3, #26
 800604a:	bf42      	ittt	mi
 800604c:	6833      	ldrmi	r3, [r6, #0]
 800604e:	3302      	addmi	r3, #2
 8006050:	6033      	strmi	r3, [r6, #0]
 8006052:	6825      	ldr	r5, [r4, #0]
 8006054:	f015 0506 	ands.w	r5, r5, #6
 8006058:	d106      	bne.n	8006068 <_printf_common+0x48>
 800605a:	f104 0a19 	add.w	sl, r4, #25
 800605e:	68e3      	ldr	r3, [r4, #12]
 8006060:	6832      	ldr	r2, [r6, #0]
 8006062:	1a9b      	subs	r3, r3, r2
 8006064:	42ab      	cmp	r3, r5
 8006066:	dc26      	bgt.n	80060b6 <_printf_common+0x96>
 8006068:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800606c:	6822      	ldr	r2, [r4, #0]
 800606e:	3b00      	subs	r3, #0
 8006070:	bf18      	it	ne
 8006072:	2301      	movne	r3, #1
 8006074:	0692      	lsls	r2, r2, #26
 8006076:	d42b      	bmi.n	80060d0 <_printf_common+0xb0>
 8006078:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800607c:	4641      	mov	r1, r8
 800607e:	4638      	mov	r0, r7
 8006080:	47c8      	blx	r9
 8006082:	3001      	adds	r0, #1
 8006084:	d01e      	beq.n	80060c4 <_printf_common+0xa4>
 8006086:	6823      	ldr	r3, [r4, #0]
 8006088:	6922      	ldr	r2, [r4, #16]
 800608a:	f003 0306 	and.w	r3, r3, #6
 800608e:	2b04      	cmp	r3, #4
 8006090:	bf02      	ittt	eq
 8006092:	68e5      	ldreq	r5, [r4, #12]
 8006094:	6833      	ldreq	r3, [r6, #0]
 8006096:	1aed      	subeq	r5, r5, r3
 8006098:	68a3      	ldr	r3, [r4, #8]
 800609a:	bf0c      	ite	eq
 800609c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060a0:	2500      	movne	r5, #0
 80060a2:	4293      	cmp	r3, r2
 80060a4:	bfc4      	itt	gt
 80060a6:	1a9b      	subgt	r3, r3, r2
 80060a8:	18ed      	addgt	r5, r5, r3
 80060aa:	2600      	movs	r6, #0
 80060ac:	341a      	adds	r4, #26
 80060ae:	42b5      	cmp	r5, r6
 80060b0:	d11a      	bne.n	80060e8 <_printf_common+0xc8>
 80060b2:	2000      	movs	r0, #0
 80060b4:	e008      	b.n	80060c8 <_printf_common+0xa8>
 80060b6:	2301      	movs	r3, #1
 80060b8:	4652      	mov	r2, sl
 80060ba:	4641      	mov	r1, r8
 80060bc:	4638      	mov	r0, r7
 80060be:	47c8      	blx	r9
 80060c0:	3001      	adds	r0, #1
 80060c2:	d103      	bne.n	80060cc <_printf_common+0xac>
 80060c4:	f04f 30ff 	mov.w	r0, #4294967295
 80060c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060cc:	3501      	adds	r5, #1
 80060ce:	e7c6      	b.n	800605e <_printf_common+0x3e>
 80060d0:	18e1      	adds	r1, r4, r3
 80060d2:	1c5a      	adds	r2, r3, #1
 80060d4:	2030      	movs	r0, #48	@ 0x30
 80060d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80060da:	4422      	add	r2, r4
 80060dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80060e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80060e4:	3302      	adds	r3, #2
 80060e6:	e7c7      	b.n	8006078 <_printf_common+0x58>
 80060e8:	2301      	movs	r3, #1
 80060ea:	4622      	mov	r2, r4
 80060ec:	4641      	mov	r1, r8
 80060ee:	4638      	mov	r0, r7
 80060f0:	47c8      	blx	r9
 80060f2:	3001      	adds	r0, #1
 80060f4:	d0e6      	beq.n	80060c4 <_printf_common+0xa4>
 80060f6:	3601      	adds	r6, #1
 80060f8:	e7d9      	b.n	80060ae <_printf_common+0x8e>
	...

080060fc <_printf_i>:
 80060fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006100:	7e0f      	ldrb	r7, [r1, #24]
 8006102:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006104:	2f78      	cmp	r7, #120	@ 0x78
 8006106:	4691      	mov	r9, r2
 8006108:	4680      	mov	r8, r0
 800610a:	460c      	mov	r4, r1
 800610c:	469a      	mov	sl, r3
 800610e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006112:	d807      	bhi.n	8006124 <_printf_i+0x28>
 8006114:	2f62      	cmp	r7, #98	@ 0x62
 8006116:	d80a      	bhi.n	800612e <_printf_i+0x32>
 8006118:	2f00      	cmp	r7, #0
 800611a:	f000 80d1 	beq.w	80062c0 <_printf_i+0x1c4>
 800611e:	2f58      	cmp	r7, #88	@ 0x58
 8006120:	f000 80b8 	beq.w	8006294 <_printf_i+0x198>
 8006124:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006128:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800612c:	e03a      	b.n	80061a4 <_printf_i+0xa8>
 800612e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006132:	2b15      	cmp	r3, #21
 8006134:	d8f6      	bhi.n	8006124 <_printf_i+0x28>
 8006136:	a101      	add	r1, pc, #4	@ (adr r1, 800613c <_printf_i+0x40>)
 8006138:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800613c:	08006195 	.word	0x08006195
 8006140:	080061a9 	.word	0x080061a9
 8006144:	08006125 	.word	0x08006125
 8006148:	08006125 	.word	0x08006125
 800614c:	08006125 	.word	0x08006125
 8006150:	08006125 	.word	0x08006125
 8006154:	080061a9 	.word	0x080061a9
 8006158:	08006125 	.word	0x08006125
 800615c:	08006125 	.word	0x08006125
 8006160:	08006125 	.word	0x08006125
 8006164:	08006125 	.word	0x08006125
 8006168:	080062a7 	.word	0x080062a7
 800616c:	080061d3 	.word	0x080061d3
 8006170:	08006261 	.word	0x08006261
 8006174:	08006125 	.word	0x08006125
 8006178:	08006125 	.word	0x08006125
 800617c:	080062c9 	.word	0x080062c9
 8006180:	08006125 	.word	0x08006125
 8006184:	080061d3 	.word	0x080061d3
 8006188:	08006125 	.word	0x08006125
 800618c:	08006125 	.word	0x08006125
 8006190:	08006269 	.word	0x08006269
 8006194:	6833      	ldr	r3, [r6, #0]
 8006196:	1d1a      	adds	r2, r3, #4
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	6032      	str	r2, [r6, #0]
 800619c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80061a4:	2301      	movs	r3, #1
 80061a6:	e09c      	b.n	80062e2 <_printf_i+0x1e6>
 80061a8:	6833      	ldr	r3, [r6, #0]
 80061aa:	6820      	ldr	r0, [r4, #0]
 80061ac:	1d19      	adds	r1, r3, #4
 80061ae:	6031      	str	r1, [r6, #0]
 80061b0:	0606      	lsls	r6, r0, #24
 80061b2:	d501      	bpl.n	80061b8 <_printf_i+0xbc>
 80061b4:	681d      	ldr	r5, [r3, #0]
 80061b6:	e003      	b.n	80061c0 <_printf_i+0xc4>
 80061b8:	0645      	lsls	r5, r0, #25
 80061ba:	d5fb      	bpl.n	80061b4 <_printf_i+0xb8>
 80061bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80061c0:	2d00      	cmp	r5, #0
 80061c2:	da03      	bge.n	80061cc <_printf_i+0xd0>
 80061c4:	232d      	movs	r3, #45	@ 0x2d
 80061c6:	426d      	negs	r5, r5
 80061c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061cc:	4858      	ldr	r0, [pc, #352]	@ (8006330 <_printf_i+0x234>)
 80061ce:	230a      	movs	r3, #10
 80061d0:	e011      	b.n	80061f6 <_printf_i+0xfa>
 80061d2:	6821      	ldr	r1, [r4, #0]
 80061d4:	6833      	ldr	r3, [r6, #0]
 80061d6:	0608      	lsls	r0, r1, #24
 80061d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80061dc:	d402      	bmi.n	80061e4 <_printf_i+0xe8>
 80061de:	0649      	lsls	r1, r1, #25
 80061e0:	bf48      	it	mi
 80061e2:	b2ad      	uxthmi	r5, r5
 80061e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80061e6:	4852      	ldr	r0, [pc, #328]	@ (8006330 <_printf_i+0x234>)
 80061e8:	6033      	str	r3, [r6, #0]
 80061ea:	bf14      	ite	ne
 80061ec:	230a      	movne	r3, #10
 80061ee:	2308      	moveq	r3, #8
 80061f0:	2100      	movs	r1, #0
 80061f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80061f6:	6866      	ldr	r6, [r4, #4]
 80061f8:	60a6      	str	r6, [r4, #8]
 80061fa:	2e00      	cmp	r6, #0
 80061fc:	db05      	blt.n	800620a <_printf_i+0x10e>
 80061fe:	6821      	ldr	r1, [r4, #0]
 8006200:	432e      	orrs	r6, r5
 8006202:	f021 0104 	bic.w	r1, r1, #4
 8006206:	6021      	str	r1, [r4, #0]
 8006208:	d04b      	beq.n	80062a2 <_printf_i+0x1a6>
 800620a:	4616      	mov	r6, r2
 800620c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006210:	fb03 5711 	mls	r7, r3, r1, r5
 8006214:	5dc7      	ldrb	r7, [r0, r7]
 8006216:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800621a:	462f      	mov	r7, r5
 800621c:	42bb      	cmp	r3, r7
 800621e:	460d      	mov	r5, r1
 8006220:	d9f4      	bls.n	800620c <_printf_i+0x110>
 8006222:	2b08      	cmp	r3, #8
 8006224:	d10b      	bne.n	800623e <_printf_i+0x142>
 8006226:	6823      	ldr	r3, [r4, #0]
 8006228:	07df      	lsls	r7, r3, #31
 800622a:	d508      	bpl.n	800623e <_printf_i+0x142>
 800622c:	6923      	ldr	r3, [r4, #16]
 800622e:	6861      	ldr	r1, [r4, #4]
 8006230:	4299      	cmp	r1, r3
 8006232:	bfde      	ittt	le
 8006234:	2330      	movle	r3, #48	@ 0x30
 8006236:	f806 3c01 	strble.w	r3, [r6, #-1]
 800623a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800623e:	1b92      	subs	r2, r2, r6
 8006240:	6122      	str	r2, [r4, #16]
 8006242:	f8cd a000 	str.w	sl, [sp]
 8006246:	464b      	mov	r3, r9
 8006248:	aa03      	add	r2, sp, #12
 800624a:	4621      	mov	r1, r4
 800624c:	4640      	mov	r0, r8
 800624e:	f7ff fee7 	bl	8006020 <_printf_common>
 8006252:	3001      	adds	r0, #1
 8006254:	d14a      	bne.n	80062ec <_printf_i+0x1f0>
 8006256:	f04f 30ff 	mov.w	r0, #4294967295
 800625a:	b004      	add	sp, #16
 800625c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006260:	6823      	ldr	r3, [r4, #0]
 8006262:	f043 0320 	orr.w	r3, r3, #32
 8006266:	6023      	str	r3, [r4, #0]
 8006268:	4832      	ldr	r0, [pc, #200]	@ (8006334 <_printf_i+0x238>)
 800626a:	2778      	movs	r7, #120	@ 0x78
 800626c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006270:	6823      	ldr	r3, [r4, #0]
 8006272:	6831      	ldr	r1, [r6, #0]
 8006274:	061f      	lsls	r7, r3, #24
 8006276:	f851 5b04 	ldr.w	r5, [r1], #4
 800627a:	d402      	bmi.n	8006282 <_printf_i+0x186>
 800627c:	065f      	lsls	r7, r3, #25
 800627e:	bf48      	it	mi
 8006280:	b2ad      	uxthmi	r5, r5
 8006282:	6031      	str	r1, [r6, #0]
 8006284:	07d9      	lsls	r1, r3, #31
 8006286:	bf44      	itt	mi
 8006288:	f043 0320 	orrmi.w	r3, r3, #32
 800628c:	6023      	strmi	r3, [r4, #0]
 800628e:	b11d      	cbz	r5, 8006298 <_printf_i+0x19c>
 8006290:	2310      	movs	r3, #16
 8006292:	e7ad      	b.n	80061f0 <_printf_i+0xf4>
 8006294:	4826      	ldr	r0, [pc, #152]	@ (8006330 <_printf_i+0x234>)
 8006296:	e7e9      	b.n	800626c <_printf_i+0x170>
 8006298:	6823      	ldr	r3, [r4, #0]
 800629a:	f023 0320 	bic.w	r3, r3, #32
 800629e:	6023      	str	r3, [r4, #0]
 80062a0:	e7f6      	b.n	8006290 <_printf_i+0x194>
 80062a2:	4616      	mov	r6, r2
 80062a4:	e7bd      	b.n	8006222 <_printf_i+0x126>
 80062a6:	6833      	ldr	r3, [r6, #0]
 80062a8:	6825      	ldr	r5, [r4, #0]
 80062aa:	6961      	ldr	r1, [r4, #20]
 80062ac:	1d18      	adds	r0, r3, #4
 80062ae:	6030      	str	r0, [r6, #0]
 80062b0:	062e      	lsls	r6, r5, #24
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	d501      	bpl.n	80062ba <_printf_i+0x1be>
 80062b6:	6019      	str	r1, [r3, #0]
 80062b8:	e002      	b.n	80062c0 <_printf_i+0x1c4>
 80062ba:	0668      	lsls	r0, r5, #25
 80062bc:	d5fb      	bpl.n	80062b6 <_printf_i+0x1ba>
 80062be:	8019      	strh	r1, [r3, #0]
 80062c0:	2300      	movs	r3, #0
 80062c2:	6123      	str	r3, [r4, #16]
 80062c4:	4616      	mov	r6, r2
 80062c6:	e7bc      	b.n	8006242 <_printf_i+0x146>
 80062c8:	6833      	ldr	r3, [r6, #0]
 80062ca:	1d1a      	adds	r2, r3, #4
 80062cc:	6032      	str	r2, [r6, #0]
 80062ce:	681e      	ldr	r6, [r3, #0]
 80062d0:	6862      	ldr	r2, [r4, #4]
 80062d2:	2100      	movs	r1, #0
 80062d4:	4630      	mov	r0, r6
 80062d6:	f7f9 ffa3 	bl	8000220 <memchr>
 80062da:	b108      	cbz	r0, 80062e0 <_printf_i+0x1e4>
 80062dc:	1b80      	subs	r0, r0, r6
 80062de:	6060      	str	r0, [r4, #4]
 80062e0:	6863      	ldr	r3, [r4, #4]
 80062e2:	6123      	str	r3, [r4, #16]
 80062e4:	2300      	movs	r3, #0
 80062e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062ea:	e7aa      	b.n	8006242 <_printf_i+0x146>
 80062ec:	6923      	ldr	r3, [r4, #16]
 80062ee:	4632      	mov	r2, r6
 80062f0:	4649      	mov	r1, r9
 80062f2:	4640      	mov	r0, r8
 80062f4:	47d0      	blx	sl
 80062f6:	3001      	adds	r0, #1
 80062f8:	d0ad      	beq.n	8006256 <_printf_i+0x15a>
 80062fa:	6823      	ldr	r3, [r4, #0]
 80062fc:	079b      	lsls	r3, r3, #30
 80062fe:	d413      	bmi.n	8006328 <_printf_i+0x22c>
 8006300:	68e0      	ldr	r0, [r4, #12]
 8006302:	9b03      	ldr	r3, [sp, #12]
 8006304:	4298      	cmp	r0, r3
 8006306:	bfb8      	it	lt
 8006308:	4618      	movlt	r0, r3
 800630a:	e7a6      	b.n	800625a <_printf_i+0x15e>
 800630c:	2301      	movs	r3, #1
 800630e:	4632      	mov	r2, r6
 8006310:	4649      	mov	r1, r9
 8006312:	4640      	mov	r0, r8
 8006314:	47d0      	blx	sl
 8006316:	3001      	adds	r0, #1
 8006318:	d09d      	beq.n	8006256 <_printf_i+0x15a>
 800631a:	3501      	adds	r5, #1
 800631c:	68e3      	ldr	r3, [r4, #12]
 800631e:	9903      	ldr	r1, [sp, #12]
 8006320:	1a5b      	subs	r3, r3, r1
 8006322:	42ab      	cmp	r3, r5
 8006324:	dcf2      	bgt.n	800630c <_printf_i+0x210>
 8006326:	e7eb      	b.n	8006300 <_printf_i+0x204>
 8006328:	2500      	movs	r5, #0
 800632a:	f104 0619 	add.w	r6, r4, #25
 800632e:	e7f5      	b.n	800631c <_printf_i+0x220>
 8006330:	0800794d 	.word	0x0800794d
 8006334:	0800795e 	.word	0x0800795e

08006338 <memmove>:
 8006338:	4288      	cmp	r0, r1
 800633a:	b510      	push	{r4, lr}
 800633c:	eb01 0402 	add.w	r4, r1, r2
 8006340:	d902      	bls.n	8006348 <memmove+0x10>
 8006342:	4284      	cmp	r4, r0
 8006344:	4623      	mov	r3, r4
 8006346:	d807      	bhi.n	8006358 <memmove+0x20>
 8006348:	1e43      	subs	r3, r0, #1
 800634a:	42a1      	cmp	r1, r4
 800634c:	d008      	beq.n	8006360 <memmove+0x28>
 800634e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006352:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006356:	e7f8      	b.n	800634a <memmove+0x12>
 8006358:	4402      	add	r2, r0
 800635a:	4601      	mov	r1, r0
 800635c:	428a      	cmp	r2, r1
 800635e:	d100      	bne.n	8006362 <memmove+0x2a>
 8006360:	bd10      	pop	{r4, pc}
 8006362:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006366:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800636a:	e7f7      	b.n	800635c <memmove+0x24>

0800636c <_sbrk_r>:
 800636c:	b538      	push	{r3, r4, r5, lr}
 800636e:	4d06      	ldr	r5, [pc, #24]	@ (8006388 <_sbrk_r+0x1c>)
 8006370:	2300      	movs	r3, #0
 8006372:	4604      	mov	r4, r0
 8006374:	4608      	mov	r0, r1
 8006376:	602b      	str	r3, [r5, #0]
 8006378:	f7fa ff38 	bl	80011ec <_sbrk>
 800637c:	1c43      	adds	r3, r0, #1
 800637e:	d102      	bne.n	8006386 <_sbrk_r+0x1a>
 8006380:	682b      	ldr	r3, [r5, #0]
 8006382:	b103      	cbz	r3, 8006386 <_sbrk_r+0x1a>
 8006384:	6023      	str	r3, [r4, #0]
 8006386:	bd38      	pop	{r3, r4, r5, pc}
 8006388:	20000798 	.word	0x20000798

0800638c <memcpy>:
 800638c:	440a      	add	r2, r1
 800638e:	4291      	cmp	r1, r2
 8006390:	f100 33ff 	add.w	r3, r0, #4294967295
 8006394:	d100      	bne.n	8006398 <memcpy+0xc>
 8006396:	4770      	bx	lr
 8006398:	b510      	push	{r4, lr}
 800639a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800639e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063a2:	4291      	cmp	r1, r2
 80063a4:	d1f9      	bne.n	800639a <memcpy+0xe>
 80063a6:	bd10      	pop	{r4, pc}

080063a8 <_realloc_r>:
 80063a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063ac:	4607      	mov	r7, r0
 80063ae:	4614      	mov	r4, r2
 80063b0:	460d      	mov	r5, r1
 80063b2:	b921      	cbnz	r1, 80063be <_realloc_r+0x16>
 80063b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063b8:	4611      	mov	r1, r2
 80063ba:	f7ff bc4d 	b.w	8005c58 <_malloc_r>
 80063be:	b92a      	cbnz	r2, 80063cc <_realloc_r+0x24>
 80063c0:	f7ff fbde 	bl	8005b80 <_free_r>
 80063c4:	4625      	mov	r5, r4
 80063c6:	4628      	mov	r0, r5
 80063c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063cc:	f000 f81a 	bl	8006404 <_malloc_usable_size_r>
 80063d0:	4284      	cmp	r4, r0
 80063d2:	4606      	mov	r6, r0
 80063d4:	d802      	bhi.n	80063dc <_realloc_r+0x34>
 80063d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80063da:	d8f4      	bhi.n	80063c6 <_realloc_r+0x1e>
 80063dc:	4621      	mov	r1, r4
 80063de:	4638      	mov	r0, r7
 80063e0:	f7ff fc3a 	bl	8005c58 <_malloc_r>
 80063e4:	4680      	mov	r8, r0
 80063e6:	b908      	cbnz	r0, 80063ec <_realloc_r+0x44>
 80063e8:	4645      	mov	r5, r8
 80063ea:	e7ec      	b.n	80063c6 <_realloc_r+0x1e>
 80063ec:	42b4      	cmp	r4, r6
 80063ee:	4622      	mov	r2, r4
 80063f0:	4629      	mov	r1, r5
 80063f2:	bf28      	it	cs
 80063f4:	4632      	movcs	r2, r6
 80063f6:	f7ff ffc9 	bl	800638c <memcpy>
 80063fa:	4629      	mov	r1, r5
 80063fc:	4638      	mov	r0, r7
 80063fe:	f7ff fbbf 	bl	8005b80 <_free_r>
 8006402:	e7f1      	b.n	80063e8 <_realloc_r+0x40>

08006404 <_malloc_usable_size_r>:
 8006404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006408:	1f18      	subs	r0, r3, #4
 800640a:	2b00      	cmp	r3, #0
 800640c:	bfbc      	itt	lt
 800640e:	580b      	ldrlt	r3, [r1, r0]
 8006410:	18c0      	addlt	r0, r0, r3
 8006412:	4770      	bx	lr

08006414 <_init>:
 8006414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006416:	bf00      	nop
 8006418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800641a:	bc08      	pop	{r3}
 800641c:	469e      	mov	lr, r3
 800641e:	4770      	bx	lr

08006420 <_fini>:
 8006420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006422:	bf00      	nop
 8006424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006426:	bc08      	pop	{r3}
 8006428:	469e      	mov	lr, r3
 800642a:	4770      	bx	lr
