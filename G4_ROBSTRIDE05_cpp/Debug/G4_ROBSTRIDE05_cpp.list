
G4_ROBSTRIDE05_cpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039d4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003bac  08003bac  00004bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bec  08003bec  00005010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003bec  08003bec  00005010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003bec  08003bec  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003bec  08003bec  00004bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003bf4  08003bf4  00004bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003bf8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  20000010  08003c08  00005010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08003c08  000051a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a2d1  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ca4  00000000  00000000  0000f311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d0  00000000  00000000  00010fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000752  00000000  00000000  00011988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e854  00000000  00000000  000120da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009e12  00000000  00000000  0003092e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6553  00000000  00000000  0003a740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f0c93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002750  00000000  00000000  000f0cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000f3428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003b94 	.word	0x08003b94

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08003b94 	.word	0x08003b94

08000218 <_ZN15RobStride_MotorC1Ehb>:
* @����     		: RobStride���ʵ�����Ĺ��캯��
* @����         : CAN ID
* @����ֵ 			: void
* @����  				: ��ʼ�����ID��
*******************************************************************************/
RobStride_Motor::RobStride_Motor(uint8_t CAN_Id, bool MIT_mode)
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	460b      	mov	r3, r1
 8000222:	70fb      	strb	r3, [r7, #3]
 8000224:	4613      	mov	r3, r2
 8000226:	70bb      	strb	r3, [r7, #2]
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	3364      	adds	r3, #100	@ 0x64
 800022c:	490c      	ldr	r1, [pc, #48]	@ (8000260 <_ZN15RobStride_MotorC1Ehb+0x48>)
 800022e:	4618      	mov	r0, r3
 8000230:	f000 fefc 	bl	800102c <_ZN15data_read_writeC1EPKt>
{
	CAN_ID = CAN_Id;	
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	78fa      	ldrb	r2, [r7, #3]
 8000238:	701a      	strb	r2, [r3, #0]
	Master_CAN_ID = 0xFD;	
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	22fd      	movs	r2, #253	@ 0xfd
 800023e:	821a      	strh	r2, [r3, #16]
	Motor_Set_All.set_motor_mode = move_control_mode;
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	2200      	movs	r2, #0
 8000244:	619a      	str	r2, [r3, #24]
	MIT_Mode = MIT_mode;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	78ba      	ldrb	r2, [r7, #2]
 800024a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	MIT_Type = operationControl;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	2200      	movs	r2, #0
 8000252:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
}
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	4618      	mov	r0, r3
 800025a:	3708      	adds	r7, #8
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}
 8000260:	08003bac 	.word	0x08003bac

08000264 <_Z13float_to_uintfffi>:
* @����4        : ��Ҫת���Ľ�����
* @����ֵ 			: ʮ���Ƶ�int������
* @����  				: None
*******************************************************************************/
int float_to_uint(float x,float x_min,float x_max,int bits)
{
 8000264:	b480      	push	{r7}
 8000266:	b087      	sub	sp, #28
 8000268:	af00      	add	r7, sp, #0
 800026a:	ed87 0a03 	vstr	s0, [r7, #12]
 800026e:	edc7 0a02 	vstr	s1, [r7, #8]
 8000272:	ed87 1a01 	vstr	s2, [r7, #4]
 8000276:	6038      	str	r0, [r7, #0]
	float span = x_max - x_min;
 8000278:	ed97 7a01 	vldr	s14, [r7, #4]
 800027c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000280:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000284:	edc7 7a05 	vstr	s15, [r7, #20]
	float offset = x_min;
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	613b      	str	r3, [r7, #16]
	if(x > x_max) x = x_max;
 800028c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000290:	edd7 7a01 	vldr	s15, [r7, #4]
 8000294:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800029c:	dd02      	ble.n	80002a4 <_Z13float_to_uintfffi+0x40>
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	60fb      	str	r3, [r7, #12]
 80002a2:	e00a      	b.n	80002ba <_Z13float_to_uintfffi+0x56>
	else if(x < x_min) x = x_min;
 80002a4:	ed97 7a03 	vldr	s14, [r7, #12]
 80002a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80002ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80002b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002b4:	d501      	bpl.n	80002ba <_Z13float_to_uintfffi+0x56>
 80002b6:	68bb      	ldr	r3, [r7, #8]
 80002b8:	60fb      	str	r3, [r7, #12]
	return (int) ((x - offset)*((float)((1<<bits)-1))/span);
 80002ba:	ed97 7a03 	vldr	s14, [r7, #12]
 80002be:	edd7 7a04 	vldr	s15, [r7, #16]
 80002c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80002c6:	2201      	movs	r2, #1
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	fa02 f303 	lsl.w	r3, r2, r3
 80002ce:	3b01      	subs	r3, #1
 80002d0:	ee07 3a90 	vmov	s15, r3
 80002d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80002d8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80002dc:	ed97 7a05 	vldr	s14, [r7, #20]
 80002e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80002e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80002e8:	ee17 3a90 	vmov	r3, s15
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	371c      	adds	r7, #28
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr

080002f8 <_ZN15RobStride_Motor28RobStride_Motor_move_controlEfffff>:
* @����5        : Kp(0.0~5.0)
* @����ֵ 			: void
* @����  				: None
*******************************************************************************/
void RobStride_Motor::RobStride_Motor_move_control(float Torque, float Angle, float Speed, float Kp, float Kd)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b092      	sub	sp, #72	@ 0x48
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6178      	str	r0, [r7, #20]
 8000300:	ed87 0a04 	vstr	s0, [r7, #16]
 8000304:	edc7 0a03 	vstr	s1, [r7, #12]
 8000308:	ed87 1a02 	vstr	s2, [r7, #8]
 800030c:	edc7 1a01 	vstr	s3, [r7, #4]
 8000310:	ed87 2a00 	vstr	s4, [r7]
	uint8_t txdata[8] = {0};						   	//��������
 8000314:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
 800031c:	605a      	str	r2, [r3, #4]
	FDCAN_TxHeaderTypeDef TxMessage; 					//��������
	Motor_Set_All.set_Torque = Torque;
 800031e:	697b      	ldr	r3, [r7, #20]
 8000320:	693a      	ldr	r2, [r7, #16]
 8000322:	629a      	str	r2, [r3, #40]	@ 0x28
	Motor_Set_All.set_angle = Angle;	
 8000324:	697b      	ldr	r3, [r7, #20]
 8000326:	68fa      	ldr	r2, [r7, #12]
 8000328:	62da      	str	r2, [r3, #44]	@ 0x2c
	Motor_Set_All.set_speed = Speed;
 800032a:	697b      	ldr	r3, [r7, #20]
 800032c:	68ba      	ldr	r2, [r7, #8]
 800032e:	621a      	str	r2, [r3, #32]
	Motor_Set_All.set_Kp = Kp;
 8000330:	697b      	ldr	r3, [r7, #20]
 8000332:	687a      	ldr	r2, [r7, #4]
 8000334:	639a      	str	r2, [r3, #56]	@ 0x38
	Motor_Set_All.set_Kd = Kd;
 8000336:	697b      	ldr	r3, [r7, #20]
 8000338:	683a      	ldr	r2, [r7, #0]
 800033a:	641a      	str	r2, [r3, #64]	@ 0x40
	if (drw.run_mode.data != 0)
 800033c:	697b      	ldr	r3, [r7, #20]
 800033e:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8000342:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800034a:	d012      	beq.n	8000372 <_ZN15RobStride_Motor28RobStride_Motor_move_controlEfffff+0x7a>
	{
		Set_RobStride_Motor_parameter(0X7005, move_control_mode, Set_mode);		//���õ��ģʽ
 800034c:	226a      	movs	r2, #106	@ 0x6a
 800034e:	ed9f 0a61 	vldr	s0, [pc, #388]	@ 80004d4 <_ZN15RobStride_Motor28RobStride_Motor_move_controlEfffff+0x1dc>
 8000352:	f247 0105 	movw	r1, #28677	@ 0x7005
 8000356:	6978      	ldr	r0, [r7, #20]
 8000358:	f000 fcb0 	bl	8000cbc <_ZN15RobStride_Motor29Set_RobStride_Motor_parameterEtfc>
		Get_RobStride_Motor_parameter(0x7005);
 800035c:	f247 0105 	movw	r1, #28677	@ 0x7005
 8000360:	6978      	ldr	r0, [r7, #20]
 8000362:	f000 fd0b 	bl	8000d7c <_ZN15RobStride_Motor29Get_RobStride_Motor_parameterEt>
		Enable_Motor();
 8000366:	6978      	ldr	r0, [r7, #20]
 8000368:	f000 fc3c 	bl	8000be4 <_ZN15RobStride_Motor12Enable_MotorEv>
		Motor_Set_All.set_motor_mode = move_control_mode;
 800036c:	697b      	ldr	r3, [r7, #20]
 800036e:	2200      	movs	r2, #0
 8000370:	619a      	str	r2, [r3, #24]
	}
	if(Pos_Info.pattern != 2)
 8000372:	697b      	ldr	r3, [r7, #20]
 8000374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000376:	2b02      	cmp	r3, #2
 8000378:	d002      	beq.n	8000380 <_ZN15RobStride_Motor28RobStride_Motor_move_controlEfffff+0x88>
	{
		Enable_Motor();
 800037a:	6978      	ldr	r0, [r7, #20]
 800037c:	f000 fc32 	bl	8000be4 <_ZN15RobStride_Motor12Enable_MotorEv>
	}
	TxMessage.IdType = FDCAN_EXTENDED_ID;
 8000380:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000384:	623b      	str	r3, [r7, #32]
//	TxMessage.RTR = CAN_RTR_DATA;
	TxMessage.DataLength = 8;
 8000386:	2308      	movs	r3, #8
 8000388:	62bb      	str	r3, [r7, #40]	@ 0x28
	TxMessage.Identifier = Communication_Type_MotionControl<<24|float_to_uint(Motor_Set_All.set_Torque,T_MIN,T_MAX,16)<<8|CAN_ID;
 800038a:	697b      	ldr	r3, [r7, #20]
 800038c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8000390:	2010      	movs	r0, #16
 8000392:	eeb3 1a01 	vmov.f32	s2, #49	@ 0x41880000  17.0
 8000396:	eefb 0a01 	vmov.f32	s1, #177	@ 0xc1880000 -17.0
 800039a:	eeb0 0a67 	vmov.f32	s0, s15
 800039e:	f7ff ff61 	bl	8000264 <_Z13float_to_uintfffi>
 80003a2:	4603      	mov	r3, r0
 80003a4:	021b      	lsls	r3, r3, #8
 80003a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80003aa:	697a      	ldr	r2, [r7, #20]
 80003ac:	7812      	ldrb	r2, [r2, #0]
 80003ae:	4313      	orrs	r3, r2
 80003b0:	61fb      	str	r3, [r7, #28]
	txdata[0] = float_to_uint(Motor_Set_All.set_angle, P_MIN,P_MAX, 16)>>8; 
 80003b2:	697b      	ldr	r3, [r7, #20]
 80003b4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80003b8:	2010      	movs	r0, #16
 80003ba:	eeb2 1a09 	vmov.f32	s2, #41	@ 0x41480000  12.5
 80003be:	eefa 0a09 	vmov.f32	s1, #169	@ 0xc1480000 -12.5
 80003c2:	eeb0 0a67 	vmov.f32	s0, s15
 80003c6:	f7ff ff4d 	bl	8000264 <_Z13float_to_uintfffi>
 80003ca:	4603      	mov	r3, r0
 80003cc:	121b      	asrs	r3, r3, #8
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	txdata[1] = float_to_uint(Motor_Set_All.set_angle, P_MIN,P_MAX, 16); 
 80003d4:	697b      	ldr	r3, [r7, #20]
 80003d6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80003da:	2010      	movs	r0, #16
 80003dc:	eeb2 1a09 	vmov.f32	s2, #41	@ 0x41480000  12.5
 80003e0:	eefa 0a09 	vmov.f32	s1, #169	@ 0xc1480000 -12.5
 80003e4:	eeb0 0a67 	vmov.f32	s0, s15
 80003e8:	f7ff ff3c 	bl	8000264 <_Z13float_to_uintfffi>
 80003ec:	4603      	mov	r3, r0
 80003ee:	b2db      	uxtb	r3, r3
 80003f0:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
	txdata[2] = float_to_uint(Motor_Set_All.set_speed, V_MIN,V_MAX, 16)>>8; 
 80003f4:	697b      	ldr	r3, [r7, #20]
 80003f6:	edd3 7a08 	vldr	s15, [r3, #32]
 80003fa:	2010      	movs	r0, #16
 80003fc:	ed9f 1a36 	vldr	s2, [pc, #216]	@ 80004d8 <_ZN15RobStride_Motor28RobStride_Motor_move_controlEfffff+0x1e0>
 8000400:	eddf 0a36 	vldr	s1, [pc, #216]	@ 80004dc <_ZN15RobStride_Motor28RobStride_Motor_move_controlEfffff+0x1e4>
 8000404:	eeb0 0a67 	vmov.f32	s0, s15
 8000408:	f7ff ff2c 	bl	8000264 <_Z13float_to_uintfffi>
 800040c:	4603      	mov	r3, r0
 800040e:	121b      	asrs	r3, r3, #8
 8000410:	b2db      	uxtb	r3, r3
 8000412:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
	txdata[3] = float_to_uint(Motor_Set_All.set_speed, V_MIN,V_MAX, 16); 
 8000416:	697b      	ldr	r3, [r7, #20]
 8000418:	edd3 7a08 	vldr	s15, [r3, #32]
 800041c:	2010      	movs	r0, #16
 800041e:	ed9f 1a2e 	vldr	s2, [pc, #184]	@ 80004d8 <_ZN15RobStride_Motor28RobStride_Motor_move_controlEfffff+0x1e0>
 8000422:	eddf 0a2e 	vldr	s1, [pc, #184]	@ 80004dc <_ZN15RobStride_Motor28RobStride_Motor_move_controlEfffff+0x1e4>
 8000426:	eeb0 0a67 	vmov.f32	s0, s15
 800042a:	f7ff ff1b 	bl	8000264 <_Z13float_to_uintfffi>
 800042e:	4603      	mov	r3, r0
 8000430:	b2db      	uxtb	r3, r3
 8000432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	txdata[4] = float_to_uint(Motor_Set_All.set_Kp,KP_MIN, KP_MAX, 16)>>8; 
 8000436:	697b      	ldr	r3, [r7, #20]
 8000438:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800043c:	2010      	movs	r0, #16
 800043e:	ed9f 1a28 	vldr	s2, [pc, #160]	@ 80004e0 <_ZN15RobStride_Motor28RobStride_Motor_move_controlEfffff+0x1e8>
 8000442:	eddf 0a24 	vldr	s1, [pc, #144]	@ 80004d4 <_ZN15RobStride_Motor28RobStride_Motor_move_controlEfffff+0x1dc>
 8000446:	eeb0 0a67 	vmov.f32	s0, s15
 800044a:	f7ff ff0b 	bl	8000264 <_Z13float_to_uintfffi>
 800044e:	4603      	mov	r3, r0
 8000450:	121b      	asrs	r3, r3, #8
 8000452:	b2db      	uxtb	r3, r3
 8000454:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
	txdata[5] = float_to_uint(Motor_Set_All.set_Kp,KP_MIN, KP_MAX, 16); 
 8000458:	697b      	ldr	r3, [r7, #20]
 800045a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800045e:	2010      	movs	r0, #16
 8000460:	ed9f 1a1f 	vldr	s2, [pc, #124]	@ 80004e0 <_ZN15RobStride_Motor28RobStride_Motor_move_controlEfffff+0x1e8>
 8000464:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 80004d4 <_ZN15RobStride_Motor28RobStride_Motor_move_controlEfffff+0x1dc>
 8000468:	eeb0 0a67 	vmov.f32	s0, s15
 800046c:	f7ff fefa 	bl	8000264 <_Z13float_to_uintfffi>
 8000470:	4603      	mov	r3, r0
 8000472:	b2db      	uxtb	r3, r3
 8000474:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
	txdata[6] = float_to_uint(Motor_Set_All.set_Kd,KD_MIN, KD_MAX, 16)>>8; 
 8000478:	697b      	ldr	r3, [r7, #20]
 800047a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800047e:	2010      	movs	r0, #16
 8000480:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 8000484:	eddf 0a13 	vldr	s1, [pc, #76]	@ 80004d4 <_ZN15RobStride_Motor28RobStride_Motor_move_controlEfffff+0x1dc>
 8000488:	eeb0 0a67 	vmov.f32	s0, s15
 800048c:	f7ff feea 	bl	8000264 <_Z13float_to_uintfffi>
 8000490:	4603      	mov	r3, r0
 8000492:	121b      	asrs	r3, r3, #8
 8000494:	b2db      	uxtb	r3, r3
 8000496:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	txdata[7] = float_to_uint(Motor_Set_All.set_Kd,KD_MIN, KD_MAX, 16); 
 800049a:	697b      	ldr	r3, [r7, #20]
 800049c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80004a0:	2010      	movs	r0, #16
 80004a2:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 80004a6:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 80004d4 <_ZN15RobStride_Motor28RobStride_Motor_move_controlEfffff+0x1dc>
 80004aa:	eeb0 0a67 	vmov.f32	s0, s15
 80004ae:	f7ff fed9 	bl	8000264 <_Z13float_to_uintfffi>
 80004b2:	4603      	mov	r3, r0
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxMessage, txdata); // ����CAN��Ϣ
 80004ba:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80004be:	f107 031c 	add.w	r3, r7, #28
 80004c2:	4619      	mov	r1, r3
 80004c4:	4807      	ldr	r0, [pc, #28]	@ (80004e4 <_ZN15RobStride_Motor28RobStride_Motor_move_controlEfffff+0x1ec>)
 80004c6:	f001 fd7c 	bl	8001fc2 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 80004ca:	bf00      	nop
 80004cc:	3748      	adds	r7, #72	@ 0x48
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	00000000 	.word	0x00000000
 80004d8:	42300000 	.word	0x42300000
 80004dc:	c2300000 	.word	0xc2300000
 80004e0:	43fa0000 	.word	0x43fa0000
 80004e4:	2000002c 	.word	0x2000002c

080004e8 <_ZN15RobStride_Motor26RobStride_Motor_MIT_EnableEv>:
//MITģʽʹ��
void RobStride_Motor::RobStride_Motor_MIT_Enable()
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b08e      	sub	sp, #56	@ 0x38
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	uint8_t txdata[8] = {0}; 	//���巢����������
 80004f0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
	FDCAN_TxHeaderTypeDef txMsg; 	//��������
	txMsg.Identifier = CAN_ID;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	60fb      	str	r3, [r7, #12]
	txMsg.IdType = FDCAN_STANDARD_ID;
 8000500:	2300      	movs	r3, #0
 8000502:	613b      	str	r3, [r7, #16]
	txMsg.DataLength = 8;
 8000504:	2308      	movs	r3, #8
 8000506:	61bb      	str	r3, [r7, #24]
	txdata[0] = 0xFF;
 8000508:	23ff      	movs	r3, #255	@ 0xff
 800050a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	txdata[1] = 0xFF;
 800050e:	23ff      	movs	r3, #255	@ 0xff
 8000510:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	txdata[2] = 0xFF;
 8000514:	23ff      	movs	r3, #255	@ 0xff
 8000516:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	txdata[3] = 0xFF;
 800051a:	23ff      	movs	r3, #255	@ 0xff
 800051c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	txdata[4] = 0xFF;
 8000520:	23ff      	movs	r3, #255	@ 0xff
 8000522:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	txdata[5] = 0xFF;
 8000526:	23ff      	movs	r3, #255	@ 0xff
 8000528:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	txdata[6] = 0xFF;
 800052c:	23ff      	movs	r3, #255	@ 0xff
 800052e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	txdata[7] = 0xFC;
 8000532:	23fc      	movs	r3, #252	@ 0xfc
 8000534:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txMsg, txdata);
 8000538:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	4619      	mov	r1, r3
 8000542:	4803      	ldr	r0, [pc, #12]	@ (8000550 <_ZN15RobStride_Motor26RobStride_Motor_MIT_EnableEv+0x68>)
 8000544:	f001 fd3d 	bl	8001fc2 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 8000548:	bf00      	nop
 800054a:	3738      	adds	r7, #56	@ 0x38
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	2000002c 	.word	0x2000002c

08000554 <_ZN15RobStride_Motor27RobStride_Motor_MIT_DisableEv>:

//MITģʽʧ��
void RobStride_Motor::RobStride_Motor_MIT_Disable()
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b08e      	sub	sp, #56	@ 0x38
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	uint8_t txdata[8] = {0}; 	//���巢����������
 800055c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
	FDCAN_TxHeaderTypeDef txMsg; 	//��������
	txMsg.Identifier = CAN_ID;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	60fb      	str	r3, [r7, #12]
	txMsg.IdType = FDCAN_STANDARD_ID;
 800056c:	2300      	movs	r3, #0
 800056e:	613b      	str	r3, [r7, #16]
	txMsg.DataLength = 8;
 8000570:	2308      	movs	r3, #8
 8000572:	61bb      	str	r3, [r7, #24]
	txdata[0] = 0xFF;
 8000574:	23ff      	movs	r3, #255	@ 0xff
 8000576:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	txdata[1] = 0xFF;
 800057a:	23ff      	movs	r3, #255	@ 0xff
 800057c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	txdata[2] = 0xFF;
 8000580:	23ff      	movs	r3, #255	@ 0xff
 8000582:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	txdata[3] = 0xFF;
 8000586:	23ff      	movs	r3, #255	@ 0xff
 8000588:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	txdata[4] = 0xFF;
 800058c:	23ff      	movs	r3, #255	@ 0xff
 800058e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	txdata[5] = 0xFF;
 8000592:	23ff      	movs	r3, #255	@ 0xff
 8000594:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	txdata[6] = 0xFF;
 8000598:	23ff      	movs	r3, #255	@ 0xff
 800059a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	txdata[7] = 0xFD;
 800059e:	23fd      	movs	r3, #253	@ 0xfd
 80005a0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txMsg, txdata);
 80005a4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	4619      	mov	r1, r3
 80005ae:	4803      	ldr	r0, [pc, #12]	@ (80005bc <_ZN15RobStride_Motor27RobStride_Motor_MIT_DisableEv+0x68>)
 80005b0:	f001 fd07 	bl	8001fc2 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 80005b4:	bf00      	nop
 80005b6:	3738      	adds	r7, #56	@ 0x38
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	2000002c 	.word	0x2000002c

080005c0 <_ZN15RobStride_Motor37RobStride_Motor_MIT_ClearOrCheckErrorEh>:

//MITģʽ����������
void RobStride_Motor::RobStride_Motor_MIT_ClearOrCheckError(uint8_t F_CMD)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08e      	sub	sp, #56	@ 0x38
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	460b      	mov	r3, r1
 80005ca:	70fb      	strb	r3, [r7, #3]
	uint8_t txdata[8] = {0}; 	//���巢����������
 80005cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
	FDCAN_TxHeaderTypeDef txMsg; 	//��������
	txMsg.Identifier = CAN_ID; 	//���ñ�׼ID
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	60fb      	str	r3, [r7, #12]
	txMsg.IdType = FDCAN_STANDARD_ID; 	//���ñ�ʶ������
 80005dc:	2300      	movs	r3, #0
 80005de:	613b      	str	r3, [r7, #16]
//	txMsg.RTR = CAN_RTR_DATA; 	//����Զ�̴�������
	txMsg.DataLength = 8; 	//�������ݳ���
 80005e0:	2308      	movs	r3, #8
 80005e2:	61bb      	str	r3, [r7, #24]
	txdata[0] = 0xFF;
 80005e4:	23ff      	movs	r3, #255	@ 0xff
 80005e6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	txdata[1] = 0xFF;
 80005ea:	23ff      	movs	r3, #255	@ 0xff
 80005ec:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	txdata[2] = 0xFF;
 80005f0:	23ff      	movs	r3, #255	@ 0xff
 80005f2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	txdata[3] = 0xFF;
 80005f6:	23ff      	movs	r3, #255	@ 0xff
 80005f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	txdata[4] = 0xFF;
 80005fc:	23ff      	movs	r3, #255	@ 0xff
 80005fe:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	txdata[5] = 0xFF;
 8000602:	23ff      	movs	r3, #255	@ 0xff
 8000604:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	txdata[6] = F_CMD;
 8000608:	78fb      	ldrb	r3, [r7, #3]
 800060a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	txdata[7] = 0xFB;
 800060e:	23fb      	movs	r3, #251	@ 0xfb
 8000610:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txMsg, txdata); 	//����CAN��Ϣ
 8000614:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	4619      	mov	r1, r3
 800061e:	4803      	ldr	r0, [pc, #12]	@ (800062c <_ZN15RobStride_Motor37RobStride_Motor_MIT_ClearOrCheckErrorEh+0x6c>)
 8000620:	f001 fccf 	bl	8001fc2 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 8000624:	bf00      	nop
 8000626:	3738      	adds	r7, #56	@ 0x38
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	2000002c 	.word	0x2000002c

08000630 <_ZN15RobStride_Motor32RobStride_Motor_MIT_SetMotorTypeEh>:

//MIT���õ������ģʽ
void RobStride_Motor::RobStride_Motor_MIT_SetMotorType(uint8_t F_CMD)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08e      	sub	sp, #56	@ 0x38
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	460b      	mov	r3, r1
 800063a:	70fb      	strb	r3, [r7, #3]
	uint8_t txdata[8] = {0}; 	//���巢����������
 800063c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
	FDCAN_TxHeaderTypeDef txMsg; 	//��������
	txMsg.Identifier = CAN_ID; 	//���ñ�׼ID
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	60fb      	str	r3, [r7, #12]
	txMsg.IdType = FDCAN_STANDARD_ID; 	//���ñ�ʶ������
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]
//	txMsg.RTR = CAN_RTR_DATA; 	//����Զ�̴�������
	txMsg.DataLength = 8; 	//�������ݳ���
 8000650:	2308      	movs	r3, #8
 8000652:	61bb      	str	r3, [r7, #24]
	txdata[0] = 0xFF;
 8000654:	23ff      	movs	r3, #255	@ 0xff
 8000656:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	txdata[1] = 0xFF;
 800065a:	23ff      	movs	r3, #255	@ 0xff
 800065c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	txdata[2] = 0xFF;
 8000660:	23ff      	movs	r3, #255	@ 0xff
 8000662:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	txdata[3] = 0xFF;
 8000666:	23ff      	movs	r3, #255	@ 0xff
 8000668:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	txdata[4] = 0xFF;
 800066c:	23ff      	movs	r3, #255	@ 0xff
 800066e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	txdata[5] = 0xFF;
 8000672:	23ff      	movs	r3, #255	@ 0xff
 8000674:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	txdata[6] = F_CMD;
 8000678:	78fb      	ldrb	r3, [r7, #3]
 800067a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	txdata[7] = 0xFC;
 800067e:	23fc      	movs	r3, #252	@ 0xfc
 8000680:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txMsg, txdata); 	//����CAN��Ϣ
 8000684:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	4619      	mov	r1, r3
 800068e:	4803      	ldr	r0, [pc, #12]	@ (800069c <_ZN15RobStride_Motor32RobStride_Motor_MIT_SetMotorTypeEh+0x6c>)
 8000690:	f001 fc97 	bl	8001fc2 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 8000694:	bf00      	nop
 8000696:	3738      	adds	r7, #56	@ 0x38
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	2000002c 	.word	0x2000002c

080006a0 <_ZN15RobStride_Motor30RobStride_Motor_MIT_SetMotorIdEh>:

//MIT���õ��ID
void RobStride_Motor::RobStride_Motor_MIT_SetMotorId(uint8_t F_CMD)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08e      	sub	sp, #56	@ 0x38
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	460b      	mov	r3, r1
 80006aa:	70fb      	strb	r3, [r7, #3]
    uint8_t txdata[8] = {0}; 	//���巢����������
 80006ac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
	FDCAN_TxHeaderTypeDef txMsg; 	//��������
	txMsg.Identifier = CAN_ID; 	//���ñ�׼ID
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	60fb      	str	r3, [r7, #12]
	txMsg.IdType = FDCAN_STANDARD_ID; 	//���ñ�ʶ������
 80006bc:	2300      	movs	r3, #0
 80006be:	613b      	str	r3, [r7, #16]
//	txMsg.RTR = CAN_RTR_DATA; 	//����Զ�̴�������
	txMsg.DataLength = 8; 	//�������ݳ���
 80006c0:	2308      	movs	r3, #8
 80006c2:	61bb      	str	r3, [r7, #24]
	txdata[0] = 0xFF;
 80006c4:	23ff      	movs	r3, #255	@ 0xff
 80006c6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	txdata[1] = 0xFF;
 80006ca:	23ff      	movs	r3, #255	@ 0xff
 80006cc:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	txdata[2] = 0xFF;
 80006d0:	23ff      	movs	r3, #255	@ 0xff
 80006d2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	txdata[3] = 0xFF;
 80006d6:	23ff      	movs	r3, #255	@ 0xff
 80006d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	txdata[4] = 0xFF;
 80006dc:	23ff      	movs	r3, #255	@ 0xff
 80006de:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	txdata[5] = 0xFF;
 80006e2:	23ff      	movs	r3, #255	@ 0xff
 80006e4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	txdata[6] = F_CMD;
 80006e8:	78fb      	ldrb	r3, [r7, #3]
 80006ea:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	txdata[7] = 0x01;
 80006ee:	2301      	movs	r3, #1
 80006f0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txMsg, txdata); 	//����CAN��Ϣ
 80006f4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	4619      	mov	r1, r3
 80006fe:	4803      	ldr	r0, [pc, #12]	@ (800070c <_ZN15RobStride_Motor30RobStride_Motor_MIT_SetMotorIdEh+0x6c>)
 8000700:	f001 fc5f 	bl	8001fc2 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 8000704:	bf00      	nop
 8000706:	3738      	adds	r7, #56	@ 0x38
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	2000002c 	.word	0x2000002c

08000710 <_ZN15RobStride_Motor27RobStride_Motor_MIT_ControlEfffff>:



//MIT����ģʽ
void RobStride_Motor::RobStride_Motor_MIT_Control(float Angle, float Speed, float Kp, float Kd, float Torque)
{
 8000710:	b590      	push	{r4, r7, lr}
 8000712:	b093      	sub	sp, #76	@ 0x4c
 8000714:	af00      	add	r7, sp, #0
 8000716:	6178      	str	r0, [r7, #20]
 8000718:	ed87 0a04 	vstr	s0, [r7, #16]
 800071c:	edc7 0a03 	vstr	s1, [r7, #12]
 8000720:	ed87 1a02 	vstr	s2, [r7, #8]
 8000724:	edc7 1a01 	vstr	s3, [r7, #4]
 8000728:	ed87 2a00 	vstr	s4, [r7]
	uint8_t txdata[8] = {0}; 	//���巢����������
 800072c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
	FDCAN_TxHeaderTypeDef txMsg; 	//��������
	txMsg.Identifier = CAN_ID; 	//���ñ�׼ID
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	61fb      	str	r3, [r7, #28]
	txMsg.IdType = FDCAN_STANDARD_ID; 	//���ñ�ʶ������
 800073c:	2300      	movs	r3, #0
 800073e:	623b      	str	r3, [r7, #32]
//	txMsg.RTR = CAN_RTR_DATA; 	//����Զ�̴�������
	txMsg.DataLength = 8; 	//�������ݳ���
 8000740:	2308      	movs	r3, #8
 8000742:	62bb      	str	r3, [r7, #40]	@ 0x28
	txdata[0] = float_to_uint(Angle, P_MIN,P_MAX, 16)>>8;
 8000744:	2010      	movs	r0, #16
 8000746:	eeb2 1a09 	vmov.f32	s2, #41	@ 0x41480000  12.5
 800074a:	eefa 0a09 	vmov.f32	s1, #169	@ 0xc1480000 -12.5
 800074e:	ed97 0a04 	vldr	s0, [r7, #16]
 8000752:	f7ff fd87 	bl	8000264 <_Z13float_to_uintfffi>
 8000756:	4603      	mov	r3, r0
 8000758:	121b      	asrs	r3, r3, #8
 800075a:	b2db      	uxtb	r3, r3
 800075c:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	txdata[1] = float_to_uint(Angle, P_MIN,P_MAX, 16);
 8000760:	2010      	movs	r0, #16
 8000762:	eeb2 1a09 	vmov.f32	s2, #41	@ 0x41480000  12.5
 8000766:	eefa 0a09 	vmov.f32	s1, #169	@ 0xc1480000 -12.5
 800076a:	ed97 0a04 	vldr	s0, [r7, #16]
 800076e:	f7ff fd79 	bl	8000264 <_Z13float_to_uintfffi>
 8000772:	4603      	mov	r3, r0
 8000774:	b2db      	uxtb	r3, r3
 8000776:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
	txdata[2] = float_to_uint(Speed, V_MIN,V_MAX, 12)>>4;
 800077a:	200c      	movs	r0, #12
 800077c:	ed9f 1a3e 	vldr	s2, [pc, #248]	@ 8000878 <_ZN15RobStride_Motor27RobStride_Motor_MIT_ControlEfffff+0x168>
 8000780:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 800087c <_ZN15RobStride_Motor27RobStride_Motor_MIT_ControlEfffff+0x16c>
 8000784:	ed97 0a03 	vldr	s0, [r7, #12]
 8000788:	f7ff fd6c 	bl	8000264 <_Z13float_to_uintfffi>
 800078c:	4603      	mov	r3, r0
 800078e:	111b      	asrs	r3, r3, #4
 8000790:	b2db      	uxtb	r3, r3
 8000792:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
	txdata[3] = float_to_uint(Speed, V_MIN,V_MAX, 12)<<4 | float_to_uint(Kp, KP_MIN, KP_MAX, 12)>>8;
 8000796:	200c      	movs	r0, #12
 8000798:	ed9f 1a37 	vldr	s2, [pc, #220]	@ 8000878 <_ZN15RobStride_Motor27RobStride_Motor_MIT_ControlEfffff+0x168>
 800079c:	eddf 0a37 	vldr	s1, [pc, #220]	@ 800087c <_ZN15RobStride_Motor27RobStride_Motor_MIT_ControlEfffff+0x16c>
 80007a0:	ed97 0a03 	vldr	s0, [r7, #12]
 80007a4:	f7ff fd5e 	bl	8000264 <_Z13float_to_uintfffi>
 80007a8:	4603      	mov	r3, r0
 80007aa:	b25b      	sxtb	r3, r3
 80007ac:	011b      	lsls	r3, r3, #4
 80007ae:	b25c      	sxtb	r4, r3
 80007b0:	200c      	movs	r0, #12
 80007b2:	ed9f 1a33 	vldr	s2, [pc, #204]	@ 8000880 <_ZN15RobStride_Motor27RobStride_Motor_MIT_ControlEfffff+0x170>
 80007b6:	eddf 0a33 	vldr	s1, [pc, #204]	@ 8000884 <_ZN15RobStride_Motor27RobStride_Motor_MIT_ControlEfffff+0x174>
 80007ba:	ed97 0a02 	vldr	s0, [r7, #8]
 80007be:	f7ff fd51 	bl	8000264 <_Z13float_to_uintfffi>
 80007c2:	4603      	mov	r3, r0
 80007c4:	121b      	asrs	r3, r3, #8
 80007c6:	b25b      	sxtb	r3, r3
 80007c8:	4323      	orrs	r3, r4
 80007ca:	b25b      	sxtb	r3, r3
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	txdata[4] = float_to_uint(Kp, KP_MIN, KP_MAX, 12);
 80007d2:	200c      	movs	r0, #12
 80007d4:	ed9f 1a2a 	vldr	s2, [pc, #168]	@ 8000880 <_ZN15RobStride_Motor27RobStride_Motor_MIT_ControlEfffff+0x170>
 80007d8:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8000884 <_ZN15RobStride_Motor27RobStride_Motor_MIT_ControlEfffff+0x174>
 80007dc:	ed97 0a02 	vldr	s0, [r7, #8]
 80007e0:	f7ff fd40 	bl	8000264 <_Z13float_to_uintfffi>
 80007e4:	4603      	mov	r3, r0
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
	txdata[5] = float_to_uint(Kd, KD_MIN, KD_MAX, 12)>>4;
 80007ec:	200c      	movs	r0, #12
 80007ee:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 80007f2:	eddf 0a24 	vldr	s1, [pc, #144]	@ 8000884 <_ZN15RobStride_Motor27RobStride_Motor_MIT_ControlEfffff+0x174>
 80007f6:	ed97 0a01 	vldr	s0, [r7, #4]
 80007fa:	f7ff fd33 	bl	8000264 <_Z13float_to_uintfffi>
 80007fe:	4603      	mov	r3, r0
 8000800:	111b      	asrs	r3, r3, #4
 8000802:	b2db      	uxtb	r3, r3
 8000804:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
	txdata[6] = float_to_uint(Kd, KD_MIN, KD_MAX, 12)<<4 | float_to_uint(Torque, T_MIN, T_MAX, 12)>>8;
 8000808:	200c      	movs	r0, #12
 800080a:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 800080e:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8000884 <_ZN15RobStride_Motor27RobStride_Motor_MIT_ControlEfffff+0x174>
 8000812:	ed97 0a01 	vldr	s0, [r7, #4]
 8000816:	f7ff fd25 	bl	8000264 <_Z13float_to_uintfffi>
 800081a:	4603      	mov	r3, r0
 800081c:	b25b      	sxtb	r3, r3
 800081e:	011b      	lsls	r3, r3, #4
 8000820:	b25c      	sxtb	r4, r3
 8000822:	200c      	movs	r0, #12
 8000824:	eeb3 1a01 	vmov.f32	s2, #49	@ 0x41880000  17.0
 8000828:	eefb 0a01 	vmov.f32	s1, #177	@ 0xc1880000 -17.0
 800082c:	ed97 0a00 	vldr	s0, [r7]
 8000830:	f7ff fd18 	bl	8000264 <_Z13float_to_uintfffi>
 8000834:	4603      	mov	r3, r0
 8000836:	121b      	asrs	r3, r3, #8
 8000838:	b25b      	sxtb	r3, r3
 800083a:	4323      	orrs	r3, r4
 800083c:	b25b      	sxtb	r3, r3
 800083e:	b2db      	uxtb	r3, r3
 8000840:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	txdata[7] = float_to_uint(Torque, T_MIN, T_MAX, 12);
 8000844:	200c      	movs	r0, #12
 8000846:	eeb3 1a01 	vmov.f32	s2, #49	@ 0x41880000  17.0
 800084a:	eefb 0a01 	vmov.f32	s1, #177	@ 0xc1880000 -17.0
 800084e:	ed97 0a00 	vldr	s0, [r7]
 8000852:	f7ff fd07 	bl	8000264 <_Z13float_to_uintfffi>
 8000856:	4603      	mov	r3, r0
 8000858:	b2db      	uxtb	r3, r3
 800085a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txMsg, txdata); 	//����CAN��Ϣ
 800085e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	4807      	ldr	r0, [pc, #28]	@ (8000888 <_ZN15RobStride_Motor27RobStride_Motor_MIT_ControlEfffff+0x178>)
 800086a:	f001 fbaa 	bl	8001fc2 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 800086e:	bf00      	nop
 8000870:	374c      	adds	r7, #76	@ 0x4c
 8000872:	46bd      	mov	sp, r7
 8000874:	bd90      	pop	{r4, r7, pc}
 8000876:	bf00      	nop
 8000878:	42300000 	.word	0x42300000
 800087c:	c2300000 	.word	0xc2300000
 8000880:	43fa0000 	.word	0x43fa0000
 8000884:	00000000 	.word	0x00000000
 8000888:	2000002c 	.word	0x2000002c

0800088c <_ZN15RobStride_Motor35RobStride_Motor_MIT_PositionControlEff>:

//MITλ��ģʽ
void RobStride_Motor::RobStride_Motor_MIT_PositionControl(float position_rad, float speed_rad_per_s)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b090      	sub	sp, #64	@ 0x40
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	ed87 0a02 	vstr	s0, [r7, #8]
 8000898:	edc7 0a01 	vstr	s1, [r7, #4]
	uint8_t txdata[8] = {0}; 	//���巢����������
 800089c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
	FDCAN_TxHeaderTypeDef txMsg; 	//��������
	txMsg.Identifier = (1 << 8) | CAN_ID; 	//���ñ�׼ID
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008ae:	617b      	str	r3, [r7, #20]
	txMsg.IdType = FDCAN_STANDARD_ID; 	//���ñ�ʶ������
 80008b0:	2300      	movs	r3, #0
 80008b2:	61bb      	str	r3, [r7, #24]
//	txMsg.RTR = CAN_RTR_DATA; 	//����Զ�̴�������
	txMsg.DataLength = 8; 	//�������ݳ���
 80008b4:	2308      	movs	r3, #8
 80008b6:	623b      	str	r3, [r7, #32]
	memcpy(&txdata[0], &position_rad, 4); 	//��λ�����ݸ��Ƶ���������������
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	63bb      	str	r3, [r7, #56]	@ 0x38
	memcpy(&txdata[4], &speed_rad_per_s, 4); 	//���ٶ����ݸ��Ƶ���������������
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txMsg, txdata); 	//����CAN��Ϣ
 80008c0:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4619      	mov	r1, r3
 80008ca:	4803      	ldr	r0, [pc, #12]	@ (80008d8 <_ZN15RobStride_Motor35RobStride_Motor_MIT_PositionControlEff+0x4c>)
 80008cc:	f001 fb79 	bl	8001fc2 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 80008d0:	bf00      	nop
 80008d2:	3740      	adds	r7, #64	@ 0x40
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	2000002c 	.word	0x2000002c

080008dc <_ZN15RobStride_Motor32RobStride_Motor_MIT_SpeedControlEff>:
// MITģʽ�ٶȿ���ʵ��
void RobStride_Motor::RobStride_Motor_MIT_SpeedControl(float speed_rad_per_s, float current_limit)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b090      	sub	sp, #64	@ 0x40
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	ed87 0a02 	vstr	s0, [r7, #8]
 80008e8:	edc7 0a01 	vstr	s1, [r7, #4]
	uint8_t txdata[8] = {0}; 	//���巢����������
 80008ec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
	FDCAN_TxHeaderTypeDef txMsg; 	//��������
	txMsg.Identifier = (2 << 8) | CAN_ID;
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008fe:	617b      	str	r3, [r7, #20]
	txMsg.IdType = FDCAN_STANDARD_ID; 	//���ñ�ʶ������
 8000900:	2300      	movs	r3, #0
 8000902:	61bb      	str	r3, [r7, #24]
//	txMsg.RTR = CAN_RTR_DATA; 	//����Զ�̴�������
	txMsg.DataLength = 8; 	//�������ݳ���
 8000904:	2308      	movs	r3, #8
 8000906:	623b      	str	r3, [r7, #32]
	memcpy(&txdata[0], &speed_rad_per_s, 4);
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	63bb      	str	r3, [r7, #56]	@ 0x38
	memcpy(&txdata[4], &current_limit, 4);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txMsg, txdata);
 8000910:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	4619      	mov	r1, r3
 800091a:	4803      	ldr	r0, [pc, #12]	@ (8000928 <_ZN15RobStride_Motor32RobStride_Motor_MIT_SpeedControlEff+0x4c>)
 800091c:	f001 fb51 	bl	8001fc2 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 8000920:	bf00      	nop
 8000922:	3740      	adds	r7, #64	@ 0x40
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	2000002c 	.word	0x2000002c

0800092c <_ZN15RobStride_Motor30RobStride_Motor_MIT_SetZeroPosEv>:

//MIT�������ģʽ
void RobStride_Motor::RobStride_Motor_MIT_SetZeroPos()
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08e      	sub	sp, #56	@ 0x38
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
	uint8_t txdata[8] = {0}; 	//���巢����������
 8000934:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
	FDCAN_TxHeaderTypeDef txMsg; 	//��������
	txMsg.Identifier = CAN_ID; 	//���ñ�׼ID
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	60fb      	str	r3, [r7, #12]
	txMsg.IdType = FDCAN_STANDARD_ID; 	//���ñ�ʶ������
 8000944:	2300      	movs	r3, #0
 8000946:	613b      	str	r3, [r7, #16]
//	txMsg.RTR = CAN_RTR_DATA; 	//����Զ�̴�������
	txMsg.DataLength = 8; 	//�������ݳ���
 8000948:	2308      	movs	r3, #8
 800094a:	61bb      	str	r3, [r7, #24]
	txdata[0] = 0xFF;
 800094c:	23ff      	movs	r3, #255	@ 0xff
 800094e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	txdata[1] = 0xFF;
 8000952:	23ff      	movs	r3, #255	@ 0xff
 8000954:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	txdata[2] = 0xFF;
 8000958:	23ff      	movs	r3, #255	@ 0xff
 800095a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	txdata[3] = 0xFF;
 800095e:	23ff      	movs	r3, #255	@ 0xff
 8000960:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	txdata[4] = 0xFF;
 8000964:	23ff      	movs	r3, #255	@ 0xff
 8000966:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	txdata[5] = 0xFF;
 800096a:	23ff      	movs	r3, #255	@ 0xff
 800096c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	txdata[6] = 0xFF;
 8000970:	23ff      	movs	r3, #255	@ 0xff
 8000972:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	txdata[7] = 0xFE;
 8000976:	23fe      	movs	r3, #254	@ 0xfe
 8000978:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txMsg, txdata); 	//����CAN��Ϣ
 800097c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000980:	f107 030c 	add.w	r3, r7, #12
 8000984:	4619      	mov	r1, r3
 8000986:	4803      	ldr	r0, [pc, #12]	@ (8000994 <_ZN15RobStride_Motor30RobStride_Motor_MIT_SetZeroPosEv+0x68>)
 8000988:	f001 fb1b 	bl	8001fc2 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 800098c:	bf00      	nop
 800098e:	3738      	adds	r7, #56	@ 0x38
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	2000002c 	.word	0x2000002c

08000998 <_ZN15RobStride_Motor27RobStride_Motor_Pos_controlEff>:
* @����2        : Ŀ��Ƕ�(-4��~4��)
* @����ֵ 			: void
* @����  				: None
*******************************************************************************/
void RobStride_Motor::RobStride_Motor_Pos_control(float Speed, float Angle)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80009a4:	edc7 0a01 	vstr	s1, [r7, #4]
		Motor_Set_All.set_speed = Speed;
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	68ba      	ldr	r2, [r7, #8]
 80009ac:	621a      	str	r2, [r3, #32]
		Motor_Set_All.set_angle = Angle;
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	62da      	str	r2, [r3, #44]	@ 0x2c
//		Motor_Set_All.set_limit_speed = vel_max;
//		Motor_Set_All.set_acceleration = acc_set;
//		if (drw.run_mode.data != 1 && Pos_Info.pattern == 2)
		if (drw.run_mode.data != 1)
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 80009ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80009be:	eef4 7a47 	vcmp.f32	s15, s14
 80009c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009c6:	d028      	beq.n	8000a1a <_ZN15RobStride_Motor27RobStride_Motor_Pos_controlEff+0x82>
		{
			Set_RobStride_Motor_parameter(0X7005, Pos_control_mode, Set_mode);		//���õ��ģʽ
 80009c8:	226a      	movs	r2, #106	@ 0x6a
 80009ca:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80009ce:	f247 0105 	movw	r1, #28677	@ 0x7005
 80009d2:	68f8      	ldr	r0, [r7, #12]
 80009d4:	f000 f972 	bl	8000cbc <_ZN15RobStride_Motor29Set_RobStride_Motor_parameterEtfc>
			Get_RobStride_Motor_parameter(0x7005);
 80009d8:	f247 0105 	movw	r1, #28677	@ 0x7005
 80009dc:	68f8      	ldr	r0, [r7, #12]
 80009de:	f000 f9cd 	bl	8000d7c <_ZN15RobStride_Motor29Get_RobStride_Motor_parameterEt>
			Motor_Set_All.set_motor_mode = Pos_control_mode;
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	2201      	movs	r2, #1
 80009e6:	619a      	str	r2, [r3, #24]
			Enable_Motor();
 80009e8:	68f8      	ldr	r0, [r7, #12]
 80009ea:	f000 f8fb 	bl	8000be4 <_ZN15RobStride_Motor12Enable_MotorEv>
			Set_RobStride_Motor_parameter(0X7024, Motor_Set_All.set_limit_speed, Set_parameter);
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80009f4:	2270      	movs	r2, #112	@ 0x70
 80009f6:	eeb0 0a67 	vmov.f32	s0, s15
 80009fa:	f247 0124 	movw	r1, #28708	@ 0x7024
 80009fe:	68f8      	ldr	r0, [r7, #12]
 8000a00:	f000 f95c 	bl	8000cbc <_ZN15RobStride_Motor29Set_RobStride_Motor_parameterEtfc>
			Set_RobStride_Motor_parameter(0X7025, Motor_Set_All.set_acceleration, Set_parameter);
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8000a0a:	2270      	movs	r2, #112	@ 0x70
 8000a0c:	eeb0 0a67 	vmov.f32	s0, s15
 8000a10:	f247 0125 	movw	r1, #28709	@ 0x7025
 8000a14:	68f8      	ldr	r0, [r7, #12]
 8000a16:	f000 f951 	bl	8000cbc <_ZN15RobStride_Motor29Set_RobStride_Motor_parameterEtfc>
		}	
		HAL_Delay(1);
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	f000 ff92 	bl	8001944 <HAL_Delay>
		Set_RobStride_Motor_parameter(0X7016, Motor_Set_All.set_angle, Set_parameter);
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8000a26:	2270      	movs	r2, #112	@ 0x70
 8000a28:	eeb0 0a67 	vmov.f32	s0, s15
 8000a2c:	f247 0116 	movw	r1, #28694	@ 0x7016
 8000a30:	68f8      	ldr	r0, [r7, #12]
 8000a32:	f000 f943 	bl	8000cbc <_ZN15RobStride_Motor29Set_RobStride_Motor_parameterEtfc>
}
 8000a36:	bf00      	nop
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <_ZN15RobStride_Motor27RobStride_Motor_CSP_controlEff>:
* @����2        : Ŀ����ٶ�(0rad/s~44rad/s)
* @����ֵ 				: void
* @����  				: None
*******************************************************************************/
void RobStride_Motor::RobStride_Motor_CSP_control(float Angle, float limit_spd)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b084      	sub	sp, #16
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	60f8      	str	r0, [r7, #12]
 8000a46:	ed87 0a02 	vstr	s0, [r7, #8]
 8000a4a:	edc7 0a01 	vstr	s1, [r7, #4]
	if(MIT_Mode){
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d007      	beq.n	8000a68 <_ZN15RobStride_Motor27RobStride_Motor_CSP_controlEff+0x2a>
		RobStride_Motor_MIT_PositionControl(Angle, limit_spd);
 8000a58:	edd7 0a01 	vldr	s1, [r7, #4]
 8000a5c:	ed97 0a02 	vldr	s0, [r7, #8]
 8000a60:	68f8      	ldr	r0, [r7, #12]
 8000a62:	f7ff ff13 	bl	800088c <_ZN15RobStride_Motor35RobStride_Motor_MIT_PositionControlEff>
			Set_RobStride_Motor_parameter(0X7017, Motor_Set_All.set_limit_speed, Set_parameter);
		}
		HAL_Delay(1);
		Set_RobStride_Motor_parameter(0X7016, Motor_Set_All.set_angle, Set_parameter);
	}
}
 8000a66:	e038      	b.n	8000ada <_ZN15RobStride_Motor27RobStride_Motor_CSP_controlEff+0x9c>
		Motor_Set_All.set_angle = Angle;
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	68ba      	ldr	r2, [r7, #8]
 8000a6c:	62da      	str	r2, [r3, #44]	@ 0x2c
		Motor_Set_All.set_limit_speed = limit_spd;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	635a      	str	r2, [r3, #52]	@ 0x34
		if (drw.run_mode.data != 1)
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8000a7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000a7e:	eef4 7a47 	vcmp.f32	s15, s14
 8000a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a86:	d01a      	beq.n	8000abe <_ZN15RobStride_Motor27RobStride_Motor_CSP_controlEff+0x80>
			Set_RobStride_Motor_parameter(0X7005, CSP_control_mode, Set_mode);
 8000a88:	226a      	movs	r2, #106	@ 0x6a
 8000a8a:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8000a8e:	f247 0105 	movw	r1, #28677	@ 0x7005
 8000a92:	68f8      	ldr	r0, [r7, #12]
 8000a94:	f000 f912 	bl	8000cbc <_ZN15RobStride_Motor29Set_RobStride_Motor_parameterEtfc>
			Get_RobStride_Motor_parameter(0x7005);
 8000a98:	f247 0105 	movw	r1, #28677	@ 0x7005
 8000a9c:	68f8      	ldr	r0, [r7, #12]
 8000a9e:	f000 f96d 	bl	8000d7c <_ZN15RobStride_Motor29Get_RobStride_Motor_parameterEt>
			Enable_Motor();
 8000aa2:	68f8      	ldr	r0, [r7, #12]
 8000aa4:	f000 f89e 	bl	8000be4 <_ZN15RobStride_Motor12Enable_MotorEv>
			Set_RobStride_Motor_parameter(0X7017, Motor_Set_All.set_limit_speed, Set_parameter);
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8000aae:	2270      	movs	r2, #112	@ 0x70
 8000ab0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ab4:	f247 0117 	movw	r1, #28695	@ 0x7017
 8000ab8:	68f8      	ldr	r0, [r7, #12]
 8000aba:	f000 f8ff 	bl	8000cbc <_ZN15RobStride_Motor29Set_RobStride_Motor_parameterEtfc>
		HAL_Delay(1);
 8000abe:	2001      	movs	r0, #1
 8000ac0:	f000 ff40 	bl	8001944 <HAL_Delay>
		Set_RobStride_Motor_parameter(0X7016, Motor_Set_All.set_angle, Set_parameter);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8000aca:	2270      	movs	r2, #112	@ 0x70
 8000acc:	eeb0 0a67 	vmov.f32	s0, s15
 8000ad0:	f247 0116 	movw	r1, #28694	@ 0x7016
 8000ad4:	68f8      	ldr	r0, [r7, #12]
 8000ad6:	f000 f8f1 	bl	8000cbc <_ZN15RobStride_Motor29Set_RobStride_Motor_parameterEtfc>
}
 8000ada:	bf00      	nop
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <_ZN15RobStride_Motor29RobStride_Motor_Speed_controlEff>:
* @����ֵ 			: void
* @����  				: None
*******************************************************************************/
uint8_t count_set_motor_mode_Speed = 0;
void RobStride_Motor::RobStride_Motor_Speed_control(float Speed, float limit_cur)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b084      	sub	sp, #16
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	60f8      	str	r0, [r7, #12]
 8000aea:	ed87 0a02 	vstr	s0, [r7, #8]
 8000aee:	edc7 0a01 	vstr	s1, [r7, #4]
	Motor_Set_All.set_speed = Speed;
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	68ba      	ldr	r2, [r7, #8]
 8000af6:	621a      	str	r2, [r3, #32]
	Motor_Set_All.set_limit_cur = limit_cur;
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	631a      	str	r2, [r3, #48]	@ 0x30
	if (drw.run_mode.data != 2)
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8000b04:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8000b08:	eef4 7a47 	vcmp.f32	s15, s14
 8000b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b10:	d025      	beq.n	8000b5e <_ZN15RobStride_Motor29RobStride_Motor_Speed_controlEff+0x7c>
	{
		Set_RobStride_Motor_parameter(0X7005, Speed_control_mode, Set_mode);		//���õ��ģʽ
 8000b12:	226a      	movs	r2, #106	@ 0x6a
 8000b14:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8000b18:	f247 0105 	movw	r1, #28677	@ 0x7005
 8000b1c:	68f8      	ldr	r0, [r7, #12]
 8000b1e:	f000 f8cd 	bl	8000cbc <_ZN15RobStride_Motor29Set_RobStride_Motor_parameterEtfc>
		Get_RobStride_Motor_parameter(0x7005);
 8000b22:	f247 0105 	movw	r1, #28677	@ 0x7005
 8000b26:	68f8      	ldr	r0, [r7, #12]
 8000b28:	f000 f928 	bl	8000d7c <_ZN15RobStride_Motor29Get_RobStride_Motor_parameterEt>
		Enable_Motor();
 8000b2c:	68f8      	ldr	r0, [r7, #12]
 8000b2e:	f000 f859 	bl	8000be4 <_ZN15RobStride_Motor12Enable_MotorEv>
		Motor_Set_All.set_motor_mode = Speed_control_mode;
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	2202      	movs	r2, #2
 8000b36:	619a      	str	r2, [r3, #24]
		Set_RobStride_Motor_parameter(0X7018, Motor_Set_All.set_limit_cur, Set_parameter);
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8000b3e:	2270      	movs	r2, #112	@ 0x70
 8000b40:	eeb0 0a67 	vmov.f32	s0, s15
 8000b44:	f247 0118 	movw	r1, #28696	@ 0x7018
 8000b48:	68f8      	ldr	r0, [r7, #12]
 8000b4a:	f000 f8b7 	bl	8000cbc <_ZN15RobStride_Motor29Set_RobStride_Motor_parameterEtfc>
		Set_RobStride_Motor_parameter(0X7022, 10, Set_parameter);	
 8000b4e:	2270      	movs	r2, #112	@ 0x70
 8000b50:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8000b54:	f247 0122 	movw	r1, #28706	@ 0x7022
 8000b58:	68f8      	ldr	r0, [r7, #12]
 8000b5a:	f000 f8af 	bl	8000cbc <_ZN15RobStride_Motor29Set_RobStride_Motor_parameterEtfc>
//		Set_RobStride_Motor_parameter(0X7022, Motor_Set_All.set_acceleration, Set_parameter);	
	}
	Set_RobStride_Motor_parameter(0X700A, Motor_Set_All.set_speed, Set_parameter);
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	edd3 7a08 	vldr	s15, [r3, #32]
 8000b64:	2270      	movs	r2, #112	@ 0x70
 8000b66:	eeb0 0a67 	vmov.f32	s0, s15
 8000b6a:	f247 010a 	movw	r1, #28682	@ 0x700a
 8000b6e:	68f8      	ldr	r0, [r7, #12]
 8000b70:	f000 f8a4 	bl	8000cbc <_ZN15RobStride_Motor29Set_RobStride_Motor_parameterEtfc>
}
 8000b74:	bf00      	nop
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <_ZN15RobStride_Motor31RobStride_Motor_current_controlEf>:
* @����ֵ 			: void
* @����  				: None
*******************************************************************************/
uint8_t count_set_motor_mode = 0;
void RobStride_Motor::RobStride_Motor_current_control(float current)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	ed87 0a00 	vstr	s0, [r7]
	Motor_Set_All.set_current = current;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	683a      	ldr	r2, [r7, #0]
 8000b8c:	61da      	str	r2, [r3, #28]
	output = Motor_Set_All.set_current;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	69da      	ldr	r2, [r3, #28]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	649a      	str	r2, [r3, #72]	@ 0x48
	if (Motor_Set_All.set_motor_mode != 3)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	2b03      	cmp	r3, #3
 8000b9c:	d012      	beq.n	8000bc4 <_ZN15RobStride_Motor31RobStride_Motor_current_controlEf+0x48>
	{
		Set_RobStride_Motor_parameter(0X7005, Elect_control_mode, Set_mode);		//���õ��ģʽ
 8000b9e:	226a      	movs	r2, #106	@ 0x6a
 8000ba0:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8000ba4:	f247 0105 	movw	r1, #28677	@ 0x7005
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f000 f887 	bl	8000cbc <_ZN15RobStride_Motor29Set_RobStride_Motor_parameterEtfc>
		Get_RobStride_Motor_parameter(0x7005);
 8000bae:	f247 0105 	movw	r1, #28677	@ 0x7005
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f000 f8e2 	bl	8000d7c <_ZN15RobStride_Motor29Get_RobStride_Motor_parameterEt>
		Motor_Set_All.set_motor_mode = Elect_control_mode;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2203      	movs	r2, #3
 8000bbc:	619a      	str	r2, [r3, #24]
		Enable_Motor();
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f000 f810 	bl	8000be4 <_ZN15RobStride_Motor12Enable_MotorEv>
	}
	Set_RobStride_Motor_parameter(0X7006, Motor_Set_All.set_current, Set_parameter);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	edd3 7a07 	vldr	s15, [r3, #28]
 8000bca:	2270      	movs	r2, #112	@ 0x70
 8000bcc:	eeb0 0a67 	vmov.f32	s0, s15
 8000bd0:	f247 0106 	movw	r1, #28678	@ 0x7006
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f000 f871 	bl	8000cbc <_ZN15RobStride_Motor29Set_RobStride_Motor_parameterEtfc>
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <_ZN15RobStride_Motor12Enable_MotorEv>:
* @����         : None
* @����ֵ 			: void
* @����  				: None
*******************************************************************************/
void RobStride_Motor::Enable_Motor()
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08e      	sub	sp, #56	@ 0x38
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	if (MIT_Mode)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d003      	beq.n	8000bfe <_ZN15RobStride_Motor12Enable_MotorEv+0x1a>
	{
		RobStride_Motor_MIT_Enable();
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f7ff fc76 	bl	80004e8 <_ZN15RobStride_Motor26RobStride_Motor_MIT_EnableEv>
//		TxMessage.RTR = CAN_RTR_DATA;
		TxMessage.DataLength = 8;
		TxMessage.Identifier = Communication_Type_MotorEnable<<24|Master_CAN_ID<<8|CAN_ID;
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxMessage, txdata); // ����CAN��Ϣ
	}
}
 8000bfc:	e01a      	b.n	8000c34 <_ZN15RobStride_Motor12Enable_MotorEv+0x50>
		uint8_t txdata[8] = {0};				//��������
 8000bfe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
		TxMessage.IdType = FDCAN_EXTENDED_ID;
 8000c08:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c0c:	613b      	str	r3, [r7, #16]
		TxMessage.DataLength = 8;
 8000c0e:	2308      	movs	r3, #8
 8000c10:	61bb      	str	r3, [r7, #24]
		TxMessage.Identifier = Communication_Type_MotorEnable<<24|Master_CAN_ID<<8|CAN_ID;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	8a1b      	ldrh	r3, [r3, #16]
 8000c16:	021b      	lsls	r3, r3, #8
 8000c18:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	7812      	ldrb	r2, [r2, #0]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	60fb      	str	r3, [r7, #12]
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxMessage, txdata); // ����CAN��Ϣ
 8000c24:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000c28:	f107 030c 	add.w	r3, r7, #12
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4803      	ldr	r0, [pc, #12]	@ (8000c3c <_ZN15RobStride_Motor12Enable_MotorEv+0x58>)
 8000c30:	f001 f9c7 	bl	8001fc2 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 8000c34:	bf00      	nop
 8000c36:	3738      	adds	r7, #56	@ 0x38
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	2000002c 	.word	0x2000002c

08000c40 <_ZN15RobStride_Motor15Disenable_MotorEh>:
* @����         : �Ƿ��������λ��0����� 1�����
* @����ֵ 			: void
* @����  				: None
*******************************************************************************/
void RobStride_Motor::Disenable_Motor(uint8_t clear_error)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08e      	sub	sp, #56	@ 0x38
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	70fb      	strb	r3, [r7, #3]
	if (MIT_Mode)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d003      	beq.n	8000c5e <_ZN15RobStride_Motor15Disenable_MotorEh+0x1e>
	{
		RobStride_Motor_MIT_Disable();
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff fc7c 	bl	8000554 <_ZN15RobStride_Motor27RobStride_Motor_MIT_DisableEv>
		TxMessage.Identifier = Communication_Type_MotorStop<<24|Master_CAN_ID<<8|CAN_ID;
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxMessage, txdata); // ����CAN��Ϣ
		Set_RobStride_Motor_parameter(0X7005, move_control_mode, Set_mode);
	}

}
 8000c5c:	e025      	b.n	8000caa <_ZN15RobStride_Motor15Disenable_MotorEh+0x6a>
		uint8_t txdata[8] = {0};					   	//��������
 8000c5e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
		txdata[0] = clear_error;
 8000c68:	78fb      	ldrb	r3, [r7, #3]
 8000c6a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
		TxMessage.IdType = FDCAN_EXTENDED_ID;
 8000c6e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c72:	613b      	str	r3, [r7, #16]
		TxMessage.DataLength = 8;
 8000c74:	2308      	movs	r3, #8
 8000c76:	61bb      	str	r3, [r7, #24]
		TxMessage.Identifier = Communication_Type_MotorStop<<24|Master_CAN_ID<<8|CAN_ID;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	8a1b      	ldrh	r3, [r3, #16]
 8000c7c:	021b      	lsls	r3, r3, #8
 8000c7e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	7812      	ldrb	r2, [r2, #0]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	60fb      	str	r3, [r7, #12]
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxMessage, txdata); // ����CAN��Ϣ
 8000c8a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000c8e:	f107 030c 	add.w	r3, r7, #12
 8000c92:	4619      	mov	r1, r3
 8000c94:	4807      	ldr	r0, [pc, #28]	@ (8000cb4 <_ZN15RobStride_Motor15Disenable_MotorEh+0x74>)
 8000c96:	f001 f994 	bl	8001fc2 <HAL_FDCAN_AddMessageToTxFifoQ>
		Set_RobStride_Motor_parameter(0X7005, move_control_mode, Set_mode);
 8000c9a:	226a      	movs	r2, #106	@ 0x6a
 8000c9c:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8000cb8 <_ZN15RobStride_Motor15Disenable_MotorEh+0x78>
 8000ca0:	f247 0105 	movw	r1, #28677	@ 0x7005
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f000 f809 	bl	8000cbc <_ZN15RobStride_Motor29Set_RobStride_Motor_parameterEtfc>
}
 8000caa:	bf00      	nop
 8000cac:	3738      	adds	r7, #56	@ 0x38
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	2000002c 	.word	0x2000002c
 8000cb8:	00000000 	.word	0x00000000

08000cbc <_ZN15RobStride_Motor29Set_RobStride_Motor_parameterEtfc>:
* @����3        : ѡ���Ǵ������ģʽ ������������ ��Set_mode���ÿ���ģʽ Set_parameter���ò�����
* @����ֵ 			: void
* @����  				: None
*******************************************************************************/
void RobStride_Motor::Set_RobStride_Motor_parameter(uint16_t Index, float Value, char Value_mode)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b090      	sub	sp, #64	@ 0x40
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000cca:	817b      	strh	r3, [r7, #10]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	727b      	strb	r3, [r7, #9]
	uint8_t txdata[8] = {0};						   	//��������
 8000cd0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
	FDCAN_TxHeaderTypeDef TxMessage; 	//��������
	TxMessage.IdType = FDCAN_EXTENDED_ID;
 8000cda:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000cde:	61bb      	str	r3, [r7, #24]
//	TxMessage.RTR = CAN_RTR_DATA;
	TxMessage.DataLength = 8;
 8000ce0:	2308      	movs	r3, #8
 8000ce2:	623b      	str	r3, [r7, #32]
	TxMessage.Identifier = Communication_Type_SetSingleParameter<<24|Master_CAN_ID<<8|CAN_ID;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	8a1b      	ldrh	r3, [r3, #16]
 8000ce8:	021b      	lsls	r3, r3, #8
 8000cea:	f043 5390 	orr.w	r3, r3, #301989888	@ 0x12000000
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	7812      	ldrb	r2, [r2, #0]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	617b      	str	r3, [r7, #20]
	txdata[0] = Index;
 8000cf6:	897b      	ldrh	r3, [r7, #10]
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
	txdata[1] = Index>>8;
 8000cfe:	897b      	ldrh	r3, [r7, #10]
 8000d00:	0a1b      	lsrs	r3, r3, #8
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	txdata[2] = 0x00;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
	txdata[3] = 0x00;	
 8000d10:	2300      	movs	r3, #0
 8000d12:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	if (Value_mode == 'p')
 8000d16:	7a7b      	ldrb	r3, [r7, #9]
 8000d18:	2b70      	cmp	r3, #112	@ 0x70
 8000d1a:	d102      	bne.n	8000d22 <_ZN15RobStride_Motor29Set_RobStride_Motor_parameterEtfc+0x66>
	{
		memcpy(&txdata[4],&Value,4);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000d20:	e01d      	b.n	8000d5e <_ZN15RobStride_Motor29Set_RobStride_Motor_parameterEtfc+0xa2>
	}
	else if (Value_mode == 'j')
 8000d22:	7a7b      	ldrb	r3, [r7, #9]
 8000d24:	2b6a      	cmp	r3, #106	@ 0x6a
 8000d26:	d11a      	bne.n	8000d5e <_ZN15RobStride_Motor29Set_RobStride_Motor_parameterEtfc+0xa2>
	{
		Motor_Set_All.set_motor_mode = int(Value);
 8000d28:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d30:	ee17 2a90 	vmov	r2, s15
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	619a      	str	r2, [r3, #24]
		txdata[4] = (uint8_t)Value;
 8000d38:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d40:	edc7 7a00 	vstr	s15, [r7]
 8000d44:	783b      	ldrb	r3, [r7, #0]
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
		txdata[5] = 0x00;	
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
		txdata[6] = 0x00;	
 8000d52:	2300      	movs	r3, #0
 8000d54:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		txdata[7] = 0x00;	
 8000d58:	2300      	movs	r3, #0
 8000d5a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	}
  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxMessage, txdata); // ����CAN��Ϣ
 8000d5e:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	4619      	mov	r1, r3
 8000d68:	4803      	ldr	r0, [pc, #12]	@ (8000d78 <_ZN15RobStride_Motor29Set_RobStride_Motor_parameterEtfc+0xbc>)
 8000d6a:	f001 f92a 	bl	8001fc2 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 8000d6e:	bf00      	nop
 8000d70:	3740      	adds	r7, #64	@ 0x40
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	2000002c 	.word	0x2000002c

08000d7c <_ZN15RobStride_Motor29Get_RobStride_Motor_parameterEt>:
* @����         : ������ַ
* @����ֵ 			: void
* @����  				: None
*******************************************************************************/
void RobStride_Motor::Get_RobStride_Motor_parameter(uint16_t Index)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08e      	sub	sp, #56	@ 0x38
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	460b      	mov	r3, r1
 8000d86:	807b      	strh	r3, [r7, #2]
	uint8_t txdata[8] = {0};						   	//��������
 8000d88:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
	FDCAN_TxHeaderTypeDef TxMessage; 	//��������
	txdata[0] = Index;
 8000d92:	887b      	ldrh	r3, [r7, #2]
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	txdata[1] = Index>>8;
 8000d9a:	887b      	ldrh	r3, [r7, #2]
 8000d9c:	0a1b      	lsrs	r3, r3, #8
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	TxMessage.IdType = FDCAN_EXTENDED_ID;
 8000da6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000daa:	613b      	str	r3, [r7, #16]
//	TxMessage.RTR = CAN_RTR_DATA;
	TxMessage.DataLength = 8;
 8000dac:	2308      	movs	r3, #8
 8000dae:	61bb      	str	r3, [r7, #24]
	TxMessage.Identifier = Communication_Type_GetSingleParameter<<24|Master_CAN_ID<<8|CAN_ID;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	8a1b      	ldrh	r3, [r3, #16]
 8000db4:	021b      	lsls	r3, r3, #8
 8000db6:	f043 5388 	orr.w	r3, r3, #285212672	@ 0x11000000
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	7812      	ldrb	r2, [r2, #0]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	60fb      	str	r3, [r7, #12]
  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxMessage, txdata); // ����CAN��Ϣ
 8000dc2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000dc6:	f107 030c 	add.w	r3, r7, #12
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4803      	ldr	r0, [pc, #12]	@ (8000ddc <_ZN15RobStride_Motor29Get_RobStride_Motor_parameterEt+0x60>)
 8000dce:	f001 f8f8 	bl	8001fc2 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 8000dd2:	bf00      	nop
 8000dd4:	3738      	adds	r7, #56	@ 0x38
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	2000002c 	.word	0x2000002c

08000de0 <_ZN15RobStride_Motor11Set_ZeroPosEv>:
* @����         : None
* @����ֵ 			: void
* @����  				: ��ѵ�ǰ���λ����Ϊ��е��λ�� ����ʧ�ܵ��, ��ʹ�ܵ��
*******************************************************************************/
void RobStride_Motor::Set_ZeroPos()
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08e      	sub	sp, #56	@ 0x38
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	Disenable_Motor(0);							//ʧ�ܵ��
 8000de8:	2100      	movs	r1, #0
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff ff28 	bl	8000c40 <_ZN15RobStride_Motor15Disenable_MotorEh>
	uint8_t txdata[8] = {0};						   	//��������
 8000df0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
	FDCAN_TxHeaderTypeDef TxMessage; 	//��������
	TxMessage.IdType = FDCAN_EXTENDED_ID;
 8000dfa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000dfe:	613b      	str	r3, [r7, #16]
//	TxMessage.RTR = CAN_RTR_DATA;
	TxMessage.DataLength = 8;
 8000e00:	2308      	movs	r3, #8
 8000e02:	61bb      	str	r3, [r7, #24]
	TxMessage.Identifier = Communication_Type_SetPosZero<<24|Master_CAN_ID<<8|CAN_ID;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	8a1b      	ldrh	r3, [r3, #16]
 8000e08:	021b      	lsls	r3, r3, #8
 8000e0a:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	7812      	ldrb	r2, [r2, #0]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	60fb      	str	r3, [r7, #12]
	txdata[0] = 1;
 8000e16:	2301      	movs	r3, #1
 8000e18:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxMessage, txdata); // ����CAN��Ϣ
 8000e1c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000e20:	f107 030c 	add.w	r3, r7, #12
 8000e24:	4619      	mov	r1, r3
 8000e26:	4805      	ldr	r0, [pc, #20]	@ (8000e3c <_ZN15RobStride_Motor11Set_ZeroPosEv+0x5c>)
 8000e28:	f001 f8cb 	bl	8001fc2 <HAL_FDCAN_AddMessageToTxFifoQ>
	Enable_Motor();
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff fed9 	bl	8000be4 <_ZN15RobStride_Motor12Enable_MotorEv>
}
 8000e32:	bf00      	nop
 8000e34:	3738      	adds	r7, #56	@ 0x38
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	2000002c 	.word	0x2000002c

08000e40 <_ZN15RobStride_Motor29RobStride_Motor_MotorDataSaveEv>:
* @����      		: None
* @����ֵ 				: void
* @����  				: ��ѵ�ǰ������д����е�����дΪĬ��ֵ�������ϵ���������Ϊ��ָ������ʱ�Ĳ���
*******************************************************************************/
void RobStride_Motor::RobStride_Motor_MotorDataSave()
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08e      	sub	sp, #56	@ 0x38
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	uint8_t txdata[8] = {0};				//��������
 8000e48:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
	FDCAN_TxHeaderTypeDef TxMessage; 	//��������
	TxMessage.IdType = FDCAN_EXTENDED_ID;
 8000e52:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e56:	613b      	str	r3, [r7, #16]
//	TxMessage.RTR = CAN_RTR_DATA;
	TxMessage.DataLength = 8;
 8000e58:	2308      	movs	r3, #8
 8000e5a:	61bb      	str	r3, [r7, #24]
	TxMessage.Identifier = Communication_Type_MotorDataSave<<24|Master_CAN_ID<<8|CAN_ID;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	8a1b      	ldrh	r3, [r3, #16]
 8000e60:	021b      	lsls	r3, r3, #8
 8000e62:	f043 53b0 	orr.w	r3, r3, #369098752	@ 0x16000000
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	7812      	ldrb	r2, [r2, #0]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	60fb      	str	r3, [r7, #12]
	txdata[0] = 0x01;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	txdata[1] = 0x02;
 8000e74:	2302      	movs	r3, #2
 8000e76:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	txdata[2] = 0x03;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	txdata[3] = 0x04;
 8000e80:	2304      	movs	r3, #4
 8000e82:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	txdata[4] = 0x05;
 8000e86:	2305      	movs	r3, #5
 8000e88:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	txdata[5] = 0x06;
 8000e8c:	2306      	movs	r3, #6
 8000e8e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	txdata[6] = 0x07;
 8000e92:	2307      	movs	r3, #7
 8000e94:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	txdata[7] = 0x08;
 8000e98:	2308      	movs	r3, #8
 8000e9a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxMessage, txdata); // ����CAN��Ϣ
 8000e9e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000ea2:	f107 030c 	add.w	r3, r7, #12
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4803      	ldr	r0, [pc, #12]	@ (8000eb8 <_ZN15RobStride_Motor29RobStride_Motor_MotorDataSaveEv+0x78>)
 8000eaa:	f001 f88a 	bl	8001fc2 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 8000eae:	bf00      	nop
 8000eb0:	3738      	adds	r7, #56	@ 0x38
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	2000002c 	.word	0x2000002c

08000ebc <_ZN15RobStride_Motor30RobStride_Motor_BaudRateChangeEh>:
									04��125K��
* @����ֵ 				: void
* @����  				: ������������޸�Ϊ��Ӧ��ֵ���������Ϊ01���������޸�Ϊ1M
*******************************************************************************/
void RobStride_Motor::RobStride_Motor_BaudRateChange(uint8_t F_CMD)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08e      	sub	sp, #56	@ 0x38
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	70fb      	strb	r3, [r7, #3]
	uint8_t txdata[8] = {0};				//��������
 8000ec8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
	FDCAN_TxHeaderTypeDef TxMessage; 	//��������
	TxMessage.IdType = FDCAN_EXTENDED_ID;
 8000ed2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ed6:	613b      	str	r3, [r7, #16]
//	TxMessage.RTR = CAN_RTR_DATA;
	TxMessage.DataLength = 8;
 8000ed8:	2308      	movs	r3, #8
 8000eda:	61bb      	str	r3, [r7, #24]
	TxMessage.Identifier = Communication_Type_BaudRateChange<<24|Master_CAN_ID<<8|CAN_ID;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	8a1b      	ldrh	r3, [r3, #16]
 8000ee0:	021b      	lsls	r3, r3, #8
 8000ee2:	f043 53b8 	orr.w	r3, r3, #385875968	@ 0x17000000
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	7812      	ldrb	r2, [r2, #0]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	60fb      	str	r3, [r7, #12]
	txdata[0] = 0x01;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	txdata[1] = 0x02;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	txdata[2] = 0x03;
 8000efa:	2303      	movs	r3, #3
 8000efc:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	txdata[3] = 0x04;
 8000f00:	2304      	movs	r3, #4
 8000f02:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	txdata[4] = 0x05;
 8000f06:	2305      	movs	r3, #5
 8000f08:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	txdata[5] = 0x06;
 8000f0c:	2306      	movs	r3, #6
 8000f0e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	txdata[6] = F_CMD;
 8000f12:	78fb      	ldrb	r3, [r7, #3]
 8000f14:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	txdata[7] = 0x08;	//��һ�ֽ�����ν����ʲô�����ԣ�����д����0x08
 8000f18:	2308      	movs	r3, #8
 8000f1a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxMessage, txdata); // ����CAN��Ϣ
 8000f1e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000f22:	f107 030c 	add.w	r3, r7, #12
 8000f26:	4619      	mov	r1, r3
 8000f28:	4803      	ldr	r0, [pc, #12]	@ (8000f38 <_ZN15RobStride_Motor30RobStride_Motor_BaudRateChangeEh+0x7c>)
 8000f2a:	f001 f84a 	bl	8001fc2 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 8000f2e:	bf00      	nop
 8000f30:	3738      	adds	r7, #56	@ 0x38
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	2000002c 	.word	0x2000002c

08000f3c <_ZN15RobStride_Motor38RobStride_Motor_ProactiveEscalationSetEh>:
														01��������
* @����ֵ 				: void
* @����  				: ����/�ر� ��������ϱ���Ĭ���ϱ�����Ϊ10ms
*******************************************************************************/
void RobStride_Motor::RobStride_Motor_ProactiveEscalationSet(uint8_t F_CMD)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08e      	sub	sp, #56	@ 0x38
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	460b      	mov	r3, r1
 8000f46:	70fb      	strb	r3, [r7, #3]
	uint8_t txdata[8] = {0};				//��������
 8000f48:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
	FDCAN_TxHeaderTypeDef TxMessage; 	//��������
	TxMessage.IdType = FDCAN_EXTENDED_ID;
 8000f52:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f56:	613b      	str	r3, [r7, #16]
//	TxMessage.RTR = CAN_RTR_DATA;
	TxMessage.DataLength = 8;
 8000f58:	2308      	movs	r3, #8
 8000f5a:	61bb      	str	r3, [r7, #24]
	TxMessage.Identifier = Communication_Type_ProactiveEscalationSet<<24|Master_CAN_ID<<8|CAN_ID;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	8a1b      	ldrh	r3, [r3, #16]
 8000f60:	021b      	lsls	r3, r3, #8
 8000f62:	f043 53c0 	orr.w	r3, r3, #402653184	@ 0x18000000
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	7812      	ldrb	r2, [r2, #0]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	60fb      	str	r3, [r7, #12]
	txdata[0] = 0x01;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	txdata[1] = 0x02;
 8000f74:	2302      	movs	r3, #2
 8000f76:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	txdata[2] = 0x03;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	txdata[3] = 0x04;
 8000f80:	2304      	movs	r3, #4
 8000f82:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	txdata[4] = 0x05;
 8000f86:	2305      	movs	r3, #5
 8000f88:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	txdata[5] = 0x06;
 8000f8c:	2306      	movs	r3, #6
 8000f8e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	txdata[6] = F_CMD;
 8000f92:	78fb      	ldrb	r3, [r7, #3]
 8000f94:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	txdata[7] = 0x08;	//��һ�ֽ�����ν����ʲô�����ԣ�����д����0x08
 8000f98:	2308      	movs	r3, #8
 8000f9a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxMessage, txdata); // ����CAN��Ϣ
 8000f9e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000fa2:	f107 030c 	add.w	r3, r7, #12
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4803      	ldr	r0, [pc, #12]	@ (8000fb8 <_ZN15RobStride_Motor38RobStride_Motor_ProactiveEscalationSetEh+0x7c>)
 8000faa:	f001 f80a 	bl	8001fc2 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 8000fae:	bf00      	nop
 8000fb0:	3738      	adds	r7, #56	@ 0x38
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	2000002c 	.word	0x2000002c

08000fbc <_ZN15RobStride_Motor32RobStride_Motor_MIT_MotorModeSetEh>:
										02��MITЭ�飩
* @����ֵ 				: void
* @����  				: None
*******************************************************************************/
void RobStride_Motor::RobStride_Motor_MIT_MotorModeSet(uint8_t F_CMD)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08e      	sub	sp, #56	@ 0x38
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	70fb      	strb	r3, [r7, #3]
	uint8_t txdata[8] = {0};				//��������
 8000fc8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
	FDCAN_TxHeaderTypeDef TxMessage; 	//��������
	TxMessage.IdType = FDCAN_STANDARD_ID;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
//	TxMessage.RTR = CAN_RTR_DATA;
	TxMessage.DataLength = 8;
 8000fd6:	2308      	movs	r3, #8
 8000fd8:	61bb      	str	r3, [r7, #24]
	TxMessage.Identifier = CAN_ID;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	60fb      	str	r3, [r7, #12]
	txdata[0] = 0xFF;
 8000fe0:	23ff      	movs	r3, #255	@ 0xff
 8000fe2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	txdata[1] = 0xFF;
 8000fe6:	23ff      	movs	r3, #255	@ 0xff
 8000fe8:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	txdata[2] = 0xFF;
 8000fec:	23ff      	movs	r3, #255	@ 0xff
 8000fee:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	txdata[3] = 0xFF;
 8000ff2:	23ff      	movs	r3, #255	@ 0xff
 8000ff4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	txdata[4] = 0xFF;
 8000ff8:	23ff      	movs	r3, #255	@ 0xff
 8000ffa:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	txdata[5] = 0xFF;
 8000ffe:	23ff      	movs	r3, #255	@ 0xff
 8001000:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	txdata[6] = F_CMD;
 8001004:	78fb      	ldrb	r3, [r7, #3]
 8001006:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	txdata[7] = 0xFD;	//��һ�ֽ�����ν����ʲô�����ԣ�����д����0x08
 800100a:	23fd      	movs	r3, #253	@ 0xfd
 800100c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxMessage, txdata); // ����CAN��Ϣ
 8001010:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	4619      	mov	r1, r3
 800101a:	4803      	ldr	r0, [pc, #12]	@ (8001028 <_ZN15RobStride_Motor32RobStride_Motor_MIT_MotorModeSetEh+0x6c>)
 800101c:	f000 ffd1 	bl	8001fc2 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 8001020:	bf00      	nop
 8001022:	3738      	adds	r7, #56	@ 0x38
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	2000002c 	.word	0x2000002c

0800102c <_ZN15data_read_writeC1EPKt>:
* @����     		: RobStride������ݵĲ�����ַ��ʼ��
* @����         : ���ݵĲ�����ַ����
* @����ֵ 			: void
* @����  				: ���ڴ��������ʱ�Զ�����
*******************************************************************************/
data_read_write::data_read_write(const uint16_t *index_list)
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
{
	run_mode.index = index_list[0];
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	881a      	ldrh	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	801a      	strh	r2, [r3, #0]
	iq_ref.index = index_list[1];
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	3302      	adds	r3, #2
 8001042:	881a      	ldrh	r2, [r3, #0]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	811a      	strh	r2, [r3, #8]
	spd_ref.index = index_list[2];
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	3304      	adds	r3, #4
 800104c:	881a      	ldrh	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	821a      	strh	r2, [r3, #16]
	imit_torque.index = index_list[3];
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	3306      	adds	r3, #6
 8001056:	881a      	ldrh	r2, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	831a      	strh	r2, [r3, #24]
	cur_kp.index = index_list[4];
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	3308      	adds	r3, #8
 8001060:	881a      	ldrh	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	841a      	strh	r2, [r3, #32]
	cur_ki.index = index_list[5];
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	330a      	adds	r3, #10
 800106a:	881a      	ldrh	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	851a      	strh	r2, [r3, #40]	@ 0x28
	cur_filt_gain.index = index_list[6];
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	330c      	adds	r3, #12
 8001074:	881a      	ldrh	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	861a      	strh	r2, [r3, #48]	@ 0x30
	loc_ref.index = index_list[7];
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	330e      	adds	r3, #14
 800107e:	881a      	ldrh	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	871a      	strh	r2, [r3, #56]	@ 0x38
	limit_spd.index = index_list[8];
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	3310      	adds	r3, #16
 8001088:	881a      	ldrh	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	limit_cur.index = index_list[9];
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	3312      	adds	r3, #18
 8001094:	881a      	ldrh	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mechPos.index = index_list[10];
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	3314      	adds	r3, #20
 80010a0:	881a      	ldrh	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
	iqf.index = index_list[11];
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	3316      	adds	r3, #22
 80010ac:	881a      	ldrh	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
	mechVel.index = index_list[12];
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	3318      	adds	r3, #24
 80010b8:	881a      	ldrh	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
	VBUS.index = index_list[13];	
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	331a      	adds	r3, #26
 80010c4:	881a      	ldrh	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
	rotation.index = index_list[14];
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	331c      	adds	r3, #28
 80010d0:	881a      	ldrh	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
}
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4618      	mov	r0, r3
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <_ZN15RobStride_Motor28RobStride_Motor_MotorModeSetEh>:

void RobStride_Motor::RobStride_Motor_MotorModeSet(uint8_t F_CMD)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08e      	sub	sp, #56	@ 0x38
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	70fb      	strb	r3, [r7, #3]
	uint8_t txdata[8] = {0};						   	//��������
 80010f4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
	FDCAN_TxHeaderTypeDef TxMessage; 	//��������
	TxMessage.IdType = FDCAN_EXTENDED_ID;
 80010fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001102:	613b      	str	r3, [r7, #16]
//	TxMessage.RTR = CAN_RTR_DATA;
	TxMessage.DataLength = 8;
 8001104:	2308      	movs	r3, #8
 8001106:	61bb      	str	r3, [r7, #24]
	TxMessage.Identifier = Communication_Type_MotorModeSet<<24|Master_CAN_ID<<8|CAN_ID;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	8a1b      	ldrh	r3, [r3, #16]
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	f043 53c8 	orr.w	r3, r3, #419430400	@ 0x19000000
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	7812      	ldrb	r2, [r2, #0]
 8001116:	4313      	orrs	r3, r2
 8001118:	60fb      	str	r3, [r7, #12]
	txdata[0] = 0x01;
 800111a:	2301      	movs	r3, #1
 800111c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	txdata[1] = 0x02;
 8001120:	2302      	movs	r3, #2
 8001122:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	txdata[2] = 0x03;
 8001126:	2303      	movs	r3, #3
 8001128:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	txdata[3] = 0x04;
 800112c:	2304      	movs	r3, #4
 800112e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	txdata[4] = 0x05;
 8001132:	2305      	movs	r3, #5
 8001134:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	txdata[5] = 0x06;
 8001138:	2306      	movs	r3, #6
 800113a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	txdata[6] = F_CMD;
 800113e:	78fb      	ldrb	r3, [r7, #3]
 8001140:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	txdata[7] = 0x08;	//���һλ�����˴���0x08
 8001144:	2308      	movs	r3, #8
 8001146:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxMessage, txdata); // ����CAN��Ϣ
 800114a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800114e:	f107 030c 	add.w	r3, r7, #12
 8001152:	4619      	mov	r1, r3
 8001154:	4803      	ldr	r0, [pc, #12]	@ (8001164 <_ZN15RobStride_Motor28RobStride_Motor_MotorModeSetEh+0x7c>)
 8001156:	f000 ff34 	bl	8001fc2 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 800115a:	bf00      	nop
 800115c:	3738      	adds	r7, #56	@ 0x38
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	2000002c 	.word	0x2000002c

08001168 <_ZL13FDCAN1_Configv>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_FDCAN1_Init(void);
/* USER CODE BEGIN PFP */
static void FDCAN1_Config(void){
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef sFilterConfig;

	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 800116e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001172:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001178:	2302      	movs	r3, #2
 800117a:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800117c:	2301      	movs	r3, #1
 800117e:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x000;
 8001180:	2300      	movs	r3, #0
 8001182:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x000;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
	if(HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK){
 8001188:	463b      	mov	r3, r7
 800118a:	4619      	mov	r1, r3
 800118c:	482d      	ldr	r0, [pc, #180]	@ (8001244 <_ZL13FDCAN1_Configv+0xdc>)
 800118e:	f000 fe65 	bl	8001e5c <HAL_FDCAN_ConfigFilter>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	bf14      	ite	ne
 8001198:	2301      	movne	r3, #1
 800119a:	2300      	moveq	r3, #0
 800119c:	b2db      	uxtb	r3, r3
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <_ZL13FDCAN1_Configv+0x3e>
		Error_Handler();
 80011a2:	f000 fa4b 	bl	800163c <Error_Handler>
	}
	/* Configure global filter to reject all non-matching frames */
	if(HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE) != HAL_OK){
 80011a6:	2301      	movs	r3, #1
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	2301      	movs	r3, #1
 80011ac:	2202      	movs	r2, #2
 80011ae:	2102      	movs	r1, #2
 80011b0:	4824      	ldr	r0, [pc, #144]	@ (8001244 <_ZL13FDCAN1_Configv+0xdc>)
 80011b2:	f000 fead 	bl	8001f10 <HAL_FDCAN_ConfigGlobalFilter>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	bf14      	ite	ne
 80011bc:	2301      	movne	r3, #1
 80011be:	2300      	moveq	r3, #0
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <_ZL13FDCAN1_Configv+0x62>
		Error_Handler();
 80011c6:	f000 fa39 	bl	800163c <Error_Handler>
	}
	if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK){
 80011ca:	481e      	ldr	r0, [pc, #120]	@ (8001244 <_ZL13FDCAN1_Configv+0xdc>)
 80011cc:	f000 fed1 	bl	8001f72 <HAL_FDCAN_Start>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	bf14      	ite	ne
 80011d6:	2301      	movne	r3, #1
 80011d8:	2300      	moveq	r3, #0
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <_ZL13FDCAN1_Configv+0x7c>
		Error_Handler();
 80011e0:	f000 fa2c 	bl	800163c <Error_Handler>
	}
	if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK){
 80011e4:	2200      	movs	r2, #0
 80011e6:	2101      	movs	r1, #1
 80011e8:	4816      	ldr	r0, [pc, #88]	@ (8001244 <_ZL13FDCAN1_Configv+0xdc>)
 80011ea:	f001 f837 	bl	800225c <HAL_FDCAN_ActivateNotification>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	bf14      	ite	ne
 80011f4:	2301      	movne	r3, #1
 80011f6:	2300      	moveq	r3, #0
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <_ZL13FDCAN1_Configv+0x9a>
		Error_Handler();
 80011fe:	f000 fa1d 	bl	800163c <Error_Handler>
	}

	TxHeader.Identifier = 0x1200FD01;
 8001202:	4b11      	ldr	r3, [pc, #68]	@ (8001248 <_ZL13FDCAN1_Configv+0xe0>)
 8001204:	4a11      	ldr	r2, [pc, #68]	@ (800124c <_ZL13FDCAN1_Configv+0xe4>)
 8001206:	601a      	str	r2, [r3, #0]
	TxHeader.IdType = FDCAN_EXTENDED_ID;
 8001208:	4b0f      	ldr	r3, [pc, #60]	@ (8001248 <_ZL13FDCAN1_Configv+0xe0>)
 800120a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800120e:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001210:	4b0d      	ldr	r3, [pc, #52]	@ (8001248 <_ZL13FDCAN1_Configv+0xe0>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = 8;
 8001216:	4b0c      	ldr	r3, [pc, #48]	@ (8001248 <_ZL13FDCAN1_Configv+0xe0>)
 8001218:	2208      	movs	r2, #8
 800121a:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800121c:	4b0a      	ldr	r3, [pc, #40]	@ (8001248 <_ZL13FDCAN1_Configv+0xe0>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001222:	4b09      	ldr	r3, [pc, #36]	@ (8001248 <_ZL13FDCAN1_Configv+0xe0>)
 8001224:	2200      	movs	r2, #0
 8001226:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8001228:	4b07      	ldr	r3, [pc, #28]	@ (8001248 <_ZL13FDCAN1_Configv+0xe0>)
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800122e:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <_ZL13FDCAN1_Configv+0xe0>)
 8001230:	2200      	movs	r2, #0
 8001232:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;
 8001234:	4b04      	ldr	r3, [pc, #16]	@ (8001248 <_ZL13FDCAN1_Configv+0xe0>)
 8001236:	2200      	movs	r2, #0
 8001238:	621a      	str	r2, [r3, #32]
}
 800123a:	bf00      	nop
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	2000002c 	.word	0x2000002c
 8001248:	20000090 	.word	0x20000090
 800124c:	1200fd01 	.word	0x1200fd01

08001250 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 8001250:	b580      	push	{r7, lr}
 8001252:	b08c      	sub	sp, #48	@ 0x30
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef RxHeader;

	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET){
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	2b00      	cmp	r3, #0
 8001262:	d010      	beq.n	8001286 <HAL_FDCAN_RxFifo0Callback+0x36>
		if(HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK){
 8001264:	f107 0208 	add.w	r2, r7, #8
 8001268:	4b09      	ldr	r3, [pc, #36]	@ (8001290 <HAL_FDCAN_RxFifo0Callback+0x40>)
 800126a:	2140      	movs	r1, #64	@ 0x40
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f000 feed 	bl	800204c <HAL_FDCAN_GetRxMessage>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	bf14      	ite	ne
 8001278:	2301      	movne	r3, #1
 800127a:	2300      	moveq	r3, #0
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <HAL_FDCAN_RxFifo0Callback+0x36>
			Error_Handler();
 8001282:	f000 f9db 	bl	800163c <Error_Handler>
		}
	}
}
 8001286:	bf00      	nop
 8001288:	3730      	adds	r7, #48	@ 0x30
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200000b4 	.word	0x200000b4

08001294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001298:	f000 fae3 	bl	8001862 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800129c:	f000 f920 	bl	80014e0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a0:	f000 f9b4 	bl	800160c <_ZL12MX_GPIO_Initv>
  MX_FDCAN1_Init();
 80012a4:	f000 f966 	bl	8001574 <_ZL14MX_FDCAN1_Initv>
  /* USER CODE BEGIN 2 */
  FDCAN1_Config();
 80012a8:	f7ff ff5e 	bl	8001168 <_ZL13FDCAN1_Configv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(mode)
 80012ac:	4b84      	ldr	r3, [pc, #528]	@ (80014c0 <main+0x22c>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b17      	cmp	r3, #23
 80012b2:	f200 80ff 	bhi.w	80014b4 <main+0x220>
 80012b6:	a201      	add	r2, pc, #4	@ (adr r2, 80012bc <main+0x28>)
 80012b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012bc:	0800131d 	.word	0x0800131d
 80012c0:	08001325 	.word	0x08001325
 80012c4:	0800132f 	.word	0x0800132f
 80012c8:	0800135d 	.word	0x0800135d
 80012cc:	08001373 	.word	0x08001373
 80012d0:	08001389 	.word	0x08001389
 80012d4:	0800139f 	.word	0x0800139f
 80012d8:	080013b1 	.word	0x080013b1
 80012dc:	080013b9 	.word	0x080013b9
 80012e0:	080013c5 	.word	0x080013c5
 80012e4:	080013d7 	.word	0x080013d7
 80012e8:	080013e1 	.word	0x080013e1
 80012ec:	080013e9 	.word	0x080013e9
 80012f0:	080013f1 	.word	0x080013f1
 80012f4:	08001421 	.word	0x08001421
 80012f8:	08001445 	.word	0x08001445
 80012fc:	08001469 	.word	0x08001469
 8001300:	08001471 	.word	0x08001471
 8001304:	0800147b 	.word	0x0800147b
 8001308:	08001485 	.word	0x08001485
 800130c:	0800148f 	.word	0x0800148f
 8001310:	08001499 	.word	0x08001499
 8001314:	080014a3 	.word	0x080014a3
 8001318:	080014ab 	.word	0x080014ab
	  	      {
	  	          // ===== 普通模式接口 =====
	  	          case 0: // 使能（普通模式）
	  	              RobStride_01.Enable_Motor();
 800131c:	4869      	ldr	r0, [pc, #420]	@ (80014c4 <main+0x230>)
 800131e:	f7ff fc61 	bl	8000be4 <_ZN15RobStride_Motor12Enable_MotorEv>
	  	              break;
 8001322:	e0c8      	b.n	80014b6 <main+0x222>
	  	          case 1: // 失能（普通模式）
	  	              RobStride_01.Disenable_Motor(1);
 8001324:	2101      	movs	r1, #1
 8001326:	4867      	ldr	r0, [pc, #412]	@ (80014c4 <main+0x230>)
 8001328:	f7ff fc8a 	bl	8000c40 <_ZN15RobStride_Motor15Disenable_MotorEh>
	  	              break;
 800132c:	e0c3      	b.n	80014b6 <main+0x222>
	  	          case 2: // 运控模式
	  	              HAL_Delay(5);
 800132e:	2005      	movs	r0, #5
 8001330:	f000 fb08 	bl	8001944 <HAL_Delay>
	  	              RobStride_01.RobStride_Motor_move_control(torque, 0, 0, 0.0, 0.0);
 8001334:	4b64      	ldr	r3, [pc, #400]	@ (80014c8 <main+0x234>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	ee07 3a90 	vmov	s15, r3
 800133c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001340:	ed9f 2a62 	vldr	s4, [pc, #392]	@ 80014cc <main+0x238>
 8001344:	eddf 1a61 	vldr	s3, [pc, #388]	@ 80014cc <main+0x238>
 8001348:	ed9f 1a60 	vldr	s2, [pc, #384]	@ 80014cc <main+0x238>
 800134c:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 80014cc <main+0x238>
 8001350:	eeb0 0a67 	vmov.f32	s0, s15
 8001354:	485b      	ldr	r0, [pc, #364]	@ (80014c4 <main+0x230>)
 8001356:	f7fe ffcf 	bl	80002f8 <_ZN15RobStride_Motor28RobStride_Motor_move_controlEfffff>
	  	              break;
 800135a:	e0ac      	b.n	80014b6 <main+0x222>
	  	          case 3: // PP位置模式
	  	              RobStride_01.RobStride_Motor_Pos_control(2.0, 2);
 800135c:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8001360:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001364:	4857      	ldr	r0, [pc, #348]	@ (80014c4 <main+0x230>)
 8001366:	f7ff fb17 	bl	8000998 <_ZN15RobStride_Motor27RobStride_Motor_Pos_controlEff>
	  	  						HAL_Delay(5);
 800136a:	2005      	movs	r0, #5
 800136c:	f000 faea 	bl	8001944 <HAL_Delay>
	  	              break;
 8001370:	e0a1      	b.n	80014b6 <main+0x222>
	  	  				case 4:	//CSP位置模式
	  	  						RobStride_01.RobStride_Motor_CSP_control(2.0, 2.0);
 8001372:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8001376:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800137a:	4852      	ldr	r0, [pc, #328]	@ (80014c4 <main+0x230>)
 800137c:	f7ff fb5f 	bl	8000a3e <_ZN15RobStride_Motor27RobStride_Motor_CSP_controlEff>
	  	  						HAL_Delay(5);
 8001380:	2005      	movs	r0, #5
 8001382:	f000 fadf 	bl	8001944 <HAL_Delay>
	  	  						break;
 8001386:	e096      	b.n	80014b6 <main+0x222>
	  	          case 5: // 速度模式
	  	              RobStride_01.RobStride_Motor_Speed_control(3.5, 5.0);
 8001388:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 800138c:	eeb0 0a0c 	vmov.f32	s0, #12	@ 0x40600000  3.5
 8001390:	484c      	ldr	r0, [pc, #304]	@ (80014c4 <main+0x230>)
 8001392:	f7ff fba6 	bl	8000ae2 <_ZN15RobStride_Motor29RobStride_Motor_Speed_controlEff>
	  	  						HAL_Delay(5);
 8001396:	2005      	movs	r0, #5
 8001398:	f000 fad4 	bl	8001944 <HAL_Delay>
	  	              break;
 800139c:	e08b      	b.n	80014b6 <main+0x222>
	  	          case 6: // 电流模式
	  	              HAL_Delay(5);
 800139e:	2005      	movs	r0, #5
 80013a0:	f000 fad0 	bl	8001944 <HAL_Delay>
	  	              RobStride_01.RobStride_Motor_current_control(1.2);
 80013a4:	ed9f 0a4a 	vldr	s0, [pc, #296]	@ 80014d0 <main+0x23c>
 80013a8:	4846      	ldr	r0, [pc, #280]	@ (80014c4 <main+0x230>)
 80013aa:	f7ff fbe7 	bl	8000b7c <_ZN15RobStride_Motor31RobStride_Motor_current_controlEf>
	  	              break;
 80013ae:	e082      	b.n	80014b6 <main+0x222>
	  	          case 7: // 设置机械零点
	  	              RobStride_01.Set_ZeroPos();
 80013b0:	4844      	ldr	r0, [pc, #272]	@ (80014c4 <main+0x230>)
 80013b2:	f7ff fd15 	bl	8000de0 <_ZN15RobStride_Motor11Set_ZeroPosEv>
	  	              break;
 80013b6:	e07e      	b.n	80014b6 <main+0x222>
	  	          case 8: // 读取参数
	  	              RobStride_01.Get_RobStride_Motor_parameter(0x7014);
 80013b8:	f247 0114 	movw	r1, #28692	@ 0x7014
 80013bc:	4841      	ldr	r0, [pc, #260]	@ (80014c4 <main+0x230>)
 80013be:	f7ff fcdd 	bl	8000d7c <_ZN15RobStride_Motor29Get_RobStride_Motor_parameterEt>
	  	              break;
 80013c2:	e078      	b.n	80014b6 <main+0x222>
	  	          case 9: // 设置参数
	  	              RobStride_01.Set_RobStride_Motor_parameter(0x7014, 0.35f, Set_parameter);
 80013c4:	2270      	movs	r2, #112	@ 0x70
 80013c6:	ed9f 0a43 	vldr	s0, [pc, #268]	@ 80014d4 <main+0x240>
 80013ca:	f247 0114 	movw	r1, #28692	@ 0x7014
 80013ce:	483d      	ldr	r0, [pc, #244]	@ (80014c4 <main+0x230>)
 80013d0:	f7ff fc74 	bl	8000cbc <_ZN15RobStride_Motor29Set_RobStride_Motor_parameterEtfc>
	  	              break;
 80013d4:	e06f      	b.n	80014b6 <main+0x222>
	  	          case 10: // 协议切换（如切MIT协议/Canopen/私有协议）
	  	              RobStride_01.RobStride_Motor_MotorModeSet(0x02); // 0x02=MIT
 80013d6:	2102      	movs	r1, #2
 80013d8:	483a      	ldr	r0, [pc, #232]	@ (80014c4 <main+0x230>)
 80013da:	f7ff fe85 	bl	80010e8 <_ZN15RobStride_Motor28RobStride_Motor_MotorModeSetEh>
	  	              break;
 80013de:	e06a      	b.n	80014b6 <main+0x222>

	  	          // ===== MIT模式接口（只能用MIT专用函数！） =====
	  	          case 11: // MIT 使能
	  	              RobStride_01.RobStride_Motor_MIT_Enable();
 80013e0:	4838      	ldr	r0, [pc, #224]	@ (80014c4 <main+0x230>)
 80013e2:	f7ff f881 	bl	80004e8 <_ZN15RobStride_Motor26RobStride_Motor_MIT_EnableEv>
	  	              break;
 80013e6:	e066      	b.n	80014b6 <main+0x222>
	  	          case 12: // MIT 失能
	  	              RobStride_01.RobStride_Motor_MIT_Disable();
 80013e8:	4836      	ldr	r0, [pc, #216]	@ (80014c4 <main+0x230>)
 80013ea:	f7ff f8b3 	bl	8000554 <_ZN15RobStride_Motor27RobStride_Motor_MIT_DisableEv>
	  	              break;
 80013ee:	e062      	b.n	80014b6 <main+0x222>
	  	          case 13: // MIT 综合控制
	  	  						RobStride_01.RobStride_Motor_MIT_SetMotorType(0x01);
 80013f0:	2101      	movs	r1, #1
 80013f2:	4834      	ldr	r0, [pc, #208]	@ (80014c4 <main+0x230>)
 80013f4:	f7ff f91c 	bl	8000630 <_ZN15RobStride_Motor32RobStride_Motor_MIT_SetMotorTypeEh>
	  	              RobStride_01.RobStride_Motor_MIT_Enable();
 80013f8:	4832      	ldr	r0, [pc, #200]	@ (80014c4 <main+0x230>)
 80013fa:	f7ff f875 	bl	80004e8 <_ZN15RobStride_Motor26RobStride_Motor_MIT_EnableEv>
	  	              HAL_Delay(5);
 80013fe:	2005      	movs	r0, #5
 8001400:	f000 faa0 	bl	8001944 <HAL_Delay>
	  	              RobStride_01.RobStride_Motor_MIT_Control(0, 0, 0, 0, -1.0f);
 8001404:	eebf 2a00 	vmov.f32	s4, #240	@ 0xbf800000 -1.0
 8001408:	eddf 1a30 	vldr	s3, [pc, #192]	@ 80014cc <main+0x238>
 800140c:	ed9f 1a2f 	vldr	s2, [pc, #188]	@ 80014cc <main+0x238>
 8001410:	eddf 0a2e 	vldr	s1, [pc, #184]	@ 80014cc <main+0x238>
 8001414:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 80014cc <main+0x238>
 8001418:	482a      	ldr	r0, [pc, #168]	@ (80014c4 <main+0x230>)
 800141a:	f7ff f979 	bl	8000710 <_ZN15RobStride_Motor27RobStride_Motor_MIT_ControlEfffff>
	  	              break;
 800141e:	e04a      	b.n	80014b6 <main+0x222>
	  	          case 14: // MIT 位置控制
	  	  						RobStride_01.RobStride_Motor_MIT_SetMotorType(0x01);
 8001420:	2101      	movs	r1, #1
 8001422:	4828      	ldr	r0, [pc, #160]	@ (80014c4 <main+0x230>)
 8001424:	f7ff f904 	bl	8000630 <_ZN15RobStride_Motor32RobStride_Motor_MIT_SetMotorTypeEh>
	  	  						RobStride_01.RobStride_Motor_MIT_Enable();
 8001428:	4826      	ldr	r0, [pc, #152]	@ (80014c4 <main+0x230>)
 800142a:	f7ff f85d 	bl	80004e8 <_ZN15RobStride_Motor26RobStride_Motor_MIT_EnableEv>
	  	              HAL_Delay(5);
 800142e:	2005      	movs	r0, #5
 8001430:	f000 fa88 	bl	8001944 <HAL_Delay>
	  	              RobStride_01.RobStride_Motor_MIT_PositionControl(1.57f, 3.0f);
 8001434:	eef0 0a08 	vmov.f32	s1, #8	@ 0x40400000  3.0
 8001438:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 80014d8 <main+0x244>
 800143c:	4821      	ldr	r0, [pc, #132]	@ (80014c4 <main+0x230>)
 800143e:	f7ff fa25 	bl	800088c <_ZN15RobStride_Motor35RobStride_Motor_MIT_PositionControlEff>
	  	              break;
 8001442:	e038      	b.n	80014b6 <main+0x222>
	  	          case 15: // MIT 速度控制
	  	  						RobStride_01.RobStride_Motor_MIT_SetMotorType(0x02);
 8001444:	2102      	movs	r1, #2
 8001446:	481f      	ldr	r0, [pc, #124]	@ (80014c4 <main+0x230>)
 8001448:	f7ff f8f2 	bl	8000630 <_ZN15RobStride_Motor32RobStride_Motor_MIT_SetMotorTypeEh>
	  	  						RobStride_01.RobStride_Motor_MIT_Enable();
 800144c:	481d      	ldr	r0, [pc, #116]	@ (80014c4 <main+0x230>)
 800144e:	f7ff f84b 	bl	80004e8 <_ZN15RobStride_Motor26RobStride_Motor_MIT_EnableEv>
	  	              HAL_Delay(5);
 8001452:	2005      	movs	r0, #5
 8001454:	f000 fa76 	bl	8001944 <HAL_Delay>
	  	              RobStride_01.RobStride_Motor_MIT_SpeedControl(4.5f, 3.2f);
 8001458:	eddf 0a20 	vldr	s1, [pc, #128]	@ 80014dc <main+0x248>
 800145c:	eeb1 0a02 	vmov.f32	s0, #18	@ 0x40900000  4.5
 8001460:	4818      	ldr	r0, [pc, #96]	@ (80014c4 <main+0x230>)
 8001462:	f7ff fa3b 	bl	80008dc <_ZN15RobStride_Motor32RobStride_Motor_MIT_SpeedControlEff>
	  	              break;
 8001466:	e026      	b.n	80014b6 <main+0x222>
	  	          case 16: // MIT 零点设置（运行前需保证 MIT_Type != positionControl）
	  	              RobStride_01.RobStride_Motor_MIT_SetZeroPos();
 8001468:	4816      	ldr	r0, [pc, #88]	@ (80014c4 <main+0x230>)
 800146a:	f7ff fa5f 	bl	800092c <_ZN15RobStride_Motor30RobStride_Motor_MIT_SetZeroPosEv>
	  	              break;
 800146e:	e022      	b.n	80014b6 <main+0x222>
	  	          case 17: // MIT 清错
	  	              RobStride_01.RobStride_Motor_MIT_ClearOrCheckError(0x01);
 8001470:	2101      	movs	r1, #1
 8001472:	4814      	ldr	r0, [pc, #80]	@ (80014c4 <main+0x230>)
 8001474:	f7ff f8a4 	bl	80005c0 <_ZN15RobStride_Motor37RobStride_Motor_MIT_ClearOrCheckErrorEh>
	  	              break;
 8001478:	e01d      	b.n	80014b6 <main+0x222>
	  	          case 18: // MIT 设置电机运行模式
	  	              RobStride_01.RobStride_Motor_MIT_SetMotorType(0x01);
 800147a:	2101      	movs	r1, #1
 800147c:	4811      	ldr	r0, [pc, #68]	@ (80014c4 <main+0x230>)
 800147e:	f7ff f8d7 	bl	8000630 <_ZN15RobStride_Motor32RobStride_Motor_MIT_SetMotorTypeEh>
	  	              break;
 8001482:	e018      	b.n	80014b6 <main+0x222>
	  	          case 19: // MIT 设置电机ID
	  	              RobStride_01.RobStride_Motor_MIT_SetMotorId(0x05);
 8001484:	2105      	movs	r1, #5
 8001486:	480f      	ldr	r0, [pc, #60]	@ (80014c4 <main+0x230>)
 8001488:	f7ff f90a 	bl	80006a0 <_ZN15RobStride_Motor30RobStride_Motor_MIT_SetMotorIdEh>
	  	              break;
 800148c:	e013      	b.n	80014b6 <main+0x222>
	  	          case 20: //主动上报
	  	              RobStride_01.RobStride_Motor_ProactiveEscalationSet(0x00);
 800148e:	2100      	movs	r1, #0
 8001490:	480c      	ldr	r0, [pc, #48]	@ (80014c4 <main+0x230>)
 8001492:	f7ff fd53 	bl	8000f3c <_ZN15RobStride_Motor38RobStride_Motor_ProactiveEscalationSetEh>
	  	              break;
 8001496:	e00e      	b.n	80014b6 <main+0x222>
	  	          case 21: // 波特率修改
	  	              RobStride_01.RobStride_Motor_BaudRateChange(0x01);
 8001498:	2101      	movs	r1, #1
 800149a:	480a      	ldr	r0, [pc, #40]	@ (80014c4 <main+0x230>)
 800149c:	f7ff fd0e 	bl	8000ebc <_ZN15RobStride_Motor30RobStride_Motor_BaudRateChangeEh>
	  	              break;
 80014a0:	e009      	b.n	80014b6 <main+0x222>
	  	          case 22: // MIT 参数保存
	  	              RobStride_01.RobStride_Motor_MotorDataSave();
 80014a2:	4808      	ldr	r0, [pc, #32]	@ (80014c4 <main+0x230>)
 80014a4:	f7ff fccc 	bl	8000e40 <_ZN15RobStride_Motor29RobStride_Motor_MotorDataSaveEv>
	  	              break;
 80014a8:	e005      	b.n	80014b6 <main+0x222>
	  	  				case 23: // MIT 协议切换（如切MIT协议/Canopen/私有协议）
	  	  						RobStride_01.RobStride_Motor_MIT_MotorModeSet(0x00);
 80014aa:	2100      	movs	r1, #0
 80014ac:	4805      	ldr	r0, [pc, #20]	@ (80014c4 <main+0x230>)
 80014ae:	f7ff fd85 	bl	8000fbc <_ZN15RobStride_Motor32RobStride_Motor_MIT_MotorModeSetEh>
	  	  						break;
 80014b2:	e000      	b.n	80014b6 <main+0x222>

	  	          default:
	  	              break;
 80014b4:	bf00      	nop
//	  	  }else if(cnt < 300){
//	  		  torque = 0;
//	  	  }else if(cnt < 400){
//	  		  cnt = 0;
//	  	  }
	  	  		HAL_Delay(50);
 80014b6:	2032      	movs	r0, #50	@ 0x32
 80014b8:	f000 fa44 	bl	8001944 <HAL_Delay>
	  switch(mode)
 80014bc:	e6f6      	b.n	80012ac <main+0x18>
 80014be:	bf00      	nop
 80014c0:	20000000 	.word	0x20000000
 80014c4:	200000c0 	.word	0x200000c0
 80014c8:	20000001 	.word	0x20000001
 80014cc:	00000000 	.word	0x00000000
 80014d0:	3f99999a 	.word	0x3f99999a
 80014d4:	3eb33333 	.word	0x3eb33333
 80014d8:	3fc8f5c3 	.word	0x3fc8f5c3
 80014dc:	404ccccd 	.word	0x404ccccd

080014e0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b094      	sub	sp, #80	@ 0x50
 80014e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e6:	f107 0318 	add.w	r3, r7, #24
 80014ea:	2238      	movs	r2, #56	@ 0x38
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f002 fb24 	bl	8003b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001502:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001506:	f001 fb7f 	bl	8002c08 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800150a:	2302      	movs	r3, #2
 800150c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800150e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001512:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001514:	2340      	movs	r3, #64	@ 0x40
 8001516:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001518:	2300      	movs	r3, #0
 800151a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800151c:	f107 0318 	add.w	r3, r7, #24
 8001520:	4618      	mov	r0, r3
 8001522:	f001 fc25 	bl	8002d70 <HAL_RCC_OscConfig>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	bf14      	ite	ne
 800152c:	2301      	movne	r3, #1
 800152e:	2300      	moveq	r3, #0
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <_Z18SystemClock_Configv+0x5a>
  {
    Error_Handler();
 8001536:	f000 f881 	bl	800163c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800153a:	230f      	movs	r3, #15
 800153c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800153e:	2301      	movs	r3, #1
 8001540:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800154a:	2300      	movs	r3, #0
 800154c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	2100      	movs	r1, #0
 8001552:	4618      	mov	r0, r3
 8001554:	f001 ff1e 	bl	8003394 <HAL_RCC_ClockConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	bf14      	ite	ne
 800155e:	2301      	movne	r3, #1
 8001560:	2300      	moveq	r3, #0
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8001568:	f000 f868 	bl	800163c <Error_Handler>
  }
}
 800156c:	bf00      	nop
 800156e:	3750      	adds	r7, #80	@ 0x50
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001578:	4b22      	ldr	r3, [pc, #136]	@ (8001604 <_ZL14MX_FDCAN1_Initv+0x90>)
 800157a:	4a23      	ldr	r2, [pc, #140]	@ (8001608 <_ZL14MX_FDCAN1_Initv+0x94>)
 800157c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800157e:	4b21      	ldr	r3, [pc, #132]	@ (8001604 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001580:	2200      	movs	r2, #0
 8001582:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001584:	4b1f      	ldr	r3, [pc, #124]	@ (8001604 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800158a:	4b1e      	ldr	r3, [pc, #120]	@ (8001604 <_ZL14MX_FDCAN1_Initv+0x90>)
 800158c:	2200      	movs	r2, #0
 800158e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001590:	4b1c      	ldr	r3, [pc, #112]	@ (8001604 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001592:	2200      	movs	r2, #0
 8001594:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001596:	4b1b      	ldr	r3, [pc, #108]	@ (8001604 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001598:	2200      	movs	r2, #0
 800159a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800159c:	4b19      	ldr	r3, [pc, #100]	@ (8001604 <_ZL14MX_FDCAN1_Initv+0x90>)
 800159e:	2200      	movs	r2, #0
 80015a0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 80015a2:	4b18      	ldr	r3, [pc, #96]	@ (8001604 <_ZL14MX_FDCAN1_Initv+0x90>)
 80015a4:	2202      	movs	r2, #2
 80015a6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80015a8:	4b16      	ldr	r3, [pc, #88]	@ (8001604 <_ZL14MX_FDCAN1_Initv+0x90>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 4;
 80015ae:	4b15      	ldr	r3, [pc, #84]	@ (8001604 <_ZL14MX_FDCAN1_Initv+0x90>)
 80015b0:	2204      	movs	r2, #4
 80015b2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 3;
 80015b4:	4b13      	ldr	r3, [pc, #76]	@ (8001604 <_ZL14MX_FDCAN1_Initv+0x90>)
 80015b6:	2203      	movs	r2, #3
 80015b8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80015ba:	4b12      	ldr	r3, [pc, #72]	@ (8001604 <_ZL14MX_FDCAN1_Initv+0x90>)
 80015bc:	2201      	movs	r2, #1
 80015be:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80015c0:	4b10      	ldr	r3, [pc, #64]	@ (8001604 <_ZL14MX_FDCAN1_Initv+0x90>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80015c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001604 <_ZL14MX_FDCAN1_Initv+0x90>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80015cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001604 <_ZL14MX_FDCAN1_Initv+0x90>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80015d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001604 <_ZL14MX_FDCAN1_Initv+0x90>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 1;
 80015d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001604 <_ZL14MX_FDCAN1_Initv+0x90>)
 80015da:	2201      	movs	r2, #1
 80015dc:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80015de:	4b09      	ldr	r3, [pc, #36]	@ (8001604 <_ZL14MX_FDCAN1_Initv+0x90>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80015e4:	4807      	ldr	r0, [pc, #28]	@ (8001604 <_ZL14MX_FDCAN1_Initv+0x90>)
 80015e6:	f000 fadf 	bl	8001ba8 <HAL_FDCAN_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	bf14      	ite	ne
 80015f0:	2301      	movne	r3, #1
 80015f2:	2300      	moveq	r3, #0
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 80015fa:	f000 f81f 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	2000002c 	.word	0x2000002c
 8001608:	40006400 	.word	0x40006400

0800160c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001612:	4b09      	ldr	r3, [pc, #36]	@ (8001638 <_ZL12MX_GPIO_Initv+0x2c>)
 8001614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001616:	4a08      	ldr	r2, [pc, #32]	@ (8001638 <_ZL12MX_GPIO_Initv+0x2c>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800161e:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <_ZL12MX_GPIO_Initv+0x2c>)
 8001620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40021000 	.word	0x40021000

0800163c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001640:	b672      	cpsid	i
}
 8001642:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001644:	bf00      	nop
 8001646:	e7fd      	b.n	8001644 <Error_Handler+0x8>

08001648 <_Z41__static_initialization_and_destruction_0v>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
RobStride_Motor RobStride_01(0x7F, false);
 800164c:	2200      	movs	r2, #0
 800164e:	217f      	movs	r1, #127	@ 0x7f
 8001650:	4802      	ldr	r0, [pc, #8]	@ (800165c <_Z41__static_initialization_and_destruction_0v+0x14>)
 8001652:	f7fe fde1 	bl	8000218 <_ZN15RobStride_MotorC1Ehb>
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200000c0 	.word	0x200000c0

08001660 <_GLOBAL__sub_I_hfdcan1>:
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
 8001664:	f7ff fff0 	bl	8001648 <_Z41__static_initialization_and_destruction_0v>
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001672:	4b0f      	ldr	r3, [pc, #60]	@ (80016b0 <HAL_MspInit+0x44>)
 8001674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001676:	4a0e      	ldr	r2, [pc, #56]	@ (80016b0 <HAL_MspInit+0x44>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6613      	str	r3, [r2, #96]	@ 0x60
 800167e:	4b0c      	ldr	r3, [pc, #48]	@ (80016b0 <HAL_MspInit+0x44>)
 8001680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800168a:	4b09      	ldr	r3, [pc, #36]	@ (80016b0 <HAL_MspInit+0x44>)
 800168c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800168e:	4a08      	ldr	r2, [pc, #32]	@ (80016b0 <HAL_MspInit+0x44>)
 8001690:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001694:	6593      	str	r3, [r2, #88]	@ 0x58
 8001696:	4b06      	ldr	r3, [pc, #24]	@ (80016b0 <HAL_MspInit+0x44>)
 8001698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800169a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800169e:	603b      	str	r3, [r7, #0]
 80016a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80016a2:	f001 fb55 	bl	8002d50 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40021000 	.word	0x40021000

080016b4 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b09a      	sub	sp, #104	@ 0x68
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016cc:	f107 0310 	add.w	r3, r7, #16
 80016d0:	2244      	movs	r2, #68	@ 0x44
 80016d2:	2100      	movs	r1, #0
 80016d4:	4618      	mov	r0, r3
 80016d6:	f002 fa31 	bl	8003b3c <memset>
  if(hfdcan->Instance==FDCAN1)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a24      	ldr	r2, [pc, #144]	@ (8001770 <HAL_FDCAN_MspInit+0xbc>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d141      	bne.n	8001768 <HAL_FDCAN_MspInit+0xb4>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80016e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016e8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80016ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80016ee:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016f0:	f107 0310 	add.w	r3, r7, #16
 80016f4:	4618      	mov	r0, r3
 80016f6:	f002 f831 	bl	800375c <HAL_RCCEx_PeriphCLKConfig>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001700:	f7ff ff9c 	bl	800163c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001704:	4b1b      	ldr	r3, [pc, #108]	@ (8001774 <HAL_FDCAN_MspInit+0xc0>)
 8001706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001708:	4a1a      	ldr	r2, [pc, #104]	@ (8001774 <HAL_FDCAN_MspInit+0xc0>)
 800170a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800170e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001710:	4b18      	ldr	r3, [pc, #96]	@ (8001774 <HAL_FDCAN_MspInit+0xc0>)
 8001712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001714:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171c:	4b15      	ldr	r3, [pc, #84]	@ (8001774 <HAL_FDCAN_MspInit+0xc0>)
 800171e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001720:	4a14      	ldr	r2, [pc, #80]	@ (8001774 <HAL_FDCAN_MspInit+0xc0>)
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001728:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <HAL_FDCAN_MspInit+0xc0>)
 800172a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001734:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001738:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173a:	2302      	movs	r3, #2
 800173c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001742:	2300      	movs	r3, #0
 8001744:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001746:	2309      	movs	r3, #9
 8001748:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800174e:	4619      	mov	r1, r3
 8001750:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001754:	f001 f8d6 	bl	8002904 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001758:	2200      	movs	r2, #0
 800175a:	2100      	movs	r1, #0
 800175c:	2015      	movs	r0, #21
 800175e:	f000 f9ee 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001762:	2015      	movs	r0, #21
 8001764:	f000 fa05 	bl	8001b72 <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8001768:	bf00      	nop
 800176a:	3768      	adds	r7, #104	@ 0x68
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40006400 	.word	0x40006400
 8001774:	40021000 	.word	0x40021000

08001778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <NMI_Handler+0x4>

08001780 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <HardFault_Handler+0x4>

08001788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800178c:	bf00      	nop
 800178e:	e7fd      	b.n	800178c <MemManage_Handler+0x4>

08001790 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001794:	bf00      	nop
 8001796:	e7fd      	b.n	8001794 <BusFault_Handler+0x4>

08001798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800179c:	bf00      	nop
 800179e:	e7fd      	b.n	800179c <UsageFault_Handler+0x4>

080017a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ce:	f000 f89b 	bl	8001908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80017dc:	4802      	ldr	r0, [pc, #8]	@ (80017e8 <FDCAN1_IT0_IRQHandler+0x10>)
 80017de:	f000 fe23 	bl	8002428 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	2000002c 	.word	0x2000002c

080017ec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017f0:	4b06      	ldr	r3, [pc, #24]	@ (800180c <SystemInit+0x20>)
 80017f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017f6:	4a05      	ldr	r2, [pc, #20]	@ (800180c <SystemInit+0x20>)
 80017f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001810:	480d      	ldr	r0, [pc, #52]	@ (8001848 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001812:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001814:	f7ff ffea 	bl	80017ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001818:	480c      	ldr	r0, [pc, #48]	@ (800184c <LoopForever+0x6>)
  ldr r1, =_edata
 800181a:	490d      	ldr	r1, [pc, #52]	@ (8001850 <LoopForever+0xa>)
  ldr r2, =_sidata
 800181c:	4a0d      	ldr	r2, [pc, #52]	@ (8001854 <LoopForever+0xe>)
  movs r3, #0
 800181e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001820:	e002      	b.n	8001828 <LoopCopyDataInit>

08001822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001826:	3304      	adds	r3, #4

08001828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800182a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800182c:	d3f9      	bcc.n	8001822 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800182e:	4a0a      	ldr	r2, [pc, #40]	@ (8001858 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001830:	4c0a      	ldr	r4, [pc, #40]	@ (800185c <LoopForever+0x16>)
  movs r3, #0
 8001832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001834:	e001      	b.n	800183a <LoopFillZerobss>

08001836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001838:	3204      	adds	r2, #4

0800183a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800183a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800183c:	d3fb      	bcc.n	8001836 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800183e:	f002 f985 	bl	8003b4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001842:	f7ff fd27 	bl	8001294 <main>

08001846 <LoopForever>:

LoopForever:
    b LoopForever
 8001846:	e7fe      	b.n	8001846 <LoopForever>
  ldr   r0, =_estack
 8001848:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800184c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001850:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001854:	08003bf8 	.word	0x08003bf8
  ldr r2, =_sbss
 8001858:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800185c:	200001a4 	.word	0x200001a4

08001860 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001860:	e7fe      	b.n	8001860 <ADC1_2_IRQHandler>

08001862 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001868:	2300      	movs	r3, #0
 800186a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800186c:	2003      	movs	r0, #3
 800186e:	f000 f95b 	bl	8001b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001872:	200f      	movs	r0, #15
 8001874:	f000 f80e 	bl	8001894 <HAL_InitTick>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d002      	beq.n	8001884 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	71fb      	strb	r3, [r7, #7]
 8001882:	e001      	b.n	8001888 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001884:	f7ff fef2 	bl	800166c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001888:	79fb      	ldrb	r3, [r7, #7]

}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800189c:	2300      	movs	r3, #0
 800189e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80018a0:	4b16      	ldr	r3, [pc, #88]	@ (80018fc <HAL_InitTick+0x68>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d022      	beq.n	80018ee <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80018a8:	4b15      	ldr	r3, [pc, #84]	@ (8001900 <HAL_InitTick+0x6c>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4b13      	ldr	r3, [pc, #76]	@ (80018fc <HAL_InitTick+0x68>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80018b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80018b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018bc:	4618      	mov	r0, r3
 80018be:	f000 f966 	bl	8001b8e <HAL_SYSTICK_Config>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d10f      	bne.n	80018e8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b0f      	cmp	r3, #15
 80018cc:	d809      	bhi.n	80018e2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018ce:	2200      	movs	r2, #0
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	f04f 30ff 	mov.w	r0, #4294967295
 80018d6:	f000 f932 	bl	8001b3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018da:	4a0a      	ldr	r2, [pc, #40]	@ (8001904 <HAL_InitTick+0x70>)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	e007      	b.n	80018f2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	73fb      	strb	r3, [r7, #15]
 80018e6:	e004      	b.n	80018f2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	73fb      	strb	r3, [r7, #15]
 80018ec:	e001      	b.n	80018f2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	2000000c 	.word	0x2000000c
 8001900:	20000004 	.word	0x20000004
 8001904:	20000008 	.word	0x20000008

08001908 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800190c:	4b05      	ldr	r3, [pc, #20]	@ (8001924 <HAL_IncTick+0x1c>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	4b05      	ldr	r3, [pc, #20]	@ (8001928 <HAL_IncTick+0x20>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4413      	add	r3, r2
 8001916:	4a03      	ldr	r2, [pc, #12]	@ (8001924 <HAL_IncTick+0x1c>)
 8001918:	6013      	str	r3, [r2, #0]
}
 800191a:	bf00      	nop
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	200001a0 	.word	0x200001a0
 8001928:	2000000c 	.word	0x2000000c

0800192c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return uwTick;
 8001930:	4b03      	ldr	r3, [pc, #12]	@ (8001940 <HAL_GetTick+0x14>)
 8001932:	681b      	ldr	r3, [r3, #0]
}
 8001934:	4618      	mov	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	200001a0 	.word	0x200001a0

08001944 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800194c:	f7ff ffee 	bl	800192c <HAL_GetTick>
 8001950:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800195c:	d004      	beq.n	8001968 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800195e:	4b09      	ldr	r3, [pc, #36]	@ (8001984 <HAL_Delay+0x40>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	4413      	add	r3, r2
 8001966:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001968:	bf00      	nop
 800196a:	f7ff ffdf 	bl	800192c <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	429a      	cmp	r2, r3
 8001978:	d8f7      	bhi.n	800196a <HAL_Delay+0x26>
  {
  }
}
 800197a:	bf00      	nop
 800197c:	bf00      	nop
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	2000000c 	.word	0x2000000c

08001988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001998:	4b0c      	ldr	r3, [pc, #48]	@ (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019a4:	4013      	ands	r3, r2
 80019a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ba:	4a04      	ldr	r2, [pc, #16]	@ (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	60d3      	str	r3, [r2, #12]
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d4:	4b04      	ldr	r3, [pc, #16]	@ (80019e8 <__NVIC_GetPriorityGrouping+0x18>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	f003 0307 	and.w	r3, r3, #7
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	db0b      	blt.n	8001a16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	f003 021f 	and.w	r2, r3, #31
 8001a04:	4907      	ldr	r1, [pc, #28]	@ (8001a24 <__NVIC_EnableIRQ+0x38>)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000e100 	.word	0xe000e100

08001a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	6039      	str	r1, [r7, #0]
 8001a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	db0a      	blt.n	8001a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	490c      	ldr	r1, [pc, #48]	@ (8001a74 <__NVIC_SetPriority+0x4c>)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	0112      	lsls	r2, r2, #4
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a50:	e00a      	b.n	8001a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	4908      	ldr	r1, [pc, #32]	@ (8001a78 <__NVIC_SetPriority+0x50>)
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	3b04      	subs	r3, #4
 8001a60:	0112      	lsls	r2, r2, #4
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	440b      	add	r3, r1
 8001a66:	761a      	strb	r2, [r3, #24]
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000e100 	.word	0xe000e100
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b089      	sub	sp, #36	@ 0x24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f1c3 0307 	rsb	r3, r3, #7
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	bf28      	it	cs
 8001a9a:	2304      	movcs	r3, #4
 8001a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	2b06      	cmp	r3, #6
 8001aa4:	d902      	bls.n	8001aac <NVIC_EncodePriority+0x30>
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3b03      	subs	r3, #3
 8001aaa:	e000      	b.n	8001aae <NVIC_EncodePriority+0x32>
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43da      	mvns	r2, r3
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	401a      	ands	r2, r3
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ace:	43d9      	mvns	r1, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad4:	4313      	orrs	r3, r2
         );
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3724      	adds	r7, #36	@ 0x24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
	...

08001ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001af4:	d301      	bcc.n	8001afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001af6:	2301      	movs	r3, #1
 8001af8:	e00f      	b.n	8001b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afa:	4a0a      	ldr	r2, [pc, #40]	@ (8001b24 <SysTick_Config+0x40>)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b02:	210f      	movs	r1, #15
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295
 8001b08:	f7ff ff8e 	bl	8001a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b0c:	4b05      	ldr	r3, [pc, #20]	@ (8001b24 <SysTick_Config+0x40>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b12:	4b04      	ldr	r3, [pc, #16]	@ (8001b24 <SysTick_Config+0x40>)
 8001b14:	2207      	movs	r2, #7
 8001b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	e000e010 	.word	0xe000e010

08001b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff ff29 	bl	8001988 <__NVIC_SetPriorityGrouping>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b086      	sub	sp, #24
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	4603      	mov	r3, r0
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
 8001b4a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b4c:	f7ff ff40 	bl	80019d0 <__NVIC_GetPriorityGrouping>
 8001b50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	68b9      	ldr	r1, [r7, #8]
 8001b56:	6978      	ldr	r0, [r7, #20]
 8001b58:	f7ff ff90 	bl	8001a7c <NVIC_EncodePriority>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b62:	4611      	mov	r1, r2
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ff5f 	bl	8001a28 <__NVIC_SetPriority>
}
 8001b6a:	bf00      	nop
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4603      	mov	r3, r0
 8001b7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ff33 	bl	80019ec <__NVIC_EnableIRQ>
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff ffa4 	bl	8001ae4 <SysTick_Config>
 8001b9c:	4603      	mov	r3, r0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
	...

08001ba8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e147      	b.n	8001e4a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d106      	bne.n	8001bd4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff fd70 	bl	80016b4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	699a      	ldr	r2, [r3, #24]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0210 	bic.w	r2, r2, #16
 8001be2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001be4:	f7ff fea2 	bl	800192c <HAL_GetTick>
 8001be8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001bea:	e012      	b.n	8001c12 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001bec:	f7ff fe9e 	bl	800192c <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b0a      	cmp	r3, #10
 8001bf8:	d90b      	bls.n	8001c12 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bfe:	f043 0201 	orr.w	r2, r3, #1
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2203      	movs	r2, #3
 8001c0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e11b      	b.n	8001e4a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	f003 0308 	and.w	r3, r3, #8
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	d0e5      	beq.n	8001bec <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	699a      	ldr	r2, [r3, #24]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f042 0201 	orr.w	r2, r2, #1
 8001c2e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c30:	f7ff fe7c 	bl	800192c <HAL_GetTick>
 8001c34:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001c36:	e012      	b.n	8001c5e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001c38:	f7ff fe78 	bl	800192c <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b0a      	cmp	r3, #10
 8001c44:	d90b      	bls.n	8001c5e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c4a:	f043 0201 	orr.w	r2, r3, #1
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2203      	movs	r2, #3
 8001c56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e0f5      	b.n	8001e4a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0e5      	beq.n	8001c38 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	699a      	ldr	r2, [r3, #24]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f042 0202 	orr.w	r2, r2, #2
 8001c7a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a74      	ldr	r2, [pc, #464]	@ (8001e54 <HAL_FDCAN_Init+0x2ac>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d103      	bne.n	8001c8e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001c86:	4a74      	ldr	r2, [pc, #464]	@ (8001e58 <HAL_FDCAN_Init+0x2b0>)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	7c1b      	ldrb	r3, [r3, #16]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d108      	bne.n	8001ca8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	699a      	ldr	r2, [r3, #24]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ca4:	619a      	str	r2, [r3, #24]
 8001ca6:	e007      	b.n	8001cb8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	699a      	ldr	r2, [r3, #24]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001cb6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	7c5b      	ldrb	r3, [r3, #17]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d108      	bne.n	8001cd2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	699a      	ldr	r2, [r3, #24]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001cce:	619a      	str	r2, [r3, #24]
 8001cd0:	e007      	b.n	8001ce2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	699a      	ldr	r2, [r3, #24]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001ce0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	7c9b      	ldrb	r3, [r3, #18]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d108      	bne.n	8001cfc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	699a      	ldr	r2, [r3, #24]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001cf8:	619a      	str	r2, [r3, #24]
 8001cfa:	e007      	b.n	8001d0c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	699a      	ldr	r2, [r3, #24]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001d0a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689a      	ldr	r2, [r3, #8]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	699a      	ldr	r2, [r3, #24]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001d30:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	691a      	ldr	r2, [r3, #16]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0210 	bic.w	r2, r2, #16
 8001d40:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d108      	bne.n	8001d5c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	699a      	ldr	r2, [r3, #24]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f042 0204 	orr.w	r2, r2, #4
 8001d58:	619a      	str	r2, [r3, #24]
 8001d5a:	e02c      	b.n	8001db6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d028      	beq.n	8001db6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d01c      	beq.n	8001da6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	699a      	ldr	r2, [r3, #24]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d7a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	691a      	ldr	r2, [r3, #16]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0210 	orr.w	r2, r2, #16
 8001d8a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	2b03      	cmp	r3, #3
 8001d92:	d110      	bne.n	8001db6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	699a      	ldr	r2, [r3, #24]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0220 	orr.w	r2, r2, #32
 8001da2:	619a      	str	r2, [r3, #24]
 8001da4:	e007      	b.n	8001db6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	699a      	ldr	r2, [r3, #24]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f042 0220 	orr.w	r2, r2, #32
 8001db4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001dc6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001dce:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001dde:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001de0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001dea:	d115      	bne.n	8001e18 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df6:	3b01      	subs	r3, #1
 8001df8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001dfa:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e00:	3b01      	subs	r3, #1
 8001e02:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001e04:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001e14:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001e16:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 fc96 	bl	8002760 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40006400 	.word	0x40006400
 8001e58:	40006500 	.word	0x40006500

08001e5c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b087      	sub	sp, #28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001e6c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001e6e:	7dfb      	ldrb	r3, [r7, #23]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d002      	beq.n	8001e7a <HAL_FDCAN_ConfigFilter+0x1e>
 8001e74:	7dfb      	ldrb	r3, [r7, #23]
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d13d      	bne.n	8001ef6 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d119      	bne.n	8001eb6 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001e8e:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8001e96:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	e01d      	b.n	8001ef2 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	075a      	lsls	r2, r3, #29
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	079a      	lsls	r2, r3, #30
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	4413      	add	r3, r2
 8001ede:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	3304      	adds	r3, #4
 8001eea:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	e006      	b.n	8001f04 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001efa:	f043 0202 	orr.w	r2, r3, #2
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
  }
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	371c      	adds	r7, #28
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
 8001f1c:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d116      	bne.n	8001f58 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f32:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	011a      	lsls	r2, r3, #4
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	431a      	orrs	r2, r3
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8001f54:	2300      	movs	r3, #0
 8001f56:	e006      	b.n	8001f66 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f5c:	f043 0204 	orr.w	r2, r3, #4
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
  }
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d110      	bne.n	8001fa8 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2202      	movs	r2, #2
 8001f8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	699a      	ldr	r2, [r3, #24]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0201 	bic.w	r2, r2, #1
 8001f9c:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	e006      	b.n	8001fb6 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fac:	f043 0204 	orr.w	r2, r3, #4
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
  }
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b086      	sub	sp, #24
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	60f8      	str	r0, [r7, #12]
 8001fca:	60b9      	str	r1, [r7, #8]
 8001fcc:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d12c      	bne.n	8002034 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001fe2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d007      	beq.n	8001ffa <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fee:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e023      	b.n	8002042 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002002:	0c1b      	lsrs	r3, r3, #16
 8002004:	f003 0303 	and.w	r3, r3, #3
 8002008:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	68b9      	ldr	r1, [r7, #8]
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f000 fbfb 	bl	800280c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2101      	movs	r1, #1
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	fa01 f202 	lsl.w	r2, r1, r2
 8002022:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002026:	2201      	movs	r2, #1
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	409a      	lsls	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8002030:	2300      	movs	r3, #0
 8002032:	e006      	b.n	8002042 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002038:	f043 0208 	orr.w	r2, r3, #8
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
  }
}
 8002042:	4618      	mov	r0, r3
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800204c:	b480      	push	{r7}
 800204e:	b08b      	sub	sp, #44	@ 0x2c
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
 8002058:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002064:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8002066:	7efb      	ldrb	r3, [r7, #27]
 8002068:	2b02      	cmp	r3, #2
 800206a:	f040 80e8 	bne.w	800223e <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	2b40      	cmp	r3, #64	@ 0x40
 8002072:	d137      	bne.n	80020e4 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800207c:	f003 030f 	and.w	r3, r3, #15
 8002080:	2b00      	cmp	r3, #0
 8002082:	d107      	bne.n	8002094 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002088:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e0db      	b.n	800224c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800209c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020a4:	d10a      	bne.n	80020bc <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020b6:	d101      	bne.n	80020bc <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80020b8:	2301      	movs	r3, #1
 80020ba:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c4:	0a1b      	lsrs	r3, r3, #8
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	69fa      	ldr	r2, [r7, #28]
 80020cc:	4413      	add	r3, r2
 80020ce:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80020d4:	69fa      	ldr	r2, [r7, #28]
 80020d6:	4613      	mov	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	4413      	add	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	440b      	add	r3, r1
 80020e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80020e2:	e036      	b.n	8002152 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020ec:	f003 030f 	and.w	r3, r3, #15
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d107      	bne.n	8002104 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020f8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e0a3      	b.n	800224c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800210c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002110:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002114:	d10a      	bne.n	800212c <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800211e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002122:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002126:	d101      	bne.n	800212c <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002128:	2301      	movs	r3, #1
 800212a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002134:	0a1b      	lsrs	r3, r3, #8
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	69fa      	ldr	r2, [r7, #28]
 800213c:	4413      	add	r3, r2
 800213e:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002144:	69fa      	ldr	r2, [r7, #28]
 8002146:	4613      	mov	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	4413      	add	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	440b      	add	r3, r1
 8002150:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d107      	bne.n	8002176 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8002166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	0c9b      	lsrs	r3, r3, #18
 800216c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	e005      	b.n	8002182 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8002176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8002182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800218e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800219a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219c:	3304      	adds	r3, #4
 800219e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80021a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80021aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	0c1b      	lsrs	r3, r3, #16
 80021b0:	f003 020f 	and.w	r2, r3, #15
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80021b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80021c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80021d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	0e1b      	lsrs	r3, r3, #24
 80021d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80021de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	0fda      	lsrs	r2, r3, #31
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80021e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ea:	3304      	adds	r3, #4
 80021ec:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80021ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80021f2:	2300      	movs	r3, #0
 80021f4:	623b      	str	r3, [r7, #32]
 80021f6:	e00a      	b.n	800220e <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	6a3b      	ldr	r3, [r7, #32]
 80021fc:	441a      	add	r2, r3
 80021fe:	6839      	ldr	r1, [r7, #0]
 8002200:	6a3b      	ldr	r3, [r7, #32]
 8002202:	440b      	add	r3, r1
 8002204:	7812      	ldrb	r2, [r2, #0]
 8002206:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8002208:	6a3b      	ldr	r3, [r7, #32]
 800220a:	3301      	adds	r3, #1
 800220c:	623b      	str	r3, [r7, #32]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	4a11      	ldr	r2, [pc, #68]	@ (8002258 <HAL_FDCAN_GetRxMessage+0x20c>)
 8002214:	5cd3      	ldrb	r3, [r2, r3]
 8002216:	461a      	mov	r2, r3
 8002218:	6a3b      	ldr	r3, [r7, #32]
 800221a:	4293      	cmp	r3, r2
 800221c:	d3ec      	bcc.n	80021f8 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2b40      	cmp	r3, #64	@ 0x40
 8002222:	d105      	bne.n	8002230 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	69fa      	ldr	r2, [r7, #28]
 800222a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800222e:	e004      	b.n	800223a <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	69fa      	ldr	r2, [r7, #28]
 8002236:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800223a:	2300      	movs	r3, #0
 800223c:	e006      	b.n	800224c <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002242:	f043 0208 	orr.w	r2, r3, #8
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
  }
}
 800224c:	4618      	mov	r0, r3
 800224e:	372c      	adds	r7, #44	@ 0x2c
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	08003bdc 	.word	0x08003bdc

0800225c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800225c:	b480      	push	{r7}
 800225e:	b087      	sub	sp, #28
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800226e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002270:	7dfb      	ldrb	r3, [r7, #23]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d003      	beq.n	800227e <HAL_FDCAN_ActivateNotification+0x22>
 8002276:	7dfb      	ldrb	r3, [r7, #23]
 8002278:	2b02      	cmp	r3, #2
 800227a:	f040 80c8 	bne.w	800240e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002284:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	2b00      	cmp	r3, #0
 800228e:	d004      	beq.n	800229a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d03b      	beq.n	8002312 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d004      	beq.n	80022ae <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d031      	beq.n	8002312 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d004      	beq.n	80022c2 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	f003 0304 	and.w	r3, r3, #4
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d027      	beq.n	8002312 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d004      	beq.n	80022d6 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d01d      	beq.n	8002312 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d004      	beq.n	80022ea <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	f003 0310 	and.w	r3, r3, #16
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d013      	beq.n	8002312 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d004      	beq.n	80022fe <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	f003 0320 	and.w	r3, r3, #32
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d009      	beq.n	8002312 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00c      	beq.n	8002322 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800230e:	2b00      	cmp	r3, #0
 8002310:	d107      	bne.n	8002322 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f042 0201 	orr.w	r2, r2, #1
 8002320:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	2b00      	cmp	r3, #0
 800232a:	d004      	beq.n	8002336 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b00      	cmp	r3, #0
 8002334:	d13b      	bne.n	80023ae <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800233c:	2b00      	cmp	r3, #0
 800233e:	d004      	beq.n	800234a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d131      	bne.n	80023ae <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002350:	2b00      	cmp	r3, #0
 8002352:	d004      	beq.n	800235e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	2b00      	cmp	r3, #0
 800235c:	d127      	bne.n	80023ae <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002364:	2b00      	cmp	r3, #0
 8002366:	d004      	beq.n	8002372 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	2b00      	cmp	r3, #0
 8002370:	d11d      	bne.n	80023ae <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002378:	2b00      	cmp	r3, #0
 800237a:	d004      	beq.n	8002386 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	f003 0310 	and.w	r3, r3, #16
 8002382:	2b00      	cmp	r3, #0
 8002384:	d113      	bne.n	80023ae <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800238c:	2b00      	cmp	r3, #0
 800238e:	d004      	beq.n	800239a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	f003 0320 	and.w	r3, r3, #32
 8002396:	2b00      	cmp	r3, #0
 8002398:	d109      	bne.n	80023ae <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00c      	beq.n	80023be <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d007      	beq.n	80023be <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f042 0202 	orr.w	r2, r2, #2
 80023bc:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d009      	beq.n	80023dc <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d009      	beq.n	80023fa <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68ba      	ldr	r2, [r7, #8]
 8002406:	430a      	orrs	r2, r1
 8002408:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 800240a:	2300      	movs	r3, #0
 800240c:	e006      	b.n	800241c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002412:	f043 0202 	orr.w	r2, r3, #2
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
  }
}
 800241c:	4618      	mov	r0, r3
 800241e:	371c      	adds	r7, #28
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08c      	sub	sp, #48	@ 0x30
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002436:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800243a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002442:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002444:	4013      	ands	r3, r2
 8002446:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800245a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800245c:	4013      	ands	r3, r2
 800245e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002466:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800246a:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002472:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002474:	4013      	ands	r3, r2
 8002476:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800247e:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8002482:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800248a:	6a3a      	ldr	r2, [r7, #32]
 800248c:	4013      	ands	r3, r2
 800248e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002496:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800249a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a2:	69fa      	ldr	r2, [r7, #28]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ae:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024b6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	099b      	lsrs	r3, r3, #6
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00c      	beq.n	80024de <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	099b      	lsrs	r3, r3, #6
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d006      	beq.n	80024de <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2240      	movs	r2, #64	@ 0x40
 80024d6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 f922 	bl	8002722 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	0a1b      	lsrs	r3, r3, #8
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d01a      	beq.n	8002520 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	0a1b      	lsrs	r3, r3, #8
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d014      	beq.n	8002520 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80024fe:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	4013      	ands	r3, r2
 800250c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002516:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002518:	6939      	ldr	r1, [r7, #16]
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f8e2 	bl	80026e4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002522:	2b00      	cmp	r3, #0
 8002524:	d007      	beq.n	8002536 <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800252c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800252e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f8ac 	bl	800268e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8002536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002538:	2b00      	cmp	r3, #0
 800253a:	d007      	beq.n	800254c <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002542:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002544:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7fe fe82 	bl	8001250 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800254c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254e:	2b00      	cmp	r3, #0
 8002550:	d007      	beq.n	8002562 <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002558:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800255a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 f8a1 	bl	80026a4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	0a5b      	lsrs	r3, r3, #9
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00d      	beq.n	800258a <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	0a5b      	lsrs	r3, r3, #9
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d007      	beq.n	800258a <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002582:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 f898 	bl	80026ba <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	09db      	lsrs	r3, r3, #7
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d019      	beq.n	80025ca <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	09db      	lsrs	r3, r3, #7
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d013      	beq.n	80025ca <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80025aa:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	4013      	ands	r3, r2
 80025b8:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2280      	movs	r2, #128	@ 0x80
 80025c0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80025c2:	68f9      	ldr	r1, [r7, #12]
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f882 	bl	80026ce <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	0b5b      	lsrs	r3, r3, #13
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00d      	beq.n	80025f2 <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	0b5b      	lsrs	r3, r3, #13
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d007      	beq.n	80025f2 <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025ea:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f884 	bl	80026fa <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	0bdb      	lsrs	r3, r3, #15
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00d      	beq.n	800261a <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	0bdb      	lsrs	r3, r3, #15
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d007      	beq.n	800261a <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002612:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 f87a 	bl	800270e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	0b9b      	lsrs	r3, r3, #14
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d010      	beq.n	8002648 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	0b9b      	lsrs	r3, r3, #14
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00a      	beq.n	8002648 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800263a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002640:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d007      	beq.n	800265e <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	69fa      	ldr	r2, [r7, #28]
 8002654:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002656:	69f9      	ldr	r1, [r7, #28]
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 f876 	bl	800274a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800265e:	6a3b      	ldr	r3, [r7, #32]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d009      	beq.n	8002678 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6a3a      	ldr	r2, [r7, #32]
 800266a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002670:	6a3b      	ldr	r3, [r7, #32]
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800267c:	2b00      	cmp	r3, #0
 800267e:	d002      	beq.n	8002686 <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 f858 	bl	8002736 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002686:	bf00      	nop
 8002688:	3730      	adds	r7, #48	@ 0x30
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
 80026d6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
 8002752:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002768:	4b27      	ldr	r3, [pc, #156]	@ (8002808 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800276a:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800277a:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002782:	041a      	lsls	r2, r3, #16
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027a0:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027a8:	061a      	lsls	r2, r3, #24
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	e005      	b.n	80027ee <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	3304      	adds	r3, #4
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d3f3      	bcc.n	80027e2 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80027fa:	bf00      	nop
 80027fc:	bf00      	nop
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	4000a400 	.word	0x4000a400

0800280c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 800280c:	b480      	push	{r7}
 800280e:	b089      	sub	sp, #36	@ 0x24
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
 8002818:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10a      	bne.n	8002838 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800282a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002832:	4313      	orrs	r3, r2
 8002834:	61fb      	str	r3, [r7, #28]
 8002836:	e00a      	b.n	800284e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002840:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002846:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002848:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800284c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002858:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800285e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002864:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800286c:	4313      	orrs	r3, r2
 800286e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	4613      	mov	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	4413      	add	r3, r2
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	440b      	add	r3, r1
 8002880:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	69fa      	ldr	r2, [r7, #28]
 8002886:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	3304      	adds	r3, #4
 800288c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	3304      	adds	r3, #4
 8002898:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800289a:	2300      	movs	r3, #0
 800289c:	617b      	str	r3, [r7, #20]
 800289e:	e020      	b.n	80028e2 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	3303      	adds	r3, #3
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	4413      	add	r3, r2
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	3302      	adds	r3, #2
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	440b      	add	r3, r1
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80028b8:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	3301      	adds	r3, #1
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	440b      	add	r3, r1
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80028c6:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	440a      	add	r2, r1
 80028ce:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80028d0:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	3304      	adds	r3, #4
 80028da:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	3304      	adds	r3, #4
 80028e0:	617b      	str	r3, [r7, #20]
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	4a06      	ldr	r2, [pc, #24]	@ (8002900 <FDCAN_CopyMessageToRAM+0xf4>)
 80028e8:	5cd3      	ldrb	r3, [r2, r3]
 80028ea:	461a      	mov	r2, r3
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d3d6      	bcc.n	80028a0 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80028f2:	bf00      	nop
 80028f4:	bf00      	nop
 80028f6:	3724      	adds	r7, #36	@ 0x24
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	08003bdc 	.word	0x08003bdc

08002904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002912:	e15a      	b.n	8002bca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	2101      	movs	r1, #1
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	fa01 f303 	lsl.w	r3, r1, r3
 8002920:	4013      	ands	r3, r2
 8002922:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 814c 	beq.w	8002bc4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 0303 	and.w	r3, r3, #3
 8002934:	2b01      	cmp	r3, #1
 8002936:	d005      	beq.n	8002944 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002940:	2b02      	cmp	r3, #2
 8002942:	d130      	bne.n	80029a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	2203      	movs	r2, #3
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	43db      	mvns	r3, r3
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	4013      	ands	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4313      	orrs	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800297a:	2201      	movs	r2, #1
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	43db      	mvns	r3, r3
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4013      	ands	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	091b      	lsrs	r3, r3, #4
 8002990:	f003 0201 	and.w	r2, r3, #1
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	4313      	orrs	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f003 0303 	and.w	r3, r3, #3
 80029ae:	2b03      	cmp	r3, #3
 80029b0:	d017      	beq.n	80029e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	2203      	movs	r2, #3
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43db      	mvns	r3, r3
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	4013      	ands	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	689a      	ldr	r2, [r3, #8]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	4313      	orrs	r3, r2
 80029da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d123      	bne.n	8002a36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	08da      	lsrs	r2, r3, #3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	3208      	adds	r2, #8
 80029f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	220f      	movs	r2, #15
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	691a      	ldr	r2, [r3, #16]
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	08da      	lsrs	r2, r3, #3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3208      	adds	r2, #8
 8002a30:	6939      	ldr	r1, [r7, #16]
 8002a32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	2203      	movs	r2, #3
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	43db      	mvns	r3, r3
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f003 0203 	and.w	r2, r3, #3
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 80a6 	beq.w	8002bc4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a78:	4b5b      	ldr	r3, [pc, #364]	@ (8002be8 <HAL_GPIO_Init+0x2e4>)
 8002a7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a7c:	4a5a      	ldr	r2, [pc, #360]	@ (8002be8 <HAL_GPIO_Init+0x2e4>)
 8002a7e:	f043 0301 	orr.w	r3, r3, #1
 8002a82:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a84:	4b58      	ldr	r3, [pc, #352]	@ (8002be8 <HAL_GPIO_Init+0x2e4>)
 8002a86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a90:	4a56      	ldr	r2, [pc, #344]	@ (8002bec <HAL_GPIO_Init+0x2e8>)
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	089b      	lsrs	r3, r3, #2
 8002a96:	3302      	adds	r3, #2
 8002a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f003 0303 	and.w	r3, r3, #3
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	220f      	movs	r2, #15
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002aba:	d01f      	beq.n	8002afc <HAL_GPIO_Init+0x1f8>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a4c      	ldr	r2, [pc, #304]	@ (8002bf0 <HAL_GPIO_Init+0x2ec>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d019      	beq.n	8002af8 <HAL_GPIO_Init+0x1f4>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a4b      	ldr	r2, [pc, #300]	@ (8002bf4 <HAL_GPIO_Init+0x2f0>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d013      	beq.n	8002af4 <HAL_GPIO_Init+0x1f0>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a4a      	ldr	r2, [pc, #296]	@ (8002bf8 <HAL_GPIO_Init+0x2f4>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d00d      	beq.n	8002af0 <HAL_GPIO_Init+0x1ec>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a49      	ldr	r2, [pc, #292]	@ (8002bfc <HAL_GPIO_Init+0x2f8>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d007      	beq.n	8002aec <HAL_GPIO_Init+0x1e8>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a48      	ldr	r2, [pc, #288]	@ (8002c00 <HAL_GPIO_Init+0x2fc>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d101      	bne.n	8002ae8 <HAL_GPIO_Init+0x1e4>
 8002ae4:	2305      	movs	r3, #5
 8002ae6:	e00a      	b.n	8002afe <HAL_GPIO_Init+0x1fa>
 8002ae8:	2306      	movs	r3, #6
 8002aea:	e008      	b.n	8002afe <HAL_GPIO_Init+0x1fa>
 8002aec:	2304      	movs	r3, #4
 8002aee:	e006      	b.n	8002afe <HAL_GPIO_Init+0x1fa>
 8002af0:	2303      	movs	r3, #3
 8002af2:	e004      	b.n	8002afe <HAL_GPIO_Init+0x1fa>
 8002af4:	2302      	movs	r3, #2
 8002af6:	e002      	b.n	8002afe <HAL_GPIO_Init+0x1fa>
 8002af8:	2301      	movs	r3, #1
 8002afa:	e000      	b.n	8002afe <HAL_GPIO_Init+0x1fa>
 8002afc:	2300      	movs	r3, #0
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	f002 0203 	and.w	r2, r2, #3
 8002b04:	0092      	lsls	r2, r2, #2
 8002b06:	4093      	lsls	r3, r2
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b0e:	4937      	ldr	r1, [pc, #220]	@ (8002bec <HAL_GPIO_Init+0x2e8>)
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	089b      	lsrs	r3, r3, #2
 8002b14:	3302      	adds	r3, #2
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b1c:	4b39      	ldr	r3, [pc, #228]	@ (8002c04 <HAL_GPIO_Init+0x300>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	43db      	mvns	r3, r3
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d003      	beq.n	8002b40 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b40:	4a30      	ldr	r2, [pc, #192]	@ (8002c04 <HAL_GPIO_Init+0x300>)
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b46:	4b2f      	ldr	r3, [pc, #188]	@ (8002c04 <HAL_GPIO_Init+0x300>)
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	4013      	ands	r3, r2
 8002b54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b6a:	4a26      	ldr	r2, [pc, #152]	@ (8002c04 <HAL_GPIO_Init+0x300>)
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002b70:	4b24      	ldr	r3, [pc, #144]	@ (8002c04 <HAL_GPIO_Init+0x300>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b94:	4a1b      	ldr	r2, [pc, #108]	@ (8002c04 <HAL_GPIO_Init+0x300>)
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002b9a:	4b1a      	ldr	r3, [pc, #104]	@ (8002c04 <HAL_GPIO_Init+0x300>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bbe:	4a11      	ldr	r2, [pc, #68]	@ (8002c04 <HAL_GPIO_Init+0x300>)
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f47f ae9d 	bne.w	8002914 <HAL_GPIO_Init+0x10>
  }
}
 8002bda:	bf00      	nop
 8002bdc:	bf00      	nop
 8002bde:	371c      	adds	r7, #28
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	40021000 	.word	0x40021000
 8002bec:	40010000 	.word	0x40010000
 8002bf0:	48000400 	.word	0x48000400
 8002bf4:	48000800 	.word	0x48000800
 8002bf8:	48000c00 	.word	0x48000c00
 8002bfc:	48001000 	.word	0x48001000
 8002c00:	48001400 	.word	0x48001400
 8002c04:	40010400 	.word	0x40010400

08002c08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d141      	bne.n	8002c9a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c16:	4b4b      	ldr	r3, [pc, #300]	@ (8002d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c22:	d131      	bne.n	8002c88 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c24:	4b47      	ldr	r3, [pc, #284]	@ (8002d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c2a:	4a46      	ldr	r2, [pc, #280]	@ (8002d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c34:	4b43      	ldr	r3, [pc, #268]	@ (8002d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c3c:	4a41      	ldr	r2, [pc, #260]	@ (8002d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c44:	4b40      	ldr	r3, [pc, #256]	@ (8002d48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2232      	movs	r2, #50	@ 0x32
 8002c4a:	fb02 f303 	mul.w	r3, r2, r3
 8002c4e:	4a3f      	ldr	r2, [pc, #252]	@ (8002d4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c50:	fba2 2303 	umull	r2, r3, r2, r3
 8002c54:	0c9b      	lsrs	r3, r3, #18
 8002c56:	3301      	adds	r3, #1
 8002c58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c5a:	e002      	b.n	8002c62 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c62:	4b38      	ldr	r3, [pc, #224]	@ (8002d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c6e:	d102      	bne.n	8002c76 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f2      	bne.n	8002c5c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c76:	4b33      	ldr	r3, [pc, #204]	@ (8002d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c82:	d158      	bne.n	8002d36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e057      	b.n	8002d38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c88:	4b2e      	ldr	r3, [pc, #184]	@ (8002d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c8e:	4a2d      	ldr	r2, [pc, #180]	@ (8002d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002c98:	e04d      	b.n	8002d36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ca0:	d141      	bne.n	8002d26 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ca2:	4b28      	ldr	r3, [pc, #160]	@ (8002d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002caa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cae:	d131      	bne.n	8002d14 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cb0:	4b24      	ldr	r3, [pc, #144]	@ (8002d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cb6:	4a23      	ldr	r2, [pc, #140]	@ (8002d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cbc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cc0:	4b20      	ldr	r3, [pc, #128]	@ (8002d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002cc8:	4a1e      	ldr	r2, [pc, #120]	@ (8002d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2232      	movs	r2, #50	@ 0x32
 8002cd6:	fb02 f303 	mul.w	r3, r2, r3
 8002cda:	4a1c      	ldr	r2, [pc, #112]	@ (8002d4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce0:	0c9b      	lsrs	r3, r3, #18
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ce6:	e002      	b.n	8002cee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	3b01      	subs	r3, #1
 8002cec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cee:	4b15      	ldr	r3, [pc, #84]	@ (8002d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cfa:	d102      	bne.n	8002d02 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1f2      	bne.n	8002ce8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d02:	4b10      	ldr	r3, [pc, #64]	@ (8002d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d0e:	d112      	bne.n	8002d36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e011      	b.n	8002d38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d14:	4b0b      	ldr	r3, [pc, #44]	@ (8002d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d20:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002d24:	e007      	b.n	8002d36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d26:	4b07      	ldr	r3, [pc, #28]	@ (8002d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d2e:	4a05      	ldr	r2, [pc, #20]	@ (8002d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d30:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d34:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3714      	adds	r7, #20
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	40007000 	.word	0x40007000
 8002d48:	20000004 	.word	0x20000004
 8002d4c:	431bde83 	.word	0x431bde83

08002d50 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002d54:	4b05      	ldr	r3, [pc, #20]	@ (8002d6c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	4a04      	ldr	r2, [pc, #16]	@ (8002d6c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002d5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d5e:	6093      	str	r3, [r2, #8]
}
 8002d60:	bf00      	nop
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	40007000 	.word	0x40007000

08002d70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b088      	sub	sp, #32
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e2fe      	b.n	8003380 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d075      	beq.n	8002e7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d8e:	4b97      	ldr	r3, [pc, #604]	@ (8002fec <HAL_RCC_OscConfig+0x27c>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 030c 	and.w	r3, r3, #12
 8002d96:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d98:	4b94      	ldr	r3, [pc, #592]	@ (8002fec <HAL_RCC_OscConfig+0x27c>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f003 0303 	and.w	r3, r3, #3
 8002da0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	2b0c      	cmp	r3, #12
 8002da6:	d102      	bne.n	8002dae <HAL_RCC_OscConfig+0x3e>
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d002      	beq.n	8002db4 <HAL_RCC_OscConfig+0x44>
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d10b      	bne.n	8002dcc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db4:	4b8d      	ldr	r3, [pc, #564]	@ (8002fec <HAL_RCC_OscConfig+0x27c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d05b      	beq.n	8002e78 <HAL_RCC_OscConfig+0x108>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d157      	bne.n	8002e78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e2d9      	b.n	8003380 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dd4:	d106      	bne.n	8002de4 <HAL_RCC_OscConfig+0x74>
 8002dd6:	4b85      	ldr	r3, [pc, #532]	@ (8002fec <HAL_RCC_OscConfig+0x27c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a84      	ldr	r2, [pc, #528]	@ (8002fec <HAL_RCC_OscConfig+0x27c>)
 8002ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	e01d      	b.n	8002e20 <HAL_RCC_OscConfig+0xb0>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002dec:	d10c      	bne.n	8002e08 <HAL_RCC_OscConfig+0x98>
 8002dee:	4b7f      	ldr	r3, [pc, #508]	@ (8002fec <HAL_RCC_OscConfig+0x27c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a7e      	ldr	r2, [pc, #504]	@ (8002fec <HAL_RCC_OscConfig+0x27c>)
 8002df4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	4b7c      	ldr	r3, [pc, #496]	@ (8002fec <HAL_RCC_OscConfig+0x27c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a7b      	ldr	r2, [pc, #492]	@ (8002fec <HAL_RCC_OscConfig+0x27c>)
 8002e00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	e00b      	b.n	8002e20 <HAL_RCC_OscConfig+0xb0>
 8002e08:	4b78      	ldr	r3, [pc, #480]	@ (8002fec <HAL_RCC_OscConfig+0x27c>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a77      	ldr	r2, [pc, #476]	@ (8002fec <HAL_RCC_OscConfig+0x27c>)
 8002e0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e12:	6013      	str	r3, [r2, #0]
 8002e14:	4b75      	ldr	r3, [pc, #468]	@ (8002fec <HAL_RCC_OscConfig+0x27c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a74      	ldr	r2, [pc, #464]	@ (8002fec <HAL_RCC_OscConfig+0x27c>)
 8002e1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d013      	beq.n	8002e50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e28:	f7fe fd80 	bl	800192c <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e30:	f7fe fd7c 	bl	800192c <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b64      	cmp	r3, #100	@ 0x64
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e29e      	b.n	8003380 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e42:	4b6a      	ldr	r3, [pc, #424]	@ (8002fec <HAL_RCC_OscConfig+0x27c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0f0      	beq.n	8002e30 <HAL_RCC_OscConfig+0xc0>
 8002e4e:	e014      	b.n	8002e7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e50:	f7fe fd6c 	bl	800192c <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e58:	f7fe fd68 	bl	800192c <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b64      	cmp	r3, #100	@ 0x64
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e28a      	b.n	8003380 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e6a:	4b60      	ldr	r3, [pc, #384]	@ (8002fec <HAL_RCC_OscConfig+0x27c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f0      	bne.n	8002e58 <HAL_RCC_OscConfig+0xe8>
 8002e76:	e000      	b.n	8002e7a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d075      	beq.n	8002f72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e86:	4b59      	ldr	r3, [pc, #356]	@ (8002fec <HAL_RCC_OscConfig+0x27c>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 030c 	and.w	r3, r3, #12
 8002e8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e90:	4b56      	ldr	r3, [pc, #344]	@ (8002fec <HAL_RCC_OscConfig+0x27c>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f003 0303 	and.w	r3, r3, #3
 8002e98:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	2b0c      	cmp	r3, #12
 8002e9e:	d102      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x136>
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d002      	beq.n	8002eac <HAL_RCC_OscConfig+0x13c>
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	2b04      	cmp	r3, #4
 8002eaa:	d11f      	bne.n	8002eec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eac:	4b4f      	ldr	r3, [pc, #316]	@ (8002fec <HAL_RCC_OscConfig+0x27c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x154>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e25d      	b.n	8003380 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec4:	4b49      	ldr	r3, [pc, #292]	@ (8002fec <HAL_RCC_OscConfig+0x27c>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	061b      	lsls	r3, r3, #24
 8002ed2:	4946      	ldr	r1, [pc, #280]	@ (8002fec <HAL_RCC_OscConfig+0x27c>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002ed8:	4b45      	ldr	r3, [pc, #276]	@ (8002ff0 <HAL_RCC_OscConfig+0x280>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7fe fcd9 	bl	8001894 <HAL_InitTick>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d043      	beq.n	8002f70 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e249      	b.n	8003380 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d023      	beq.n	8002f3c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ef4:	4b3d      	ldr	r3, [pc, #244]	@ (8002fec <HAL_RCC_OscConfig+0x27c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a3c      	ldr	r2, [pc, #240]	@ (8002fec <HAL_RCC_OscConfig+0x27c>)
 8002efa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002efe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f00:	f7fe fd14 	bl	800192c <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f08:	f7fe fd10 	bl	800192c <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e232      	b.n	8003380 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f1a:	4b34      	ldr	r3, [pc, #208]	@ (8002fec <HAL_RCC_OscConfig+0x27c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f26:	4b31      	ldr	r3, [pc, #196]	@ (8002fec <HAL_RCC_OscConfig+0x27c>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	061b      	lsls	r3, r3, #24
 8002f34:	492d      	ldr	r1, [pc, #180]	@ (8002fec <HAL_RCC_OscConfig+0x27c>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	604b      	str	r3, [r1, #4]
 8002f3a:	e01a      	b.n	8002f72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f3c:	4b2b      	ldr	r3, [pc, #172]	@ (8002fec <HAL_RCC_OscConfig+0x27c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a2a      	ldr	r2, [pc, #168]	@ (8002fec <HAL_RCC_OscConfig+0x27c>)
 8002f42:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f48:	f7fe fcf0 	bl	800192c <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f50:	f7fe fcec 	bl	800192c <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e20e      	b.n	8003380 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f62:	4b22      	ldr	r3, [pc, #136]	@ (8002fec <HAL_RCC_OscConfig+0x27c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1f0      	bne.n	8002f50 <HAL_RCC_OscConfig+0x1e0>
 8002f6e:	e000      	b.n	8002f72 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f70:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d041      	beq.n	8003002 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d01c      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f86:	4b19      	ldr	r3, [pc, #100]	@ (8002fec <HAL_RCC_OscConfig+0x27c>)
 8002f88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f8c:	4a17      	ldr	r2, [pc, #92]	@ (8002fec <HAL_RCC_OscConfig+0x27c>)
 8002f8e:	f043 0301 	orr.w	r3, r3, #1
 8002f92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f96:	f7fe fcc9 	bl	800192c <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f9e:	f7fe fcc5 	bl	800192c <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e1e7      	b.n	8003380 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8002fec <HAL_RCC_OscConfig+0x27c>)
 8002fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0ef      	beq.n	8002f9e <HAL_RCC_OscConfig+0x22e>
 8002fbe:	e020      	b.n	8003002 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8002fec <HAL_RCC_OscConfig+0x27c>)
 8002fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fc6:	4a09      	ldr	r2, [pc, #36]	@ (8002fec <HAL_RCC_OscConfig+0x27c>)
 8002fc8:	f023 0301 	bic.w	r3, r3, #1
 8002fcc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd0:	f7fe fcac 	bl	800192c <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fd6:	e00d      	b.n	8002ff4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fd8:	f7fe fca8 	bl	800192c <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d906      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e1ca      	b.n	8003380 <HAL_RCC_OscConfig+0x610>
 8002fea:	bf00      	nop
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ff4:	4b8c      	ldr	r3, [pc, #560]	@ (8003228 <HAL_RCC_OscConfig+0x4b8>)
 8002ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1ea      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0304 	and.w	r3, r3, #4
 800300a:	2b00      	cmp	r3, #0
 800300c:	f000 80a6 	beq.w	800315c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003010:	2300      	movs	r3, #0
 8003012:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003014:	4b84      	ldr	r3, [pc, #528]	@ (8003228 <HAL_RCC_OscConfig+0x4b8>)
 8003016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003018:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_RCC_OscConfig+0x2b4>
 8003020:	2301      	movs	r3, #1
 8003022:	e000      	b.n	8003026 <HAL_RCC_OscConfig+0x2b6>
 8003024:	2300      	movs	r3, #0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00d      	beq.n	8003046 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800302a:	4b7f      	ldr	r3, [pc, #508]	@ (8003228 <HAL_RCC_OscConfig+0x4b8>)
 800302c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800302e:	4a7e      	ldr	r2, [pc, #504]	@ (8003228 <HAL_RCC_OscConfig+0x4b8>)
 8003030:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003034:	6593      	str	r3, [r2, #88]	@ 0x58
 8003036:	4b7c      	ldr	r3, [pc, #496]	@ (8003228 <HAL_RCC_OscConfig+0x4b8>)
 8003038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800303a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003042:	2301      	movs	r3, #1
 8003044:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003046:	4b79      	ldr	r3, [pc, #484]	@ (800322c <HAL_RCC_OscConfig+0x4bc>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800304e:	2b00      	cmp	r3, #0
 8003050:	d118      	bne.n	8003084 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003052:	4b76      	ldr	r3, [pc, #472]	@ (800322c <HAL_RCC_OscConfig+0x4bc>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a75      	ldr	r2, [pc, #468]	@ (800322c <HAL_RCC_OscConfig+0x4bc>)
 8003058:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800305c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800305e:	f7fe fc65 	bl	800192c <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003064:	e008      	b.n	8003078 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003066:	f7fe fc61 	bl	800192c <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e183      	b.n	8003380 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003078:	4b6c      	ldr	r3, [pc, #432]	@ (800322c <HAL_RCC_OscConfig+0x4bc>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0f0      	beq.n	8003066 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d108      	bne.n	800309e <HAL_RCC_OscConfig+0x32e>
 800308c:	4b66      	ldr	r3, [pc, #408]	@ (8003228 <HAL_RCC_OscConfig+0x4b8>)
 800308e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003092:	4a65      	ldr	r2, [pc, #404]	@ (8003228 <HAL_RCC_OscConfig+0x4b8>)
 8003094:	f043 0301 	orr.w	r3, r3, #1
 8003098:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800309c:	e024      	b.n	80030e8 <HAL_RCC_OscConfig+0x378>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	2b05      	cmp	r3, #5
 80030a4:	d110      	bne.n	80030c8 <HAL_RCC_OscConfig+0x358>
 80030a6:	4b60      	ldr	r3, [pc, #384]	@ (8003228 <HAL_RCC_OscConfig+0x4b8>)
 80030a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ac:	4a5e      	ldr	r2, [pc, #376]	@ (8003228 <HAL_RCC_OscConfig+0x4b8>)
 80030ae:	f043 0304 	orr.w	r3, r3, #4
 80030b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030b6:	4b5c      	ldr	r3, [pc, #368]	@ (8003228 <HAL_RCC_OscConfig+0x4b8>)
 80030b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030bc:	4a5a      	ldr	r2, [pc, #360]	@ (8003228 <HAL_RCC_OscConfig+0x4b8>)
 80030be:	f043 0301 	orr.w	r3, r3, #1
 80030c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030c6:	e00f      	b.n	80030e8 <HAL_RCC_OscConfig+0x378>
 80030c8:	4b57      	ldr	r3, [pc, #348]	@ (8003228 <HAL_RCC_OscConfig+0x4b8>)
 80030ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ce:	4a56      	ldr	r2, [pc, #344]	@ (8003228 <HAL_RCC_OscConfig+0x4b8>)
 80030d0:	f023 0301 	bic.w	r3, r3, #1
 80030d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030d8:	4b53      	ldr	r3, [pc, #332]	@ (8003228 <HAL_RCC_OscConfig+0x4b8>)
 80030da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030de:	4a52      	ldr	r2, [pc, #328]	@ (8003228 <HAL_RCC_OscConfig+0x4b8>)
 80030e0:	f023 0304 	bic.w	r3, r3, #4
 80030e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d016      	beq.n	800311e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f0:	f7fe fc1c 	bl	800192c <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030f6:	e00a      	b.n	800310e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030f8:	f7fe fc18 	bl	800192c <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003106:	4293      	cmp	r3, r2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e138      	b.n	8003380 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800310e:	4b46      	ldr	r3, [pc, #280]	@ (8003228 <HAL_RCC_OscConfig+0x4b8>)
 8003110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0ed      	beq.n	80030f8 <HAL_RCC_OscConfig+0x388>
 800311c:	e015      	b.n	800314a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800311e:	f7fe fc05 	bl	800192c <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003124:	e00a      	b.n	800313c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003126:	f7fe fc01 	bl	800192c <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003134:	4293      	cmp	r3, r2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e121      	b.n	8003380 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800313c:	4b3a      	ldr	r3, [pc, #232]	@ (8003228 <HAL_RCC_OscConfig+0x4b8>)
 800313e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1ed      	bne.n	8003126 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800314a:	7ffb      	ldrb	r3, [r7, #31]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d105      	bne.n	800315c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003150:	4b35      	ldr	r3, [pc, #212]	@ (8003228 <HAL_RCC_OscConfig+0x4b8>)
 8003152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003154:	4a34      	ldr	r2, [pc, #208]	@ (8003228 <HAL_RCC_OscConfig+0x4b8>)
 8003156:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800315a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0320 	and.w	r3, r3, #32
 8003164:	2b00      	cmp	r3, #0
 8003166:	d03c      	beq.n	80031e2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d01c      	beq.n	80031aa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003170:	4b2d      	ldr	r3, [pc, #180]	@ (8003228 <HAL_RCC_OscConfig+0x4b8>)
 8003172:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003176:	4a2c      	ldr	r2, [pc, #176]	@ (8003228 <HAL_RCC_OscConfig+0x4b8>)
 8003178:	f043 0301 	orr.w	r3, r3, #1
 800317c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003180:	f7fe fbd4 	bl	800192c <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003188:	f7fe fbd0 	bl	800192c <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e0f2      	b.n	8003380 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800319a:	4b23      	ldr	r3, [pc, #140]	@ (8003228 <HAL_RCC_OscConfig+0x4b8>)
 800319c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0ef      	beq.n	8003188 <HAL_RCC_OscConfig+0x418>
 80031a8:	e01b      	b.n	80031e2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031aa:	4b1f      	ldr	r3, [pc, #124]	@ (8003228 <HAL_RCC_OscConfig+0x4b8>)
 80031ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031b0:	4a1d      	ldr	r2, [pc, #116]	@ (8003228 <HAL_RCC_OscConfig+0x4b8>)
 80031b2:	f023 0301 	bic.w	r3, r3, #1
 80031b6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ba:	f7fe fbb7 	bl	800192c <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031c0:	e008      	b.n	80031d4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031c2:	f7fe fbb3 	bl	800192c <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e0d5      	b.n	8003380 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031d4:	4b14      	ldr	r3, [pc, #80]	@ (8003228 <HAL_RCC_OscConfig+0x4b8>)
 80031d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1ef      	bne.n	80031c2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 80c9 	beq.w	800337e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003228 <HAL_RCC_OscConfig+0x4b8>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 030c 	and.w	r3, r3, #12
 80031f4:	2b0c      	cmp	r3, #12
 80031f6:	f000 8083 	beq.w	8003300 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d15e      	bne.n	80032c0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003202:	4b09      	ldr	r3, [pc, #36]	@ (8003228 <HAL_RCC_OscConfig+0x4b8>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a08      	ldr	r2, [pc, #32]	@ (8003228 <HAL_RCC_OscConfig+0x4b8>)
 8003208:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800320c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320e:	f7fe fb8d 	bl	800192c <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003214:	e00c      	b.n	8003230 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003216:	f7fe fb89 	bl	800192c <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d905      	bls.n	8003230 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e0ab      	b.n	8003380 <HAL_RCC_OscConfig+0x610>
 8003228:	40021000 	.word	0x40021000
 800322c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003230:	4b55      	ldr	r3, [pc, #340]	@ (8003388 <HAL_RCC_OscConfig+0x618>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1ec      	bne.n	8003216 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800323c:	4b52      	ldr	r3, [pc, #328]	@ (8003388 <HAL_RCC_OscConfig+0x618>)
 800323e:	68da      	ldr	r2, [r3, #12]
 8003240:	4b52      	ldr	r3, [pc, #328]	@ (800338c <HAL_RCC_OscConfig+0x61c>)
 8003242:	4013      	ands	r3, r2
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6a11      	ldr	r1, [r2, #32]
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800324c:	3a01      	subs	r2, #1
 800324e:	0112      	lsls	r2, r2, #4
 8003250:	4311      	orrs	r1, r2
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003256:	0212      	lsls	r2, r2, #8
 8003258:	4311      	orrs	r1, r2
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800325e:	0852      	lsrs	r2, r2, #1
 8003260:	3a01      	subs	r2, #1
 8003262:	0552      	lsls	r2, r2, #21
 8003264:	4311      	orrs	r1, r2
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800326a:	0852      	lsrs	r2, r2, #1
 800326c:	3a01      	subs	r2, #1
 800326e:	0652      	lsls	r2, r2, #25
 8003270:	4311      	orrs	r1, r2
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003276:	06d2      	lsls	r2, r2, #27
 8003278:	430a      	orrs	r2, r1
 800327a:	4943      	ldr	r1, [pc, #268]	@ (8003388 <HAL_RCC_OscConfig+0x618>)
 800327c:	4313      	orrs	r3, r2
 800327e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003280:	4b41      	ldr	r3, [pc, #260]	@ (8003388 <HAL_RCC_OscConfig+0x618>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a40      	ldr	r2, [pc, #256]	@ (8003388 <HAL_RCC_OscConfig+0x618>)
 8003286:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800328a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800328c:	4b3e      	ldr	r3, [pc, #248]	@ (8003388 <HAL_RCC_OscConfig+0x618>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	4a3d      	ldr	r2, [pc, #244]	@ (8003388 <HAL_RCC_OscConfig+0x618>)
 8003292:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003296:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003298:	f7fe fb48 	bl	800192c <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032a0:	f7fe fb44 	bl	800192c <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e066      	b.n	8003380 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032b2:	4b35      	ldr	r3, [pc, #212]	@ (8003388 <HAL_RCC_OscConfig+0x618>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCC_OscConfig+0x530>
 80032be:	e05e      	b.n	800337e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c0:	4b31      	ldr	r3, [pc, #196]	@ (8003388 <HAL_RCC_OscConfig+0x618>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a30      	ldr	r2, [pc, #192]	@ (8003388 <HAL_RCC_OscConfig+0x618>)
 80032c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032cc:	f7fe fb2e 	bl	800192c <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d4:	f7fe fb2a 	bl	800192c <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e04c      	b.n	8003380 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032e6:	4b28      	ldr	r3, [pc, #160]	@ (8003388 <HAL_RCC_OscConfig+0x618>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f0      	bne.n	80032d4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80032f2:	4b25      	ldr	r3, [pc, #148]	@ (8003388 <HAL_RCC_OscConfig+0x618>)
 80032f4:	68da      	ldr	r2, [r3, #12]
 80032f6:	4924      	ldr	r1, [pc, #144]	@ (8003388 <HAL_RCC_OscConfig+0x618>)
 80032f8:	4b25      	ldr	r3, [pc, #148]	@ (8003390 <HAL_RCC_OscConfig+0x620>)
 80032fa:	4013      	ands	r3, r2
 80032fc:	60cb      	str	r3, [r1, #12]
 80032fe:	e03e      	b.n	800337e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	69db      	ldr	r3, [r3, #28]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d101      	bne.n	800330c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e039      	b.n	8003380 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800330c:	4b1e      	ldr	r3, [pc, #120]	@ (8003388 <HAL_RCC_OscConfig+0x618>)
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f003 0203 	and.w	r2, r3, #3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	429a      	cmp	r2, r3
 800331e:	d12c      	bne.n	800337a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332a:	3b01      	subs	r3, #1
 800332c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800332e:	429a      	cmp	r2, r3
 8003330:	d123      	bne.n	800337a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800333c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800333e:	429a      	cmp	r2, r3
 8003340:	d11b      	bne.n	800337a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800334c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800334e:	429a      	cmp	r2, r3
 8003350:	d113      	bne.n	800337a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335c:	085b      	lsrs	r3, r3, #1
 800335e:	3b01      	subs	r3, #1
 8003360:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003362:	429a      	cmp	r2, r3
 8003364:	d109      	bne.n	800337a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003370:	085b      	lsrs	r3, r3, #1
 8003372:	3b01      	subs	r3, #1
 8003374:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003376:	429a      	cmp	r2, r3
 8003378:	d001      	beq.n	800337e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e000      	b.n	8003380 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3720      	adds	r7, #32
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	40021000 	.word	0x40021000
 800338c:	019f800c 	.word	0x019f800c
 8003390:	feeefffc 	.word	0xfeeefffc

08003394 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800339e:	2300      	movs	r3, #0
 80033a0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e11e      	b.n	80035ea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033ac:	4b91      	ldr	r3, [pc, #580]	@ (80035f4 <HAL_RCC_ClockConfig+0x260>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 030f 	and.w	r3, r3, #15
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d910      	bls.n	80033dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ba:	4b8e      	ldr	r3, [pc, #568]	@ (80035f4 <HAL_RCC_ClockConfig+0x260>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f023 020f 	bic.w	r2, r3, #15
 80033c2:	498c      	ldr	r1, [pc, #560]	@ (80035f4 <HAL_RCC_ClockConfig+0x260>)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ca:	4b8a      	ldr	r3, [pc, #552]	@ (80035f4 <HAL_RCC_ClockConfig+0x260>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d001      	beq.n	80033dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e106      	b.n	80035ea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d073      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	2b03      	cmp	r3, #3
 80033ee:	d129      	bne.n	8003444 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033f0:	4b81      	ldr	r3, [pc, #516]	@ (80035f8 <HAL_RCC_ClockConfig+0x264>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e0f4      	b.n	80035ea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003400:	f000 f966 	bl	80036d0 <RCC_GetSysClockFreqFromPLLSource>
 8003404:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	4a7c      	ldr	r2, [pc, #496]	@ (80035fc <HAL_RCC_ClockConfig+0x268>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d93f      	bls.n	800348e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800340e:	4b7a      	ldr	r3, [pc, #488]	@ (80035f8 <HAL_RCC_ClockConfig+0x264>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d009      	beq.n	800342e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003422:	2b00      	cmp	r3, #0
 8003424:	d033      	beq.n	800348e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800342a:	2b00      	cmp	r3, #0
 800342c:	d12f      	bne.n	800348e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800342e:	4b72      	ldr	r3, [pc, #456]	@ (80035f8 <HAL_RCC_ClockConfig+0x264>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003436:	4a70      	ldr	r2, [pc, #448]	@ (80035f8 <HAL_RCC_ClockConfig+0x264>)
 8003438:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800343c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800343e:	2380      	movs	r3, #128	@ 0x80
 8003440:	617b      	str	r3, [r7, #20]
 8003442:	e024      	b.n	800348e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	2b02      	cmp	r3, #2
 800344a:	d107      	bne.n	800345c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800344c:	4b6a      	ldr	r3, [pc, #424]	@ (80035f8 <HAL_RCC_ClockConfig+0x264>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d109      	bne.n	800346c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e0c6      	b.n	80035ea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800345c:	4b66      	ldr	r3, [pc, #408]	@ (80035f8 <HAL_RCC_ClockConfig+0x264>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e0be      	b.n	80035ea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800346c:	f000 f8ce 	bl	800360c <HAL_RCC_GetSysClockFreq>
 8003470:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	4a61      	ldr	r2, [pc, #388]	@ (80035fc <HAL_RCC_ClockConfig+0x268>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d909      	bls.n	800348e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800347a:	4b5f      	ldr	r3, [pc, #380]	@ (80035f8 <HAL_RCC_ClockConfig+0x264>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003482:	4a5d      	ldr	r2, [pc, #372]	@ (80035f8 <HAL_RCC_ClockConfig+0x264>)
 8003484:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003488:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800348a:	2380      	movs	r3, #128	@ 0x80
 800348c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800348e:	4b5a      	ldr	r3, [pc, #360]	@ (80035f8 <HAL_RCC_ClockConfig+0x264>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f023 0203 	bic.w	r2, r3, #3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	4957      	ldr	r1, [pc, #348]	@ (80035f8 <HAL_RCC_ClockConfig+0x264>)
 800349c:	4313      	orrs	r3, r2
 800349e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034a0:	f7fe fa44 	bl	800192c <HAL_GetTick>
 80034a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a6:	e00a      	b.n	80034be <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a8:	f7fe fa40 	bl	800192c <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e095      	b.n	80035ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034be:	4b4e      	ldr	r3, [pc, #312]	@ (80035f8 <HAL_RCC_ClockConfig+0x264>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 020c 	and.w	r2, r3, #12
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d1eb      	bne.n	80034a8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d023      	beq.n	8003524 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d005      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034e8:	4b43      	ldr	r3, [pc, #268]	@ (80035f8 <HAL_RCC_ClockConfig+0x264>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	4a42      	ldr	r2, [pc, #264]	@ (80035f8 <HAL_RCC_ClockConfig+0x264>)
 80034ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80034f2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0308 	and.w	r3, r3, #8
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d007      	beq.n	8003510 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003500:	4b3d      	ldr	r3, [pc, #244]	@ (80035f8 <HAL_RCC_ClockConfig+0x264>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003508:	4a3b      	ldr	r2, [pc, #236]	@ (80035f8 <HAL_RCC_ClockConfig+0x264>)
 800350a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800350e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003510:	4b39      	ldr	r3, [pc, #228]	@ (80035f8 <HAL_RCC_ClockConfig+0x264>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	4936      	ldr	r1, [pc, #216]	@ (80035f8 <HAL_RCC_ClockConfig+0x264>)
 800351e:	4313      	orrs	r3, r2
 8003520:	608b      	str	r3, [r1, #8]
 8003522:	e008      	b.n	8003536 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	2b80      	cmp	r3, #128	@ 0x80
 8003528:	d105      	bne.n	8003536 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800352a:	4b33      	ldr	r3, [pc, #204]	@ (80035f8 <HAL_RCC_ClockConfig+0x264>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	4a32      	ldr	r2, [pc, #200]	@ (80035f8 <HAL_RCC_ClockConfig+0x264>)
 8003530:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003534:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003536:	4b2f      	ldr	r3, [pc, #188]	@ (80035f4 <HAL_RCC_ClockConfig+0x260>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	429a      	cmp	r2, r3
 8003542:	d21d      	bcs.n	8003580 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003544:	4b2b      	ldr	r3, [pc, #172]	@ (80035f4 <HAL_RCC_ClockConfig+0x260>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f023 020f 	bic.w	r2, r3, #15
 800354c:	4929      	ldr	r1, [pc, #164]	@ (80035f4 <HAL_RCC_ClockConfig+0x260>)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	4313      	orrs	r3, r2
 8003552:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003554:	f7fe f9ea 	bl	800192c <HAL_GetTick>
 8003558:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800355a:	e00a      	b.n	8003572 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800355c:	f7fe f9e6 	bl	800192c <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	f241 3288 	movw	r2, #5000	@ 0x1388
 800356a:	4293      	cmp	r3, r2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e03b      	b.n	80035ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003572:	4b20      	ldr	r3, [pc, #128]	@ (80035f4 <HAL_RCC_ClockConfig+0x260>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	429a      	cmp	r2, r3
 800357e:	d1ed      	bne.n	800355c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b00      	cmp	r3, #0
 800358a:	d008      	beq.n	800359e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800358c:	4b1a      	ldr	r3, [pc, #104]	@ (80035f8 <HAL_RCC_ClockConfig+0x264>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	4917      	ldr	r1, [pc, #92]	@ (80035f8 <HAL_RCC_ClockConfig+0x264>)
 800359a:	4313      	orrs	r3, r2
 800359c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d009      	beq.n	80035be <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035aa:	4b13      	ldr	r3, [pc, #76]	@ (80035f8 <HAL_RCC_ClockConfig+0x264>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	490f      	ldr	r1, [pc, #60]	@ (80035f8 <HAL_RCC_ClockConfig+0x264>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035be:	f000 f825 	bl	800360c <HAL_RCC_GetSysClockFreq>
 80035c2:	4602      	mov	r2, r0
 80035c4:	4b0c      	ldr	r3, [pc, #48]	@ (80035f8 <HAL_RCC_ClockConfig+0x264>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	091b      	lsrs	r3, r3, #4
 80035ca:	f003 030f 	and.w	r3, r3, #15
 80035ce:	490c      	ldr	r1, [pc, #48]	@ (8003600 <HAL_RCC_ClockConfig+0x26c>)
 80035d0:	5ccb      	ldrb	r3, [r1, r3]
 80035d2:	f003 031f 	and.w	r3, r3, #31
 80035d6:	fa22 f303 	lsr.w	r3, r2, r3
 80035da:	4a0a      	ldr	r2, [pc, #40]	@ (8003604 <HAL_RCC_ClockConfig+0x270>)
 80035dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80035de:	4b0a      	ldr	r3, [pc, #40]	@ (8003608 <HAL_RCC_ClockConfig+0x274>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fe f956 	bl	8001894 <HAL_InitTick>
 80035e8:	4603      	mov	r3, r0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3718      	adds	r7, #24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40022000 	.word	0x40022000
 80035f8:	40021000 	.word	0x40021000
 80035fc:	04c4b400 	.word	0x04c4b400
 8003600:	08003bcc 	.word	0x08003bcc
 8003604:	20000004 	.word	0x20000004
 8003608:	20000008 	.word	0x20000008

0800360c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800360c:	b480      	push	{r7}
 800360e:	b087      	sub	sp, #28
 8003610:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003612:	4b2c      	ldr	r3, [pc, #176]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 030c 	and.w	r3, r3, #12
 800361a:	2b04      	cmp	r3, #4
 800361c:	d102      	bne.n	8003624 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800361e:	4b2a      	ldr	r3, [pc, #168]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003620:	613b      	str	r3, [r7, #16]
 8003622:	e047      	b.n	80036b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003624:	4b27      	ldr	r3, [pc, #156]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f003 030c 	and.w	r3, r3, #12
 800362c:	2b08      	cmp	r3, #8
 800362e:	d102      	bne.n	8003636 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003630:	4b26      	ldr	r3, [pc, #152]	@ (80036cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003632:	613b      	str	r3, [r7, #16]
 8003634:	e03e      	b.n	80036b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003636:	4b23      	ldr	r3, [pc, #140]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 030c 	and.w	r3, r3, #12
 800363e:	2b0c      	cmp	r3, #12
 8003640:	d136      	bne.n	80036b0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003642:	4b20      	ldr	r3, [pc, #128]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800364c:	4b1d      	ldr	r3, [pc, #116]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	091b      	lsrs	r3, r3, #4
 8003652:	f003 030f 	and.w	r3, r3, #15
 8003656:	3301      	adds	r3, #1
 8003658:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2b03      	cmp	r3, #3
 800365e:	d10c      	bne.n	800367a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003660:	4a1a      	ldr	r2, [pc, #104]	@ (80036cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	fbb2 f3f3 	udiv	r3, r2, r3
 8003668:	4a16      	ldr	r2, [pc, #88]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800366a:	68d2      	ldr	r2, [r2, #12]
 800366c:	0a12      	lsrs	r2, r2, #8
 800366e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003672:	fb02 f303 	mul.w	r3, r2, r3
 8003676:	617b      	str	r3, [r7, #20]
      break;
 8003678:	e00c      	b.n	8003694 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800367a:	4a13      	ldr	r2, [pc, #76]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003682:	4a10      	ldr	r2, [pc, #64]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003684:	68d2      	ldr	r2, [r2, #12]
 8003686:	0a12      	lsrs	r2, r2, #8
 8003688:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800368c:	fb02 f303 	mul.w	r3, r2, r3
 8003690:	617b      	str	r3, [r7, #20]
      break;
 8003692:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003694:	4b0b      	ldr	r3, [pc, #44]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	0e5b      	lsrs	r3, r3, #25
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	3301      	adds	r3, #1
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ac:	613b      	str	r3, [r7, #16]
 80036ae:	e001      	b.n	80036b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80036b0:	2300      	movs	r3, #0
 80036b2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80036b4:	693b      	ldr	r3, [r7, #16]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	371c      	adds	r7, #28
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	40021000 	.word	0x40021000
 80036c8:	00f42400 	.word	0x00f42400
 80036cc:	007a1200 	.word	0x007a1200

080036d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b087      	sub	sp, #28
 80036d4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f003 0303 	and.w	r3, r3, #3
 80036de:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	091b      	lsrs	r3, r3, #4
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	3301      	adds	r3, #1
 80036ec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	2b03      	cmp	r3, #3
 80036f2:	d10c      	bne.n	800370e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036f4:	4a17      	ldr	r2, [pc, #92]	@ (8003754 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fc:	4a14      	ldr	r2, [pc, #80]	@ (8003750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036fe:	68d2      	ldr	r2, [r2, #12]
 8003700:	0a12      	lsrs	r2, r2, #8
 8003702:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003706:	fb02 f303 	mul.w	r3, r2, r3
 800370a:	617b      	str	r3, [r7, #20]
    break;
 800370c:	e00c      	b.n	8003728 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800370e:	4a12      	ldr	r2, [pc, #72]	@ (8003758 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	fbb2 f3f3 	udiv	r3, r2, r3
 8003716:	4a0e      	ldr	r2, [pc, #56]	@ (8003750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003718:	68d2      	ldr	r2, [r2, #12]
 800371a:	0a12      	lsrs	r2, r2, #8
 800371c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003720:	fb02 f303 	mul.w	r3, r2, r3
 8003724:	617b      	str	r3, [r7, #20]
    break;
 8003726:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003728:	4b09      	ldr	r3, [pc, #36]	@ (8003750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	0e5b      	lsrs	r3, r3, #25
 800372e:	f003 0303 	and.w	r3, r3, #3
 8003732:	3301      	adds	r3, #1
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003740:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003742:	687b      	ldr	r3, [r7, #4]
}
 8003744:	4618      	mov	r0, r3
 8003746:	371c      	adds	r7, #28
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	40021000 	.word	0x40021000
 8003754:	007a1200 	.word	0x007a1200
 8003758:	00f42400 	.word	0x00f42400

0800375c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003764:	2300      	movs	r3, #0
 8003766:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003768:	2300      	movs	r3, #0
 800376a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 8098 	beq.w	80038aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800377a:	2300      	movs	r3, #0
 800377c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800377e:	4b43      	ldr	r3, [pc, #268]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10d      	bne.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800378a:	4b40      	ldr	r3, [pc, #256]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800378c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800378e:	4a3f      	ldr	r2, [pc, #252]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003790:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003794:	6593      	str	r3, [r2, #88]	@ 0x58
 8003796:	4b3d      	ldr	r3, [pc, #244]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800379a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800379e:	60bb      	str	r3, [r7, #8]
 80037a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037a2:	2301      	movs	r3, #1
 80037a4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037a6:	4b3a      	ldr	r3, [pc, #232]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a39      	ldr	r2, [pc, #228]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037b2:	f7fe f8bb 	bl	800192c <HAL_GetTick>
 80037b6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037b8:	e009      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ba:	f7fe f8b7 	bl	800192c <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d902      	bls.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	74fb      	strb	r3, [r7, #19]
        break;
 80037cc:	e005      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037ce:	4b30      	ldr	r3, [pc, #192]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0ef      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80037da:	7cfb      	ldrb	r3, [r7, #19]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d159      	bne.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037e0:	4b2a      	ldr	r3, [pc, #168]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037ea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d01e      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d019      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037fc:	4b23      	ldr	r3, [pc, #140]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003802:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003806:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003808:	4b20      	ldr	r3, [pc, #128]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800380a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800380e:	4a1f      	ldr	r2, [pc, #124]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003814:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003818:	4b1c      	ldr	r3, [pc, #112]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800381a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800381e:	4a1b      	ldr	r2, [pc, #108]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003820:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003824:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003828:	4a18      	ldr	r2, [pc, #96]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d016      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383a:	f7fe f877 	bl	800192c <HAL_GetTick>
 800383e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003840:	e00b      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003842:	f7fe f873 	bl	800192c <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003850:	4293      	cmp	r3, r2
 8003852:	d902      	bls.n	800385a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	74fb      	strb	r3, [r7, #19]
            break;
 8003858:	e006      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800385a:	4b0c      	ldr	r3, [pc, #48]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800385c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0ec      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003868:	7cfb      	ldrb	r3, [r7, #19]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10b      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800386e:	4b07      	ldr	r3, [pc, #28]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003874:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387c:	4903      	ldr	r1, [pc, #12]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003884:	e008      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003886:	7cfb      	ldrb	r3, [r7, #19]
 8003888:	74bb      	strb	r3, [r7, #18]
 800388a:	e005      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800388c:	40021000 	.word	0x40021000
 8003890:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003894:	7cfb      	ldrb	r3, [r7, #19]
 8003896:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003898:	7c7b      	ldrb	r3, [r7, #17]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d105      	bne.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800389e:	4ba6      	ldr	r3, [pc, #664]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a2:	4aa5      	ldr	r2, [pc, #660]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038a8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00a      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038b6:	4ba0      	ldr	r3, [pc, #640]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038bc:	f023 0203 	bic.w	r2, r3, #3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	499c      	ldr	r1, [pc, #624]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00a      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038d8:	4b97      	ldr	r3, [pc, #604]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038de:	f023 020c 	bic.w	r2, r3, #12
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	4994      	ldr	r1, [pc, #592]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0304 	and.w	r3, r3, #4
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00a      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038fa:	4b8f      	ldr	r3, [pc, #572]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003900:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	498b      	ldr	r1, [pc, #556]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800390a:	4313      	orrs	r3, r2
 800390c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0308 	and.w	r3, r3, #8
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00a      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800391c:	4b86      	ldr	r3, [pc, #536]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800391e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003922:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	4983      	ldr	r1, [pc, #524]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800392c:	4313      	orrs	r3, r2
 800392e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0320 	and.w	r3, r3, #32
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00a      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800393e:	4b7e      	ldr	r3, [pc, #504]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003944:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	497a      	ldr	r1, [pc, #488]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800394e:	4313      	orrs	r3, r2
 8003950:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00a      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003960:	4b75      	ldr	r3, [pc, #468]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003966:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	4972      	ldr	r1, [pc, #456]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003970:	4313      	orrs	r3, r2
 8003972:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00a      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003982:	4b6d      	ldr	r3, [pc, #436]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003988:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	4969      	ldr	r1, [pc, #420]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003992:	4313      	orrs	r3, r2
 8003994:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00a      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039a4:	4b64      	ldr	r3, [pc, #400]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039aa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	4961      	ldr	r1, [pc, #388]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00a      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039c6:	4b5c      	ldr	r3, [pc, #368]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d4:	4958      	ldr	r1, [pc, #352]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d015      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039e8:	4b53      	ldr	r3, [pc, #332]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f6:	4950      	ldr	r1, [pc, #320]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a06:	d105      	bne.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a08:	4b4b      	ldr	r3, [pc, #300]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	4a4a      	ldr	r2, [pc, #296]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a12:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d015      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a20:	4b45      	ldr	r3, [pc, #276]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a26:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a2e:	4942      	ldr	r1, [pc, #264]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a3e:	d105      	bne.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a40:	4b3d      	ldr	r3, [pc, #244]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	4a3c      	ldr	r2, [pc, #240]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a4a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d015      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a58:	4b37      	ldr	r3, [pc, #220]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a5e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a66:	4934      	ldr	r1, [pc, #208]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a76:	d105      	bne.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a78:	4b2f      	ldr	r3, [pc, #188]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	4a2e      	ldr	r2, [pc, #184]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a82:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d015      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a90:	4b29      	ldr	r3, [pc, #164]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a96:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a9e:	4926      	ldr	r1, [pc, #152]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aaa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003aae:	d105      	bne.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ab0:	4b21      	ldr	r3, [pc, #132]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	4a20      	ldr	r2, [pc, #128]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ab6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003aba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d015      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ace:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ad6:	4918      	ldr	r1, [pc, #96]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ae6:	d105      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ae8:	4b13      	ldr	r3, [pc, #76]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	4a12      	ldr	r2, [pc, #72]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003af2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d015      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b00:	4b0d      	ldr	r3, [pc, #52]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b06:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b0e:	490a      	ldr	r1, [pc, #40]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b1e:	d105      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b20:	4b05      	ldr	r3, [pc, #20]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	4a04      	ldr	r2, [pc, #16]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b2a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003b2c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	40021000 	.word	0x40021000

08003b3c <memset>:
 8003b3c:	4402      	add	r2, r0
 8003b3e:	4603      	mov	r3, r0
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d100      	bne.n	8003b46 <memset+0xa>
 8003b44:	4770      	bx	lr
 8003b46:	f803 1b01 	strb.w	r1, [r3], #1
 8003b4a:	e7f9      	b.n	8003b40 <memset+0x4>

08003b4c <__libc_init_array>:
 8003b4c:	b570      	push	{r4, r5, r6, lr}
 8003b4e:	4d0d      	ldr	r5, [pc, #52]	@ (8003b84 <__libc_init_array+0x38>)
 8003b50:	4c0d      	ldr	r4, [pc, #52]	@ (8003b88 <__libc_init_array+0x3c>)
 8003b52:	1b64      	subs	r4, r4, r5
 8003b54:	10a4      	asrs	r4, r4, #2
 8003b56:	2600      	movs	r6, #0
 8003b58:	42a6      	cmp	r6, r4
 8003b5a:	d109      	bne.n	8003b70 <__libc_init_array+0x24>
 8003b5c:	4d0b      	ldr	r5, [pc, #44]	@ (8003b8c <__libc_init_array+0x40>)
 8003b5e:	4c0c      	ldr	r4, [pc, #48]	@ (8003b90 <__libc_init_array+0x44>)
 8003b60:	f000 f818 	bl	8003b94 <_init>
 8003b64:	1b64      	subs	r4, r4, r5
 8003b66:	10a4      	asrs	r4, r4, #2
 8003b68:	2600      	movs	r6, #0
 8003b6a:	42a6      	cmp	r6, r4
 8003b6c:	d105      	bne.n	8003b7a <__libc_init_array+0x2e>
 8003b6e:	bd70      	pop	{r4, r5, r6, pc}
 8003b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b74:	4798      	blx	r3
 8003b76:	3601      	adds	r6, #1
 8003b78:	e7ee      	b.n	8003b58 <__libc_init_array+0xc>
 8003b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b7e:	4798      	blx	r3
 8003b80:	3601      	adds	r6, #1
 8003b82:	e7f2      	b.n	8003b6a <__libc_init_array+0x1e>
 8003b84:	08003bec 	.word	0x08003bec
 8003b88:	08003bec 	.word	0x08003bec
 8003b8c:	08003bec 	.word	0x08003bec
 8003b90:	08003bf4 	.word	0x08003bf4

08003b94 <_init>:
 8003b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b96:	bf00      	nop
 8003b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b9a:	bc08      	pop	{r3}
 8003b9c:	469e      	mov	lr, r3
 8003b9e:	4770      	bx	lr

08003ba0 <_fini>:
 8003ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba2:	bf00      	nop
 8003ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ba6:	bc08      	pop	{r3}
 8003ba8:	469e      	mov	lr, r3
 8003baa:	4770      	bx	lr
