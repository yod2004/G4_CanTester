
G4_Game1_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004330  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004508  08004508  00005508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004518  08004518  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004518  08004518  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004518  08004518  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004518  08004518  00005518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800451c  0800451c  0000551c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004520  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000054c  2000000c  0800452c  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000558  0800452c  00006558  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eed1  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023ea  00000000  00000000  00014f0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  000172f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b08  00000000  00000000  00018170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d3a7  00000000  00000000  00018c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000108de  00000000  00000000  0003601f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c53d6  00000000  00000000  000468fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010bcd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c68  00000000  00000000  0010bd18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0010f980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080044f0 	.word	0x080044f0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080044f0 	.word	0x080044f0

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fd0c 	bl	8000c3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f83d 	bl	80002a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 f95d 	bl	80004e4 <MX_GPIO_Init>
  MX_DMA_Init();
 800022a:	f000 f931 	bl	8000490 <MX_DMA_Init>
  MX_ADC1_Init();
 800022e:	f000 f877 	bl	8000320 <MX_ADC1_Init>
  MX_I2C3_Init();
 8000232:	f000 f8ed 	bl	8000410 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init(&hi2c3);
 8000236:	4817      	ldr	r0, [pc, #92]	@ (8000294 <main+0x7c>)
 8000238:	f000 f996 	bl	8000568 <ssd1306_Init>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&adc_value, 1);
 800023c:	2201      	movs	r2, #1
 800023e:	4916      	ldr	r1, [pc, #88]	@ (8000298 <main+0x80>)
 8000240:	4816      	ldr	r0, [pc, #88]	@ (800029c <main+0x84>)
 8000242:	f001 f92f 	bl	80014a4 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t adc_value_configured = 255 - adc_value;
 8000246:	4b14      	ldr	r3, [pc, #80]	@ (8000298 <main+0x80>)
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	43db      	mvns	r3, r3
 800024c:	71fb      	strb	r3, [r7, #7]
//	  char buffer[20];
	  ssd1306_Fill(Black);
 800024e:	2000      	movs	r0, #0
 8000250:	f000 faaa 	bl	80007a8 <ssd1306_Fill>
//	  if(0 < adc_value % 384 && adc_value % 384 < 64){
//		  ssd1306_DrawPixel(0, adc_value % 384, White);
//	  }
	  if(adc_value_configured < 128){
 8000254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000258:	2b00      	cmp	r3, #0
 800025a:	db0b      	blt.n	8000274 <main+0x5c>
		  ssd1306_DrawPixel(0, 64 - adc_value_configured / 2, White);
 800025c:	79fb      	ldrb	r3, [r7, #7]
 800025e:	085b      	lsrs	r3, r3, #1
 8000260:	b2db      	uxtb	r3, r3
 8000262:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000266:	b2db      	uxtb	r3, r3
 8000268:	2201      	movs	r2, #1
 800026a:	4619      	mov	r1, r3
 800026c:	2000      	movs	r0, #0
 800026e:	f000 faf1 	bl	8000854 <ssd1306_DrawPixel>
 8000272:	e00a      	b.n	800028a <main+0x72>
	  }else{
		  ssd1306_DrawPixel(127, (adc_value_configured-128)/2, White);
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	3b80      	subs	r3, #128	@ 0x80
 8000278:	0fda      	lsrs	r2, r3, #31
 800027a:	4413      	add	r3, r2
 800027c:	105b      	asrs	r3, r3, #1
 800027e:	b2db      	uxtb	r3, r3
 8000280:	2201      	movs	r2, #1
 8000282:	4619      	mov	r1, r3
 8000284:	207f      	movs	r0, #127	@ 0x7f
 8000286:	f000 fae5 	bl	8000854 <ssd1306_DrawPixel>
	  }
//	  ssd1306_DrawPixel(adc_value_configured, adc_value_configured, White);
//	  ssd1306_SetCursor(0, 0);
//	  ssd1306_WriteString("hello", Font_7x10, White);
	  ssd1306_UpdateScreen(&hi2c3);
 800028a:	4802      	ldr	r0, [pc, #8]	@ (8000294 <main+0x7c>)
 800028c:	f000 fab0 	bl	80007f0 <ssd1306_UpdateScreen>
  {
 8000290:	e7d9      	b.n	8000246 <main+0x2e>
 8000292:	bf00      	nop
 8000294:	200000f4 	.word	0x200000f4
 8000298:	20000148 	.word	0x20000148
 800029c:	20000028 	.word	0x20000028

080002a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b094      	sub	sp, #80	@ 0x50
 80002a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a6:	f107 0318 	add.w	r3, r7, #24
 80002aa:	2238      	movs	r2, #56	@ 0x38
 80002ac:	2100      	movs	r1, #0
 80002ae:	4618      	mov	r0, r3
 80002b0:	f004 f8f2 	bl	8004498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]
 80002c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002c2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80002c6:	f003 f94d 	bl	8003564 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ca:	2302      	movs	r3, #2
 80002cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002d2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d4:	2340      	movs	r3, #64	@ 0x40
 80002d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002d8:	2300      	movs	r3, #0
 80002da:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002dc:	f107 0318 	add.w	r3, r7, #24
 80002e0:	4618      	mov	r0, r3
 80002e2:	f003 f9f3 	bl	80036cc <HAL_RCC_OscConfig>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002ec:	f000 f91e 	bl	800052c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f0:	230f      	movs	r3, #15
 80002f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002f4:	2301      	movs	r3, #1
 80002f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	2100      	movs	r1, #0
 8000308:	4618      	mov	r0, r3
 800030a:	f003 fcf1 	bl	8003cf0 <HAL_RCC_ClockConfig>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000314:	f000 f90a 	bl	800052c <Error_Handler>
  }
}
 8000318:	bf00      	nop
 800031a:	3750      	adds	r7, #80	@ 0x50
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}

08000320 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b08c      	sub	sp, #48	@ 0x30
 8000324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000326:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	2220      	movs	r2, #32
 8000336:	2100      	movs	r1, #0
 8000338:	4618      	mov	r0, r3
 800033a:	f004 f8ad 	bl	8004498 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800033e:	4b32      	ldr	r3, [pc, #200]	@ (8000408 <MX_ADC1_Init+0xe8>)
 8000340:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000344:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000346:	4b30      	ldr	r3, [pc, #192]	@ (8000408 <MX_ADC1_Init+0xe8>)
 8000348:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800034c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800034e:	4b2e      	ldr	r3, [pc, #184]	@ (8000408 <MX_ADC1_Init+0xe8>)
 8000350:	2210      	movs	r2, #16
 8000352:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000354:	4b2c      	ldr	r3, [pc, #176]	@ (8000408 <MX_ADC1_Init+0xe8>)
 8000356:	2200      	movs	r2, #0
 8000358:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800035a:	4b2b      	ldr	r3, [pc, #172]	@ (8000408 <MX_ADC1_Init+0xe8>)
 800035c:	2200      	movs	r2, #0
 800035e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000360:	4b29      	ldr	r3, [pc, #164]	@ (8000408 <MX_ADC1_Init+0xe8>)
 8000362:	2200      	movs	r2, #0
 8000364:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000366:	4b28      	ldr	r3, [pc, #160]	@ (8000408 <MX_ADC1_Init+0xe8>)
 8000368:	2204      	movs	r2, #4
 800036a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800036c:	4b26      	ldr	r3, [pc, #152]	@ (8000408 <MX_ADC1_Init+0xe8>)
 800036e:	2200      	movs	r2, #0
 8000370:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000372:	4b25      	ldr	r3, [pc, #148]	@ (8000408 <MX_ADC1_Init+0xe8>)
 8000374:	2201      	movs	r2, #1
 8000376:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000378:	4b23      	ldr	r3, [pc, #140]	@ (8000408 <MX_ADC1_Init+0xe8>)
 800037a:	2201      	movs	r2, #1
 800037c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800037e:	4b22      	ldr	r3, [pc, #136]	@ (8000408 <MX_ADC1_Init+0xe8>)
 8000380:	2200      	movs	r2, #0
 8000382:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000386:	4b20      	ldr	r3, [pc, #128]	@ (8000408 <MX_ADC1_Init+0xe8>)
 8000388:	2200      	movs	r2, #0
 800038a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800038c:	4b1e      	ldr	r3, [pc, #120]	@ (8000408 <MX_ADC1_Init+0xe8>)
 800038e:	2200      	movs	r2, #0
 8000390:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000392:	4b1d      	ldr	r3, [pc, #116]	@ (8000408 <MX_ADC1_Init+0xe8>)
 8000394:	2201      	movs	r2, #1
 8000396:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800039a:	4b1b      	ldr	r3, [pc, #108]	@ (8000408 <MX_ADC1_Init+0xe8>)
 800039c:	2200      	movs	r2, #0
 800039e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80003a0:	4b19      	ldr	r3, [pc, #100]	@ (8000408 <MX_ADC1_Init+0xe8>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003a8:	4817      	ldr	r0, [pc, #92]	@ (8000408 <MX_ADC1_Init+0xe8>)
 80003aa:	f000 fef7 	bl	800119c <HAL_ADC_Init>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80003b4:	f000 f8ba 	bl	800052c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80003b8:	2300      	movs	r3, #0
 80003ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003c0:	4619      	mov	r1, r3
 80003c2:	4811      	ldr	r0, [pc, #68]	@ (8000408 <MX_ADC1_Init+0xe8>)
 80003c4:	f001 fe70 	bl	80020a8 <HAL_ADCEx_MultiModeConfigChannel>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80003ce:	f000 f8ad 	bl	800052c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003d2:	4b0e      	ldr	r3, [pc, #56]	@ (800040c <MX_ADC1_Init+0xec>)
 80003d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003d6:	2306      	movs	r3, #6
 80003d8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80003da:	2307      	movs	r3, #7
 80003dc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003de:	237f      	movs	r3, #127	@ 0x7f
 80003e0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003e2:	2304      	movs	r3, #4
 80003e4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003e6:	2300      	movs	r3, #0
 80003e8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	4619      	mov	r1, r3
 80003ee:	4806      	ldr	r0, [pc, #24]	@ (8000408 <MX_ADC1_Init+0xe8>)
 80003f0:	f001 f92a 	bl	8001648 <HAL_ADC_ConfigChannel>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80003fa:	f000 f897 	bl	800052c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003fe:	bf00      	nop
 8000400:	3730      	adds	r7, #48	@ 0x30
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	20000028 	.word	0x20000028
 800040c:	04300002 	.word	0x04300002

08000410 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000414:	4b1b      	ldr	r3, [pc, #108]	@ (8000484 <MX_I2C3_Init+0x74>)
 8000416:	4a1c      	ldr	r2, [pc, #112]	@ (8000488 <MX_I2C3_Init+0x78>)
 8000418:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00503D58;
 800041a:	4b1a      	ldr	r3, [pc, #104]	@ (8000484 <MX_I2C3_Init+0x74>)
 800041c:	4a1b      	ldr	r2, [pc, #108]	@ (800048c <MX_I2C3_Init+0x7c>)
 800041e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000420:	4b18      	ldr	r3, [pc, #96]	@ (8000484 <MX_I2C3_Init+0x74>)
 8000422:	2200      	movs	r2, #0
 8000424:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000426:	4b17      	ldr	r3, [pc, #92]	@ (8000484 <MX_I2C3_Init+0x74>)
 8000428:	2201      	movs	r2, #1
 800042a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800042c:	4b15      	ldr	r3, [pc, #84]	@ (8000484 <MX_I2C3_Init+0x74>)
 800042e:	2200      	movs	r2, #0
 8000430:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000432:	4b14      	ldr	r3, [pc, #80]	@ (8000484 <MX_I2C3_Init+0x74>)
 8000434:	2200      	movs	r2, #0
 8000436:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000438:	4b12      	ldr	r3, [pc, #72]	@ (8000484 <MX_I2C3_Init+0x74>)
 800043a:	2200      	movs	r2, #0
 800043c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800043e:	4b11      	ldr	r3, [pc, #68]	@ (8000484 <MX_I2C3_Init+0x74>)
 8000440:	2200      	movs	r2, #0
 8000442:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000444:	4b0f      	ldr	r3, [pc, #60]	@ (8000484 <MX_I2C3_Init+0x74>)
 8000446:	2200      	movs	r2, #0
 8000448:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800044a:	480e      	ldr	r0, [pc, #56]	@ (8000484 <MX_I2C3_Init+0x74>)
 800044c:	f002 fbd4 	bl	8002bf8 <HAL_I2C_Init>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000456:	f000 f869 	bl	800052c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800045a:	2100      	movs	r1, #0
 800045c:	4809      	ldr	r0, [pc, #36]	@ (8000484 <MX_I2C3_Init+0x74>)
 800045e:	f002 ffe9 	bl	8003434 <HAL_I2CEx_ConfigAnalogFilter>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000468:	f000 f860 	bl	800052c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800046c:	2100      	movs	r1, #0
 800046e:	4805      	ldr	r0, [pc, #20]	@ (8000484 <MX_I2C3_Init+0x74>)
 8000470:	f003 f82b 	bl	80034ca <HAL_I2CEx_ConfigDigitalFilter>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800047a:	f000 f857 	bl	800052c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	200000f4 	.word	0x200000f4
 8000488:	40007800 	.word	0x40007800
 800048c:	00503d58 	.word	0x00503d58

08000490 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000496:	4b12      	ldr	r3, [pc, #72]	@ (80004e0 <MX_DMA_Init+0x50>)
 8000498:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800049a:	4a11      	ldr	r2, [pc, #68]	@ (80004e0 <MX_DMA_Init+0x50>)
 800049c:	f043 0304 	orr.w	r3, r3, #4
 80004a0:	6493      	str	r3, [r2, #72]	@ 0x48
 80004a2:	4b0f      	ldr	r3, [pc, #60]	@ (80004e0 <MX_DMA_Init+0x50>)
 80004a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004a6:	f003 0304 	and.w	r3, r3, #4
 80004aa:	607b      	str	r3, [r7, #4]
 80004ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004ae:	4b0c      	ldr	r3, [pc, #48]	@ (80004e0 <MX_DMA_Init+0x50>)
 80004b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004b2:	4a0b      	ldr	r2, [pc, #44]	@ (80004e0 <MX_DMA_Init+0x50>)
 80004b4:	f043 0301 	orr.w	r3, r3, #1
 80004b8:	6493      	str	r3, [r2, #72]	@ 0x48
 80004ba:	4b09      	ldr	r3, [pc, #36]	@ (80004e0 <MX_DMA_Init+0x50>)
 80004bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004be:	f003 0301 	and.w	r3, r3, #1
 80004c2:	603b      	str	r3, [r7, #0]
 80004c4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004c6:	2200      	movs	r2, #0
 80004c8:	2100      	movs	r1, #0
 80004ca:	200b      	movs	r0, #11
 80004cc:	f001 ff6b 	bl	80023a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004d0:	200b      	movs	r0, #11
 80004d2:	f001 ff82 	bl	80023da <HAL_NVIC_EnableIRQ>

}
 80004d6:	bf00      	nop
 80004d8:	3708      	adds	r7, #8
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40021000 	.word	0x40021000

080004e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000528 <MX_GPIO_Init+0x44>)
 80004ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ee:	4a0e      	ldr	r2, [pc, #56]	@ (8000528 <MX_GPIO_Init+0x44>)
 80004f0:	f043 0301 	orr.w	r3, r3, #1
 80004f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000528 <MX_GPIO_Init+0x44>)
 80004f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004fa:	f003 0301 	and.w	r3, r3, #1
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000502:	4b09      	ldr	r3, [pc, #36]	@ (8000528 <MX_GPIO_Init+0x44>)
 8000504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000506:	4a08      	ldr	r2, [pc, #32]	@ (8000528 <MX_GPIO_Init+0x44>)
 8000508:	f043 0302 	orr.w	r3, r3, #2
 800050c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800050e:	4b06      	ldr	r3, [pc, #24]	@ (8000528 <MX_GPIO_Init+0x44>)
 8000510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000512:	f003 0302 	and.w	r3, r3, #2
 8000516:	603b      	str	r3, [r7, #0]
 8000518:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	40021000 	.word	0x40021000

0800052c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000530:	b672      	cpsid	i
}
 8000532:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000534:	bf00      	nop
 8000536:	e7fd      	b.n	8000534 <Error_Handler+0x8>

08000538 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af04      	add	r7, sp, #16
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	460b      	mov	r3, r1
 8000542:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8000544:	230a      	movs	r3, #10
 8000546:	9302      	str	r3, [sp, #8]
 8000548:	2301      	movs	r3, #1
 800054a:	9301      	str	r3, [sp, #4]
 800054c:	1cfb      	adds	r3, r7, #3
 800054e:	9300      	str	r3, [sp, #0]
 8000550:	2301      	movs	r3, #1
 8000552:	2200      	movs	r2, #0
 8000554:	2178      	movs	r1, #120	@ 0x78
 8000556:	6878      	ldr	r0, [r7, #4]
 8000558:	f002 fbea 	bl	8002d30 <HAL_I2C_Mem_Write>
 800055c:	4603      	mov	r3, r0
}
 800055e:	4618      	mov	r0, r3
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
	...

08000568 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8000570:	2064      	movs	r0, #100	@ 0x64
 8000572:	f000 fbd3 	bl	8000d1c <HAL_Delay>
    int status = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 800057a:	21ae      	movs	r1, #174	@ 0xae
 800057c:	6878      	ldr	r0, [r7, #4]
 800057e:	f7ff ffdb 	bl	8000538 <ssd1306_WriteCommand>
 8000582:	4603      	mov	r3, r0
 8000584:	461a      	mov	r2, r3
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	4413      	add	r3, r2
 800058a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 800058c:	2120      	movs	r1, #32
 800058e:	6878      	ldr	r0, [r7, #4]
 8000590:	f7ff ffd2 	bl	8000538 <ssd1306_WriteCommand>
 8000594:	4603      	mov	r3, r0
 8000596:	461a      	mov	r2, r3
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	4413      	add	r3, r2
 800059c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800059e:	2110      	movs	r1, #16
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f7ff ffc9 	bl	8000538 <ssd1306_WriteCommand>
 80005a6:	4603      	mov	r3, r0
 80005a8:	461a      	mov	r2, r3
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	4413      	add	r3, r2
 80005ae:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 80005b0:	21b0      	movs	r1, #176	@ 0xb0
 80005b2:	6878      	ldr	r0, [r7, #4]
 80005b4:	f7ff ffc0 	bl	8000538 <ssd1306_WriteCommand>
 80005b8:	4603      	mov	r3, r0
 80005ba:	461a      	mov	r2, r3
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	4413      	add	r3, r2
 80005c0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 80005c2:	21c8      	movs	r1, #200	@ 0xc8
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f7ff ffb7 	bl	8000538 <ssd1306_WriteCommand>
 80005ca:	4603      	mov	r3, r0
 80005cc:	461a      	mov	r2, r3
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	4413      	add	r3, r2
 80005d2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 80005d4:	2100      	movs	r1, #0
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f7ff ffae 	bl	8000538 <ssd1306_WriteCommand>
 80005dc:	4603      	mov	r3, r0
 80005de:	461a      	mov	r2, r3
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	4413      	add	r3, r2
 80005e4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 80005e6:	2110      	movs	r1, #16
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f7ff ffa5 	bl	8000538 <ssd1306_WriteCommand>
 80005ee:	4603      	mov	r3, r0
 80005f0:	461a      	mov	r2, r3
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	4413      	add	r3, r2
 80005f6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 80005f8:	2140      	movs	r1, #64	@ 0x40
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f7ff ff9c 	bl	8000538 <ssd1306_WriteCommand>
 8000600:	4603      	mov	r3, r0
 8000602:	461a      	mov	r2, r3
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	4413      	add	r3, r2
 8000608:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 800060a:	2181      	movs	r1, #129	@ 0x81
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f7ff ff93 	bl	8000538 <ssd1306_WriteCommand>
 8000612:	4603      	mov	r3, r0
 8000614:	461a      	mov	r2, r3
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	4413      	add	r3, r2
 800061a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 800061c:	21ff      	movs	r1, #255	@ 0xff
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f7ff ff8a 	bl	8000538 <ssd1306_WriteCommand>
 8000624:	4603      	mov	r3, r0
 8000626:	461a      	mov	r2, r3
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	4413      	add	r3, r2
 800062c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 800062e:	21a1      	movs	r1, #161	@ 0xa1
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	f7ff ff81 	bl	8000538 <ssd1306_WriteCommand>
 8000636:	4603      	mov	r3, r0
 8000638:	461a      	mov	r2, r3
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	4413      	add	r3, r2
 800063e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8000640:	21a6      	movs	r1, #166	@ 0xa6
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f7ff ff78 	bl	8000538 <ssd1306_WriteCommand>
 8000648:	4603      	mov	r3, r0
 800064a:	461a      	mov	r2, r3
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	4413      	add	r3, r2
 8000650:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8000652:	21a8      	movs	r1, #168	@ 0xa8
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f7ff ff6f 	bl	8000538 <ssd1306_WriteCommand>
 800065a:	4603      	mov	r3, r0
 800065c:	461a      	mov	r2, r3
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	4413      	add	r3, r2
 8000662:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8000664:	213f      	movs	r1, #63	@ 0x3f
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f7ff ff66 	bl	8000538 <ssd1306_WriteCommand>
 800066c:	4603      	mov	r3, r0
 800066e:	461a      	mov	r2, r3
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	4413      	add	r3, r2
 8000674:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000676:	21a4      	movs	r1, #164	@ 0xa4
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f7ff ff5d 	bl	8000538 <ssd1306_WriteCommand>
 800067e:	4603      	mov	r3, r0
 8000680:	461a      	mov	r2, r3
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	4413      	add	r3, r2
 8000686:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8000688:	21d3      	movs	r1, #211	@ 0xd3
 800068a:	6878      	ldr	r0, [r7, #4]
 800068c:	f7ff ff54 	bl	8000538 <ssd1306_WriteCommand>
 8000690:	4603      	mov	r3, r0
 8000692:	461a      	mov	r2, r3
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	4413      	add	r3, r2
 8000698:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 800069a:	2100      	movs	r1, #0
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f7ff ff4b 	bl	8000538 <ssd1306_WriteCommand>
 80006a2:	4603      	mov	r3, r0
 80006a4:	461a      	mov	r2, r3
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	4413      	add	r3, r2
 80006aa:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 80006ac:	21d5      	movs	r1, #213	@ 0xd5
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f7ff ff42 	bl	8000538 <ssd1306_WriteCommand>
 80006b4:	4603      	mov	r3, r0
 80006b6:	461a      	mov	r2, r3
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	4413      	add	r3, r2
 80006bc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 80006be:	21f0      	movs	r1, #240	@ 0xf0
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f7ff ff39 	bl	8000538 <ssd1306_WriteCommand>
 80006c6:	4603      	mov	r3, r0
 80006c8:	461a      	mov	r2, r3
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	4413      	add	r3, r2
 80006ce:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 80006d0:	21d9      	movs	r1, #217	@ 0xd9
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f7ff ff30 	bl	8000538 <ssd1306_WriteCommand>
 80006d8:	4603      	mov	r3, r0
 80006da:	461a      	mov	r2, r3
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	4413      	add	r3, r2
 80006e0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 80006e2:	2122      	movs	r1, #34	@ 0x22
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f7ff ff27 	bl	8000538 <ssd1306_WriteCommand>
 80006ea:	4603      	mov	r3, r0
 80006ec:	461a      	mov	r2, r3
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	4413      	add	r3, r2
 80006f2:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 80006f4:	21da      	movs	r1, #218	@ 0xda
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f7ff ff1e 	bl	8000538 <ssd1306_WriteCommand>
 80006fc:	4603      	mov	r3, r0
 80006fe:	461a      	mov	r2, r3
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	4413      	add	r3, r2
 8000704:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_COM_LR_REMAP << 5 | SSD1306_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);   
 8000706:	2112      	movs	r1, #18
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f7ff ff15 	bl	8000538 <ssd1306_WriteCommand>
 800070e:	4603      	mov	r3, r0
 8000710:	461a      	mov	r2, r3
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	4413      	add	r3, r2
 8000716:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8000718:	21db      	movs	r1, #219	@ 0xdb
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f7ff ff0c 	bl	8000538 <ssd1306_WriteCommand>
 8000720:	4603      	mov	r3, r0
 8000722:	461a      	mov	r2, r3
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	4413      	add	r3, r2
 8000728:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 800072a:	2120      	movs	r1, #32
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f7ff ff03 	bl	8000538 <ssd1306_WriteCommand>
 8000732:	4603      	mov	r3, r0
 8000734:	461a      	mov	r2, r3
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	4413      	add	r3, r2
 800073a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 800073c:	218d      	movs	r1, #141	@ 0x8d
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f7ff fefa 	bl	8000538 <ssd1306_WriteCommand>
 8000744:	4603      	mov	r3, r0
 8000746:	461a      	mov	r2, r3
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	4413      	add	r3, r2
 800074c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 800074e:	2114      	movs	r1, #20
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f7ff fef1 	bl	8000538 <ssd1306_WriteCommand>
 8000756:	4603      	mov	r3, r0
 8000758:	461a      	mov	r2, r3
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	4413      	add	r3, r2
 800075e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8000760:	21af      	movs	r1, #175	@ 0xaf
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f7ff fee8 	bl	8000538 <ssd1306_WriteCommand>
 8000768:	4603      	mov	r3, r0
 800076a:	461a      	mov	r2, r3
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	4413      	add	r3, r2
 8000770:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <ssd1306_Init+0x214>
        return 1;
 8000778:	2301      	movs	r3, #1
 800077a:	e00f      	b.n	800079c <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 800077c:	2000      	movs	r0, #0
 800077e:	f000 f813 	bl	80007a8 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f000 f834 	bl	80007f0 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000788:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <ssd1306_Init+0x23c>)
 800078a:	2200      	movs	r2, #0
 800078c:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800078e:	4b05      	ldr	r3, [pc, #20]	@ (80007a4 <ssd1306_Init+0x23c>)
 8000790:	2200      	movs	r2, #0
 8000792:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8000794:	4b03      	ldr	r3, [pc, #12]	@ (80007a4 <ssd1306_Init+0x23c>)
 8000796:	2201      	movs	r2, #1
 8000798:	715a      	strb	r2, [r3, #5]

    return 0;
 800079a:	2300      	movs	r3, #0
}
 800079c:	4618      	mov	r0, r3
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	2000054c 	.word	0x2000054c

080007a8 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	e00d      	b.n	80007d4 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d101      	bne.n	80007c2 <ssd1306_Fill+0x1a>
 80007be:	2100      	movs	r1, #0
 80007c0:	e000      	b.n	80007c4 <ssd1306_Fill+0x1c>
 80007c2:	21ff      	movs	r1, #255	@ 0xff
 80007c4:	4a09      	ldr	r2, [pc, #36]	@ (80007ec <ssd1306_Fill+0x44>)
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	4413      	add	r3, r2
 80007ca:	460a      	mov	r2, r1
 80007cc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	3301      	adds	r3, #1
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80007da:	d3ed      	bcc.n	80007b8 <ssd1306_Fill+0x10>
    }
}
 80007dc:	bf00      	nop
 80007de:	bf00      	nop
 80007e0:	3714      	adds	r7, #20
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	2000014c 	.word	0x2000014c

080007f0 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b088      	sub	sp, #32
 80007f4:	af04      	add	r7, sp, #16
 80007f6:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 80007f8:	2300      	movs	r3, #0
 80007fa:	73fb      	strb	r3, [r7, #15]
 80007fc:	e020      	b.n	8000840 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	3b50      	subs	r3, #80	@ 0x50
 8000802:	b2db      	uxtb	r3, r3
 8000804:	4619      	mov	r1, r3
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff fe96 	bl	8000538 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 800080c:	2100      	movs	r1, #0
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff fe92 	bl	8000538 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8000814:	2110      	movs	r1, #16
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f7ff fe8e 	bl	8000538 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 800081c:	7bfb      	ldrb	r3, [r7, #15]
 800081e:	01db      	lsls	r3, r3, #7
 8000820:	4a0b      	ldr	r2, [pc, #44]	@ (8000850 <ssd1306_UpdateScreen+0x60>)
 8000822:	4413      	add	r3, r2
 8000824:	2264      	movs	r2, #100	@ 0x64
 8000826:	9202      	str	r2, [sp, #8]
 8000828:	2280      	movs	r2, #128	@ 0x80
 800082a:	9201      	str	r2, [sp, #4]
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	2301      	movs	r3, #1
 8000830:	2240      	movs	r2, #64	@ 0x40
 8000832:	2178      	movs	r1, #120	@ 0x78
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f002 fa7b 	bl	8002d30 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 800083a:	7bfb      	ldrb	r3, [r7, #15]
 800083c:	3301      	adds	r3, #1
 800083e:	73fb      	strb	r3, [r7, #15]
 8000840:	7bfb      	ldrb	r3, [r7, #15]
 8000842:	2b07      	cmp	r3, #7
 8000844:	d9db      	bls.n	80007fe <ssd1306_UpdateScreen+0xe>
    }
}
 8000846:	bf00      	nop
 8000848:	bf00      	nop
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	2000014c 	.word	0x2000014c

08000854 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	71fb      	strb	r3, [r7, #7]
 800085e:	460b      	mov	r3, r1
 8000860:	71bb      	strb	r3, [r7, #6]
 8000862:	4613      	mov	r3, r2
 8000864:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8000866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086a:	2b00      	cmp	r3, #0
 800086c:	db48      	blt.n	8000900 <ssd1306_DrawPixel+0xac>
 800086e:	79bb      	ldrb	r3, [r7, #6]
 8000870:	2b3f      	cmp	r3, #63	@ 0x3f
 8000872:	d845      	bhi.n	8000900 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8000874:	4b25      	ldr	r3, [pc, #148]	@ (800090c <ssd1306_DrawPixel+0xb8>)
 8000876:	791b      	ldrb	r3, [r3, #4]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d006      	beq.n	800088a <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 800087c:	797b      	ldrb	r3, [r7, #5]
 800087e:	2b00      	cmp	r3, #0
 8000880:	bf0c      	ite	eq
 8000882:	2301      	moveq	r3, #1
 8000884:	2300      	movne	r3, #0
 8000886:	b2db      	uxtb	r3, r3
 8000888:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 800088a:	797b      	ldrb	r3, [r7, #5]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d11a      	bne.n	80008c6 <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000890:	79fa      	ldrb	r2, [r7, #7]
 8000892:	79bb      	ldrb	r3, [r7, #6]
 8000894:	08db      	lsrs	r3, r3, #3
 8000896:	b2d8      	uxtb	r0, r3
 8000898:	4603      	mov	r3, r0
 800089a:	01db      	lsls	r3, r3, #7
 800089c:	4413      	add	r3, r2
 800089e:	4a1c      	ldr	r2, [pc, #112]	@ (8000910 <ssd1306_DrawPixel+0xbc>)
 80008a0:	5cd3      	ldrb	r3, [r2, r3]
 80008a2:	b25a      	sxtb	r2, r3
 80008a4:	79bb      	ldrb	r3, [r7, #6]
 80008a6:	f003 0307 	and.w	r3, r3, #7
 80008aa:	2101      	movs	r1, #1
 80008ac:	fa01 f303 	lsl.w	r3, r1, r3
 80008b0:	b25b      	sxtb	r3, r3
 80008b2:	4313      	orrs	r3, r2
 80008b4:	b259      	sxtb	r1, r3
 80008b6:	79fa      	ldrb	r2, [r7, #7]
 80008b8:	4603      	mov	r3, r0
 80008ba:	01db      	lsls	r3, r3, #7
 80008bc:	4413      	add	r3, r2
 80008be:	b2c9      	uxtb	r1, r1
 80008c0:	4a13      	ldr	r2, [pc, #76]	@ (8000910 <ssd1306_DrawPixel+0xbc>)
 80008c2:	54d1      	strb	r1, [r2, r3]
 80008c4:	e01d      	b.n	8000902 <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80008c6:	79fa      	ldrb	r2, [r7, #7]
 80008c8:	79bb      	ldrb	r3, [r7, #6]
 80008ca:	08db      	lsrs	r3, r3, #3
 80008cc:	b2d8      	uxtb	r0, r3
 80008ce:	4603      	mov	r3, r0
 80008d0:	01db      	lsls	r3, r3, #7
 80008d2:	4413      	add	r3, r2
 80008d4:	4a0e      	ldr	r2, [pc, #56]	@ (8000910 <ssd1306_DrawPixel+0xbc>)
 80008d6:	5cd3      	ldrb	r3, [r2, r3]
 80008d8:	b25a      	sxtb	r2, r3
 80008da:	79bb      	ldrb	r3, [r7, #6]
 80008dc:	f003 0307 	and.w	r3, r3, #7
 80008e0:	2101      	movs	r1, #1
 80008e2:	fa01 f303 	lsl.w	r3, r1, r3
 80008e6:	b25b      	sxtb	r3, r3
 80008e8:	43db      	mvns	r3, r3
 80008ea:	b25b      	sxtb	r3, r3
 80008ec:	4013      	ands	r3, r2
 80008ee:	b259      	sxtb	r1, r3
 80008f0:	79fa      	ldrb	r2, [r7, #7]
 80008f2:	4603      	mov	r3, r0
 80008f4:	01db      	lsls	r3, r3, #7
 80008f6:	4413      	add	r3, r2
 80008f8:	b2c9      	uxtb	r1, r1
 80008fa:	4a05      	ldr	r2, [pc, #20]	@ (8000910 <ssd1306_DrawPixel+0xbc>)
 80008fc:	54d1      	strb	r1, [r2, r3]
 80008fe:	e000      	b.n	8000902 <ssd1306_DrawPixel+0xae>
        return;
 8000900:	bf00      	nop
    }
}
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	2000054c 	.word	0x2000054c
 8000910:	2000014c 	.word	0x2000014c

08000914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091a:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <HAL_MspInit+0x44>)
 800091c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800091e:	4a0e      	ldr	r2, [pc, #56]	@ (8000958 <HAL_MspInit+0x44>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	6613      	str	r3, [r2, #96]	@ 0x60
 8000926:	4b0c      	ldr	r3, [pc, #48]	@ (8000958 <HAL_MspInit+0x44>)
 8000928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000932:	4b09      	ldr	r3, [pc, #36]	@ (8000958 <HAL_MspInit+0x44>)
 8000934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000936:	4a08      	ldr	r2, [pc, #32]	@ (8000958 <HAL_MspInit+0x44>)
 8000938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800093c:	6593      	str	r3, [r2, #88]	@ 0x58
 800093e:	4b06      	ldr	r3, [pc, #24]	@ (8000958 <HAL_MspInit+0x44>)
 8000940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800094a:	f002 feaf 	bl	80036ac <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40021000 	.word	0x40021000

0800095c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b09a      	sub	sp, #104	@ 0x68
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000974:	f107 0310 	add.w	r3, r7, #16
 8000978:	2244      	movs	r2, #68	@ 0x44
 800097a:	2100      	movs	r1, #0
 800097c:	4618      	mov	r0, r3
 800097e:	f003 fd8b 	bl	8004498 <memset>
  if(hadc->Instance==ADC1)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800098a:	d15f      	bne.n	8000a4c <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800098c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000990:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000992:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000996:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000998:	f107 0310 	add.w	r3, r7, #16
 800099c:	4618      	mov	r0, r3
 800099e:	f003 fb8b 	bl	80040b8 <HAL_RCCEx_PeriphCLKConfig>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80009a8:	f7ff fdc0 	bl	800052c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80009ac:	4b29      	ldr	r3, [pc, #164]	@ (8000a54 <HAL_ADC_MspInit+0xf8>)
 80009ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b0:	4a28      	ldr	r2, [pc, #160]	@ (8000a54 <HAL_ADC_MspInit+0xf8>)
 80009b2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80009b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b8:	4b26      	ldr	r3, [pc, #152]	@ (8000a54 <HAL_ADC_MspInit+0xf8>)
 80009ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c4:	4b23      	ldr	r3, [pc, #140]	@ (8000a54 <HAL_ADC_MspInit+0xf8>)
 80009c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c8:	4a22      	ldr	r2, [pc, #136]	@ (8000a54 <HAL_ADC_MspInit+0xf8>)
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009d0:	4b20      	ldr	r3, [pc, #128]	@ (8000a54 <HAL_ADC_MspInit+0xf8>)
 80009d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d4:	f003 0301 	and.w	r3, r3, #1
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009dc:	2301      	movs	r3, #1
 80009de:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009e0:	2303      	movs	r3, #3
 80009e2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009ec:	4619      	mov	r1, r3
 80009ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009f2:	f001 ff7f 	bl	80028f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80009f6:	4b18      	ldr	r3, [pc, #96]	@ (8000a58 <HAL_ADC_MspInit+0xfc>)
 80009f8:	4a18      	ldr	r2, [pc, #96]	@ (8000a5c <HAL_ADC_MspInit+0x100>)
 80009fa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80009fc:	4b16      	ldr	r3, [pc, #88]	@ (8000a58 <HAL_ADC_MspInit+0xfc>)
 80009fe:	2205      	movs	r2, #5
 8000a00:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a02:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <HAL_ADC_MspInit+0xfc>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a08:	4b13      	ldr	r3, [pc, #76]	@ (8000a58 <HAL_ADC_MspInit+0xfc>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a0e:	4b12      	ldr	r3, [pc, #72]	@ (8000a58 <HAL_ADC_MspInit+0xfc>)
 8000a10:	2280      	movs	r2, #128	@ 0x80
 8000a12:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a14:	4b10      	ldr	r3, [pc, #64]	@ (8000a58 <HAL_ADC_MspInit+0xfc>)
 8000a16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a1a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a58 <HAL_ADC_MspInit+0xfc>)
 8000a1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a22:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <HAL_ADC_MspInit+0xfc>)
 8000a26:	2220      	movs	r2, #32
 8000a28:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a58 <HAL_ADC_MspInit+0xfc>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a30:	4809      	ldr	r0, [pc, #36]	@ (8000a58 <HAL_ADC_MspInit+0xfc>)
 8000a32:	f001 fced 	bl	8002410 <HAL_DMA_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8000a3c:	f7ff fd76 	bl	800052c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a05      	ldr	r2, [pc, #20]	@ (8000a58 <HAL_ADC_MspInit+0xfc>)
 8000a44:	655a      	str	r2, [r3, #84]	@ 0x54
 8000a46:	4a04      	ldr	r2, [pc, #16]	@ (8000a58 <HAL_ADC_MspInit+0xfc>)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000a4c:	bf00      	nop
 8000a4e:	3768      	adds	r7, #104	@ 0x68
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40021000 	.word	0x40021000
 8000a58:	20000094 	.word	0x20000094
 8000a5c:	40020008 	.word	0x40020008

08000a60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b09c      	sub	sp, #112	@ 0x70
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a78:	f107 0318 	add.w	r3, r7, #24
 8000a7c:	2244      	movs	r2, #68	@ 0x44
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f003 fd09 	bl	8004498 <memset>
  if(hi2c->Instance==I2C3)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a2e      	ldr	r2, [pc, #184]	@ (8000b44 <HAL_I2C_MspInit+0xe4>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d154      	bne.n	8000b3a <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000a90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a94:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000a96:	2300      	movs	r3, #0
 8000a98:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a9a:	f107 0318 	add.w	r3, r7, #24
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f003 fb0a 	bl	80040b8 <HAL_RCCEx_PeriphCLKConfig>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000aaa:	f7ff fd3f 	bl	800052c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	4b26      	ldr	r3, [pc, #152]	@ (8000b48 <HAL_I2C_MspInit+0xe8>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab2:	4a25      	ldr	r2, [pc, #148]	@ (8000b48 <HAL_I2C_MspInit+0xe8>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aba:	4b23      	ldr	r3, [pc, #140]	@ (8000b48 <HAL_I2C_MspInit+0xe8>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac6:	4b20      	ldr	r3, [pc, #128]	@ (8000b48 <HAL_I2C_MspInit+0xe8>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aca:	4a1f      	ldr	r2, [pc, #124]	@ (8000b48 <HAL_I2C_MspInit+0xe8>)
 8000acc:	f043 0302 	orr.w	r3, r3, #2
 8000ad0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ad2:	4b1d      	ldr	r3, [pc, #116]	@ (8000b48 <HAL_I2C_MspInit+0xe8>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB5     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ade:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ae2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ae4:	2312      	movs	r3, #18
 8000ae6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	2300      	movs	r3, #0
 8000aee:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8000af0:	2302      	movs	r3, #2
 8000af2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000af8:	4619      	mov	r1, r3
 8000afa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000afe:	f001 fef9 	bl	80028f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b02:	2320      	movs	r3, #32
 8000b04:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b06:	2312      	movs	r3, #18
 8000b08:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8000b12:	2308      	movs	r3, #8
 8000b14:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b16:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	480b      	ldr	r0, [pc, #44]	@ (8000b4c <HAL_I2C_MspInit+0xec>)
 8000b1e:	f001 fee9 	bl	80028f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000b22:	4b09      	ldr	r3, [pc, #36]	@ (8000b48 <HAL_I2C_MspInit+0xe8>)
 8000b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b26:	4a08      	ldr	r2, [pc, #32]	@ (8000b48 <HAL_I2C_MspInit+0xe8>)
 8000b28:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000b2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b2e:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <HAL_I2C_MspInit+0xe8>)
 8000b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b32:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8000b3a:	bf00      	nop
 8000b3c:	3770      	adds	r7, #112	@ 0x70
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40007800 	.word	0x40007800
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	48000400 	.word	0x48000400

08000b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <NMI_Handler+0x4>

08000b58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <HardFault_Handler+0x4>

08000b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <MemManage_Handler+0x4>

08000b68 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <BusFault_Handler+0x4>

08000b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <UsageFault_Handler+0x4>

08000b78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba6:	f000 f89b 	bl	8000ce0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000bb4:	4802      	ldr	r0, [pc, #8]	@ (8000bc0 <DMA1_Channel1_IRQHandler+0x10>)
 8000bb6:	f001 fd4e 	bl	8002656 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000094 	.word	0x20000094

08000bc4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bc8:	4b06      	ldr	r3, [pc, #24]	@ (8000be4 <SystemInit+0x20>)
 8000bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bce:	4a05      	ldr	r2, [pc, #20]	@ (8000be4 <SystemInit+0x20>)
 8000bd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000be8:	480d      	ldr	r0, [pc, #52]	@ (8000c20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bea:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bec:	f7ff ffea 	bl	8000bc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf0:	480c      	ldr	r0, [pc, #48]	@ (8000c24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bf2:	490d      	ldr	r1, [pc, #52]	@ (8000c28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c2c <LoopForever+0xe>)
  movs r3, #0
 8000bf6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000bf8:	e002      	b.n	8000c00 <LoopCopyDataInit>

08000bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfe:	3304      	adds	r3, #4

08000c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c04:	d3f9      	bcc.n	8000bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c06:	4a0a      	ldr	r2, [pc, #40]	@ (8000c30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c08:	4c0a      	ldr	r4, [pc, #40]	@ (8000c34 <LoopForever+0x16>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c0c:	e001      	b.n	8000c12 <LoopFillZerobss>

08000c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c10:	3204      	adds	r2, #4

08000c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c14:	d3fb      	bcc.n	8000c0e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000c16:	f003 fc47 	bl	80044a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c1a:	f7ff fafd 	bl	8000218 <main>

08000c1e <LoopForever>:

LoopForever:
    b LoopForever
 8000c1e:	e7fe      	b.n	8000c1e <LoopForever>
  ldr   r0, =_estack
 8000c20:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c28:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c2c:	08004520 	.word	0x08004520
  ldr r2, =_sbss
 8000c30:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c34:	20000558 	.word	0x20000558

08000c38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c38:	e7fe      	b.n	8000c38 <ADC1_2_IRQHandler>

08000c3a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c40:	2300      	movs	r3, #0
 8000c42:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c44:	2003      	movs	r0, #3
 8000c46:	f001 fba3 	bl	8002390 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c4a:	200f      	movs	r0, #15
 8000c4c:	f000 f80e 	bl	8000c6c <HAL_InitTick>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d002      	beq.n	8000c5c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	71fb      	strb	r3, [r7, #7]
 8000c5a:	e001      	b.n	8000c60 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c5c:	f7ff fe5a 	bl	8000914 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c60:	79fb      	ldrb	r3, [r7, #7]

}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c74:	2300      	movs	r3, #0
 8000c76:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c78:	4b16      	ldr	r3, [pc, #88]	@ (8000cd4 <HAL_InitTick+0x68>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d022      	beq.n	8000cc6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c80:	4b15      	ldr	r3, [pc, #84]	@ (8000cd8 <HAL_InitTick+0x6c>)
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	4b13      	ldr	r3, [pc, #76]	@ (8000cd4 <HAL_InitTick+0x68>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000c8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c94:	4618      	mov	r0, r3
 8000c96:	f001 fbae 	bl	80023f6 <HAL_SYSTICK_Config>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d10f      	bne.n	8000cc0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b0f      	cmp	r3, #15
 8000ca4:	d809      	bhi.n	8000cba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	6879      	ldr	r1, [r7, #4]
 8000caa:	f04f 30ff 	mov.w	r0, #4294967295
 8000cae:	f001 fb7a 	bl	80023a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cdc <HAL_InitTick+0x70>)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6013      	str	r3, [r2, #0]
 8000cb8:	e007      	b.n	8000cca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	73fb      	strb	r3, [r7, #15]
 8000cbe:	e004      	b.n	8000cca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	73fb      	strb	r3, [r7, #15]
 8000cc4:	e001      	b.n	8000cca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3710      	adds	r7, #16
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000008 	.word	0x20000008
 8000cd8:	20000000 	.word	0x20000000
 8000cdc:	20000004 	.word	0x20000004

08000ce0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce4:	4b05      	ldr	r3, [pc, #20]	@ (8000cfc <HAL_IncTick+0x1c>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b05      	ldr	r3, [pc, #20]	@ (8000d00 <HAL_IncTick+0x20>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4413      	add	r3, r2
 8000cee:	4a03      	ldr	r2, [pc, #12]	@ (8000cfc <HAL_IncTick+0x1c>)
 8000cf0:	6013      	str	r3, [r2, #0]
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	20000554 	.word	0x20000554
 8000d00:	20000008 	.word	0x20000008

08000d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b03      	ldr	r3, [pc, #12]	@ (8000d18 <HAL_GetTick+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000554 	.word	0x20000554

08000d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d24:	f7ff ffee 	bl	8000d04 <HAL_GetTick>
 8000d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d34:	d004      	beq.n	8000d40 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d36:	4b09      	ldr	r3, [pc, #36]	@ (8000d5c <HAL_Delay+0x40>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d40:	bf00      	nop
 8000d42:	f7ff ffdf 	bl	8000d04 <HAL_GetTick>
 8000d46:	4602      	mov	r2, r0
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	1ad3      	subs	r3, r2, r3
 8000d4c:	68fa      	ldr	r2, [r7, #12]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d8f7      	bhi.n	8000d42 <HAL_Delay+0x26>
  {
  }
}
 8000d52:	bf00      	nop
 8000d54:	bf00      	nop
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000008 	.word	0x20000008

08000d60 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	431a      	orrs	r2, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	609a      	str	r2, [r3, #8]
}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d86:	b480      	push	{r7}
 8000d88:	b083      	sub	sp, #12
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
 8000d8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	431a      	orrs	r2, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b087      	sub	sp, #28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
 8000dd4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	3360      	adds	r3, #96	@ 0x60
 8000dda:	461a      	mov	r2, r3
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	4413      	add	r3, r2
 8000de2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4b08      	ldr	r3, [pc, #32]	@ (8000e0c <LL_ADC_SetOffset+0x44>)
 8000dea:	4013      	ands	r3, r2
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000df2:	683a      	ldr	r2, [r7, #0]
 8000df4:	430a      	orrs	r2, r1
 8000df6:	4313      	orrs	r3, r2
 8000df8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000e00:	bf00      	nop
 8000e02:	371c      	adds	r7, #28
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	03fff000 	.word	0x03fff000

08000e10 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	3360      	adds	r3, #96	@ 0x60
 8000e1e:	461a      	mov	r2, r3
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	4413      	add	r3, r2
 8000e26:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b087      	sub	sp, #28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	3360      	adds	r3, #96	@ 0x60
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	4413      	add	r3, r2
 8000e54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	431a      	orrs	r2, r3
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000e66:	bf00      	nop
 8000e68:	371c      	adds	r7, #28
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000e72:	b480      	push	{r7}
 8000e74:	b087      	sub	sp, #28
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	60f8      	str	r0, [r7, #12]
 8000e7a:	60b9      	str	r1, [r7, #8]
 8000e7c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	3360      	adds	r3, #96	@ 0x60
 8000e82:	461a      	mov	r2, r3
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	4413      	add	r3, r2
 8000e8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	431a      	orrs	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000e9c:	bf00      	nop
 8000e9e:	371c      	adds	r7, #28
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b087      	sub	sp, #28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	3360      	adds	r3, #96	@ 0x60
 8000eb8:	461a      	mov	r2, r3
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	4413      	add	r3, r2
 8000ec0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	431a      	orrs	r2, r3
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000ed2:	bf00      	nop
 8000ed4:	371c      	adds	r7, #28
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
 8000ee6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	695b      	ldr	r3, [r3, #20]
 8000eec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	615a      	str	r2, [r3, #20]
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d101      	bne.n	8000f1c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e000      	b.n	8000f1e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b087      	sub	sp, #28
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	60f8      	str	r0, [r7, #12]
 8000f32:	60b9      	str	r1, [r7, #8]
 8000f34:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	3330      	adds	r3, #48	@ 0x30
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	0a1b      	lsrs	r3, r3, #8
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	f003 030c 	and.w	r3, r3, #12
 8000f46:	4413      	add	r3, r2
 8000f48:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	f003 031f 	and.w	r3, r3, #31
 8000f54:	211f      	movs	r1, #31
 8000f56:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	401a      	ands	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	0e9b      	lsrs	r3, r3, #26
 8000f62:	f003 011f 	and.w	r1, r3, #31
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	f003 031f 	and.w	r3, r3, #31
 8000f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f70:	431a      	orrs	r2, r3
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f76:	bf00      	nop
 8000f78:	371c      	adds	r7, #28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b087      	sub	sp, #28
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	60f8      	str	r0, [r7, #12]
 8000f8a:	60b9      	str	r1, [r7, #8]
 8000f8c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	3314      	adds	r3, #20
 8000f92:	461a      	mov	r2, r3
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	0e5b      	lsrs	r3, r3, #25
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	f003 0304 	and.w	r3, r3, #4
 8000f9e:	4413      	add	r3, r2
 8000fa0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	0d1b      	lsrs	r3, r3, #20
 8000faa:	f003 031f 	and.w	r3, r3, #31
 8000fae:	2107      	movs	r1, #7
 8000fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	0d1b      	lsrs	r3, r3, #20
 8000fbc:	f003 031f 	and.w	r3, r3, #31
 8000fc0:	6879      	ldr	r1, [r7, #4]
 8000fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc6:	431a      	orrs	r2, r3
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000fcc:	bf00      	nop
 8000fce:	371c      	adds	r7, #28
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f003 0318 	and.w	r3, r3, #24
 8000ffa:	4908      	ldr	r1, [pc, #32]	@ (800101c <LL_ADC_SetChannelSingleDiff+0x44>)
 8000ffc:	40d9      	lsrs	r1, r3
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	400b      	ands	r3, r1
 8001002:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001006:	431a      	orrs	r2, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800100e:	bf00      	nop
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	0007ffff 	.word	0x0007ffff

08001020 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f003 031f 	and.w	r3, r3, #31
}
 8001030:	4618      	mov	r0, r3
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800104c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	6093      	str	r3, [r2, #8]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001070:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001074:	d101      	bne.n	800107a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001076:	2301      	movs	r3, #1
 8001078:	e000      	b.n	800107c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800107a:	2300      	movs	r3, #0
}
 800107c:	4618      	mov	r0, r3
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001098:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800109c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80010c4:	d101      	bne.n	80010ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80010c6:	2301      	movs	r3, #1
 80010c8:	e000      	b.n	80010cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80010e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80010ec:	f043 0201 	orr.w	r2, r3, #1
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	2b01      	cmp	r3, #1
 8001112:	d101      	bne.n	8001118 <LL_ADC_IsEnabled+0x18>
 8001114:	2301      	movs	r3, #1
 8001116:	e000      	b.n	800111a <LL_ADC_IsEnabled+0x1a>
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001136:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800113a:	f043 0204 	orr.w	r2, r3, #4
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f003 0304 	and.w	r3, r3, #4
 800115e:	2b04      	cmp	r3, #4
 8001160:	d101      	bne.n	8001166 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001162:	2301      	movs	r3, #1
 8001164:	e000      	b.n	8001168 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f003 0308 	and.w	r3, r3, #8
 8001184:	2b08      	cmp	r3, #8
 8001186:	d101      	bne.n	800118c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001188:	2301      	movs	r3, #1
 800118a:	e000      	b.n	800118e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800119c:	b590      	push	{r4, r7, lr}
 800119e:	b089      	sub	sp, #36	@ 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011a4:	2300      	movs	r3, #0
 80011a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e167      	b.n	8001486 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d109      	bne.n	80011d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff fbc9 	bl	800095c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff ff3f 	bl	8001060 <LL_ADC_IsDeepPowerDownEnabled>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d004      	beq.n	80011f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff25 	bl	800103c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff ff5a 	bl	80010b0 <LL_ADC_IsInternalRegulatorEnabled>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d115      	bne.n	800122e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff ff3e 	bl	8001088 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800120c:	4ba0      	ldr	r3, [pc, #640]	@ (8001490 <HAL_ADC_Init+0x2f4>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	099b      	lsrs	r3, r3, #6
 8001212:	4aa0      	ldr	r2, [pc, #640]	@ (8001494 <HAL_ADC_Init+0x2f8>)
 8001214:	fba2 2303 	umull	r2, r3, r2, r3
 8001218:	099b      	lsrs	r3, r3, #6
 800121a:	3301      	adds	r3, #1
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001220:	e002      	b.n	8001228 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	3b01      	subs	r3, #1
 8001226:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1f9      	bne.n	8001222 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ff3c 	bl	80010b0 <LL_ADC_IsInternalRegulatorEnabled>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d10d      	bne.n	800125a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001242:	f043 0210 	orr.w	r2, r3, #16
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800124e:	f043 0201 	orr.w	r2, r3, #1
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff ff75 	bl	800114e <LL_ADC_REG_IsConversionOngoing>
 8001264:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800126a:	f003 0310 	and.w	r3, r3, #16
 800126e:	2b00      	cmp	r3, #0
 8001270:	f040 8100 	bne.w	8001474 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	2b00      	cmp	r3, #0
 8001278:	f040 80fc 	bne.w	8001474 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001280:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001284:	f043 0202 	orr.w	r2, r3, #2
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff35 	bl	8001100 <LL_ADC_IsEnabled>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d111      	bne.n	80012c0 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800129c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80012a0:	f7ff ff2e 	bl	8001100 <LL_ADC_IsEnabled>
 80012a4:	4604      	mov	r4, r0
 80012a6:	487c      	ldr	r0, [pc, #496]	@ (8001498 <HAL_ADC_Init+0x2fc>)
 80012a8:	f7ff ff2a 	bl	8001100 <LL_ADC_IsEnabled>
 80012ac:	4603      	mov	r3, r0
 80012ae:	4323      	orrs	r3, r4
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d105      	bne.n	80012c0 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	4619      	mov	r1, r3
 80012ba:	4878      	ldr	r0, [pc, #480]	@ (800149c <HAL_ADC_Init+0x300>)
 80012bc:	f7ff fd50 	bl	8000d60 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	7f5b      	ldrb	r3, [r3, #29]
 80012c4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012ca:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80012d0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80012d6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80012de:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d106      	bne.n	80012fc <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012f2:	3b01      	subs	r3, #1
 80012f4:	045b      	lsls	r3, r3, #17
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001300:	2b00      	cmp	r3, #0
 8001302:	d009      	beq.n	8001318 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001308:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001310:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	68da      	ldr	r2, [r3, #12]
 800131e:	4b60      	ldr	r3, [pc, #384]	@ (80014a0 <HAL_ADC_Init+0x304>)
 8001320:	4013      	ands	r3, r2
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	6812      	ldr	r2, [r2, #0]
 8001326:	69b9      	ldr	r1, [r7, #24]
 8001328:	430b      	orrs	r3, r1
 800132a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	430a      	orrs	r2, r1
 8001340:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ff14 	bl	8001174 <LL_ADC_INJ_IsConversionOngoing>
 800134c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d16d      	bne.n	8001430 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d16a      	bne.n	8001430 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800135e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001366:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001368:	4313      	orrs	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001376:	f023 0302 	bic.w	r3, r3, #2
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	6812      	ldr	r2, [r2, #0]
 800137e:	69b9      	ldr	r1, [r7, #24]
 8001380:	430b      	orrs	r3, r1
 8001382:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	691b      	ldr	r3, [r3, #16]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d017      	beq.n	80013bc <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	691a      	ldr	r2, [r3, #16]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800139a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80013a4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80013a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	6911      	ldr	r1, [r2, #16]
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	6812      	ldr	r2, [r2, #0]
 80013b4:	430b      	orrs	r3, r1
 80013b6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80013ba:	e013      	b.n	80013e4 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	691a      	ldr	r2, [r3, #16]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80013ca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	6812      	ldr	r2, [r2, #0]
 80013d8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80013dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80013e0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d118      	bne.n	8001420 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	691b      	ldr	r3, [r3, #16]
 80013f4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80013f8:	f023 0304 	bic.w	r3, r3, #4
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001404:	4311      	orrs	r1, r2
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800140a:	4311      	orrs	r1, r2
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001410:	430a      	orrs	r2, r1
 8001412:	431a      	orrs	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f042 0201 	orr.w	r2, r2, #1
 800141c:	611a      	str	r2, [r3, #16]
 800141e:	e007      	b.n	8001430 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	691a      	ldr	r2, [r3, #16]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f022 0201 	bic.w	r2, r2, #1
 800142e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	695b      	ldr	r3, [r3, #20]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d10c      	bne.n	8001452 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	f023 010f 	bic.w	r1, r3, #15
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a1b      	ldr	r3, [r3, #32]
 8001446:	1e5a      	subs	r2, r3, #1
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	430a      	orrs	r2, r1
 800144e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001450:	e007      	b.n	8001462 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 020f 	bic.w	r2, r2, #15
 8001460:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001466:	f023 0303 	bic.w	r3, r3, #3
 800146a:	f043 0201 	orr.w	r2, r3, #1
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001472:	e007      	b.n	8001484 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001478:	f043 0210 	orr.w	r2, r3, #16
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001484:	7ffb      	ldrb	r3, [r7, #31]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3724      	adds	r7, #36	@ 0x24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd90      	pop	{r4, r7, pc}
 800148e:	bf00      	nop
 8001490:	20000000 	.word	0x20000000
 8001494:	053e2d63 	.word	0x053e2d63
 8001498:	50000100 	.word	0x50000100
 800149c:	50000300 	.word	0x50000300
 80014a0:	fff04007 	.word	0xfff04007

080014a4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80014b0:	4851      	ldr	r0, [pc, #324]	@ (80015f8 <HAL_ADC_Start_DMA+0x154>)
 80014b2:	f7ff fdb5 	bl	8001020 <LL_ADC_GetMultimode>
 80014b6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fe46 	bl	800114e <LL_ADC_REG_IsConversionOngoing>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f040 808f 	bne.w	80015e8 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d101      	bne.n	80014d8 <HAL_ADC_Start_DMA+0x34>
 80014d4:	2302      	movs	r3, #2
 80014d6:	e08a      	b.n	80015ee <HAL_ADC_Start_DMA+0x14a>
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2201      	movs	r2, #1
 80014dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d005      	beq.n	80014f2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	2b05      	cmp	r3, #5
 80014ea:	d002      	beq.n	80014f2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	2b09      	cmp	r3, #9
 80014f0:	d173      	bne.n	80015da <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80014f2:	68f8      	ldr	r0, [r7, #12]
 80014f4:	f000 fc98 	bl	8001e28 <ADC_Enable>
 80014f8:	4603      	mov	r3, r0
 80014fa:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80014fc:	7dfb      	ldrb	r3, [r7, #23]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d166      	bne.n	80015d0 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001506:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800150a:	f023 0301 	bic.w	r3, r3, #1
 800150e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a38      	ldr	r2, [pc, #224]	@ (80015fc <HAL_ADC_Start_DMA+0x158>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d002      	beq.n	8001526 <HAL_ADC_Start_DMA+0x82>
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	e001      	b.n	800152a <HAL_ADC_Start_DMA+0x86>
 8001526:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	6812      	ldr	r2, [r2, #0]
 800152e:	4293      	cmp	r3, r2
 8001530:	d002      	beq.n	8001538 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d105      	bne.n	8001544 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800153c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001548:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d006      	beq.n	800155e <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001554:	f023 0206 	bic.w	r2, r3, #6
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	661a      	str	r2, [r3, #96]	@ 0x60
 800155c:	e002      	b.n	8001564 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2200      	movs	r2, #0
 8001562:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001568:	4a25      	ldr	r2, [pc, #148]	@ (8001600 <HAL_ADC_Start_DMA+0x15c>)
 800156a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001570:	4a24      	ldr	r2, [pc, #144]	@ (8001604 <HAL_ADC_Start_DMA+0x160>)
 8001572:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001578:	4a23      	ldr	r2, [pc, #140]	@ (8001608 <HAL_ADC_Start_DMA+0x164>)
 800157a:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	221c      	movs	r2, #28
 8001582:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f042 0210 	orr.w	r2, r2, #16
 800159a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	68da      	ldr	r2, [r3, #12]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f042 0201 	orr.w	r2, r2, #1
 80015aa:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	3340      	adds	r3, #64	@ 0x40
 80015b6:	4619      	mov	r1, r3
 80015b8:	68ba      	ldr	r2, [r7, #8]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f000 ffd0 	bl	8002560 <HAL_DMA_Start_IT>
 80015c0:	4603      	mov	r3, r0
 80015c2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fdac 	bl	8001126 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80015ce:	e00d      	b.n	80015ec <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80015d8:	e008      	b.n	80015ec <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80015e6:	e001      	b.n	80015ec <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80015e8:	2302      	movs	r3, #2
 80015ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80015ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	50000300 	.word	0x50000300
 80015fc:	50000100 	.word	0x50000100
 8001600:	08001f35 	.word	0x08001f35
 8001604:	0800200d 	.word	0x0800200d
 8001608:	08002029 	.word	0x08002029

0800160c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b0b6      	sub	sp, #216	@ 0xd8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001652:	2300      	movs	r3, #0
 8001654:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001658:	2300      	movs	r3, #0
 800165a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001662:	2b01      	cmp	r3, #1
 8001664:	d101      	bne.n	800166a <HAL_ADC_ConfigChannel+0x22>
 8001666:	2302      	movs	r3, #2
 8001668:	e3c8      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x7b4>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2201      	movs	r2, #1
 800166e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fd69 	bl	800114e <LL_ADC_REG_IsConversionOngoing>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	f040 83ad 	bne.w	8001dde <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6818      	ldr	r0, [r3, #0]
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	6859      	ldr	r1, [r3, #4]
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	f7ff fc4a 	bl	8000f2a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff fd57 	bl	800114e <LL_ADC_REG_IsConversionOngoing>
 80016a0:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fd63 	bl	8001174 <LL_ADC_INJ_IsConversionOngoing>
 80016ae:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f040 81d9 	bne.w	8001a6e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f040 81d4 	bne.w	8001a6e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80016ce:	d10f      	bne.n	80016f0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6818      	ldr	r0, [r3, #0]
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2200      	movs	r2, #0
 80016da:	4619      	mov	r1, r3
 80016dc:	f7ff fc51 	bl	8000f82 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fbf8 	bl	8000ede <LL_ADC_SetSamplingTimeCommonConfig>
 80016ee:	e00e      	b.n	800170e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6818      	ldr	r0, [r3, #0]
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	6819      	ldr	r1, [r3, #0]
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	461a      	mov	r2, r3
 80016fe:	f7ff fc40 	bl	8000f82 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2100      	movs	r1, #0
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fbe8 	bl	8000ede <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	695a      	ldr	r2, [r3, #20]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	08db      	lsrs	r3, r3, #3
 800171a:	f003 0303 	and.w	r3, r3, #3
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	2b04      	cmp	r3, #4
 800172e:	d022      	beq.n	8001776 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6818      	ldr	r0, [r3, #0]
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	6919      	ldr	r1, [r3, #16]
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001740:	f7ff fb42 	bl	8000dc8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6818      	ldr	r0, [r3, #0]
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	6919      	ldr	r1, [r3, #16]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	461a      	mov	r2, r3
 8001752:	f7ff fb8e 	bl	8000e72 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6818      	ldr	r0, [r3, #0]
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001762:	2b01      	cmp	r3, #1
 8001764:	d102      	bne.n	800176c <HAL_ADC_ConfigChannel+0x124>
 8001766:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800176a:	e000      	b.n	800176e <HAL_ADC_ConfigChannel+0x126>
 800176c:	2300      	movs	r3, #0
 800176e:	461a      	mov	r2, r3
 8001770:	f7ff fb9a 	bl	8000ea8 <LL_ADC_SetOffsetSaturation>
 8001774:	e17b      	b.n	8001a6e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2100      	movs	r1, #0
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff fb47 	bl	8000e10 <LL_ADC_GetOffsetChannel>
 8001782:	4603      	mov	r3, r0
 8001784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001788:	2b00      	cmp	r3, #0
 800178a:	d10a      	bne.n	80017a2 <HAL_ADC_ConfigChannel+0x15a>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2100      	movs	r1, #0
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff fb3c 	bl	8000e10 <LL_ADC_GetOffsetChannel>
 8001798:	4603      	mov	r3, r0
 800179a:	0e9b      	lsrs	r3, r3, #26
 800179c:	f003 021f 	and.w	r2, r3, #31
 80017a0:	e01e      	b.n	80017e0 <HAL_ADC_ConfigChannel+0x198>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2100      	movs	r1, #0
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fb31 	bl	8000e10 <LL_ADC_GetOffsetChannel>
 80017ae:	4603      	mov	r3, r0
 80017b0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80017b8:	fa93 f3a3 	rbit	r3, r3
 80017bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80017c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80017c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80017d0:	2320      	movs	r3, #32
 80017d2:	e004      	b.n	80017de <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80017d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80017d8:	fab3 f383 	clz	r3, r3
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d105      	bne.n	80017f8 <HAL_ADC_ConfigChannel+0x1b0>
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	0e9b      	lsrs	r3, r3, #26
 80017f2:	f003 031f 	and.w	r3, r3, #31
 80017f6:	e018      	b.n	800182a <HAL_ADC_ConfigChannel+0x1e2>
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001800:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001804:	fa93 f3a3 	rbit	r3, r3
 8001808:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800180c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001810:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001814:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 800181c:	2320      	movs	r3, #32
 800181e:	e004      	b.n	800182a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001820:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001824:	fab3 f383 	clz	r3, r3
 8001828:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800182a:	429a      	cmp	r2, r3
 800182c:	d106      	bne.n	800183c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2200      	movs	r2, #0
 8001834:	2100      	movs	r1, #0
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff fb00 	bl	8000e3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2101      	movs	r1, #1
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fae4 	bl	8000e10 <LL_ADC_GetOffsetChannel>
 8001848:	4603      	mov	r3, r0
 800184a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10a      	bne.n	8001868 <HAL_ADC_ConfigChannel+0x220>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2101      	movs	r1, #1
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff fad9 	bl	8000e10 <LL_ADC_GetOffsetChannel>
 800185e:	4603      	mov	r3, r0
 8001860:	0e9b      	lsrs	r3, r3, #26
 8001862:	f003 021f 	and.w	r2, r3, #31
 8001866:	e01e      	b.n	80018a6 <HAL_ADC_ConfigChannel+0x25e>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2101      	movs	r1, #1
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff face 	bl	8000e10 <LL_ADC_GetOffsetChannel>
 8001874:	4603      	mov	r3, r0
 8001876:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800187e:	fa93 f3a3 	rbit	r3, r3
 8001882:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001886:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800188a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800188e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001896:	2320      	movs	r3, #32
 8001898:	e004      	b.n	80018a4 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800189a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800189e:	fab3 f383 	clz	r3, r3
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d105      	bne.n	80018be <HAL_ADC_ConfigChannel+0x276>
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	0e9b      	lsrs	r3, r3, #26
 80018b8:	f003 031f 	and.w	r3, r3, #31
 80018bc:	e018      	b.n	80018f0 <HAL_ADC_ConfigChannel+0x2a8>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80018ca:	fa93 f3a3 	rbit	r3, r3
 80018ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80018d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80018d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80018da:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80018e2:	2320      	movs	r3, #32
 80018e4:	e004      	b.n	80018f0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80018e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80018ea:	fab3 f383 	clz	r3, r3
 80018ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d106      	bne.n	8001902 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2200      	movs	r2, #0
 80018fa:	2101      	movs	r1, #1
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fa9d 	bl	8000e3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2102      	movs	r1, #2
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff fa81 	bl	8000e10 <LL_ADC_GetOffsetChannel>
 800190e:	4603      	mov	r3, r0
 8001910:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001914:	2b00      	cmp	r3, #0
 8001916:	d10a      	bne.n	800192e <HAL_ADC_ConfigChannel+0x2e6>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2102      	movs	r1, #2
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff fa76 	bl	8000e10 <LL_ADC_GetOffsetChannel>
 8001924:	4603      	mov	r3, r0
 8001926:	0e9b      	lsrs	r3, r3, #26
 8001928:	f003 021f 	and.w	r2, r3, #31
 800192c:	e01e      	b.n	800196c <HAL_ADC_ConfigChannel+0x324>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2102      	movs	r1, #2
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff fa6b 	bl	8000e10 <LL_ADC_GetOffsetChannel>
 800193a:	4603      	mov	r3, r0
 800193c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001940:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001944:	fa93 f3a3 	rbit	r3, r3
 8001948:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800194c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001950:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001954:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 800195c:	2320      	movs	r3, #32
 800195e:	e004      	b.n	800196a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001960:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001964:	fab3 f383 	clz	r3, r3
 8001968:	b2db      	uxtb	r3, r3
 800196a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001974:	2b00      	cmp	r3, #0
 8001976:	d105      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x33c>
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	0e9b      	lsrs	r3, r3, #26
 800197e:	f003 031f 	and.w	r3, r3, #31
 8001982:	e016      	b.n	80019b2 <HAL_ADC_ConfigChannel+0x36a>
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001990:	fa93 f3a3 	rbit	r3, r3
 8001994:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001996:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001998:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800199c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80019a4:	2320      	movs	r3, #32
 80019a6:	e004      	b.n	80019b2 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80019a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80019ac:	fab3 f383 	clz	r3, r3
 80019b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d106      	bne.n	80019c4 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2200      	movs	r2, #0
 80019bc:	2102      	movs	r1, #2
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff fa3c 	bl	8000e3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2103      	movs	r1, #3
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff fa20 	bl	8000e10 <LL_ADC_GetOffsetChannel>
 80019d0:	4603      	mov	r3, r0
 80019d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d10a      	bne.n	80019f0 <HAL_ADC_ConfigChannel+0x3a8>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2103      	movs	r1, #3
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff fa15 	bl	8000e10 <LL_ADC_GetOffsetChannel>
 80019e6:	4603      	mov	r3, r0
 80019e8:	0e9b      	lsrs	r3, r3, #26
 80019ea:	f003 021f 	and.w	r2, r3, #31
 80019ee:	e017      	b.n	8001a20 <HAL_ADC_ConfigChannel+0x3d8>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2103      	movs	r1, #3
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff fa0a 	bl	8000e10 <LL_ADC_GetOffsetChannel>
 80019fc:	4603      	mov	r3, r0
 80019fe:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001a02:	fa93 f3a3 	rbit	r3, r3
 8001a06:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001a08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001a0a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001a0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001a12:	2320      	movs	r3, #32
 8001a14:	e003      	b.n	8001a1e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001a16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001a18:	fab3 f383 	clz	r3, r3
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d105      	bne.n	8001a38 <HAL_ADC_ConfigChannel+0x3f0>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	0e9b      	lsrs	r3, r3, #26
 8001a32:	f003 031f 	and.w	r3, r3, #31
 8001a36:	e011      	b.n	8001a5c <HAL_ADC_ConfigChannel+0x414>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a40:	fa93 f3a3 	rbit	r3, r3
 8001a44:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001a46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a48:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001a4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001a50:	2320      	movs	r3, #32
 8001a52:	e003      	b.n	8001a5c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001a54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001a56:	fab3 f383 	clz	r3, r3
 8001a5a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d106      	bne.n	8001a6e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2200      	movs	r2, #0
 8001a66:	2103      	movs	r1, #3
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff f9e7 	bl	8000e3c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fb44 	bl	8001100 <LL_ADC_IsEnabled>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f040 8140 	bne.w	8001d00 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6818      	ldr	r0, [r3, #0]
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	6819      	ldr	r1, [r3, #0]
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	f7ff faa3 	bl	8000fd8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	4a8f      	ldr	r2, [pc, #572]	@ (8001cd4 <HAL_ADC_ConfigChannel+0x68c>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	f040 8131 	bne.w	8001d00 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10b      	bne.n	8001ac6 <HAL_ADC_ConfigChannel+0x47e>
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	0e9b      	lsrs	r3, r3, #26
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	f003 031f 	and.w	r3, r3, #31
 8001aba:	2b09      	cmp	r3, #9
 8001abc:	bf94      	ite	ls
 8001abe:	2301      	movls	r3, #1
 8001ac0:	2300      	movhi	r3, #0
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	e019      	b.n	8001afa <HAL_ADC_ConfigChannel+0x4b2>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001acc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ace:	fa93 f3a3 	rbit	r3, r3
 8001ad2:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001ad4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ad6:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001ad8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8001ade:	2320      	movs	r3, #32
 8001ae0:	e003      	b.n	8001aea <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8001ae2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ae4:	fab3 f383 	clz	r3, r3
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	3301      	adds	r3, #1
 8001aec:	f003 031f 	and.w	r3, r3, #31
 8001af0:	2b09      	cmp	r3, #9
 8001af2:	bf94      	ite	ls
 8001af4:	2301      	movls	r3, #1
 8001af6:	2300      	movhi	r3, #0
 8001af8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d079      	beq.n	8001bf2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d107      	bne.n	8001b1a <HAL_ADC_ConfigChannel+0x4d2>
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	0e9b      	lsrs	r3, r3, #26
 8001b10:	3301      	adds	r3, #1
 8001b12:	069b      	lsls	r3, r3, #26
 8001b14:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b18:	e015      	b.n	8001b46 <HAL_ADC_ConfigChannel+0x4fe>
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b22:	fa93 f3a3 	rbit	r3, r3
 8001b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001b28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b2a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001b2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8001b32:	2320      	movs	r3, #32
 8001b34:	e003      	b.n	8001b3e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8001b36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b38:	fab3 f383 	clz	r3, r3
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	3301      	adds	r3, #1
 8001b40:	069b      	lsls	r3, r3, #26
 8001b42:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d109      	bne.n	8001b66 <HAL_ADC_ConfigChannel+0x51e>
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	0e9b      	lsrs	r3, r3, #26
 8001b58:	3301      	adds	r3, #1
 8001b5a:	f003 031f 	and.w	r3, r3, #31
 8001b5e:	2101      	movs	r1, #1
 8001b60:	fa01 f303 	lsl.w	r3, r1, r3
 8001b64:	e017      	b.n	8001b96 <HAL_ADC_ConfigChannel+0x54e>
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b6e:	fa93 f3a3 	rbit	r3, r3
 8001b72:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001b74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b76:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001b78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8001b7e:	2320      	movs	r3, #32
 8001b80:	e003      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8001b82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b84:	fab3 f383 	clz	r3, r3
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	f003 031f 	and.w	r3, r3, #31
 8001b90:	2101      	movs	r1, #1
 8001b92:	fa01 f303 	lsl.w	r3, r1, r3
 8001b96:	ea42 0103 	orr.w	r1, r2, r3
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10a      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x574>
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	0e9b      	lsrs	r3, r3, #26
 8001bac:	3301      	adds	r3, #1
 8001bae:	f003 021f 	and.w	r2, r3, #31
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	4413      	add	r3, r2
 8001bb8:	051b      	lsls	r3, r3, #20
 8001bba:	e018      	b.n	8001bee <HAL_ADC_ConfigChannel+0x5a6>
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bc4:	fa93 f3a3 	rbit	r3, r3
 8001bc8:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001bce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8001bd4:	2320      	movs	r3, #32
 8001bd6:	e003      	b.n	8001be0 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8001bd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001bda:	fab3 f383 	clz	r3, r3
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	3301      	adds	r3, #1
 8001be2:	f003 021f 	and.w	r2, r3, #31
 8001be6:	4613      	mov	r3, r2
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	4413      	add	r3, r2
 8001bec:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bee:	430b      	orrs	r3, r1
 8001bf0:	e081      	b.n	8001cf6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d107      	bne.n	8001c0e <HAL_ADC_ConfigChannel+0x5c6>
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	0e9b      	lsrs	r3, r3, #26
 8001c04:	3301      	adds	r3, #1
 8001c06:	069b      	lsls	r3, r3, #26
 8001c08:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c0c:	e015      	b.n	8001c3a <HAL_ADC_ConfigChannel+0x5f2>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c16:	fa93 f3a3 	rbit	r3, r3
 8001c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8001c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c1e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8001c26:	2320      	movs	r3, #32
 8001c28:	e003      	b.n	8001c32 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8001c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c2c:	fab3 f383 	clz	r3, r3
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	3301      	adds	r3, #1
 8001c34:	069b      	lsls	r3, r3, #26
 8001c36:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d109      	bne.n	8001c5a <HAL_ADC_ConfigChannel+0x612>
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	0e9b      	lsrs	r3, r3, #26
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	f003 031f 	and.w	r3, r3, #31
 8001c52:	2101      	movs	r1, #1
 8001c54:	fa01 f303 	lsl.w	r3, r1, r3
 8001c58:	e017      	b.n	8001c8a <HAL_ADC_ConfigChannel+0x642>
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c60:	6a3b      	ldr	r3, [r7, #32]
 8001c62:	fa93 f3a3 	rbit	r3, r3
 8001c66:	61fb      	str	r3, [r7, #28]
  return result;
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8001c72:	2320      	movs	r3, #32
 8001c74:	e003      	b.n	8001c7e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8001c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c78:	fab3 f383 	clz	r3, r3
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	3301      	adds	r3, #1
 8001c80:	f003 031f 	and.w	r3, r3, #31
 8001c84:	2101      	movs	r1, #1
 8001c86:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8a:	ea42 0103 	orr.w	r1, r2, r3
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10d      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0x66e>
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	0e9b      	lsrs	r3, r3, #26
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	f003 021f 	and.w	r2, r3, #31
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	4413      	add	r3, r2
 8001cac:	3b1e      	subs	r3, #30
 8001cae:	051b      	lsls	r3, r3, #20
 8001cb0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cb4:	e01e      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x6ac>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	fa93 f3a3 	rbit	r3, r3
 8001cc2:	613b      	str	r3, [r7, #16]
  return result;
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d104      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8001cce:	2320      	movs	r3, #32
 8001cd0:	e006      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x698>
 8001cd2:	bf00      	nop
 8001cd4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	fab3 f383 	clz	r3, r3
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	f003 021f 	and.w	r2, r3, #31
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	4413      	add	r3, r2
 8001cec:	3b1e      	subs	r3, #30
 8001cee:	051b      	lsls	r3, r3, #20
 8001cf0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cf4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	f7ff f941 	bl	8000f82 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b3f      	ldr	r3, [pc, #252]	@ (8001e04 <HAL_ADC_ConfigChannel+0x7bc>)
 8001d06:	4013      	ands	r3, r2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d071      	beq.n	8001df0 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d0c:	483e      	ldr	r0, [pc, #248]	@ (8001e08 <HAL_ADC_ConfigChannel+0x7c0>)
 8001d0e:	f7ff f84d 	bl	8000dac <LL_ADC_GetCommonPathInternalCh>
 8001d12:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a3c      	ldr	r2, [pc, #240]	@ (8001e0c <HAL_ADC_ConfigChannel+0x7c4>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d004      	beq.n	8001d2a <HAL_ADC_ConfigChannel+0x6e2>
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a3a      	ldr	r2, [pc, #232]	@ (8001e10 <HAL_ADC_ConfigChannel+0x7c8>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d127      	bne.n	8001d7a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001d2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d121      	bne.n	8001d7a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d3e:	d157      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001d44:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001d48:	4619      	mov	r1, r3
 8001d4a:	482f      	ldr	r0, [pc, #188]	@ (8001e08 <HAL_ADC_ConfigChannel+0x7c0>)
 8001d4c:	f7ff f81b 	bl	8000d86 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d50:	4b30      	ldr	r3, [pc, #192]	@ (8001e14 <HAL_ADC_ConfigChannel+0x7cc>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	099b      	lsrs	r3, r3, #6
 8001d56:	4a30      	ldr	r2, [pc, #192]	@ (8001e18 <HAL_ADC_ConfigChannel+0x7d0>)
 8001d58:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5c:	099b      	lsrs	r3, r3, #6
 8001d5e:	1c5a      	adds	r2, r3, #1
 8001d60:	4613      	mov	r3, r2
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	4413      	add	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d6a:	e002      	b.n	8001d72 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1f9      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d78:	e03a      	b.n	8001df0 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a27      	ldr	r2, [pc, #156]	@ (8001e1c <HAL_ADC_ConfigChannel+0x7d4>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d113      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001d88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d10d      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a22      	ldr	r2, [pc, #136]	@ (8001e20 <HAL_ADC_ConfigChannel+0x7d8>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d02a      	beq.n	8001df0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001d9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001da2:	4619      	mov	r1, r3
 8001da4:	4818      	ldr	r0, [pc, #96]	@ (8001e08 <HAL_ADC_ConfigChannel+0x7c0>)
 8001da6:	f7fe ffee 	bl	8000d86 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001daa:	e021      	b.n	8001df0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a1c      	ldr	r2, [pc, #112]	@ (8001e24 <HAL_ADC_ConfigChannel+0x7dc>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d11c      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001db6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001dba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d116      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a16      	ldr	r2, [pc, #88]	@ (8001e20 <HAL_ADC_ConfigChannel+0x7d8>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d011      	beq.n	8001df0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dcc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001dd0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	480c      	ldr	r0, [pc, #48]	@ (8001e08 <HAL_ADC_ConfigChannel+0x7c0>)
 8001dd8:	f7fe ffd5 	bl	8000d86 <LL_ADC_SetCommonPathInternalCh>
 8001ddc:	e008      	b.n	8001df0 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001de2:	f043 0220 	orr.w	r2, r3, #32
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001df8:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	37d8      	adds	r7, #216	@ 0xd8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	80080000 	.word	0x80080000
 8001e08:	50000300 	.word	0x50000300
 8001e0c:	c3210000 	.word	0xc3210000
 8001e10:	90c00010 	.word	0x90c00010
 8001e14:	20000000 	.word	0x20000000
 8001e18:	053e2d63 	.word	0x053e2d63
 8001e1c:	c7520000 	.word	0xc7520000
 8001e20:	50000100 	.word	0x50000100
 8001e24:	cb840000 	.word	0xcb840000

08001e28 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff f961 	bl	8001100 <LL_ADC_IsEnabled>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d169      	bne.n	8001f18 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	4b36      	ldr	r3, [pc, #216]	@ (8001f24 <ADC_Enable+0xfc>)
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00d      	beq.n	8001e6e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e56:	f043 0210 	orr.w	r2, r3, #16
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e62:	f043 0201 	orr.w	r2, r3, #1
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e055      	b.n	8001f1a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff f930 	bl	80010d8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001e78:	482b      	ldr	r0, [pc, #172]	@ (8001f28 <ADC_Enable+0x100>)
 8001e7a:	f7fe ff97 	bl	8000dac <LL_ADC_GetCommonPathInternalCh>
 8001e7e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001e80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d013      	beq.n	8001eb0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e88:	4b28      	ldr	r3, [pc, #160]	@ (8001f2c <ADC_Enable+0x104>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	099b      	lsrs	r3, r3, #6
 8001e8e:	4a28      	ldr	r2, [pc, #160]	@ (8001f30 <ADC_Enable+0x108>)
 8001e90:	fba2 2303 	umull	r2, r3, r2, r3
 8001e94:	099b      	lsrs	r3, r3, #6
 8001e96:	1c5a      	adds	r2, r3, #1
 8001e98:	4613      	mov	r3, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4413      	add	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001ea2:	e002      	b.n	8001eaa <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1f9      	bne.n	8001ea4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001eb0:	f7fe ff28 	bl	8000d04 <HAL_GetTick>
 8001eb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001eb6:	e028      	b.n	8001f0a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff f91f 	bl	8001100 <LL_ADC_IsEnabled>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d104      	bne.n	8001ed2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff f903 	bl	80010d8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ed2:	f7fe ff17 	bl	8000d04 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d914      	bls.n	8001f0a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d00d      	beq.n	8001f0a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ef2:	f043 0210 	orr.w	r2, r3, #16
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001efe:	f043 0201 	orr.w	r2, r3, #1
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e007      	b.n	8001f1a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d1cf      	bne.n	8001eb8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	8000003f 	.word	0x8000003f
 8001f28:	50000300 	.word	0x50000300
 8001f2c:	20000000 	.word	0x20000000
 8001f30:	053e2d63 	.word	0x053e2d63

08001f34 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f40:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f46:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d14b      	bne.n	8001fe6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f52:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0308 	and.w	r3, r3, #8
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d021      	beq.n	8001fac <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe ffc9 	bl	8000f04 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d032      	beq.n	8001fde <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d12b      	bne.n	8001fde <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f8a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d11f      	bne.n	8001fde <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa2:	f043 0201 	orr.w	r2, r3, #1
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001faa:	e018      	b.n	8001fde <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d111      	bne.n	8001fde <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fbe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d105      	bne.n	8001fde <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd6:	f043 0201 	orr.w	r2, r3, #1
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f7ff fb14 	bl	800160c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001fe4:	e00e      	b.n	8002004 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fea:	f003 0310 	and.w	r3, r3, #16
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f7ff fb1e 	bl	8001634 <HAL_ADC_ErrorCallback>
}
 8001ff8:	e004      	b.n	8002004 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	4798      	blx	r3
}
 8002004:	bf00      	nop
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002018:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f7ff fb00 	bl	8001620 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002020:	bf00      	nop
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002034:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800203a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002046:	f043 0204 	orr.w	r2, r3, #4
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f7ff faf0 	bl	8001634 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002054:	bf00      	nop
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <LL_ADC_IsEnabled>:
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b01      	cmp	r3, #1
 800206e:	d101      	bne.n	8002074 <LL_ADC_IsEnabled+0x18>
 8002070:	2301      	movs	r3, #1
 8002072:	e000      	b.n	8002076 <LL_ADC_IsEnabled+0x1a>
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <LL_ADC_REG_IsConversionOngoing>:
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 0304 	and.w	r3, r3, #4
 8002092:	2b04      	cmp	r3, #4
 8002094:	d101      	bne.n	800209a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80020a8:	b590      	push	{r4, r7, lr}
 80020aa:	b0a1      	sub	sp, #132	@ 0x84
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020b2:	2300      	movs	r3, #0
 80020b4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d101      	bne.n	80020c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80020c2:	2302      	movs	r3, #2
 80020c4:	e08b      	b.n	80021de <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80020ce:	2300      	movs	r3, #0
 80020d0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80020d2:	2300      	movs	r3, #0
 80020d4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020de:	d102      	bne.n	80020e6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80020e0:	4b41      	ldr	r3, [pc, #260]	@ (80021e8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	e001      	b.n	80020ea <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80020e6:	2300      	movs	r3, #0
 80020e8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10b      	bne.n	8002108 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f4:	f043 0220 	orr.w	r2, r3, #32
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e06a      	b.n	80021de <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff ffb9 	bl	8002082 <LL_ADC_REG_IsConversionOngoing>
 8002110:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff ffb3 	bl	8002082 <LL_ADC_REG_IsConversionOngoing>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d14c      	bne.n	80021bc <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002122:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002124:	2b00      	cmp	r3, #0
 8002126:	d149      	bne.n	80021bc <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002128:	4b30      	ldr	r3, [pc, #192]	@ (80021ec <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800212a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d028      	beq.n	8002186 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002134:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	6859      	ldr	r1, [r3, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002146:	035b      	lsls	r3, r3, #13
 8002148:	430b      	orrs	r3, r1
 800214a:	431a      	orrs	r2, r3
 800214c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800214e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002150:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002154:	f7ff ff82 	bl	800205c <LL_ADC_IsEnabled>
 8002158:	4604      	mov	r4, r0
 800215a:	4823      	ldr	r0, [pc, #140]	@ (80021e8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800215c:	f7ff ff7e 	bl	800205c <LL_ADC_IsEnabled>
 8002160:	4603      	mov	r3, r0
 8002162:	4323      	orrs	r3, r4
 8002164:	2b00      	cmp	r3, #0
 8002166:	d133      	bne.n	80021d0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002168:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002170:	f023 030f 	bic.w	r3, r3, #15
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	6811      	ldr	r1, [r2, #0]
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	6892      	ldr	r2, [r2, #8]
 800217c:	430a      	orrs	r2, r1
 800217e:	431a      	orrs	r2, r3
 8002180:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002182:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002184:	e024      	b.n	80021d0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002186:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800218e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002190:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002192:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002196:	f7ff ff61 	bl	800205c <LL_ADC_IsEnabled>
 800219a:	4604      	mov	r4, r0
 800219c:	4812      	ldr	r0, [pc, #72]	@ (80021e8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800219e:	f7ff ff5d 	bl	800205c <LL_ADC_IsEnabled>
 80021a2:	4603      	mov	r3, r0
 80021a4:	4323      	orrs	r3, r4
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d112      	bne.n	80021d0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80021aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80021b2:	f023 030f 	bic.w	r3, r3, #15
 80021b6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80021b8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80021ba:	e009      	b.n	80021d0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c0:	f043 0220 	orr.w	r2, r3, #32
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80021ce:	e000      	b.n	80021d2 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80021d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80021da:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3784      	adds	r7, #132	@ 0x84
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd90      	pop	{r4, r7, pc}
 80021e6:	bf00      	nop
 80021e8:	50000100 	.word	0x50000100
 80021ec:	50000300 	.word	0x50000300

080021f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002200:	4b0c      	ldr	r3, [pc, #48]	@ (8002234 <__NVIC_SetPriorityGrouping+0x44>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800220c:	4013      	ands	r3, r2
 800220e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002218:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800221c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002220:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002222:	4a04      	ldr	r2, [pc, #16]	@ (8002234 <__NVIC_SetPriorityGrouping+0x44>)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	60d3      	str	r3, [r2, #12]
}
 8002228:	bf00      	nop
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800223c:	4b04      	ldr	r3, [pc, #16]	@ (8002250 <__NVIC_GetPriorityGrouping+0x18>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	0a1b      	lsrs	r3, r3, #8
 8002242:	f003 0307 	and.w	r3, r3, #7
}
 8002246:	4618      	mov	r0, r3
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800225e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002262:	2b00      	cmp	r3, #0
 8002264:	db0b      	blt.n	800227e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	f003 021f 	and.w	r2, r3, #31
 800226c:	4907      	ldr	r1, [pc, #28]	@ (800228c <__NVIC_EnableIRQ+0x38>)
 800226e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002272:	095b      	lsrs	r3, r3, #5
 8002274:	2001      	movs	r0, #1
 8002276:	fa00 f202 	lsl.w	r2, r0, r2
 800227a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	e000e100 	.word	0xe000e100

08002290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	6039      	str	r1, [r7, #0]
 800229a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	db0a      	blt.n	80022ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	490c      	ldr	r1, [pc, #48]	@ (80022dc <__NVIC_SetPriority+0x4c>)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	0112      	lsls	r2, r2, #4
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	440b      	add	r3, r1
 80022b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022b8:	e00a      	b.n	80022d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	4908      	ldr	r1, [pc, #32]	@ (80022e0 <__NVIC_SetPriority+0x50>)
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	3b04      	subs	r3, #4
 80022c8:	0112      	lsls	r2, r2, #4
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	440b      	add	r3, r1
 80022ce:	761a      	strb	r2, [r3, #24]
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	e000e100 	.word	0xe000e100
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b089      	sub	sp, #36	@ 0x24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f1c3 0307 	rsb	r3, r3, #7
 80022fe:	2b04      	cmp	r3, #4
 8002300:	bf28      	it	cs
 8002302:	2304      	movcs	r3, #4
 8002304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3304      	adds	r3, #4
 800230a:	2b06      	cmp	r3, #6
 800230c:	d902      	bls.n	8002314 <NVIC_EncodePriority+0x30>
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3b03      	subs	r3, #3
 8002312:	e000      	b.n	8002316 <NVIC_EncodePriority+0x32>
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002318:	f04f 32ff 	mov.w	r2, #4294967295
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43da      	mvns	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	401a      	ands	r2, r3
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800232c:	f04f 31ff 	mov.w	r1, #4294967295
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	fa01 f303 	lsl.w	r3, r1, r3
 8002336:	43d9      	mvns	r1, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800233c:	4313      	orrs	r3, r2
         );
}
 800233e:	4618      	mov	r0, r3
 8002340:	3724      	adds	r7, #36	@ 0x24
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
	...

0800234c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3b01      	subs	r3, #1
 8002358:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800235c:	d301      	bcc.n	8002362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800235e:	2301      	movs	r3, #1
 8002360:	e00f      	b.n	8002382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002362:	4a0a      	ldr	r2, [pc, #40]	@ (800238c <SysTick_Config+0x40>)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3b01      	subs	r3, #1
 8002368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800236a:	210f      	movs	r1, #15
 800236c:	f04f 30ff 	mov.w	r0, #4294967295
 8002370:	f7ff ff8e 	bl	8002290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002374:	4b05      	ldr	r3, [pc, #20]	@ (800238c <SysTick_Config+0x40>)
 8002376:	2200      	movs	r2, #0
 8002378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800237a:	4b04      	ldr	r3, [pc, #16]	@ (800238c <SysTick_Config+0x40>)
 800237c:	2207      	movs	r2, #7
 800237e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	e000e010 	.word	0xe000e010

08002390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7ff ff29 	bl	80021f0 <__NVIC_SetPriorityGrouping>
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b086      	sub	sp, #24
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	4603      	mov	r3, r0
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	607a      	str	r2, [r7, #4]
 80023b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023b4:	f7ff ff40 	bl	8002238 <__NVIC_GetPriorityGrouping>
 80023b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	68b9      	ldr	r1, [r7, #8]
 80023be:	6978      	ldr	r0, [r7, #20]
 80023c0:	f7ff ff90 	bl	80022e4 <NVIC_EncodePriority>
 80023c4:	4602      	mov	r2, r0
 80023c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ca:	4611      	mov	r1, r2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff ff5f 	bl	8002290 <__NVIC_SetPriority>
}
 80023d2:	bf00      	nop
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	4603      	mov	r3, r0
 80023e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff33 	bl	8002254 <__NVIC_EnableIRQ>
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff ffa4 	bl	800234c <SysTick_Config>
 8002404:	4603      	mov	r3, r0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
	...

08002410 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e08d      	b.n	800253e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	461a      	mov	r2, r3
 8002428:	4b47      	ldr	r3, [pc, #284]	@ (8002548 <HAL_DMA_Init+0x138>)
 800242a:	429a      	cmp	r2, r3
 800242c:	d80f      	bhi.n	800244e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	461a      	mov	r2, r3
 8002434:	4b45      	ldr	r3, [pc, #276]	@ (800254c <HAL_DMA_Init+0x13c>)
 8002436:	4413      	add	r3, r2
 8002438:	4a45      	ldr	r2, [pc, #276]	@ (8002550 <HAL_DMA_Init+0x140>)
 800243a:	fba2 2303 	umull	r2, r3, r2, r3
 800243e:	091b      	lsrs	r3, r3, #4
 8002440:	009a      	lsls	r2, r3, #2
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a42      	ldr	r2, [pc, #264]	@ (8002554 <HAL_DMA_Init+0x144>)
 800244a:	641a      	str	r2, [r3, #64]	@ 0x40
 800244c:	e00e      	b.n	800246c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	461a      	mov	r2, r3
 8002454:	4b40      	ldr	r3, [pc, #256]	@ (8002558 <HAL_DMA_Init+0x148>)
 8002456:	4413      	add	r3, r2
 8002458:	4a3d      	ldr	r2, [pc, #244]	@ (8002550 <HAL_DMA_Init+0x140>)
 800245a:	fba2 2303 	umull	r2, r3, r2, r3
 800245e:	091b      	lsrs	r3, r3, #4
 8002460:	009a      	lsls	r2, r3, #2
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a3c      	ldr	r2, [pc, #240]	@ (800255c <HAL_DMA_Init+0x14c>)
 800246a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002486:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002490:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800249c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f9b6 	bl	8002830 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80024cc:	d102      	bne.n	80024d4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685a      	ldr	r2, [r3, #4]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80024e8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d010      	beq.n	8002514 <HAL_DMA_Init+0x104>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d80c      	bhi.n	8002514 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f9d6 	bl	80028ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	e008      	b.n	8002526 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40020407 	.word	0x40020407
 800254c:	bffdfff8 	.word	0xbffdfff8
 8002550:	cccccccd 	.word	0xcccccccd
 8002554:	40020000 	.word	0x40020000
 8002558:	bffdfbf8 	.word	0xbffdfbf8
 800255c:	40020400 	.word	0x40020400

08002560 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
 800256c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800256e:	2300      	movs	r3, #0
 8002570:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002578:	2b01      	cmp	r3, #1
 800257a:	d101      	bne.n	8002580 <HAL_DMA_Start_IT+0x20>
 800257c:	2302      	movs	r3, #2
 800257e:	e066      	b.n	800264e <HAL_DMA_Start_IT+0xee>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b01      	cmp	r3, #1
 8002592:	d155      	bne.n	8002640 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2202      	movs	r2, #2
 8002598:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0201 	bic.w	r2, r2, #1
 80025b0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	68b9      	ldr	r1, [r7, #8]
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f000 f8fb 	bl	80027b4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d008      	beq.n	80025d8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f042 020e 	orr.w	r2, r2, #14
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	e00f      	b.n	80025f8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0204 	bic.w	r2, r2, #4
 80025e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 020a 	orr.w	r2, r2, #10
 80025f6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d007      	beq.n	8002616 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002610:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002614:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800261a:	2b00      	cmp	r3, #0
 800261c:	d007      	beq.n	800262e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002628:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800262c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f042 0201 	orr.w	r2, r2, #1
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	e005      	b.n	800264c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002648:	2302      	movs	r3, #2
 800264a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800264c:	7dfb      	ldrb	r3, [r7, #23]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b084      	sub	sp, #16
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002672:	f003 031f 	and.w	r3, r3, #31
 8002676:	2204      	movs	r2, #4
 8002678:	409a      	lsls	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	4013      	ands	r3, r2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d026      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x7a>
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	d021      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0320 	and.w	r3, r3, #32
 8002696:	2b00      	cmp	r3, #0
 8002698:	d107      	bne.n	80026aa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0204 	bic.w	r2, r2, #4
 80026a8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ae:	f003 021f 	and.w	r2, r3, #31
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b6:	2104      	movs	r1, #4
 80026b8:	fa01 f202 	lsl.w	r2, r1, r2
 80026bc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d071      	beq.n	80027aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80026ce:	e06c      	b.n	80027aa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d4:	f003 031f 	and.w	r3, r3, #31
 80026d8:	2202      	movs	r2, #2
 80026da:	409a      	lsls	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4013      	ands	r3, r2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d02e      	beq.n	8002742 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d029      	beq.n	8002742 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0320 	and.w	r3, r3, #32
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10b      	bne.n	8002714 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 020a 	bic.w	r2, r2, #10
 800270a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002718:	f003 021f 	and.w	r2, r3, #31
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002720:	2102      	movs	r1, #2
 8002722:	fa01 f202 	lsl.w	r2, r1, r2
 8002726:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002734:	2b00      	cmp	r3, #0
 8002736:	d038      	beq.n	80027aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002740:	e033      	b.n	80027aa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002746:	f003 031f 	and.w	r3, r3, #31
 800274a:	2208      	movs	r2, #8
 800274c:	409a      	lsls	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	4013      	ands	r3, r2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d02a      	beq.n	80027ac <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	f003 0308 	and.w	r3, r3, #8
 800275c:	2b00      	cmp	r3, #0
 800275e:	d025      	beq.n	80027ac <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 020e 	bic.w	r2, r2, #14
 800276e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002774:	f003 021f 	and.w	r2, r3, #31
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277c:	2101      	movs	r1, #1
 800277e:	fa01 f202 	lsl.w	r2, r1, r2
 8002782:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d004      	beq.n	80027ac <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80027aa:	bf00      	nop
 80027ac:	bf00      	nop
}
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
 80027c0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80027ca:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d004      	beq.n	80027de <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80027dc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e2:	f003 021f 	and.w	r2, r3, #31
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ea:	2101      	movs	r1, #1
 80027ec:	fa01 f202 	lsl.w	r2, r1, r2
 80027f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	2b10      	cmp	r3, #16
 8002800:	d108      	bne.n	8002814 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002812:	e007      	b.n	8002824 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	60da      	str	r2, [r3, #12]
}
 8002824:	bf00      	nop
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002830:	b480      	push	{r7}
 8002832:	b087      	sub	sp, #28
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	461a      	mov	r2, r3
 800283e:	4b16      	ldr	r3, [pc, #88]	@ (8002898 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002840:	429a      	cmp	r2, r3
 8002842:	d802      	bhi.n	800284a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002844:	4b15      	ldr	r3, [pc, #84]	@ (800289c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	e001      	b.n	800284e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800284a:	4b15      	ldr	r3, [pc, #84]	@ (80028a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800284c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	b2db      	uxtb	r3, r3
 8002858:	3b08      	subs	r3, #8
 800285a:	4a12      	ldr	r2, [pc, #72]	@ (80028a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800285c:	fba2 2303 	umull	r2, r3, r2, r3
 8002860:	091b      	lsrs	r3, r3, #4
 8002862:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002868:	089b      	lsrs	r3, r3, #2
 800286a:	009a      	lsls	r2, r3, #2
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	4413      	add	r3, r2
 8002870:	461a      	mov	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a0b      	ldr	r2, [pc, #44]	@ (80028a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800287a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f003 031f 	and.w	r3, r3, #31
 8002882:	2201      	movs	r2, #1
 8002884:	409a      	lsls	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800288a:	bf00      	nop
 800288c:	371c      	adds	r7, #28
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	40020407 	.word	0x40020407
 800289c:	40020800 	.word	0x40020800
 80028a0:	40020820 	.word	0x40020820
 80028a4:	cccccccd 	.word	0xcccccccd
 80028a8:	40020880 	.word	0x40020880

080028ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	4b0b      	ldr	r3, [pc, #44]	@ (80028ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80028c0:	4413      	add	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	461a      	mov	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a08      	ldr	r2, [pc, #32]	@ (80028f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80028ce:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	3b01      	subs	r3, #1
 80028d4:	f003 031f 	and.w	r3, r3, #31
 80028d8:	2201      	movs	r2, #1
 80028da:	409a      	lsls	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80028e0:	bf00      	nop
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	1000823f 	.word	0x1000823f
 80028f0:	40020940 	.word	0x40020940

080028f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b087      	sub	sp, #28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80028fe:	2300      	movs	r3, #0
 8002900:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002902:	e15a      	b.n	8002bba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	2101      	movs	r1, #1
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	fa01 f303 	lsl.w	r3, r1, r3
 8002910:	4013      	ands	r3, r2
 8002912:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 814c 	beq.w	8002bb4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 0303 	and.w	r3, r3, #3
 8002924:	2b01      	cmp	r3, #1
 8002926:	d005      	beq.n	8002934 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002930:	2b02      	cmp	r3, #2
 8002932:	d130      	bne.n	8002996 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	2203      	movs	r2, #3
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	4013      	ands	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	68da      	ldr	r2, [r3, #12]
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	4313      	orrs	r3, r2
 800295c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800296a:	2201      	movs	r2, #1
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	43db      	mvns	r3, r3
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	4013      	ands	r3, r2
 8002978:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	091b      	lsrs	r3, r3, #4
 8002980:	f003 0201 	and.w	r2, r3, #1
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	4313      	orrs	r3, r2
 800298e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	2b03      	cmp	r3, #3
 80029a0:	d017      	beq.n	80029d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	2203      	movs	r2, #3
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43db      	mvns	r3, r3
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	4013      	ands	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d123      	bne.n	8002a26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	08da      	lsrs	r2, r3, #3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	3208      	adds	r2, #8
 80029e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	220f      	movs	r2, #15
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	43db      	mvns	r3, r3
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	4013      	ands	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	691a      	ldr	r2, [r3, #16]
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	08da      	lsrs	r2, r3, #3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3208      	adds	r2, #8
 8002a20:	6939      	ldr	r1, [r7, #16]
 8002a22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	2203      	movs	r2, #3
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43db      	mvns	r3, r3
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f003 0203 	and.w	r2, r3, #3
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f000 80a6 	beq.w	8002bb4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a68:	4b5b      	ldr	r3, [pc, #364]	@ (8002bd8 <HAL_GPIO_Init+0x2e4>)
 8002a6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a6c:	4a5a      	ldr	r2, [pc, #360]	@ (8002bd8 <HAL_GPIO_Init+0x2e4>)
 8002a6e:	f043 0301 	orr.w	r3, r3, #1
 8002a72:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a74:	4b58      	ldr	r3, [pc, #352]	@ (8002bd8 <HAL_GPIO_Init+0x2e4>)
 8002a76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	60bb      	str	r3, [r7, #8]
 8002a7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a80:	4a56      	ldr	r2, [pc, #344]	@ (8002bdc <HAL_GPIO_Init+0x2e8>)
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	089b      	lsrs	r3, r3, #2
 8002a86:	3302      	adds	r3, #2
 8002a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	f003 0303 	and.w	r3, r3, #3
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	220f      	movs	r2, #15
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002aaa:	d01f      	beq.n	8002aec <HAL_GPIO_Init+0x1f8>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a4c      	ldr	r2, [pc, #304]	@ (8002be0 <HAL_GPIO_Init+0x2ec>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d019      	beq.n	8002ae8 <HAL_GPIO_Init+0x1f4>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a4b      	ldr	r2, [pc, #300]	@ (8002be4 <HAL_GPIO_Init+0x2f0>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d013      	beq.n	8002ae4 <HAL_GPIO_Init+0x1f0>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a4a      	ldr	r2, [pc, #296]	@ (8002be8 <HAL_GPIO_Init+0x2f4>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d00d      	beq.n	8002ae0 <HAL_GPIO_Init+0x1ec>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a49      	ldr	r2, [pc, #292]	@ (8002bec <HAL_GPIO_Init+0x2f8>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d007      	beq.n	8002adc <HAL_GPIO_Init+0x1e8>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a48      	ldr	r2, [pc, #288]	@ (8002bf0 <HAL_GPIO_Init+0x2fc>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d101      	bne.n	8002ad8 <HAL_GPIO_Init+0x1e4>
 8002ad4:	2305      	movs	r3, #5
 8002ad6:	e00a      	b.n	8002aee <HAL_GPIO_Init+0x1fa>
 8002ad8:	2306      	movs	r3, #6
 8002ada:	e008      	b.n	8002aee <HAL_GPIO_Init+0x1fa>
 8002adc:	2304      	movs	r3, #4
 8002ade:	e006      	b.n	8002aee <HAL_GPIO_Init+0x1fa>
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e004      	b.n	8002aee <HAL_GPIO_Init+0x1fa>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	e002      	b.n	8002aee <HAL_GPIO_Init+0x1fa>
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e000      	b.n	8002aee <HAL_GPIO_Init+0x1fa>
 8002aec:	2300      	movs	r3, #0
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	f002 0203 	and.w	r2, r2, #3
 8002af4:	0092      	lsls	r2, r2, #2
 8002af6:	4093      	lsls	r3, r2
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002afe:	4937      	ldr	r1, [pc, #220]	@ (8002bdc <HAL_GPIO_Init+0x2e8>)
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	089b      	lsrs	r3, r3, #2
 8002b04:	3302      	adds	r3, #2
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b0c:	4b39      	ldr	r3, [pc, #228]	@ (8002bf4 <HAL_GPIO_Init+0x300>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	43db      	mvns	r3, r3
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b30:	4a30      	ldr	r2, [pc, #192]	@ (8002bf4 <HAL_GPIO_Init+0x300>)
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b36:	4b2f      	ldr	r3, [pc, #188]	@ (8002bf4 <HAL_GPIO_Init+0x300>)
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	4013      	ands	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b5a:	4a26      	ldr	r2, [pc, #152]	@ (8002bf4 <HAL_GPIO_Init+0x300>)
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002b60:	4b24      	ldr	r3, [pc, #144]	@ (8002bf4 <HAL_GPIO_Init+0x300>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d003      	beq.n	8002b84 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b84:	4a1b      	ldr	r2, [pc, #108]	@ (8002bf4 <HAL_GPIO_Init+0x300>)
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8002bf4 <HAL_GPIO_Init+0x300>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	43db      	mvns	r3, r3
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	4013      	ands	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bae:	4a11      	ldr	r2, [pc, #68]	@ (8002bf4 <HAL_GPIO_Init+0x300>)
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f47f ae9d 	bne.w	8002904 <HAL_GPIO_Init+0x10>
  }
}
 8002bca:	bf00      	nop
 8002bcc:	bf00      	nop
 8002bce:	371c      	adds	r7, #28
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	40010000 	.word	0x40010000
 8002be0:	48000400 	.word	0x48000400
 8002be4:	48000800 	.word	0x48000800
 8002be8:	48000c00 	.word	0x48000c00
 8002bec:	48001000 	.word	0x48001000
 8002bf0:	48001400 	.word	0x48001400
 8002bf4:	40010400 	.word	0x40010400

08002bf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e08d      	b.n	8002d26 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d106      	bne.n	8002c24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7fd ff1e 	bl	8000a60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2224      	movs	r2, #36	@ 0x24
 8002c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0201 	bic.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d107      	bne.n	8002c72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c6e:	609a      	str	r2, [r3, #8]
 8002c70:	e006      	b.n	8002c80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002c7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d108      	bne.n	8002c9a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c96:	605a      	str	r2, [r3, #4]
 8002c98:	e007      	b.n	8002caa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ca8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6812      	ldr	r2, [r2, #0]
 8002cb4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002cb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cbc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ccc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691a      	ldr	r2, [r3, #16]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	69d9      	ldr	r1, [r3, #28]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a1a      	ldr	r2, [r3, #32]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0201 	orr.w	r2, r2, #1
 8002d06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2220      	movs	r2, #32
 8002d12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b088      	sub	sp, #32
 8002d34:	af02      	add	r7, sp, #8
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	4608      	mov	r0, r1
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	4603      	mov	r3, r0
 8002d40:	817b      	strh	r3, [r7, #10]
 8002d42:	460b      	mov	r3, r1
 8002d44:	813b      	strh	r3, [r7, #8]
 8002d46:	4613      	mov	r3, r2
 8002d48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b20      	cmp	r3, #32
 8002d54:	f040 80f9 	bne.w	8002f4a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d002      	beq.n	8002d64 <HAL_I2C_Mem_Write+0x34>
 8002d5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d105      	bne.n	8002d70 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d6a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e0ed      	b.n	8002f4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d101      	bne.n	8002d7e <HAL_I2C_Mem_Write+0x4e>
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	e0e6      	b.n	8002f4c <HAL_I2C_Mem_Write+0x21c>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d86:	f7fd ffbd 	bl	8000d04 <HAL_GetTick>
 8002d8a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	2319      	movs	r3, #25
 8002d92:	2201      	movs	r2, #1
 8002d94:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f000 f955 	bl	8003048 <I2C_WaitOnFlagUntilTimeout>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e0d1      	b.n	8002f4c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2221      	movs	r2, #33	@ 0x21
 8002dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2240      	movs	r2, #64	@ 0x40
 8002db4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a3a      	ldr	r2, [r7, #32]
 8002dc2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002dc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002dd0:	88f8      	ldrh	r0, [r7, #6]
 8002dd2:	893a      	ldrh	r2, [r7, #8]
 8002dd4:	8979      	ldrh	r1, [r7, #10]
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	9301      	str	r3, [sp, #4]
 8002dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	4603      	mov	r3, r0
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f000 f8b9 	bl	8002f58 <I2C_RequestMemoryWrite>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d005      	beq.n	8002df8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e0a9      	b.n	8002f4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	2bff      	cmp	r3, #255	@ 0xff
 8002e00:	d90e      	bls.n	8002e20 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	22ff      	movs	r2, #255	@ 0xff
 8002e06:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	8979      	ldrh	r1, [r7, #10]
 8002e10:	2300      	movs	r3, #0
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 fad9 	bl	80033d0 <I2C_TransferConfig>
 8002e1e:	e00f      	b.n	8002e40 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	8979      	ldrh	r1, [r7, #10]
 8002e32:	2300      	movs	r3, #0
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 fac8 	bl	80033d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 f958 	bl	80030fa <I2C_WaitOnTXISFlagUntilTimeout>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e07b      	b.n	8002f4c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e58:	781a      	ldrb	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e64:	1c5a      	adds	r2, r3, #1
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d034      	beq.n	8002ef8 <HAL_I2C_Mem_Write+0x1c8>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d130      	bne.n	8002ef8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	9300      	str	r3, [sp, #0]
 8002e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	2180      	movs	r1, #128	@ 0x80
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f000 f8d1 	bl	8003048 <I2C_WaitOnFlagUntilTimeout>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e04d      	b.n	8002f4c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	2bff      	cmp	r3, #255	@ 0xff
 8002eb8:	d90e      	bls.n	8002ed8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	22ff      	movs	r2, #255	@ 0xff
 8002ebe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	8979      	ldrh	r1, [r7, #10]
 8002ec8:	2300      	movs	r3, #0
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 fa7d 	bl	80033d0 <I2C_TransferConfig>
 8002ed6:	e00f      	b.n	8002ef8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	8979      	ldrh	r1, [r7, #10]
 8002eea:	2300      	movs	r3, #0
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 fa6c 	bl	80033d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d19e      	bne.n	8002e40 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 f93e 	bl	8003188 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e01a      	b.n	8002f4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6859      	ldr	r1, [r3, #4]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	4b0a      	ldr	r3, [pc, #40]	@ (8002f54 <HAL_I2C_Mem_Write+0x224>)
 8002f2a:	400b      	ands	r3, r1
 8002f2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2220      	movs	r2, #32
 8002f32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f46:	2300      	movs	r3, #0
 8002f48:	e000      	b.n	8002f4c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002f4a:	2302      	movs	r3, #2
  }
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	fe00e800 	.word	0xfe00e800

08002f58 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af02      	add	r7, sp, #8
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	4608      	mov	r0, r1
 8002f62:	4611      	mov	r1, r2
 8002f64:	461a      	mov	r2, r3
 8002f66:	4603      	mov	r3, r0
 8002f68:	817b      	strh	r3, [r7, #10]
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	813b      	strh	r3, [r7, #8]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002f72:	88fb      	ldrh	r3, [r7, #6]
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	8979      	ldrh	r1, [r7, #10]
 8002f78:	4b20      	ldr	r3, [pc, #128]	@ (8002ffc <I2C_RequestMemoryWrite+0xa4>)
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f000 fa25 	bl	80033d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f86:	69fa      	ldr	r2, [r7, #28]
 8002f88:	69b9      	ldr	r1, [r7, #24]
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f000 f8b5 	bl	80030fa <I2C_WaitOnTXISFlagUntilTimeout>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e02c      	b.n	8002ff4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f9a:	88fb      	ldrh	r3, [r7, #6]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d105      	bne.n	8002fac <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002fa0:	893b      	ldrh	r3, [r7, #8]
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	629a      	str	r2, [r3, #40]	@ 0x28
 8002faa:	e015      	b.n	8002fd8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002fac:	893b      	ldrh	r3, [r7, #8]
 8002fae:	0a1b      	lsrs	r3, r3, #8
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fba:	69fa      	ldr	r2, [r7, #28]
 8002fbc:	69b9      	ldr	r1, [r7, #24]
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 f89b 	bl	80030fa <I2C_WaitOnTXISFlagUntilTimeout>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e012      	b.n	8002ff4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002fce:	893b      	ldrh	r3, [r7, #8]
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	2180      	movs	r1, #128	@ 0x80
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 f830 	bl	8003048 <I2C_WaitOnFlagUntilTimeout>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	80002000 	.word	0x80002000

08003000 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b02      	cmp	r3, #2
 8003014:	d103      	bne.n	800301e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2200      	movs	r2, #0
 800301c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b01      	cmp	r3, #1
 800302a:	d007      	beq.n	800303c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	699a      	ldr	r2, [r3, #24]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0201 	orr.w	r2, r2, #1
 800303a:	619a      	str	r2, [r3, #24]
  }
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	603b      	str	r3, [r7, #0]
 8003054:	4613      	mov	r3, r2
 8003056:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003058:	e03b      	b.n	80030d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	6839      	ldr	r1, [r7, #0]
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 f8d6 	bl	8003210 <I2C_IsErrorOccurred>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e041      	b.n	80030f2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003074:	d02d      	beq.n	80030d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003076:	f7fd fe45 	bl	8000d04 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	429a      	cmp	r2, r3
 8003084:	d302      	bcc.n	800308c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d122      	bne.n	80030d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699a      	ldr	r2, [r3, #24]
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	4013      	ands	r3, r2
 8003096:	68ba      	ldr	r2, [r7, #8]
 8003098:	429a      	cmp	r2, r3
 800309a:	bf0c      	ite	eq
 800309c:	2301      	moveq	r3, #1
 800309e:	2300      	movne	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	461a      	mov	r2, r3
 80030a4:	79fb      	ldrb	r3, [r7, #7]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d113      	bne.n	80030d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ae:	f043 0220 	orr.w	r2, r3, #32
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2220      	movs	r2, #32
 80030ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e00f      	b.n	80030f2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	699a      	ldr	r2, [r3, #24]
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	4013      	ands	r3, r2
 80030dc:	68ba      	ldr	r2, [r7, #8]
 80030de:	429a      	cmp	r2, r3
 80030e0:	bf0c      	ite	eq
 80030e2:	2301      	moveq	r3, #1
 80030e4:	2300      	movne	r3, #0
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	461a      	mov	r2, r3
 80030ea:	79fb      	ldrb	r3, [r7, #7]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d0b4      	beq.n	800305a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b084      	sub	sp, #16
 80030fe:	af00      	add	r7, sp, #0
 8003100:	60f8      	str	r0, [r7, #12]
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003106:	e033      	b.n	8003170 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	68b9      	ldr	r1, [r7, #8]
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f000 f87f 	bl	8003210 <I2C_IsErrorOccurred>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e031      	b.n	8003180 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003122:	d025      	beq.n	8003170 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003124:	f7fd fdee 	bl	8000d04 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	429a      	cmp	r2, r3
 8003132:	d302      	bcc.n	800313a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d11a      	bne.n	8003170 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b02      	cmp	r3, #2
 8003146:	d013      	beq.n	8003170 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800314c:	f043 0220 	orr.w	r2, r3, #32
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2220      	movs	r2, #32
 8003158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e007      	b.n	8003180 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b02      	cmp	r3, #2
 800317c:	d1c4      	bne.n	8003108 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003194:	e02f      	b.n	80031f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	68b9      	ldr	r1, [r7, #8]
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 f838 	bl	8003210 <I2C_IsErrorOccurred>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e02d      	b.n	8003206 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031aa:	f7fd fdab 	bl	8000d04 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d302      	bcc.n	80031c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d11a      	bne.n	80031f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	f003 0320 	and.w	r3, r3, #32
 80031ca:	2b20      	cmp	r3, #32
 80031cc:	d013      	beq.n	80031f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d2:	f043 0220 	orr.w	r2, r3, #32
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2220      	movs	r2, #32
 80031de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e007      	b.n	8003206 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	f003 0320 	and.w	r3, r3, #32
 8003200:	2b20      	cmp	r3, #32
 8003202:	d1c8      	bne.n	8003196 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
	...

08003210 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08a      	sub	sp, #40	@ 0x28
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800321c:	2300      	movs	r3, #0
 800321e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800322a:	2300      	movs	r3, #0
 800322c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	f003 0310 	and.w	r3, r3, #16
 8003238:	2b00      	cmp	r3, #0
 800323a:	d068      	beq.n	800330e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2210      	movs	r2, #16
 8003242:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003244:	e049      	b.n	80032da <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324c:	d045      	beq.n	80032da <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800324e:	f7fd fd59 	bl	8000d04 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	429a      	cmp	r2, r3
 800325c:	d302      	bcc.n	8003264 <I2C_IsErrorOccurred+0x54>
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d13a      	bne.n	80032da <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800326e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003276:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003282:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003286:	d121      	bne.n	80032cc <I2C_IsErrorOccurred+0xbc>
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800328e:	d01d      	beq.n	80032cc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003290:	7cfb      	ldrb	r3, [r7, #19]
 8003292:	2b20      	cmp	r3, #32
 8003294:	d01a      	beq.n	80032cc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032a4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80032a6:	f7fd fd2d 	bl	8000d04 <HAL_GetTick>
 80032aa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032ac:	e00e      	b.n	80032cc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80032ae:	f7fd fd29 	bl	8000d04 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b19      	cmp	r3, #25
 80032ba:	d907      	bls.n	80032cc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	f043 0320 	orr.w	r3, r3, #32
 80032c2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80032ca:	e006      	b.n	80032da <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	f003 0320 	and.w	r3, r3, #32
 80032d6:	2b20      	cmp	r3, #32
 80032d8:	d1e9      	bne.n	80032ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	f003 0320 	and.w	r3, r3, #32
 80032e4:	2b20      	cmp	r3, #32
 80032e6:	d003      	beq.n	80032f0 <I2C_IsErrorOccurred+0xe0>
 80032e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0aa      	beq.n	8003246 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80032f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d103      	bne.n	8003300 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2220      	movs	r2, #32
 80032fe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003300:	6a3b      	ldr	r3, [r7, #32]
 8003302:	f043 0304 	orr.w	r3, r3, #4
 8003306:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00b      	beq.n	8003338 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	f043 0301 	orr.w	r3, r3, #1
 8003326:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003330:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00b      	beq.n	800335a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	f043 0308 	orr.w	r3, r3, #8
 8003348:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003352:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00b      	beq.n	800337c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	f043 0302 	orr.w	r3, r3, #2
 800336a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003374:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800337c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003380:	2b00      	cmp	r3, #0
 8003382:	d01c      	beq.n	80033be <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f7ff fe3b 	bl	8003000 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6859      	ldr	r1, [r3, #4]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	4b0d      	ldr	r3, [pc, #52]	@ (80033cc <I2C_IsErrorOccurred+0x1bc>)
 8003396:	400b      	ands	r3, r1
 8003398:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	431a      	orrs	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2220      	movs	r2, #32
 80033aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80033be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3728      	adds	r7, #40	@ 0x28
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	fe00e800 	.word	0xfe00e800

080033d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	607b      	str	r3, [r7, #4]
 80033da:	460b      	mov	r3, r1
 80033dc:	817b      	strh	r3, [r7, #10]
 80033de:	4613      	mov	r3, r2
 80033e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033e2:	897b      	ldrh	r3, [r7, #10]
 80033e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033e8:	7a7b      	ldrb	r3, [r7, #9]
 80033ea:	041b      	lsls	r3, r3, #16
 80033ec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033f0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033fe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	6a3b      	ldr	r3, [r7, #32]
 8003408:	0d5b      	lsrs	r3, r3, #21
 800340a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800340e:	4b08      	ldr	r3, [pc, #32]	@ (8003430 <I2C_TransferConfig+0x60>)
 8003410:	430b      	orrs	r3, r1
 8003412:	43db      	mvns	r3, r3
 8003414:	ea02 0103 	and.w	r1, r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	430a      	orrs	r2, r1
 8003420:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003422:	bf00      	nop
 8003424:	371c      	adds	r7, #28
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	03ff63ff 	.word	0x03ff63ff

08003434 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b20      	cmp	r3, #32
 8003448:	d138      	bne.n	80034bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003450:	2b01      	cmp	r3, #1
 8003452:	d101      	bne.n	8003458 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003454:	2302      	movs	r3, #2
 8003456:	e032      	b.n	80034be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2224      	movs	r2, #36	@ 0x24
 8003464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 0201 	bic.w	r2, r2, #1
 8003476:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003486:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6819      	ldr	r1, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0201 	orr.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2220      	movs	r2, #32
 80034ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	e000      	b.n	80034be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80034bc:	2302      	movs	r3, #2
  }
}
 80034be:	4618      	mov	r0, r3
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b085      	sub	sp, #20
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
 80034d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b20      	cmp	r3, #32
 80034de:	d139      	bne.n	8003554 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d101      	bne.n	80034ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80034ea:	2302      	movs	r3, #2
 80034ec:	e033      	b.n	8003556 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2224      	movs	r2, #36	@ 0x24
 80034fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0201 	bic.w	r2, r2, #1
 800350c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800351c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	021b      	lsls	r3, r3, #8
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	4313      	orrs	r3, r2
 8003526:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 0201 	orr.w	r2, r2, #1
 800353e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2220      	movs	r2, #32
 8003544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003550:	2300      	movs	r3, #0
 8003552:	e000      	b.n	8003556 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003554:	2302      	movs	r3, #2
  }
}
 8003556:	4618      	mov	r0, r3
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
	...

08003564 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d141      	bne.n	80035f6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003572:	4b4b      	ldr	r3, [pc, #300]	@ (80036a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800357a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800357e:	d131      	bne.n	80035e4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003580:	4b47      	ldr	r3, [pc, #284]	@ (80036a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003582:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003586:	4a46      	ldr	r2, [pc, #280]	@ (80036a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003588:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800358c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003590:	4b43      	ldr	r3, [pc, #268]	@ (80036a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003598:	4a41      	ldr	r2, [pc, #260]	@ (80036a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800359a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800359e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035a0:	4b40      	ldr	r3, [pc, #256]	@ (80036a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2232      	movs	r2, #50	@ 0x32
 80035a6:	fb02 f303 	mul.w	r3, r2, r3
 80035aa:	4a3f      	ldr	r2, [pc, #252]	@ (80036a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80035ac:	fba2 2303 	umull	r2, r3, r2, r3
 80035b0:	0c9b      	lsrs	r3, r3, #18
 80035b2:	3301      	adds	r3, #1
 80035b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035b6:	e002      	b.n	80035be <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	3b01      	subs	r3, #1
 80035bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035be:	4b38      	ldr	r3, [pc, #224]	@ (80036a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035ca:	d102      	bne.n	80035d2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1f2      	bne.n	80035b8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035d2:	4b33      	ldr	r3, [pc, #204]	@ (80036a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035de:	d158      	bne.n	8003692 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e057      	b.n	8003694 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035e4:	4b2e      	ldr	r3, [pc, #184]	@ (80036a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035ea:	4a2d      	ldr	r2, [pc, #180]	@ (80036a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80035f4:	e04d      	b.n	8003692 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035fc:	d141      	bne.n	8003682 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80035fe:	4b28      	ldr	r3, [pc, #160]	@ (80036a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003606:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800360a:	d131      	bne.n	8003670 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800360c:	4b24      	ldr	r3, [pc, #144]	@ (80036a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800360e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003612:	4a23      	ldr	r2, [pc, #140]	@ (80036a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003614:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003618:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800361c:	4b20      	ldr	r3, [pc, #128]	@ (80036a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003624:	4a1e      	ldr	r2, [pc, #120]	@ (80036a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003626:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800362a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800362c:	4b1d      	ldr	r3, [pc, #116]	@ (80036a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2232      	movs	r2, #50	@ 0x32
 8003632:	fb02 f303 	mul.w	r3, r2, r3
 8003636:	4a1c      	ldr	r2, [pc, #112]	@ (80036a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003638:	fba2 2303 	umull	r2, r3, r2, r3
 800363c:	0c9b      	lsrs	r3, r3, #18
 800363e:	3301      	adds	r3, #1
 8003640:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003642:	e002      	b.n	800364a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	3b01      	subs	r3, #1
 8003648:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800364a:	4b15      	ldr	r3, [pc, #84]	@ (80036a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003652:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003656:	d102      	bne.n	800365e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1f2      	bne.n	8003644 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800365e:	4b10      	ldr	r3, [pc, #64]	@ (80036a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003666:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800366a:	d112      	bne.n	8003692 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e011      	b.n	8003694 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003670:	4b0b      	ldr	r3, [pc, #44]	@ (80036a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003672:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003676:	4a0a      	ldr	r2, [pc, #40]	@ (80036a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003678:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800367c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003680:	e007      	b.n	8003692 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003682:	4b07      	ldr	r3, [pc, #28]	@ (80036a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800368a:	4a05      	ldr	r2, [pc, #20]	@ (80036a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800368c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003690:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	40007000 	.word	0x40007000
 80036a4:	20000000 	.word	0x20000000
 80036a8:	431bde83 	.word	0x431bde83

080036ac <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80036b0:	4b05      	ldr	r3, [pc, #20]	@ (80036c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	4a04      	ldr	r2, [pc, #16]	@ (80036c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80036b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036ba:	6093      	str	r3, [r2, #8]
}
 80036bc:	bf00      	nop
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	40007000 	.word	0x40007000

080036cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b088      	sub	sp, #32
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e2fe      	b.n	8003cdc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d075      	beq.n	80037d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036ea:	4b97      	ldr	r3, [pc, #604]	@ (8003948 <HAL_RCC_OscConfig+0x27c>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 030c 	and.w	r3, r3, #12
 80036f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036f4:	4b94      	ldr	r3, [pc, #592]	@ (8003948 <HAL_RCC_OscConfig+0x27c>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	f003 0303 	and.w	r3, r3, #3
 80036fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	2b0c      	cmp	r3, #12
 8003702:	d102      	bne.n	800370a <HAL_RCC_OscConfig+0x3e>
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	2b03      	cmp	r3, #3
 8003708:	d002      	beq.n	8003710 <HAL_RCC_OscConfig+0x44>
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	2b08      	cmp	r3, #8
 800370e:	d10b      	bne.n	8003728 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003710:	4b8d      	ldr	r3, [pc, #564]	@ (8003948 <HAL_RCC_OscConfig+0x27c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d05b      	beq.n	80037d4 <HAL_RCC_OscConfig+0x108>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d157      	bne.n	80037d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e2d9      	b.n	8003cdc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003730:	d106      	bne.n	8003740 <HAL_RCC_OscConfig+0x74>
 8003732:	4b85      	ldr	r3, [pc, #532]	@ (8003948 <HAL_RCC_OscConfig+0x27c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a84      	ldr	r2, [pc, #528]	@ (8003948 <HAL_RCC_OscConfig+0x27c>)
 8003738:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800373c:	6013      	str	r3, [r2, #0]
 800373e:	e01d      	b.n	800377c <HAL_RCC_OscConfig+0xb0>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003748:	d10c      	bne.n	8003764 <HAL_RCC_OscConfig+0x98>
 800374a:	4b7f      	ldr	r3, [pc, #508]	@ (8003948 <HAL_RCC_OscConfig+0x27c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a7e      	ldr	r2, [pc, #504]	@ (8003948 <HAL_RCC_OscConfig+0x27c>)
 8003750:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	4b7c      	ldr	r3, [pc, #496]	@ (8003948 <HAL_RCC_OscConfig+0x27c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a7b      	ldr	r2, [pc, #492]	@ (8003948 <HAL_RCC_OscConfig+0x27c>)
 800375c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003760:	6013      	str	r3, [r2, #0]
 8003762:	e00b      	b.n	800377c <HAL_RCC_OscConfig+0xb0>
 8003764:	4b78      	ldr	r3, [pc, #480]	@ (8003948 <HAL_RCC_OscConfig+0x27c>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a77      	ldr	r2, [pc, #476]	@ (8003948 <HAL_RCC_OscConfig+0x27c>)
 800376a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800376e:	6013      	str	r3, [r2, #0]
 8003770:	4b75      	ldr	r3, [pc, #468]	@ (8003948 <HAL_RCC_OscConfig+0x27c>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a74      	ldr	r2, [pc, #464]	@ (8003948 <HAL_RCC_OscConfig+0x27c>)
 8003776:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800377a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d013      	beq.n	80037ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003784:	f7fd fabe 	bl	8000d04 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800378c:	f7fd faba 	bl	8000d04 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b64      	cmp	r3, #100	@ 0x64
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e29e      	b.n	8003cdc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800379e:	4b6a      	ldr	r3, [pc, #424]	@ (8003948 <HAL_RCC_OscConfig+0x27c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0f0      	beq.n	800378c <HAL_RCC_OscConfig+0xc0>
 80037aa:	e014      	b.n	80037d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ac:	f7fd faaa 	bl	8000d04 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037b4:	f7fd faa6 	bl	8000d04 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b64      	cmp	r3, #100	@ 0x64
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e28a      	b.n	8003cdc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037c6:	4b60      	ldr	r3, [pc, #384]	@ (8003948 <HAL_RCC_OscConfig+0x27c>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f0      	bne.n	80037b4 <HAL_RCC_OscConfig+0xe8>
 80037d2:	e000      	b.n	80037d6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d075      	beq.n	80038ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037e2:	4b59      	ldr	r3, [pc, #356]	@ (8003948 <HAL_RCC_OscConfig+0x27c>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 030c 	and.w	r3, r3, #12
 80037ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037ec:	4b56      	ldr	r3, [pc, #344]	@ (8003948 <HAL_RCC_OscConfig+0x27c>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f003 0303 	and.w	r3, r3, #3
 80037f4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	2b0c      	cmp	r3, #12
 80037fa:	d102      	bne.n	8003802 <HAL_RCC_OscConfig+0x136>
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d002      	beq.n	8003808 <HAL_RCC_OscConfig+0x13c>
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	2b04      	cmp	r3, #4
 8003806:	d11f      	bne.n	8003848 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003808:	4b4f      	ldr	r3, [pc, #316]	@ (8003948 <HAL_RCC_OscConfig+0x27c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <HAL_RCC_OscConfig+0x154>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e25d      	b.n	8003cdc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003820:	4b49      	ldr	r3, [pc, #292]	@ (8003948 <HAL_RCC_OscConfig+0x27c>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	061b      	lsls	r3, r3, #24
 800382e:	4946      	ldr	r1, [pc, #280]	@ (8003948 <HAL_RCC_OscConfig+0x27c>)
 8003830:	4313      	orrs	r3, r2
 8003832:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003834:	4b45      	ldr	r3, [pc, #276]	@ (800394c <HAL_RCC_OscConfig+0x280>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4618      	mov	r0, r3
 800383a:	f7fd fa17 	bl	8000c6c <HAL_InitTick>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d043      	beq.n	80038cc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e249      	b.n	8003cdc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d023      	beq.n	8003898 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003850:	4b3d      	ldr	r3, [pc, #244]	@ (8003948 <HAL_RCC_OscConfig+0x27c>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a3c      	ldr	r2, [pc, #240]	@ (8003948 <HAL_RCC_OscConfig+0x27c>)
 8003856:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800385a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385c:	f7fd fa52 	bl	8000d04 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003864:	f7fd fa4e 	bl	8000d04 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e232      	b.n	8003cdc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003876:	4b34      	ldr	r3, [pc, #208]	@ (8003948 <HAL_RCC_OscConfig+0x27c>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0f0      	beq.n	8003864 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003882:	4b31      	ldr	r3, [pc, #196]	@ (8003948 <HAL_RCC_OscConfig+0x27c>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	061b      	lsls	r3, r3, #24
 8003890:	492d      	ldr	r1, [pc, #180]	@ (8003948 <HAL_RCC_OscConfig+0x27c>)
 8003892:	4313      	orrs	r3, r2
 8003894:	604b      	str	r3, [r1, #4]
 8003896:	e01a      	b.n	80038ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003898:	4b2b      	ldr	r3, [pc, #172]	@ (8003948 <HAL_RCC_OscConfig+0x27c>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a2a      	ldr	r2, [pc, #168]	@ (8003948 <HAL_RCC_OscConfig+0x27c>)
 800389e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a4:	f7fd fa2e 	bl	8000d04 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ac:	f7fd fa2a 	bl	8000d04 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e20e      	b.n	8003cdc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038be:	4b22      	ldr	r3, [pc, #136]	@ (8003948 <HAL_RCC_OscConfig+0x27c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1f0      	bne.n	80038ac <HAL_RCC_OscConfig+0x1e0>
 80038ca:	e000      	b.n	80038ce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0308 	and.w	r3, r3, #8
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d041      	beq.n	800395e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d01c      	beq.n	800391c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038e2:	4b19      	ldr	r3, [pc, #100]	@ (8003948 <HAL_RCC_OscConfig+0x27c>)
 80038e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038e8:	4a17      	ldr	r2, [pc, #92]	@ (8003948 <HAL_RCC_OscConfig+0x27c>)
 80038ea:	f043 0301 	orr.w	r3, r3, #1
 80038ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f2:	f7fd fa07 	bl	8000d04 <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038f8:	e008      	b.n	800390c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038fa:	f7fd fa03 	bl	8000d04 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e1e7      	b.n	8003cdc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800390c:	4b0e      	ldr	r3, [pc, #56]	@ (8003948 <HAL_RCC_OscConfig+0x27c>)
 800390e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0ef      	beq.n	80038fa <HAL_RCC_OscConfig+0x22e>
 800391a:	e020      	b.n	800395e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800391c:	4b0a      	ldr	r3, [pc, #40]	@ (8003948 <HAL_RCC_OscConfig+0x27c>)
 800391e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003922:	4a09      	ldr	r2, [pc, #36]	@ (8003948 <HAL_RCC_OscConfig+0x27c>)
 8003924:	f023 0301 	bic.w	r3, r3, #1
 8003928:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800392c:	f7fd f9ea 	bl	8000d04 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003932:	e00d      	b.n	8003950 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003934:	f7fd f9e6 	bl	8000d04 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d906      	bls.n	8003950 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e1ca      	b.n	8003cdc <HAL_RCC_OscConfig+0x610>
 8003946:	bf00      	nop
 8003948:	40021000 	.word	0x40021000
 800394c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003950:	4b8c      	ldr	r3, [pc, #560]	@ (8003b84 <HAL_RCC_OscConfig+0x4b8>)
 8003952:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1ea      	bne.n	8003934 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0304 	and.w	r3, r3, #4
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 80a6 	beq.w	8003ab8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800396c:	2300      	movs	r3, #0
 800396e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003970:	4b84      	ldr	r3, [pc, #528]	@ (8003b84 <HAL_RCC_OscConfig+0x4b8>)
 8003972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003974:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <HAL_RCC_OscConfig+0x2b4>
 800397c:	2301      	movs	r3, #1
 800397e:	e000      	b.n	8003982 <HAL_RCC_OscConfig+0x2b6>
 8003980:	2300      	movs	r3, #0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00d      	beq.n	80039a2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003986:	4b7f      	ldr	r3, [pc, #508]	@ (8003b84 <HAL_RCC_OscConfig+0x4b8>)
 8003988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800398a:	4a7e      	ldr	r2, [pc, #504]	@ (8003b84 <HAL_RCC_OscConfig+0x4b8>)
 800398c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003990:	6593      	str	r3, [r2, #88]	@ 0x58
 8003992:	4b7c      	ldr	r3, [pc, #496]	@ (8003b84 <HAL_RCC_OscConfig+0x4b8>)
 8003994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800399e:	2301      	movs	r3, #1
 80039a0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039a2:	4b79      	ldr	r3, [pc, #484]	@ (8003b88 <HAL_RCC_OscConfig+0x4bc>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d118      	bne.n	80039e0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039ae:	4b76      	ldr	r3, [pc, #472]	@ (8003b88 <HAL_RCC_OscConfig+0x4bc>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a75      	ldr	r2, [pc, #468]	@ (8003b88 <HAL_RCC_OscConfig+0x4bc>)
 80039b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ba:	f7fd f9a3 	bl	8000d04 <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039c0:	e008      	b.n	80039d4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039c2:	f7fd f99f 	bl	8000d04 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e183      	b.n	8003cdc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039d4:	4b6c      	ldr	r3, [pc, #432]	@ (8003b88 <HAL_RCC_OscConfig+0x4bc>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0f0      	beq.n	80039c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d108      	bne.n	80039fa <HAL_RCC_OscConfig+0x32e>
 80039e8:	4b66      	ldr	r3, [pc, #408]	@ (8003b84 <HAL_RCC_OscConfig+0x4b8>)
 80039ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039ee:	4a65      	ldr	r2, [pc, #404]	@ (8003b84 <HAL_RCC_OscConfig+0x4b8>)
 80039f0:	f043 0301 	orr.w	r3, r3, #1
 80039f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039f8:	e024      	b.n	8003a44 <HAL_RCC_OscConfig+0x378>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	2b05      	cmp	r3, #5
 8003a00:	d110      	bne.n	8003a24 <HAL_RCC_OscConfig+0x358>
 8003a02:	4b60      	ldr	r3, [pc, #384]	@ (8003b84 <HAL_RCC_OscConfig+0x4b8>)
 8003a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a08:	4a5e      	ldr	r2, [pc, #376]	@ (8003b84 <HAL_RCC_OscConfig+0x4b8>)
 8003a0a:	f043 0304 	orr.w	r3, r3, #4
 8003a0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a12:	4b5c      	ldr	r3, [pc, #368]	@ (8003b84 <HAL_RCC_OscConfig+0x4b8>)
 8003a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a18:	4a5a      	ldr	r2, [pc, #360]	@ (8003b84 <HAL_RCC_OscConfig+0x4b8>)
 8003a1a:	f043 0301 	orr.w	r3, r3, #1
 8003a1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a22:	e00f      	b.n	8003a44 <HAL_RCC_OscConfig+0x378>
 8003a24:	4b57      	ldr	r3, [pc, #348]	@ (8003b84 <HAL_RCC_OscConfig+0x4b8>)
 8003a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a2a:	4a56      	ldr	r2, [pc, #344]	@ (8003b84 <HAL_RCC_OscConfig+0x4b8>)
 8003a2c:	f023 0301 	bic.w	r3, r3, #1
 8003a30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a34:	4b53      	ldr	r3, [pc, #332]	@ (8003b84 <HAL_RCC_OscConfig+0x4b8>)
 8003a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a3a:	4a52      	ldr	r2, [pc, #328]	@ (8003b84 <HAL_RCC_OscConfig+0x4b8>)
 8003a3c:	f023 0304 	bic.w	r3, r3, #4
 8003a40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d016      	beq.n	8003a7a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a4c:	f7fd f95a 	bl	8000d04 <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a52:	e00a      	b.n	8003a6a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a54:	f7fd f956 	bl	8000d04 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e138      	b.n	8003cdc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a6a:	4b46      	ldr	r3, [pc, #280]	@ (8003b84 <HAL_RCC_OscConfig+0x4b8>)
 8003a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0ed      	beq.n	8003a54 <HAL_RCC_OscConfig+0x388>
 8003a78:	e015      	b.n	8003aa6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a7a:	f7fd f943 	bl	8000d04 <HAL_GetTick>
 8003a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a80:	e00a      	b.n	8003a98 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a82:	f7fd f93f 	bl	8000d04 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e121      	b.n	8003cdc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a98:	4b3a      	ldr	r3, [pc, #232]	@ (8003b84 <HAL_RCC_OscConfig+0x4b8>)
 8003a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1ed      	bne.n	8003a82 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003aa6:	7ffb      	ldrb	r3, [r7, #31]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d105      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aac:	4b35      	ldr	r3, [pc, #212]	@ (8003b84 <HAL_RCC_OscConfig+0x4b8>)
 8003aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ab0:	4a34      	ldr	r2, [pc, #208]	@ (8003b84 <HAL_RCC_OscConfig+0x4b8>)
 8003ab2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ab6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0320 	and.w	r3, r3, #32
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d03c      	beq.n	8003b3e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d01c      	beq.n	8003b06 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003acc:	4b2d      	ldr	r3, [pc, #180]	@ (8003b84 <HAL_RCC_OscConfig+0x4b8>)
 8003ace:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ad2:	4a2c      	ldr	r2, [pc, #176]	@ (8003b84 <HAL_RCC_OscConfig+0x4b8>)
 8003ad4:	f043 0301 	orr.w	r3, r3, #1
 8003ad8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003adc:	f7fd f912 	bl	8000d04 <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ae4:	f7fd f90e 	bl	8000d04 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e0f2      	b.n	8003cdc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003af6:	4b23      	ldr	r3, [pc, #140]	@ (8003b84 <HAL_RCC_OscConfig+0x4b8>)
 8003af8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0ef      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x418>
 8003b04:	e01b      	b.n	8003b3e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b06:	4b1f      	ldr	r3, [pc, #124]	@ (8003b84 <HAL_RCC_OscConfig+0x4b8>)
 8003b08:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b0c:	4a1d      	ldr	r2, [pc, #116]	@ (8003b84 <HAL_RCC_OscConfig+0x4b8>)
 8003b0e:	f023 0301 	bic.w	r3, r3, #1
 8003b12:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b16:	f7fd f8f5 	bl	8000d04 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b1e:	f7fd f8f1 	bl	8000d04 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e0d5      	b.n	8003cdc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b30:	4b14      	ldr	r3, [pc, #80]	@ (8003b84 <HAL_RCC_OscConfig+0x4b8>)
 8003b32:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1ef      	bne.n	8003b1e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f000 80c9 	beq.w	8003cda <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b48:	4b0e      	ldr	r3, [pc, #56]	@ (8003b84 <HAL_RCC_OscConfig+0x4b8>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f003 030c 	and.w	r3, r3, #12
 8003b50:	2b0c      	cmp	r3, #12
 8003b52:	f000 8083 	beq.w	8003c5c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d15e      	bne.n	8003c1c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b5e:	4b09      	ldr	r3, [pc, #36]	@ (8003b84 <HAL_RCC_OscConfig+0x4b8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a08      	ldr	r2, [pc, #32]	@ (8003b84 <HAL_RCC_OscConfig+0x4b8>)
 8003b64:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6a:	f7fd f8cb 	bl	8000d04 <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b70:	e00c      	b.n	8003b8c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b72:	f7fd f8c7 	bl	8000d04 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d905      	bls.n	8003b8c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e0ab      	b.n	8003cdc <HAL_RCC_OscConfig+0x610>
 8003b84:	40021000 	.word	0x40021000
 8003b88:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b8c:	4b55      	ldr	r3, [pc, #340]	@ (8003ce4 <HAL_RCC_OscConfig+0x618>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1ec      	bne.n	8003b72 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b98:	4b52      	ldr	r3, [pc, #328]	@ (8003ce4 <HAL_RCC_OscConfig+0x618>)
 8003b9a:	68da      	ldr	r2, [r3, #12]
 8003b9c:	4b52      	ldr	r3, [pc, #328]	@ (8003ce8 <HAL_RCC_OscConfig+0x61c>)
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	6a11      	ldr	r1, [r2, #32]
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ba8:	3a01      	subs	r2, #1
 8003baa:	0112      	lsls	r2, r2, #4
 8003bac:	4311      	orrs	r1, r2
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003bb2:	0212      	lsls	r2, r2, #8
 8003bb4:	4311      	orrs	r1, r2
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003bba:	0852      	lsrs	r2, r2, #1
 8003bbc:	3a01      	subs	r2, #1
 8003bbe:	0552      	lsls	r2, r2, #21
 8003bc0:	4311      	orrs	r1, r2
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003bc6:	0852      	lsrs	r2, r2, #1
 8003bc8:	3a01      	subs	r2, #1
 8003bca:	0652      	lsls	r2, r2, #25
 8003bcc:	4311      	orrs	r1, r2
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003bd2:	06d2      	lsls	r2, r2, #27
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	4943      	ldr	r1, [pc, #268]	@ (8003ce4 <HAL_RCC_OscConfig+0x618>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bdc:	4b41      	ldr	r3, [pc, #260]	@ (8003ce4 <HAL_RCC_OscConfig+0x618>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a40      	ldr	r2, [pc, #256]	@ (8003ce4 <HAL_RCC_OscConfig+0x618>)
 8003be2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003be6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003be8:	4b3e      	ldr	r3, [pc, #248]	@ (8003ce4 <HAL_RCC_OscConfig+0x618>)
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	4a3d      	ldr	r2, [pc, #244]	@ (8003ce4 <HAL_RCC_OscConfig+0x618>)
 8003bee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bf2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf4:	f7fd f886 	bl	8000d04 <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bfc:	f7fd f882 	bl	8000d04 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e066      	b.n	8003cdc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c0e:	4b35      	ldr	r3, [pc, #212]	@ (8003ce4 <HAL_RCC_OscConfig+0x618>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0f0      	beq.n	8003bfc <HAL_RCC_OscConfig+0x530>
 8003c1a:	e05e      	b.n	8003cda <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c1c:	4b31      	ldr	r3, [pc, #196]	@ (8003ce4 <HAL_RCC_OscConfig+0x618>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a30      	ldr	r2, [pc, #192]	@ (8003ce4 <HAL_RCC_OscConfig+0x618>)
 8003c22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c28:	f7fd f86c 	bl	8000d04 <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c30:	f7fd f868 	bl	8000d04 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e04c      	b.n	8003cdc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c42:	4b28      	ldr	r3, [pc, #160]	@ (8003ce4 <HAL_RCC_OscConfig+0x618>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1f0      	bne.n	8003c30 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003c4e:	4b25      	ldr	r3, [pc, #148]	@ (8003ce4 <HAL_RCC_OscConfig+0x618>)
 8003c50:	68da      	ldr	r2, [r3, #12]
 8003c52:	4924      	ldr	r1, [pc, #144]	@ (8003ce4 <HAL_RCC_OscConfig+0x618>)
 8003c54:	4b25      	ldr	r3, [pc, #148]	@ (8003cec <HAL_RCC_OscConfig+0x620>)
 8003c56:	4013      	ands	r3, r2
 8003c58:	60cb      	str	r3, [r1, #12]
 8003c5a:	e03e      	b.n	8003cda <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d101      	bne.n	8003c68 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e039      	b.n	8003cdc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003c68:	4b1e      	ldr	r3, [pc, #120]	@ (8003ce4 <HAL_RCC_OscConfig+0x618>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f003 0203 	and.w	r2, r3, #3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d12c      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c86:	3b01      	subs	r3, #1
 8003c88:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d123      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c98:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d11b      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d113      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb8:	085b      	lsrs	r3, r3, #1
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d109      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ccc:	085b      	lsrs	r3, r3, #1
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d001      	beq.n	8003cda <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e000      	b.n	8003cdc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3720      	adds	r7, #32
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	019f800c 	.word	0x019f800c
 8003cec:	feeefffc 	.word	0xfeeefffc

08003cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e11e      	b.n	8003f46 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d08:	4b91      	ldr	r3, [pc, #580]	@ (8003f50 <HAL_RCC_ClockConfig+0x260>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 030f 	and.w	r3, r3, #15
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d910      	bls.n	8003d38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d16:	4b8e      	ldr	r3, [pc, #568]	@ (8003f50 <HAL_RCC_ClockConfig+0x260>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f023 020f 	bic.w	r2, r3, #15
 8003d1e:	498c      	ldr	r1, [pc, #560]	@ (8003f50 <HAL_RCC_ClockConfig+0x260>)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d26:	4b8a      	ldr	r3, [pc, #552]	@ (8003f50 <HAL_RCC_ClockConfig+0x260>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 030f 	and.w	r3, r3, #15
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d001      	beq.n	8003d38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e106      	b.n	8003f46 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d073      	beq.n	8003e2c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	2b03      	cmp	r3, #3
 8003d4a:	d129      	bne.n	8003da0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d4c:	4b81      	ldr	r3, [pc, #516]	@ (8003f54 <HAL_RCC_ClockConfig+0x264>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d101      	bne.n	8003d5c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e0f4      	b.n	8003f46 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003d5c:	f000 f966 	bl	800402c <RCC_GetSysClockFreqFromPLLSource>
 8003d60:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	4a7c      	ldr	r2, [pc, #496]	@ (8003f58 <HAL_RCC_ClockConfig+0x268>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d93f      	bls.n	8003dea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003d6a:	4b7a      	ldr	r3, [pc, #488]	@ (8003f54 <HAL_RCC_ClockConfig+0x264>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d009      	beq.n	8003d8a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d033      	beq.n	8003dea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d12f      	bne.n	8003dea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d8a:	4b72      	ldr	r3, [pc, #456]	@ (8003f54 <HAL_RCC_ClockConfig+0x264>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d92:	4a70      	ldr	r2, [pc, #448]	@ (8003f54 <HAL_RCC_ClockConfig+0x264>)
 8003d94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d98:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003d9a:	2380      	movs	r3, #128	@ 0x80
 8003d9c:	617b      	str	r3, [r7, #20]
 8003d9e:	e024      	b.n	8003dea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d107      	bne.n	8003db8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003da8:	4b6a      	ldr	r3, [pc, #424]	@ (8003f54 <HAL_RCC_ClockConfig+0x264>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d109      	bne.n	8003dc8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e0c6      	b.n	8003f46 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003db8:	4b66      	ldr	r3, [pc, #408]	@ (8003f54 <HAL_RCC_ClockConfig+0x264>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d101      	bne.n	8003dc8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e0be      	b.n	8003f46 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003dc8:	f000 f8ce 	bl	8003f68 <HAL_RCC_GetSysClockFreq>
 8003dcc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	4a61      	ldr	r2, [pc, #388]	@ (8003f58 <HAL_RCC_ClockConfig+0x268>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d909      	bls.n	8003dea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003dd6:	4b5f      	ldr	r3, [pc, #380]	@ (8003f54 <HAL_RCC_ClockConfig+0x264>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003dde:	4a5d      	ldr	r2, [pc, #372]	@ (8003f54 <HAL_RCC_ClockConfig+0x264>)
 8003de0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003de4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003de6:	2380      	movs	r3, #128	@ 0x80
 8003de8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003dea:	4b5a      	ldr	r3, [pc, #360]	@ (8003f54 <HAL_RCC_ClockConfig+0x264>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f023 0203 	bic.w	r2, r3, #3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	4957      	ldr	r1, [pc, #348]	@ (8003f54 <HAL_RCC_ClockConfig+0x264>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dfc:	f7fc ff82 	bl	8000d04 <HAL_GetTick>
 8003e00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e02:	e00a      	b.n	8003e1a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e04:	f7fc ff7e 	bl	8000d04 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e095      	b.n	8003f46 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e1a:	4b4e      	ldr	r3, [pc, #312]	@ (8003f54 <HAL_RCC_ClockConfig+0x264>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 020c 	and.w	r2, r3, #12
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d1eb      	bne.n	8003e04 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d023      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0304 	and.w	r3, r3, #4
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d005      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e44:	4b43      	ldr	r3, [pc, #268]	@ (8003f54 <HAL_RCC_ClockConfig+0x264>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	4a42      	ldr	r2, [pc, #264]	@ (8003f54 <HAL_RCC_ClockConfig+0x264>)
 8003e4a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003e4e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0308 	and.w	r3, r3, #8
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d007      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003e5c:	4b3d      	ldr	r3, [pc, #244]	@ (8003f54 <HAL_RCC_ClockConfig+0x264>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003e64:	4a3b      	ldr	r2, [pc, #236]	@ (8003f54 <HAL_RCC_ClockConfig+0x264>)
 8003e66:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003e6a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e6c:	4b39      	ldr	r3, [pc, #228]	@ (8003f54 <HAL_RCC_ClockConfig+0x264>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	4936      	ldr	r1, [pc, #216]	@ (8003f54 <HAL_RCC_ClockConfig+0x264>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	608b      	str	r3, [r1, #8]
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	2b80      	cmp	r3, #128	@ 0x80
 8003e84:	d105      	bne.n	8003e92 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003e86:	4b33      	ldr	r3, [pc, #204]	@ (8003f54 <HAL_RCC_ClockConfig+0x264>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	4a32      	ldr	r2, [pc, #200]	@ (8003f54 <HAL_RCC_ClockConfig+0x264>)
 8003e8c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e90:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e92:	4b2f      	ldr	r3, [pc, #188]	@ (8003f50 <HAL_RCC_ClockConfig+0x260>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 030f 	and.w	r3, r3, #15
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d21d      	bcs.n	8003edc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea0:	4b2b      	ldr	r3, [pc, #172]	@ (8003f50 <HAL_RCC_ClockConfig+0x260>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f023 020f 	bic.w	r2, r3, #15
 8003ea8:	4929      	ldr	r1, [pc, #164]	@ (8003f50 <HAL_RCC_ClockConfig+0x260>)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003eb0:	f7fc ff28 	bl	8000d04 <HAL_GetTick>
 8003eb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eb6:	e00a      	b.n	8003ece <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eb8:	f7fc ff24 	bl	8000d04 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e03b      	b.n	8003f46 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ece:	4b20      	ldr	r3, [pc, #128]	@ (8003f50 <HAL_RCC_ClockConfig+0x260>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 030f 	and.w	r3, r3, #15
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d1ed      	bne.n	8003eb8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d008      	beq.n	8003efa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ee8:	4b1a      	ldr	r3, [pc, #104]	@ (8003f54 <HAL_RCC_ClockConfig+0x264>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	4917      	ldr	r1, [pc, #92]	@ (8003f54 <HAL_RCC_ClockConfig+0x264>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0308 	and.w	r3, r3, #8
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d009      	beq.n	8003f1a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f06:	4b13      	ldr	r3, [pc, #76]	@ (8003f54 <HAL_RCC_ClockConfig+0x264>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	490f      	ldr	r1, [pc, #60]	@ (8003f54 <HAL_RCC_ClockConfig+0x264>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f1a:	f000 f825 	bl	8003f68 <HAL_RCC_GetSysClockFreq>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	4b0c      	ldr	r3, [pc, #48]	@ (8003f54 <HAL_RCC_ClockConfig+0x264>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	091b      	lsrs	r3, r3, #4
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	490c      	ldr	r1, [pc, #48]	@ (8003f5c <HAL_RCC_ClockConfig+0x26c>)
 8003f2c:	5ccb      	ldrb	r3, [r1, r3]
 8003f2e:	f003 031f 	and.w	r3, r3, #31
 8003f32:	fa22 f303 	lsr.w	r3, r2, r3
 8003f36:	4a0a      	ldr	r2, [pc, #40]	@ (8003f60 <HAL_RCC_ClockConfig+0x270>)
 8003f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f64 <HAL_RCC_ClockConfig+0x274>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fc fe94 	bl	8000c6c <HAL_InitTick>
 8003f44:	4603      	mov	r3, r0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3718      	adds	r7, #24
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	40022000 	.word	0x40022000
 8003f54:	40021000 	.word	0x40021000
 8003f58:	04c4b400 	.word	0x04c4b400
 8003f5c:	08004508 	.word	0x08004508
 8003f60:	20000000 	.word	0x20000000
 8003f64:	20000004 	.word	0x20000004

08003f68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003f6e:	4b2c      	ldr	r3, [pc, #176]	@ (8004020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 030c 	and.w	r3, r3, #12
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d102      	bne.n	8003f80 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f7a:	4b2a      	ldr	r3, [pc, #168]	@ (8004024 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f7c:	613b      	str	r3, [r7, #16]
 8003f7e:	e047      	b.n	8004010 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003f80:	4b27      	ldr	r3, [pc, #156]	@ (8004020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f003 030c 	and.w	r3, r3, #12
 8003f88:	2b08      	cmp	r3, #8
 8003f8a:	d102      	bne.n	8003f92 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f8c:	4b26      	ldr	r3, [pc, #152]	@ (8004028 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f8e:	613b      	str	r3, [r7, #16]
 8003f90:	e03e      	b.n	8004010 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003f92:	4b23      	ldr	r3, [pc, #140]	@ (8004020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 030c 	and.w	r3, r3, #12
 8003f9a:	2b0c      	cmp	r3, #12
 8003f9c:	d136      	bne.n	800400c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f9e:	4b20      	ldr	r3, [pc, #128]	@ (8004020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	f003 0303 	and.w	r3, r3, #3
 8003fa6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003fa8:	4b1d      	ldr	r3, [pc, #116]	@ (8004020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	091b      	lsrs	r3, r3, #4
 8003fae:	f003 030f 	and.w	r3, r3, #15
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2b03      	cmp	r3, #3
 8003fba:	d10c      	bne.n	8003fd6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003fbc:	4a1a      	ldr	r2, [pc, #104]	@ (8004028 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc4:	4a16      	ldr	r2, [pc, #88]	@ (8004020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fc6:	68d2      	ldr	r2, [r2, #12]
 8003fc8:	0a12      	lsrs	r2, r2, #8
 8003fca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003fce:	fb02 f303 	mul.w	r3, r2, r3
 8003fd2:	617b      	str	r3, [r7, #20]
      break;
 8003fd4:	e00c      	b.n	8003ff0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003fd6:	4a13      	ldr	r2, [pc, #76]	@ (8004024 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fde:	4a10      	ldr	r2, [pc, #64]	@ (8004020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fe0:	68d2      	ldr	r2, [r2, #12]
 8003fe2:	0a12      	lsrs	r2, r2, #8
 8003fe4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003fe8:	fb02 f303 	mul.w	r3, r2, r3
 8003fec:	617b      	str	r3, [r7, #20]
      break;
 8003fee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8004020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	0e5b      	lsrs	r3, r3, #25
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	fbb2 f3f3 	udiv	r3, r2, r3
 8004008:	613b      	str	r3, [r7, #16]
 800400a:	e001      	b.n	8004010 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800400c:	2300      	movs	r3, #0
 800400e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004010:	693b      	ldr	r3, [r7, #16]
}
 8004012:	4618      	mov	r0, r3
 8004014:	371c      	adds	r7, #28
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	40021000 	.word	0x40021000
 8004024:	00f42400 	.word	0x00f42400
 8004028:	007a1200 	.word	0x007a1200

0800402c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800402c:	b480      	push	{r7}
 800402e:	b087      	sub	sp, #28
 8004030:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004032:	4b1e      	ldr	r3, [pc, #120]	@ (80040ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	f003 0303 	and.w	r3, r3, #3
 800403a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800403c:	4b1b      	ldr	r3, [pc, #108]	@ (80040ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	091b      	lsrs	r3, r3, #4
 8004042:	f003 030f 	and.w	r3, r3, #15
 8004046:	3301      	adds	r3, #1
 8004048:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	2b03      	cmp	r3, #3
 800404e:	d10c      	bne.n	800406a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004050:	4a17      	ldr	r2, [pc, #92]	@ (80040b0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	fbb2 f3f3 	udiv	r3, r2, r3
 8004058:	4a14      	ldr	r2, [pc, #80]	@ (80040ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800405a:	68d2      	ldr	r2, [r2, #12]
 800405c:	0a12      	lsrs	r2, r2, #8
 800405e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004062:	fb02 f303 	mul.w	r3, r2, r3
 8004066:	617b      	str	r3, [r7, #20]
    break;
 8004068:	e00c      	b.n	8004084 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800406a:	4a12      	ldr	r2, [pc, #72]	@ (80040b4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004072:	4a0e      	ldr	r2, [pc, #56]	@ (80040ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004074:	68d2      	ldr	r2, [r2, #12]
 8004076:	0a12      	lsrs	r2, r2, #8
 8004078:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800407c:	fb02 f303 	mul.w	r3, r2, r3
 8004080:	617b      	str	r3, [r7, #20]
    break;
 8004082:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004084:	4b09      	ldr	r3, [pc, #36]	@ (80040ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	0e5b      	lsrs	r3, r3, #25
 800408a:	f003 0303 	and.w	r3, r3, #3
 800408e:	3301      	adds	r3, #1
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	fbb2 f3f3 	udiv	r3, r2, r3
 800409c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800409e:	687b      	ldr	r3, [r7, #4]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	371c      	adds	r7, #28
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	40021000 	.word	0x40021000
 80040b0:	007a1200 	.word	0x007a1200
 80040b4:	00f42400 	.word	0x00f42400

080040b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040c0:	2300      	movs	r3, #0
 80040c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040c4:	2300      	movs	r3, #0
 80040c6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 8098 	beq.w	8004206 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040d6:	2300      	movs	r3, #0
 80040d8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040da:	4b43      	ldr	r3, [pc, #268]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10d      	bne.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040e6:	4b40      	ldr	r3, [pc, #256]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ea:	4a3f      	ldr	r2, [pc, #252]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80040f2:	4b3d      	ldr	r3, [pc, #244]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040fa:	60bb      	str	r3, [r7, #8]
 80040fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040fe:	2301      	movs	r3, #1
 8004100:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004102:	4b3a      	ldr	r3, [pc, #232]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a39      	ldr	r2, [pc, #228]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004108:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800410c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800410e:	f7fc fdf9 	bl	8000d04 <HAL_GetTick>
 8004112:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004114:	e009      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004116:	f7fc fdf5 	bl	8000d04 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d902      	bls.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	74fb      	strb	r3, [r7, #19]
        break;
 8004128:	e005      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800412a:	4b30      	ldr	r3, [pc, #192]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004132:	2b00      	cmp	r3, #0
 8004134:	d0ef      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004136:	7cfb      	ldrb	r3, [r7, #19]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d159      	bne.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800413c:	4b2a      	ldr	r3, [pc, #168]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800413e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004142:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004146:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d01e      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	429a      	cmp	r2, r3
 8004156:	d019      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004158:	4b23      	ldr	r3, [pc, #140]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800415a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800415e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004162:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004164:	4b20      	ldr	r3, [pc, #128]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800416a:	4a1f      	ldr	r2, [pc, #124]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800416c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004170:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004174:	4b1c      	ldr	r3, [pc, #112]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800417a:	4a1b      	ldr	r2, [pc, #108]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800417c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004180:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004184:	4a18      	ldr	r2, [pc, #96]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d016      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004196:	f7fc fdb5 	bl	8000d04 <HAL_GetTick>
 800419a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800419c:	e00b      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800419e:	f7fc fdb1 	bl	8000d04 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d902      	bls.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	74fb      	strb	r3, [r7, #19]
            break;
 80041b4:	e006      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041b6:	4b0c      	ldr	r3, [pc, #48]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d0ec      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80041c4:	7cfb      	ldrb	r3, [r7, #19]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10b      	bne.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041ca:	4b07      	ldr	r3, [pc, #28]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d8:	4903      	ldr	r1, [pc, #12]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80041e0:	e008      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041e2:	7cfb      	ldrb	r3, [r7, #19]
 80041e4:	74bb      	strb	r3, [r7, #18]
 80041e6:	e005      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80041e8:	40021000 	.word	0x40021000
 80041ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f0:	7cfb      	ldrb	r3, [r7, #19]
 80041f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041f4:	7c7b      	ldrb	r3, [r7, #17]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d105      	bne.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041fa:	4ba6      	ldr	r3, [pc, #664]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041fe:	4aa5      	ldr	r2, [pc, #660]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004200:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004204:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00a      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004212:	4ba0      	ldr	r3, [pc, #640]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004218:	f023 0203 	bic.w	r2, r3, #3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	499c      	ldr	r1, [pc, #624]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004222:	4313      	orrs	r3, r2
 8004224:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00a      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004234:	4b97      	ldr	r3, [pc, #604]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800423a:	f023 020c 	bic.w	r2, r3, #12
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	4994      	ldr	r1, [pc, #592]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004244:	4313      	orrs	r3, r2
 8004246:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0304 	and.w	r3, r3, #4
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00a      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004256:	4b8f      	ldr	r3, [pc, #572]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800425c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	498b      	ldr	r1, [pc, #556]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004266:	4313      	orrs	r3, r2
 8004268:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0308 	and.w	r3, r3, #8
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00a      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004278:	4b86      	ldr	r3, [pc, #536]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800427a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800427e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	4983      	ldr	r1, [pc, #524]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004288:	4313      	orrs	r3, r2
 800428a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0320 	and.w	r3, r3, #32
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00a      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800429a:	4b7e      	ldr	r3, [pc, #504]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800429c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	497a      	ldr	r1, [pc, #488]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00a      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042bc:	4b75      	ldr	r3, [pc, #468]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042c2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	4972      	ldr	r1, [pc, #456]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00a      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042de:	4b6d      	ldr	r3, [pc, #436]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042e4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	69db      	ldr	r3, [r3, #28]
 80042ec:	4969      	ldr	r1, [pc, #420]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00a      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004300:	4b64      	ldr	r3, [pc, #400]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004302:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004306:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	4961      	ldr	r1, [pc, #388]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004310:	4313      	orrs	r3, r2
 8004312:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00a      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004322:	4b5c      	ldr	r3, [pc, #368]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004328:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004330:	4958      	ldr	r1, [pc, #352]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004332:	4313      	orrs	r3, r2
 8004334:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004340:	2b00      	cmp	r3, #0
 8004342:	d015      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004344:	4b53      	ldr	r3, [pc, #332]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800434a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004352:	4950      	ldr	r1, [pc, #320]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004354:	4313      	orrs	r3, r2
 8004356:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800435e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004362:	d105      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004364:	4b4b      	ldr	r3, [pc, #300]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	4a4a      	ldr	r2, [pc, #296]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800436a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800436e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004378:	2b00      	cmp	r3, #0
 800437a:	d015      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800437c:	4b45      	ldr	r3, [pc, #276]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800437e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004382:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800438a:	4942      	ldr	r1, [pc, #264]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800438c:	4313      	orrs	r3, r2
 800438e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004396:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800439a:	d105      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800439c:	4b3d      	ldr	r3, [pc, #244]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	4a3c      	ldr	r2, [pc, #240]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043a6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d015      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80043b4:	4b37      	ldr	r3, [pc, #220]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c2:	4934      	ldr	r1, [pc, #208]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043d2:	d105      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043d4:	4b2f      	ldr	r3, [pc, #188]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	4a2e      	ldr	r2, [pc, #184]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043de:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d015      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043ec:	4b29      	ldr	r3, [pc, #164]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043fa:	4926      	ldr	r1, [pc, #152]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004406:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800440a:	d105      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800440c:	4b21      	ldr	r3, [pc, #132]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	4a20      	ldr	r2, [pc, #128]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004412:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004416:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d015      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004424:	4b1b      	ldr	r3, [pc, #108]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800442a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004432:	4918      	ldr	r1, [pc, #96]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004434:	4313      	orrs	r3, r2
 8004436:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800443e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004442:	d105      	bne.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004444:	4b13      	ldr	r3, [pc, #76]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	4a12      	ldr	r2, [pc, #72]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800444a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800444e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d015      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800445c:	4b0d      	ldr	r3, [pc, #52]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800445e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004462:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800446a:	490a      	ldr	r1, [pc, #40]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800446c:	4313      	orrs	r3, r2
 800446e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004476:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800447a:	d105      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800447c:	4b05      	ldr	r3, [pc, #20]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	4a04      	ldr	r2, [pc, #16]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004482:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004486:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004488:	7cbb      	ldrb	r3, [r7, #18]
}
 800448a:	4618      	mov	r0, r3
 800448c:	3718      	adds	r7, #24
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	40021000 	.word	0x40021000

08004498 <memset>:
 8004498:	4402      	add	r2, r0
 800449a:	4603      	mov	r3, r0
 800449c:	4293      	cmp	r3, r2
 800449e:	d100      	bne.n	80044a2 <memset+0xa>
 80044a0:	4770      	bx	lr
 80044a2:	f803 1b01 	strb.w	r1, [r3], #1
 80044a6:	e7f9      	b.n	800449c <memset+0x4>

080044a8 <__libc_init_array>:
 80044a8:	b570      	push	{r4, r5, r6, lr}
 80044aa:	4d0d      	ldr	r5, [pc, #52]	@ (80044e0 <__libc_init_array+0x38>)
 80044ac:	4c0d      	ldr	r4, [pc, #52]	@ (80044e4 <__libc_init_array+0x3c>)
 80044ae:	1b64      	subs	r4, r4, r5
 80044b0:	10a4      	asrs	r4, r4, #2
 80044b2:	2600      	movs	r6, #0
 80044b4:	42a6      	cmp	r6, r4
 80044b6:	d109      	bne.n	80044cc <__libc_init_array+0x24>
 80044b8:	4d0b      	ldr	r5, [pc, #44]	@ (80044e8 <__libc_init_array+0x40>)
 80044ba:	4c0c      	ldr	r4, [pc, #48]	@ (80044ec <__libc_init_array+0x44>)
 80044bc:	f000 f818 	bl	80044f0 <_init>
 80044c0:	1b64      	subs	r4, r4, r5
 80044c2:	10a4      	asrs	r4, r4, #2
 80044c4:	2600      	movs	r6, #0
 80044c6:	42a6      	cmp	r6, r4
 80044c8:	d105      	bne.n	80044d6 <__libc_init_array+0x2e>
 80044ca:	bd70      	pop	{r4, r5, r6, pc}
 80044cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80044d0:	4798      	blx	r3
 80044d2:	3601      	adds	r6, #1
 80044d4:	e7ee      	b.n	80044b4 <__libc_init_array+0xc>
 80044d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80044da:	4798      	blx	r3
 80044dc:	3601      	adds	r6, #1
 80044de:	e7f2      	b.n	80044c6 <__libc_init_array+0x1e>
 80044e0:	08004518 	.word	0x08004518
 80044e4:	08004518 	.word	0x08004518
 80044e8:	08004518 	.word	0x08004518
 80044ec:	0800451c 	.word	0x0800451c

080044f0 <_init>:
 80044f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044f2:	bf00      	nop
 80044f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044f6:	bc08      	pop	{r3}
 80044f8:	469e      	mov	lr, r3
 80044fa:	4770      	bx	lr

080044fc <_fini>:
 80044fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044fe:	bf00      	nop
 8004500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004502:	bc08      	pop	{r3}
 8004504:	469e      	mov	lr, r3
 8004506:	4770      	bx	lr
